
NODE2atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fa  00800200  00000f32  00000fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008002fa  008002fa  000010c0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000111c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c90  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012d8  00000000  00000000  00002f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b52  00000000  00000000  000041ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00004d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000791  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000074a  00000000  00000000  000057a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005ef3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	9d c1       	rjmp	.+826    	; 0x348 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e3       	ldi	r30, 0x32	; 50
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 3f       	cpi	r26, 0xFA	; 250
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	aa ef       	ldi	r26, 0xFA	; 250
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 30       	cpi	r26, 0x08	; 8
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	3e d1       	rcall	.+636    	; 0x39c <main>
 120:	06 c7       	rjmp	.+3596   	; 0xf2e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:

volatile uint8_t rx_flag = 0;

int CAN_init(void) {
	//Enter config mode
	MCP_init();
 124:	ee d1       	rcall	.+988    	; 0x502 <MCP_init>
	
	//RX0 - Turn masks/filters off, rollover disabled?
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, 0b01101000);
 126:	48 e6       	ldi	r20, 0x68	; 104
 128:	60 e6       	ldi	r22, 0x60	; 96
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	22 d2       	rcall	.+1092   	; 0x572 <MCP_bit_modify>
	//Enable interrupt when message is received (RX0IE = 1)
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0x01);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	63 e0       	ldi	r22, 0x03	; 3
 132:	8b e2       	ldi	r24, 0x2B	; 43
 134:	1e d2       	rcall	.+1084   	; 0x572 <MCP_bit_modify>
	
	//Enable normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	60 ee       	ldi	r22, 0xE0	; 224
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	1a d2       	rcall	.+1076   	; 0x572 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
 13e:	8e e0       	ldi	r24, 0x0E	; 14
 140:	ce d1       	rcall	.+924    	; 0x4de <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
 142:	80 7e       	andi	r24, 0xE0	; 224
 144:	51 f0       	breq	.+20     	; 0x15a <CAN_init+0x36>
		printf("ERROR..ERROR...LOOPBACK NOT WORKING");
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	9f 93       	push	r25
 14c:	8f 93       	push	r24
 14e:	c4 d2       	rcall	.+1416   	; 0x6d8 <printf>
		return 1;
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	08 95       	ret
	}
	
	

	return 0;
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
}
 15e:	08 95       	ret

00000160 <CAN_error>:
	
	return 0;
}

int CAN_error(void) {
	uint8_t error = MCP_read(MCP_TXB0CTRL);
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	bd d1       	rcall	.+890    	; 0x4de <MCP_read>
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
 164:	84 fd       	sbrc	r24, 4
 166:	05 c0       	rjmp	.+10     	; 0x172 <CAN_error+0x12>
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
 168:	85 fd       	sbrc	r24, 5
 16a:	06 c0       	rjmp	.+12     	; 0x178 <CAN_error+0x18>
	
	return 0;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	08 95       	ret

int CAN_error(void) {
	uint8_t error = MCP_read(MCP_TXB0CTRL);
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	9f ef       	ldi	r25, 0xFF	; 255
 176:	08 95       	ret
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
 178:	8e ef       	ldi	r24, 0xFE	; 254
 17a:	9f ef       	ldi	r25, 0xFF	; 255
	
	return 0;
}
 17c:	08 95       	ret

0000017e <CAN_transmit_complete>:


int CAN_transmit_complete(void) {
	//Check if TX buffer is not pending transmission (TXREQ = 0)
	if (test_bit(MCP_read(MCP_TXB0CTRL), 3)) {
 17e:	80 e3       	ldi	r24, 0x30	; 48
 180:	ae d1       	rcall	.+860    	; 0x4de <MCP_read>
 182:	86 95       	lsr	r24
 184:	86 95       	lsr	r24
 186:	86 95       	lsr	r24
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	89 27       	eor	r24, r25
		return 0;
		} else {
		return 1;
	}
}
 18c:	81 70       	andi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	08 95       	ret

00000192 <CAN_message_send>:
	

	return 0;
}

int CAN_message_send(can_msg* message) {
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	8c 01       	movw	r16, r24
	uint8_t i;
	
	//Check if there is no pending transmission
	if (CAN_transmit_complete()) {
 19a:	f1 df       	rcall	.-30     	; 0x17e <CAN_transmit_complete>
 19c:	89 2b       	or	r24, r25
 19e:	09 f4       	brne	.+2      	; 0x1a2 <CAN_message_send+0x10>
 1a0:	38 c0       	rjmp	.+112    	; 0x212 <CAN_message_send+0x80>
		
		//Set the message id (use standard identifier)
		MCP_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
 1a2:	f8 01       	movw	r30, r16
 1a4:	60 81       	ld	r22, Z
 1a6:	71 81       	ldd	r23, Z+1	; 0x01
 1a8:	76 95       	lsr	r23
 1aa:	67 95       	ror	r22
 1ac:	76 95       	lsr	r23
 1ae:	67 95       	ror	r22
 1b0:	76 95       	lsr	r23
 1b2:	67 95       	ror	r22
 1b4:	81 e3       	ldi	r24, 0x31	; 49
 1b6:	be d1       	rcall	.+892    	; 0x534 <MCP_write>
		MCP_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
 1b8:	f8 01       	movw	r30, r16
 1ba:	60 81       	ld	r22, Z
 1bc:	71 81       	ldd	r23, Z+1	; 0x01
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	62 95       	swap	r22
 1c4:	72 95       	swap	r23
 1c6:	70 7f       	andi	r23, 0xF0	; 240
 1c8:	76 27       	eor	r23, r22
 1ca:	60 7f       	andi	r22, 0xF0	; 240
 1cc:	76 27       	eor	r23, r22
 1ce:	82 e3       	ldi	r24, 0x32	; 50
 1d0:	b1 d1       	rcall	.+866    	; 0x534 <MCP_write>
		MCP_write(MCP_TXB0EID8, 0);
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	83 e4       	ldi	r24, 0x43	; 67
 1d6:	ae d1       	rcall	.+860    	; 0x534 <MCP_write>
		MCP_write(MCP_TXB0EID0, 0);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	84 e4       	ldi	r24, 0x44	; 68
 1dc:	ab d1       	rcall	.+854    	; 0x534 <MCP_write>
		
		//Set data length and use data frame (RTR = 0)
		MCP_write(MCP_TXB0DLC, message->length);
 1de:	f8 01       	movw	r30, r16
 1e0:	62 81       	ldd	r22, Z+2	; 0x02
 1e2:	85 e3       	ldi	r24, 0x35	; 53
 1e4:	a7 d1       	rcall	.+846    	; 0x534 <MCP_write>

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
 1e6:	f8 01       	movw	r30, r16
 1e8:	82 81       	ldd	r24, Z+2	; 0x02
 1ea:	88 23       	and	r24, r24
 1ec:	69 f0       	breq	.+26     	; 0x208 <CAN_message_send+0x76>
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
			MCP_write(MCP_TXB0D0 + i, message->data[i]);
 1f0:	f8 01       	movw	r30, r16
 1f2:	ec 0f       	add	r30, r28
 1f4:	f1 1d       	adc	r31, r1
 1f6:	63 81       	ldd	r22, Z+3	; 0x03
 1f8:	86 e3       	ldi	r24, 0x36	; 54
 1fa:	8c 0f       	add	r24, r28
 1fc:	9b d1       	rcall	.+822    	; 0x534 <MCP_write>
		
		//Set data length and use data frame (RTR = 0)
		MCP_write(MCP_TXB0DLC, message->length);

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
 1fe:	cf 5f       	subi	r28, 0xFF	; 255
 200:	f8 01       	movw	r30, r16
 202:	82 81       	ldd	r24, Z+2	; 0x02
 204:	c8 17       	cp	r28, r24
 206:	a0 f3       	brcs	.-24     	; 0x1f0 <CAN_message_send+0x5e>
			MCP_write(MCP_TXB0D0 + i, message->data[i]);
		}
		
		//Request to send via TX0
		MCP_request_to_send(MCP_RTS_TX0);
 208:	81 e8       	ldi	r24, 0x81	; 129
 20a:	a7 d1       	rcall	.+846    	; 0x55a <MCP_request_to_send>
		if (CAN_error() < 0) {
			return -1;
		}
	}
	
	return 0;
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	06 c0       	rjmp	.+12     	; 0x21e <CAN_message_send+0x8c>
		
		//Request to send via TX0
		MCP_request_to_send(MCP_RTS_TX0);
		
		} else {
		if (CAN_error() < 0) {
 212:	a6 df       	rcall	.-180    	; 0x160 <CAN_error>
 214:	99 0f       	add	r25, r25
 216:	99 0b       	sbc	r25, r25
 218:	89 2f       	mov	r24, r25
 21a:	99 0f       	add	r25, r25
 21c:	99 0b       	sbc	r25, r25
			return -1;
		}
	}
	
	return 0;
}
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <CAN_int_vect>:
	}
}

 int CAN_int_vect(void) {
 	//Clear interrupt flag
  	MCP_bit_modify(MCP_CANINTF, MCP_RXF0SIDL, MCP_RXF0SIDH);
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	8c e2       	ldi	r24, 0x2C	; 44
 22c:	a2 d1       	rcall	.+836    	; 0x572 <MCP_bit_modify>
  	rx_flag = 1;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 fa 02 	sts	0x02FA, r24	; 0x8002fa <__data_end>
 	return 0;
 }
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	08 95       	ret

0000023a <CAN_data_receive>:



can_msg CAN_data_receive(void) {
 23a:	9f 92       	push	r9
 23c:	af 92       	push	r10
 23e:	bf 92       	push	r11
 240:	cf 92       	push	r12
 242:	df 92       	push	r13
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	2b 97       	sbiw	r28, 0x0b	; 11
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	de bf       	out	0x3e, r29	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	cd bf       	out	0x3d, r28	; 61
 260:	6c 01       	movw	r12, r24
	printf("asdfassdf\n\r");
 262:	2a e2       	ldi	r18, 0x2A	; 42
 264:	32 e0       	ldi	r19, 0x02	; 2
 266:	3f 93       	push	r19
 268:	2f 93       	push	r18
 26a:	36 d2       	rcall	.+1132   	; 0x6d8 <printf>
	uint8_t i=0;
	can_msg message;
	
	//Check if RX buffer has a message
	printf("RX: %d\n\r", rx_flag);
 26c:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <__data_end>
 270:	1f 92       	push	r1
 272:	9f 93       	push	r25
 274:	26 e3       	ldi	r18, 0x36	; 54
 276:	32 e0       	ldi	r19, 0x02	; 2
 278:	3f 93       	push	r19
 27a:	2f 93       	push	r18
 27c:	2d d2       	rcall	.+1114   	; 0x6d8 <printf>
	if (rx_flag == 1 ) {
 27e:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <__data_end>
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	91 30       	cpi	r25, 0x01	; 1
 290:	09 f0       	breq	.+2      	; 0x294 <CAN_data_receive+0x5a>
 292:	3c c0       	rjmp	.+120    	; 0x30c <CAN_data_receive+0xd2>
		printf("LESER\n\r");
 294:	8f e3       	ldi	r24, 0x3F	; 63
 296:	92 e0       	ldi	r25, 0x02	; 2
 298:	9f 93       	push	r25
 29a:	8f 93       	push	r24
 29c:	1d d2       	rcall	.+1082   	; 0x6d8 <printf>
		//Get message id
		message.id  = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
 29e:	81 e6       	ldi	r24, 0x61	; 97
 2a0:	1e d1       	rcall	.+572    	; 0x4de <MCP_read>
 2a2:	a8 2e       	mov	r10, r24
 2a4:	82 e6       	ldi	r24, 0x62	; 98
 2a6:	1b d1       	rcall	.+566    	; 0x4de <MCP_read>
 2a8:	82 95       	swap	r24
 2aa:	86 95       	lsr	r24
 2ac:	87 70       	andi	r24, 0x07	; 7
 2ae:	b1 2c       	mov	r11, r1
 2b0:	aa 0c       	add	r10, r10
 2b2:	bb 1c       	adc	r11, r11
 2b4:	aa 0c       	add	r10, r10
 2b6:	bb 1c       	adc	r11, r11
 2b8:	aa 0c       	add	r10, r10
 2ba:	bb 1c       	adc	r11, r11
 2bc:	a8 2a       	or	r10, r24
		
		//Get message length
		//message.length = (MCP_CANCTRL) & (MCP_read(MCP_RXB0DLC));
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
 2be:	85 e6       	ldi	r24, 0x65	; 101
 2c0:	0e d1       	rcall	.+540    	; 0x4de <MCP_read>
 2c2:	08 2f       	mov	r16, r24
 2c4:	0f 70       	andi	r16, 0x0F	; 15
		printf("len %d\n\r", message.length);
 2c6:	1f 92       	push	r1
 2c8:	0f 93       	push	r16
 2ca:	87 e4       	ldi	r24, 0x47	; 71
 2cc:	92 e0       	ldi	r25, 0x02	; 2
 2ce:	9f 93       	push	r25
 2d0:	8f 93       	push	r24
 2d2:	02 d2       	rcall	.+1028   	; 0x6d8 <printf>
		
		//Get message data
		for(i = 0; i < message.length; i++) {
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	00 23       	and	r16, r16
 2e2:	91 f0       	breq	.+36     	; 0x308 <CAN_data_receive+0xce>
 2e4:	7e 01       	movw	r14, r28
 2e6:	84 e0       	ldi	r24, 0x04	; 4
 2e8:	e8 0e       	add	r14, r24
 2ea:	f1 1c       	adc	r15, r1
 2ec:	0f 2e       	mov	r0, r31
 2ee:	f6 e6       	ldi	r31, 0x66	; 102
 2f0:	9f 2e       	mov	r9, r31
 2f2:	f0 2d       	mov	r31, r0
 2f4:	90 0e       	add	r9, r16
 2f6:	16 e6       	ldi	r17, 0x66	; 102
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
 2f8:	81 2f       	mov	r24, r17
 2fa:	f1 d0       	rcall	.+482    	; 0x4de <MCP_read>
 2fc:	f7 01       	movw	r30, r14
 2fe:	81 93       	st	Z+, r24
 300:	7f 01       	movw	r14, r30
 302:	1f 5f       	subi	r17, 0xFF	; 255
		//message.length = (MCP_CANCTRL) & (MCP_read(MCP_RXB0DLC));
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
		printf("len %d\n\r", message.length);
		
		//Get message data
		for(i = 0; i < message.length; i++) {
 304:	19 11       	cpse	r17, r9
 306:	f8 cf       	rjmp	.-16     	; 0x2f8 <CAN_data_receive+0xbe>
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
		}

		
		//Clear interrupt flag
		rx_flag = 0;
 308:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <__data_end>
		//} else {
		//Message not received
		//message.id = -1;
	//}
	
	return message;
 30c:	ba 82       	std	Y+2, r11	; 0x02
 30e:	a9 82       	std	Y+1, r10	; 0x01
 310:	0b 83       	std	Y+3, r16	; 0x03
 312:	8b e0       	ldi	r24, 0x0B	; 11
 314:	fe 01       	movw	r30, r28
 316:	31 96       	adiw	r30, 0x01	; 1
 318:	d6 01       	movw	r26, r12
 31a:	01 90       	ld	r0, Z+
 31c:	0d 92       	st	X+, r0
 31e:	8a 95       	dec	r24
 320:	e1 f7       	brne	.-8      	; 0x31a <CAN_data_receive+0xe0>
}
 322:	c6 01       	movw	r24, r12
 324:	2b 96       	adiw	r28, 0x0b	; 11
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	df 90       	pop	r13
 33e:	cf 90       	pop	r12
 340:	bf 90       	pop	r11
 342:	af 90       	pop	r10
 344:	9f 90       	pop	r9
 346:	08 95       	ret

00000348 <__vector_3>:

//Interrupt service routine for CAN bus
ISR(INT2_vect) {
 348:	1f 92       	push	r1
 34a:	0f 92       	push	r0
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	0f 92       	push	r0
 350:	11 24       	eor	r1, r1
 352:	0b b6       	in	r0, 0x3b	; 59
 354:	0f 92       	push	r0
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
//	_delay_ms(10);
	CAN_int_vect();
 36e:	5b df       	rcall	.-330    	; 0x226 <CAN_int_vect>
   printf("INTERRUPT\r\n");
 370:	80 e5       	ldi	r24, 0x50	; 80
 372:	92 e0       	ldi	r25, 0x02	; 2
 374:	c4 d1       	rcall	.+904    	; 0x6fe <puts>
// 	else if (interrupt & MCP_RX1IF){
// 		rx_flag = 1;
// 		// clear CANINTF.RX1IF
// 		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
// 	}
}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	bf 91       	pop	r27
 37c:	af 91       	pop	r26
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	7f 91       	pop	r23
 384:	6f 91       	pop	r22
 386:	5f 91       	pop	r21
 388:	4f 91       	pop	r20
 38a:	3f 91       	pop	r19
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0b be       	out	0x3b, r0	; 59
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <main>:
	
	uint8_t x, y;
	uint8_t i=0;
	

    int main(void){
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	a1 97       	sbiw	r28, 0x21	; 33
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
		
		cli();
 3b0:	f8 94       	cli
		
		
		
		EICRA |= (0 << ISC21) | (0 << ISC20);
 3b2:	e9 e6       	ldi	r30, 0x69	; 105
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	80 83       	st	Z, r24
		// Enable external interrupts of INT2
		EIMSK |= (1 << INT2);
 3ba:	ea 9a       	sbi	0x1d, 2	; 29
		
		DDRD &= ~(1 << PIND2);		//Set D2(INT2) as input
 3bc:	52 98       	cbi	0x0a, 2	; 10
		//int variabel = 1;
		
		can_msg can_msg_send;
		volatile can_msg can_msg_receive;
		
		UART_Init(UBRREG);
 3be:	87 e6       	ldi	r24, 0x67	; 103
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	2d d1       	rcall	.+602    	; 0x61e <UART_Init>
 		SPI_init();
 3c4:	ee d0       	rcall	.+476    	; 0x5a2 <SPI_init>
 		MCP_init();
 3c6:	9d d0       	rcall	.+314    	; 0x502 <MCP_init>

		if (CAN_init() == 0) {
 3c8:	ad de       	rcall	.-678    	; 0x124 <CAN_init>
 3ca:	89 2b       	or	r24, r25
 3cc:	71 f4       	brne	.+28     	; 0x3ea <main+0x4e>
			printf("CAN BE WORKING\n\r");
 3ce:	8b e5       	ldi	r24, 0x5B	; 91
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	9f 93       	push	r25
 3d4:	8f 93       	push	r24
 3d6:	80 d1       	rcall	.+768    	; 0x6d8 <printf>
			can_msg_send.id = 1;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	9a 83       	std	Y+2, r25	; 0x02
 3de:	89 83       	std	Y+1, r24	; 0x01
			can_msg_send.length = 8;
 3e0:	88 e0       	ldi	r24, 0x08	; 8
 3e2:	8b 83       	std	Y+3, r24	; 0x03
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <main+0x5c>
			} else {
			printf("CAN NOT BE WORKING \n\r");
 3ea:	8c e6       	ldi	r24, 0x6C	; 108
 3ec:	92 e0       	ldi	r25, 0x02	; 2
 3ee:	9f 93       	push	r25
 3f0:	8f 93       	push	r24
 3f2:	72 d1       	rcall	.+740    	; 0x6d8 <printf>
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
		}

		sei();
 3f8:	78 94       	sei

	while(1){

			printf("loopyloop \n\r");
 3fa:	0f 2e       	mov	r0, r31
 3fc:	f2 e8       	ldi	r31, 0x82	; 130
 3fe:	cf 2e       	mov	r12, r31
 400:	f2 e0       	ldi	r31, 0x02	; 2
 402:	df 2e       	mov	r13, r31
 404:	f0 2d       	mov	r31, r0
 			can_msg_send.data[0] = 0x10;
 406:	68 94       	set
 408:	aa 24       	eor	r10, r10
 40a:	a4 f8       	bld	r10, 4
			can_msg_receive = CAN_data_receive();
			x=can_msg_receive.data[0];
			y=can_msg_receive.data[1];
	
			
			can_msg_receive = CAN_data_receive();
 40c:	0f 2e       	mov	r0, r31
 40e:	fb e0       	ldi	r31, 0x0B	; 11
 410:	bf 2e       	mov	r11, r31
 412:	f0 2d       	mov	r31, r0
			x=can_msg_receive.data[0];
			y=can_msg_receive.data[1];
			printf("y1 er %02x \n\r",x);
 414:	0f 2e       	mov	r0, r31
 416:	ff e8       	ldi	r31, 0x8F	; 143
 418:	ef 2e       	mov	r14, r31
 41a:	f2 e0       	ldi	r31, 0x02	; 2
 41c:	ff 2e       	mov	r15, r31
 41e:	f0 2d       	mov	r31, r0
			printf("y2 er %02x \n\r",y);
 420:	0d e9       	ldi	r16, 0x9D	; 157
 422:	12 e0       	ldi	r17, 0x02	; 2

		sei();

	while(1){

			printf("loopyloop \n\r");
 424:	df 92       	push	r13
 426:	cf 92       	push	r12
 428:	57 d1       	rcall	.+686    	; 0x6d8 <printf>
 			can_msg_send.data[0] = 0x10;
 42a:	ac 82       	std	Y+4, r10	; 0x04
			i=i+1;
 42c:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <i>
 430:	8f 5f       	subi	r24, 0xFF	; 255
 432:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <i>
			if (i>0xFF)
			{
				i=0;
			}
			can_msg_send.data[1] = i;
 436:	8d 83       	std	Y+5, r24	; 0x05
			
			CAN_message_send(&can_msg_send);
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	aa de       	rcall	.-684    	; 0x192 <CAN_message_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	81 ee       	ldi	r24, 0xE1	; 225
 442:	94 e0       	ldi	r25, 0x04	; 4
 444:	21 50       	subi	r18, 0x01	; 1
 446:	80 40       	sbci	r24, 0x00	; 0
 448:	90 40       	sbci	r25, 0x00	; 0
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
			_delay_ms(100);
			can_msg_receive = CAN_data_receive();
 454:	ce 01       	movw	r24, r28
 456:	0c 96       	adiw	r24, 0x0c	; 12
 458:	f0 de       	rcall	.-544    	; 0x23a <CAN_data_receive>
			x=can_msg_receive.data[0];
 45a:	8f 85       	ldd	r24, Y+15	; 0x0f
 45c:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <x>
			y=can_msg_receive.data[1];
 460:	88 89       	ldd	r24, Y+16	; 0x10
 462:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <y>
	
			
			can_msg_receive = CAN_data_receive();
 466:	ce 01       	movw	r24, r28
 468:	47 96       	adiw	r24, 0x17	; 23
 46a:	e7 de       	rcall	.-562    	; 0x23a <CAN_data_receive>
 46c:	fe 01       	movw	r30, r28
 46e:	77 96       	adiw	r30, 0x17	; 23
 470:	de 01       	movw	r26, r28
 472:	1c 96       	adiw	r26, 0x0c	; 12
 474:	8b 2d       	mov	r24, r11
 476:	01 90       	ld	r0, Z+
 478:	0d 92       	st	X+, r0
 47a:	8a 95       	dec	r24
 47c:	e1 f7       	brne	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
			x=can_msg_receive.data[0];
 47e:	8f 85       	ldd	r24, Y+15	; 0x0f
 480:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <x>
			y=can_msg_receive.data[1];
 484:	98 89       	ldd	r25, Y+16	; 0x10
 486:	90 93 fd 02 	sts	0x02FD, r25	; 0x8002fd <y>
			printf("y1 er %02x \n\r",x);
 48a:	1f 92       	push	r1
 48c:	8f 93       	push	r24
 48e:	ff 92       	push	r15
 490:	ef 92       	push	r14
 492:	22 d1       	rcall	.+580    	; 0x6d8 <printf>
			printf("y2 er %02x \n\r",y);
 494:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <y>
 498:	1f 92       	push	r1
 49a:	8f 93       	push	r24
 49c:	1f 93       	push	r17
 49e:	0f 93       	push	r16
 4a0:	1b d1       	rcall	.+566    	; 0x6d8 <printf>
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	8a ed       	ldi	r24, 0xDA	; 218
 4a6:	9a e1       	ldi	r25, 0x1A	; 26
 4a8:	21 50       	subi	r18, 0x01	; 1
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	90 40       	sbci	r25, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b2:	00 00       	nop
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	b2 cf       	rjmp	.-156    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

000004c0 <MCP_reset>:
	SPI_send(MCP_READ_STATUS);
	uint8_t status = SPI_send(0);
	SPI_set_ss(1);
	
	return status;
}
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	90 d0       	rcall	.+288    	; 0x5e6 <SPI_set_ss>
 4c6:	80 ec       	ldi	r24, 0xC0	; 192
 4c8:	88 d0       	rcall	.+272    	; 0x5da <SPI_send>
 4ca:	8f e1       	ldi	r24, 0x1F	; 31
 4cc:	93 e0       	ldi	r25, 0x03	; 3
 4ce:	01 97       	sbiw	r24, 0x01	; 1
 4d0:	f1 f7       	brne	.-4      	; 0x4ce <MCP_reset+0xe>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <MCP_reset+0x14>
 4d4:	00 00       	nop
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	85 c0       	rjmp	.+266    	; 0x5e6 <SPI_set_ss>
 4dc:	08 95       	ret

000004de <MCP_read>:
 4de:	cf 93       	push	r28
 4e0:	c8 2f       	mov	r28, r24
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	7f d0       	rcall	.+254    	; 0x5e6 <SPI_set_ss>
 4e8:	83 e0       	ldi	r24, 0x03	; 3
 4ea:	77 d0       	rcall	.+238    	; 0x5da <SPI_send>
 4ec:	8c 2f       	mov	r24, r28
 4ee:	75 d0       	rcall	.+234    	; 0x5da <SPI_send>
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	73 d0       	rcall	.+230    	; 0x5da <SPI_send>
 4f4:	c8 2f       	mov	r28, r24
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	75 d0       	rcall	.+234    	; 0x5e6 <SPI_set_ss>
 4fc:	8c 2f       	mov	r24, r28
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <MCP_init>:
 502:	4f d0       	rcall	.+158    	; 0x5a2 <SPI_init>
 504:	dd df       	rcall	.-70     	; 0x4c0 <MCP_reset>
 506:	8b ea       	ldi	r24, 0xAB	; 171
 508:	92 e0       	ldi	r25, 0x02	; 2
 50a:	9f 93       	push	r25
 50c:	8f 93       	push	r24
 50e:	e4 d0       	rcall	.+456    	; 0x6d8 <printf>
 510:	8e e0       	ldi	r24, 0x0E	; 14
 512:	e5 df       	rcall	.-54     	; 0x4de <MCP_read>
 514:	80 7e       	andi	r24, 0xE0	; 224
 516:	0f 90       	pop	r0
 518:	0f 90       	pop	r0
 51a:	80 38       	cpi	r24, 0x80	; 128
 51c:	49 f0       	breq	.+18     	; 0x530 <MCP_init+0x2e>
 51e:	85 eb       	ldi	r24, 0xB5	; 181
 520:	92 e0       	ldi	r25, 0x02	; 2
 522:	9f 93       	push	r25
 524:	8f 93       	push	r24
 526:	d8 d0       	rcall	.+432    	; 0x6d8 <printf>
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	08 95       	ret
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	08 95       	ret

00000534 <MCP_write>:
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	d8 2f       	mov	r29, r24
 53a:	c6 2f       	mov	r28, r22
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	52 d0       	rcall	.+164    	; 0x5e6 <SPI_set_ss>
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	4a d0       	rcall	.+148    	; 0x5da <SPI_send>
 546:	8d 2f       	mov	r24, r29
 548:	48 d0       	rcall	.+144    	; 0x5da <SPI_send>
 54a:	8c 2f       	mov	r24, r28
 54c:	46 d0       	rcall	.+140    	; 0x5da <SPI_send>
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	49 d0       	rcall	.+146    	; 0x5e6 <SPI_set_ss>
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <MCP_request_to_send>:
 55a:	cf 93       	push	r28
 55c:	c8 2f       	mov	r28, r24
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	41 d0       	rcall	.+130    	; 0x5e6 <SPI_set_ss>
 564:	8c 2f       	mov	r24, r28
 566:	39 d0       	rcall	.+114    	; 0x5da <SPI_send>
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	3c d0       	rcall	.+120    	; 0x5e6 <SPI_set_ss>
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <MCP_bit_modify>:

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	18 2f       	mov	r17, r24
 57a:	d6 2f       	mov	r29, r22
 57c:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	31 d0       	rcall	.+98     	; 0x5e6 <SPI_set_ss>
	SPI_send(MCP_BITMOD);
 584:	85 e0       	ldi	r24, 0x05	; 5
 586:	29 d0       	rcall	.+82     	; 0x5da <SPI_send>
	
	SPI_send(address);
 588:	81 2f       	mov	r24, r17
 58a:	27 d0       	rcall	.+78     	; 0x5da <SPI_send>
	SPI_send(mask);
 58c:	8d 2f       	mov	r24, r29
 58e:	25 d0       	rcall	.+74     	; 0x5da <SPI_send>
	SPI_send(data);
 590:	8c 2f       	mov	r24, r28
 592:	23 d0       	rcall	.+70     	; 0x5da <SPI_send>
	
	SPI_set_ss(1);
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	26 d0       	rcall	.+76     	; 0x5e6 <SPI_set_ss>
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	08 95       	ret

000005a2 <SPI_init>:
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
	
	return SPDR;
}
 5a2:	87 ed       	ldi	r24, 0xD7	; 215
 5a4:	92 e0       	ldi	r25, 0x02	; 2
 5a6:	9f 93       	push	r25
 5a8:	8f 93       	push	r24
 5aa:	96 d0       	rcall	.+300    	; 0x6d8 <printf>
 5ac:	84 b1       	in	r24, 0x04	; 4
 5ae:	87 68       	ori	r24, 0x87	; 135
 5b0:	84 b9       	out	0x04, r24	; 4
 5b2:	23 98       	cbi	0x04, 3	; 4
 5b4:	85 ee       	ldi	r24, 0xE5	; 229
 5b6:	92 e0       	ldi	r25, 0x02	; 2
 5b8:	9f 93       	push	r25
 5ba:	8f 93       	push	r24
 5bc:	8d d0       	rcall	.+282    	; 0x6d8 <printf>
 5be:	81 e5       	ldi	r24, 0x51	; 81
 5c0:	8c bd       	out	0x2c, r24	; 44
 5c2:	8f ee       	ldi	r24, 0xEF	; 239
 5c4:	92 e0       	ldi	r25, 0x02	; 2
 5c6:	9f 93       	push	r25
 5c8:	8f 93       	push	r24
 5ca:	86 d0       	rcall	.+268    	; 0x6d8 <printf>
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	0f 90       	pop	r0
 5d6:	0f 90       	pop	r0
 5d8:	08 95       	ret

000005da <SPI_send>:
 5da:	8e bd       	out	0x2e, r24	; 46
 5dc:	0d b4       	in	r0, 0x2d	; 45
 5de:	07 fe       	sbrs	r0, 7
 5e0:	fd cf       	rjmp	.-6      	; 0x5dc <SPI_send+0x2>
 5e2:	8e b5       	in	r24, 0x2e	; 46
 5e4:	08 95       	ret

000005e6 <SPI_set_ss>:


void SPI_set_ss( int select )
{
	//for ATmega 162 set chip-select
	if (select == 1){
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	91 05       	cpc	r25, r1
 5ea:	11 f4       	brne	.+4      	; 0x5f0 <SPI_set_ss+0xa>
		set_bit(PORTB, SPI_SS);
 5ec:	2f 9a       	sbi	0x05, 7	; 5
 5ee:	08 95       	ret
	}
	else if (select == 0){
 5f0:	89 2b       	or	r24, r25
 5f2:	09 f4       	brne	.+2      	; 0x5f6 <SPI_set_ss+0x10>
		clear_bit(PORTB, SPI_SS);
 5f4:	2f 98       	cbi	0x05, 7	; 5
 5f6:	08 95       	ret

000005f8 <UART_TX>:
}

int UART_TX(char data, FILE * _in){
	(void)(_in);
	
	while( !(UCSR0A & (1 << UDRE0)) );
 5f8:	e0 ec       	ldi	r30, 0xC0	; 192
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	90 81       	ld	r25, Z
 5fe:	95 ff       	sbrs	r25, 5
 600:	fd cf       	rjmp	.-6      	; 0x5fc <UART_TX+0x4>
	
	// send data
	UDR0 = data;
 602:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	
	return 0;
}
 606:	80 e0       	ldi	r24, 0x00	; 0
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	08 95       	ret

0000060c <UART_RX>:

int UART_RX(FILE * _in ){
	(void)(_in);
	while( !(UCSR0A & (1 << RXC0)) );
 60c:	e0 ec       	ldi	r30, 0xC0	; 192
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	88 23       	and	r24, r24
 614:	ec f7       	brge	.-6      	; 0x610 <UART_RX+0x4>
	
	// Data recieved
	return UDR0;
 616:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	08 95       	ret

0000061e <UART_Init>:


void UART_Init(unsigned int ubrr)
{
	// Baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 61e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)(ubrr);
 622:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	// Enable Rx and Tx
	
	UCSR0B = (1 << RXEN0 ) | (1 << TXEN0);
 626:	88 e1       	ldi	r24, 0x18	; 24
 628:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1 << USBS0);
 62c:	e2 ec       	ldi	r30, 0xC2	; 194
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	88 e0       	ldi	r24, 0x08	; 8
 632:	80 83       	st	Z, r24
	UCSR0C = (3 << UCSZ00);
 634:	86 e0       	ldi	r24, 0x06	; 6
 636:	80 83       	st	Z, r24
	
	

	
	fdevopen(UART_TX, UART_RX);
 638:	66 e0       	ldi	r22, 0x06	; 6
 63a:	73 e0       	ldi	r23, 0x03	; 3
 63c:	8c ef       	ldi	r24, 0xFC	; 252
 63e:	92 e0       	ldi	r25, 0x02	; 2
 640:	01 c0       	rjmp	.+2      	; 0x644 <fdevopen>
 642:	08 95       	ret

00000644 <fdevopen>:
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	00 97       	sbiw	r24, 0x00	; 0
 64e:	31 f4       	brne	.+12     	; 0x65c <fdevopen+0x18>
 650:	61 15       	cp	r22, r1
 652:	71 05       	cpc	r23, r1
 654:	19 f4       	brne	.+6      	; 0x65c <fdevopen+0x18>
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	39 c0       	rjmp	.+114    	; 0x6ce <fdevopen+0x8a>
 65c:	8b 01       	movw	r16, r22
 65e:	ec 01       	movw	r28, r24
 660:	6e e0       	ldi	r22, 0x0E	; 14
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	68 d2       	rcall	.+1232   	; 0xb3a <calloc>
 66a:	fc 01       	movw	r30, r24
 66c:	89 2b       	or	r24, r25
 66e:	99 f3       	breq	.-26     	; 0x656 <fdevopen+0x12>
 670:	80 e8       	ldi	r24, 0x80	; 128
 672:	83 83       	std	Z+3, r24	; 0x03
 674:	01 15       	cp	r16, r1
 676:	11 05       	cpc	r17, r1
 678:	71 f0       	breq	.+28     	; 0x696 <fdevopen+0x52>
 67a:	13 87       	std	Z+11, r17	; 0x0b
 67c:	02 87       	std	Z+10, r16	; 0x0a
 67e:	81 e8       	ldi	r24, 0x81	; 129
 680:	83 83       	std	Z+3, r24	; 0x03
 682:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <__iob>
 686:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <__iob+0x1>
 68a:	89 2b       	or	r24, r25
 68c:	21 f4       	brne	.+8      	; 0x696 <fdevopen+0x52>
 68e:	f0 93 ff 02 	sts	0x02FF, r31	; 0x8002ff <__iob+0x1>
 692:	e0 93 fe 02 	sts	0x02FE, r30	; 0x8002fe <__iob>
 696:	20 97       	sbiw	r28, 0x00	; 0
 698:	c9 f0       	breq	.+50     	; 0x6cc <fdevopen+0x88>
 69a:	d1 87       	std	Z+9, r29	; 0x09
 69c:	c0 87       	std	Z+8, r28	; 0x08
 69e:	83 81       	ldd	r24, Z+3	; 0x03
 6a0:	82 60       	ori	r24, 0x02	; 2
 6a2:	83 83       	std	Z+3, r24	; 0x03
 6a4:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__iob+0x2>
 6a8:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <__iob+0x3>
 6ac:	89 2b       	or	r24, r25
 6ae:	71 f4       	brne	.+28     	; 0x6cc <fdevopen+0x88>
 6b0:	f0 93 01 03 	sts	0x0301, r31	; 0x800301 <__iob+0x3>
 6b4:	e0 93 00 03 	sts	0x0300, r30	; 0x800300 <__iob+0x2>
 6b8:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <__iob+0x4>
 6bc:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <__iob+0x5>
 6c0:	89 2b       	or	r24, r25
 6c2:	21 f4       	brne	.+8      	; 0x6cc <fdevopen+0x88>
 6c4:	f0 93 03 03 	sts	0x0303, r31	; 0x800303 <__iob+0x5>
 6c8:	e0 93 02 03 	sts	0x0302, r30	; 0x800302 <__iob+0x4>
 6cc:	cf 01       	movw	r24, r30
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	1f 91       	pop	r17
 6d4:	0f 91       	pop	r16
 6d6:	08 95       	ret

000006d8 <printf>:
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
 6e0:	ae 01       	movw	r20, r28
 6e2:	4a 5f       	subi	r20, 0xFA	; 250
 6e4:	5f 4f       	sbci	r21, 0xFF	; 255
 6e6:	fa 01       	movw	r30, r20
 6e8:	61 91       	ld	r22, Z+
 6ea:	71 91       	ld	r23, Z+
 6ec:	af 01       	movw	r20, r30
 6ee:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <__iob+0x2>
 6f2:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <__iob+0x3>
 6f6:	33 d0       	rcall	.+102    	; 0x75e <vfprintf>
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret

000006fe <puts>:
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	e0 91 00 03 	lds	r30, 0x0300	; 0x800300 <__iob+0x2>
 70a:	f0 91 01 03 	lds	r31, 0x0301	; 0x800301 <__iob+0x3>
 70e:	23 81       	ldd	r18, Z+3	; 0x03
 710:	21 ff       	sbrs	r18, 1
 712:	1b c0       	rjmp	.+54     	; 0x74a <puts+0x4c>
 714:	8c 01       	movw	r16, r24
 716:	d0 e0       	ldi	r29, 0x00	; 0
 718:	c0 e0       	ldi	r28, 0x00	; 0
 71a:	f8 01       	movw	r30, r16
 71c:	81 91       	ld	r24, Z+
 71e:	8f 01       	movw	r16, r30
 720:	60 91 00 03 	lds	r22, 0x0300	; 0x800300 <__iob+0x2>
 724:	70 91 01 03 	lds	r23, 0x0301	; 0x800301 <__iob+0x3>
 728:	db 01       	movw	r26, r22
 72a:	18 96       	adiw	r26, 0x08	; 8
 72c:	ed 91       	ld	r30, X+
 72e:	fc 91       	ld	r31, X
 730:	19 97       	sbiw	r26, 0x09	; 9
 732:	88 23       	and	r24, r24
 734:	31 f0       	breq	.+12     	; 0x742 <puts+0x44>
 736:	19 95       	eicall
 738:	89 2b       	or	r24, r25
 73a:	79 f3       	breq	.-34     	; 0x71a <puts+0x1c>
 73c:	df ef       	ldi	r29, 0xFF	; 255
 73e:	cf ef       	ldi	r28, 0xFF	; 255
 740:	ec cf       	rjmp	.-40     	; 0x71a <puts+0x1c>
 742:	8a e0       	ldi	r24, 0x0A	; 10
 744:	19 95       	eicall
 746:	89 2b       	or	r24, r25
 748:	19 f0       	breq	.+6      	; 0x750 <puts+0x52>
 74a:	8f ef       	ldi	r24, 0xFF	; 255
 74c:	9f ef       	ldi	r25, 0xFF	; 255
 74e:	02 c0       	rjmp	.+4      	; 0x754 <puts+0x56>
 750:	8d 2f       	mov	r24, r29
 752:	9c 2f       	mov	r25, r28
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	1f 91       	pop	r17
 75a:	0f 91       	pop	r16
 75c:	08 95       	ret

0000075e <vfprintf>:
 75e:	2f 92       	push	r2
 760:	3f 92       	push	r3
 762:	4f 92       	push	r4
 764:	5f 92       	push	r5
 766:	6f 92       	push	r6
 768:	7f 92       	push	r7
 76a:	8f 92       	push	r8
 76c:	9f 92       	push	r9
 76e:	af 92       	push	r10
 770:	bf 92       	push	r11
 772:	cf 92       	push	r12
 774:	df 92       	push	r13
 776:	ef 92       	push	r14
 778:	ff 92       	push	r15
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
 786:	2c 97       	sbiw	r28, 0x0c	; 12
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	f8 94       	cli
 78c:	de bf       	out	0x3e, r29	; 62
 78e:	0f be       	out	0x3f, r0	; 63
 790:	cd bf       	out	0x3d, r28	; 61
 792:	7c 01       	movw	r14, r24
 794:	6b 01       	movw	r12, r22
 796:	8a 01       	movw	r16, r20
 798:	fc 01       	movw	r30, r24
 79a:	17 82       	std	Z+7, r1	; 0x07
 79c:	16 82       	std	Z+6, r1	; 0x06
 79e:	83 81       	ldd	r24, Z+3	; 0x03
 7a0:	81 ff       	sbrs	r24, 1
 7a2:	b0 c1       	rjmp	.+864    	; 0xb04 <vfprintf+0x3a6>
 7a4:	ce 01       	movw	r24, r28
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	4c 01       	movw	r8, r24
 7aa:	f7 01       	movw	r30, r14
 7ac:	93 81       	ldd	r25, Z+3	; 0x03
 7ae:	f6 01       	movw	r30, r12
 7b0:	93 fd       	sbrc	r25, 3
 7b2:	85 91       	lpm	r24, Z+
 7b4:	93 ff       	sbrs	r25, 3
 7b6:	81 91       	ld	r24, Z+
 7b8:	6f 01       	movw	r12, r30
 7ba:	88 23       	and	r24, r24
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <vfprintf+0x62>
 7be:	9e c1       	rjmp	.+828    	; 0xafc <vfprintf+0x39e>
 7c0:	85 32       	cpi	r24, 0x25	; 37
 7c2:	39 f4       	brne	.+14     	; 0x7d2 <vfprintf+0x74>
 7c4:	93 fd       	sbrc	r25, 3
 7c6:	85 91       	lpm	r24, Z+
 7c8:	93 ff       	sbrs	r25, 3
 7ca:	81 91       	ld	r24, Z+
 7cc:	6f 01       	movw	r12, r30
 7ce:	85 32       	cpi	r24, 0x25	; 37
 7d0:	21 f4       	brne	.+8      	; 0x7da <vfprintf+0x7c>
 7d2:	b7 01       	movw	r22, r14
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	15 d3       	rcall	.+1578   	; 0xe02 <fputc>
 7d8:	e8 cf       	rjmp	.-48     	; 0x7aa <vfprintf+0x4c>
 7da:	51 2c       	mov	r5, r1
 7dc:	31 2c       	mov	r3, r1
 7de:	20 e0       	ldi	r18, 0x00	; 0
 7e0:	20 32       	cpi	r18, 0x20	; 32
 7e2:	a0 f4       	brcc	.+40     	; 0x80c <vfprintf+0xae>
 7e4:	8b 32       	cpi	r24, 0x2B	; 43
 7e6:	69 f0       	breq	.+26     	; 0x802 <vfprintf+0xa4>
 7e8:	30 f4       	brcc	.+12     	; 0x7f6 <vfprintf+0x98>
 7ea:	80 32       	cpi	r24, 0x20	; 32
 7ec:	59 f0       	breq	.+22     	; 0x804 <vfprintf+0xa6>
 7ee:	83 32       	cpi	r24, 0x23	; 35
 7f0:	69 f4       	brne	.+26     	; 0x80c <vfprintf+0xae>
 7f2:	20 61       	ori	r18, 0x10	; 16
 7f4:	2c c0       	rjmp	.+88     	; 0x84e <vfprintf+0xf0>
 7f6:	8d 32       	cpi	r24, 0x2D	; 45
 7f8:	39 f0       	breq	.+14     	; 0x808 <vfprintf+0xaa>
 7fa:	80 33       	cpi	r24, 0x30	; 48
 7fc:	39 f4       	brne	.+14     	; 0x80c <vfprintf+0xae>
 7fe:	21 60       	ori	r18, 0x01	; 1
 800:	26 c0       	rjmp	.+76     	; 0x84e <vfprintf+0xf0>
 802:	22 60       	ori	r18, 0x02	; 2
 804:	24 60       	ori	r18, 0x04	; 4
 806:	23 c0       	rjmp	.+70     	; 0x84e <vfprintf+0xf0>
 808:	28 60       	ori	r18, 0x08	; 8
 80a:	21 c0       	rjmp	.+66     	; 0x84e <vfprintf+0xf0>
 80c:	27 fd       	sbrc	r18, 7
 80e:	27 c0       	rjmp	.+78     	; 0x85e <vfprintf+0x100>
 810:	30 ed       	ldi	r19, 0xD0	; 208
 812:	38 0f       	add	r19, r24
 814:	3a 30       	cpi	r19, 0x0A	; 10
 816:	78 f4       	brcc	.+30     	; 0x836 <vfprintf+0xd8>
 818:	26 ff       	sbrs	r18, 6
 81a:	06 c0       	rjmp	.+12     	; 0x828 <vfprintf+0xca>
 81c:	fa e0       	ldi	r31, 0x0A	; 10
 81e:	5f 9e       	mul	r5, r31
 820:	30 0d       	add	r19, r0
 822:	11 24       	eor	r1, r1
 824:	53 2e       	mov	r5, r19
 826:	13 c0       	rjmp	.+38     	; 0x84e <vfprintf+0xf0>
 828:	8a e0       	ldi	r24, 0x0A	; 10
 82a:	38 9e       	mul	r3, r24
 82c:	30 0d       	add	r19, r0
 82e:	11 24       	eor	r1, r1
 830:	33 2e       	mov	r3, r19
 832:	20 62       	ori	r18, 0x20	; 32
 834:	0c c0       	rjmp	.+24     	; 0x84e <vfprintf+0xf0>
 836:	8e 32       	cpi	r24, 0x2E	; 46
 838:	21 f4       	brne	.+8      	; 0x842 <vfprintf+0xe4>
 83a:	26 fd       	sbrc	r18, 6
 83c:	5f c1       	rjmp	.+702    	; 0xafc <vfprintf+0x39e>
 83e:	20 64       	ori	r18, 0x40	; 64
 840:	06 c0       	rjmp	.+12     	; 0x84e <vfprintf+0xf0>
 842:	8c 36       	cpi	r24, 0x6C	; 108
 844:	11 f4       	brne	.+4      	; 0x84a <vfprintf+0xec>
 846:	20 68       	ori	r18, 0x80	; 128
 848:	02 c0       	rjmp	.+4      	; 0x84e <vfprintf+0xf0>
 84a:	88 36       	cpi	r24, 0x68	; 104
 84c:	41 f4       	brne	.+16     	; 0x85e <vfprintf+0x100>
 84e:	f6 01       	movw	r30, r12
 850:	93 fd       	sbrc	r25, 3
 852:	85 91       	lpm	r24, Z+
 854:	93 ff       	sbrs	r25, 3
 856:	81 91       	ld	r24, Z+
 858:	6f 01       	movw	r12, r30
 85a:	81 11       	cpse	r24, r1
 85c:	c1 cf       	rjmp	.-126    	; 0x7e0 <vfprintf+0x82>
 85e:	98 2f       	mov	r25, r24
 860:	9f 7d       	andi	r25, 0xDF	; 223
 862:	95 54       	subi	r25, 0x45	; 69
 864:	93 30       	cpi	r25, 0x03	; 3
 866:	28 f4       	brcc	.+10     	; 0x872 <vfprintf+0x114>
 868:	0c 5f       	subi	r16, 0xFC	; 252
 86a:	1f 4f       	sbci	r17, 0xFF	; 255
 86c:	ff e3       	ldi	r31, 0x3F	; 63
 86e:	f9 83       	std	Y+1, r31	; 0x01
 870:	0d c0       	rjmp	.+26     	; 0x88c <vfprintf+0x12e>
 872:	83 36       	cpi	r24, 0x63	; 99
 874:	31 f0       	breq	.+12     	; 0x882 <vfprintf+0x124>
 876:	83 37       	cpi	r24, 0x73	; 115
 878:	71 f0       	breq	.+28     	; 0x896 <vfprintf+0x138>
 87a:	83 35       	cpi	r24, 0x53	; 83
 87c:	09 f0       	breq	.+2      	; 0x880 <vfprintf+0x122>
 87e:	57 c0       	rjmp	.+174    	; 0x92e <vfprintf+0x1d0>
 880:	21 c0       	rjmp	.+66     	; 0x8c4 <vfprintf+0x166>
 882:	f8 01       	movw	r30, r16
 884:	80 81       	ld	r24, Z
 886:	89 83       	std	Y+1, r24	; 0x01
 888:	0e 5f       	subi	r16, 0xFE	; 254
 88a:	1f 4f       	sbci	r17, 0xFF	; 255
 88c:	44 24       	eor	r4, r4
 88e:	43 94       	inc	r4
 890:	51 2c       	mov	r5, r1
 892:	54 01       	movw	r10, r8
 894:	14 c0       	rjmp	.+40     	; 0x8be <vfprintf+0x160>
 896:	38 01       	movw	r6, r16
 898:	f2 e0       	ldi	r31, 0x02	; 2
 89a:	6f 0e       	add	r6, r31
 89c:	71 1c       	adc	r7, r1
 89e:	f8 01       	movw	r30, r16
 8a0:	a0 80       	ld	r10, Z
 8a2:	b1 80       	ldd	r11, Z+1	; 0x01
 8a4:	26 ff       	sbrs	r18, 6
 8a6:	03 c0       	rjmp	.+6      	; 0x8ae <vfprintf+0x150>
 8a8:	65 2d       	mov	r22, r5
 8aa:	70 e0       	ldi	r23, 0x00	; 0
 8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <vfprintf+0x154>
 8ae:	6f ef       	ldi	r22, 0xFF	; 255
 8b0:	7f ef       	ldi	r23, 0xFF	; 255
 8b2:	c5 01       	movw	r24, r10
 8b4:	2c 87       	std	Y+12, r18	; 0x0c
 8b6:	9a d2       	rcall	.+1332   	; 0xdec <strnlen>
 8b8:	2c 01       	movw	r4, r24
 8ba:	83 01       	movw	r16, r6
 8bc:	2c 85       	ldd	r18, Y+12	; 0x0c
 8be:	2f 77       	andi	r18, 0x7F	; 127
 8c0:	22 2e       	mov	r2, r18
 8c2:	16 c0       	rjmp	.+44     	; 0x8f0 <vfprintf+0x192>
 8c4:	38 01       	movw	r6, r16
 8c6:	f2 e0       	ldi	r31, 0x02	; 2
 8c8:	6f 0e       	add	r6, r31
 8ca:	71 1c       	adc	r7, r1
 8cc:	f8 01       	movw	r30, r16
 8ce:	a0 80       	ld	r10, Z
 8d0:	b1 80       	ldd	r11, Z+1	; 0x01
 8d2:	26 ff       	sbrs	r18, 6
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <vfprintf+0x17e>
 8d6:	65 2d       	mov	r22, r5
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <vfprintf+0x182>
 8dc:	6f ef       	ldi	r22, 0xFF	; 255
 8de:	7f ef       	ldi	r23, 0xFF	; 255
 8e0:	c5 01       	movw	r24, r10
 8e2:	2c 87       	std	Y+12, r18	; 0x0c
 8e4:	71 d2       	rcall	.+1250   	; 0xdc8 <strnlen_P>
 8e6:	2c 01       	movw	r4, r24
 8e8:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ea:	20 68       	ori	r18, 0x80	; 128
 8ec:	22 2e       	mov	r2, r18
 8ee:	83 01       	movw	r16, r6
 8f0:	23 fc       	sbrc	r2, 3
 8f2:	19 c0       	rjmp	.+50     	; 0x926 <vfprintf+0x1c8>
 8f4:	83 2d       	mov	r24, r3
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	48 16       	cp	r4, r24
 8fa:	59 06       	cpc	r5, r25
 8fc:	a0 f4       	brcc	.+40     	; 0x926 <vfprintf+0x1c8>
 8fe:	b7 01       	movw	r22, r14
 900:	80 e2       	ldi	r24, 0x20	; 32
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	7e d2       	rcall	.+1276   	; 0xe02 <fputc>
 906:	3a 94       	dec	r3
 908:	f5 cf       	rjmp	.-22     	; 0x8f4 <vfprintf+0x196>
 90a:	f5 01       	movw	r30, r10
 90c:	27 fc       	sbrc	r2, 7
 90e:	85 91       	lpm	r24, Z+
 910:	27 fe       	sbrs	r2, 7
 912:	81 91       	ld	r24, Z+
 914:	5f 01       	movw	r10, r30
 916:	b7 01       	movw	r22, r14
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	73 d2       	rcall	.+1254   	; 0xe02 <fputc>
 91c:	31 10       	cpse	r3, r1
 91e:	3a 94       	dec	r3
 920:	f1 e0       	ldi	r31, 0x01	; 1
 922:	4f 1a       	sub	r4, r31
 924:	51 08       	sbc	r5, r1
 926:	41 14       	cp	r4, r1
 928:	51 04       	cpc	r5, r1
 92a:	79 f7       	brne	.-34     	; 0x90a <vfprintf+0x1ac>
 92c:	de c0       	rjmp	.+444    	; 0xaea <vfprintf+0x38c>
 92e:	84 36       	cpi	r24, 0x64	; 100
 930:	11 f0       	breq	.+4      	; 0x936 <vfprintf+0x1d8>
 932:	89 36       	cpi	r24, 0x69	; 105
 934:	31 f5       	brne	.+76     	; 0x982 <vfprintf+0x224>
 936:	f8 01       	movw	r30, r16
 938:	27 ff       	sbrs	r18, 7
 93a:	07 c0       	rjmp	.+14     	; 0x94a <vfprintf+0x1ec>
 93c:	60 81       	ld	r22, Z
 93e:	71 81       	ldd	r23, Z+1	; 0x01
 940:	82 81       	ldd	r24, Z+2	; 0x02
 942:	93 81       	ldd	r25, Z+3	; 0x03
 944:	0c 5f       	subi	r16, 0xFC	; 252
 946:	1f 4f       	sbci	r17, 0xFF	; 255
 948:	08 c0       	rjmp	.+16     	; 0x95a <vfprintf+0x1fc>
 94a:	60 81       	ld	r22, Z
 94c:	71 81       	ldd	r23, Z+1	; 0x01
 94e:	07 2e       	mov	r0, r23
 950:	00 0c       	add	r0, r0
 952:	88 0b       	sbc	r24, r24
 954:	99 0b       	sbc	r25, r25
 956:	0e 5f       	subi	r16, 0xFE	; 254
 958:	1f 4f       	sbci	r17, 0xFF	; 255
 95a:	2f 76       	andi	r18, 0x6F	; 111
 95c:	72 2e       	mov	r7, r18
 95e:	97 ff       	sbrs	r25, 7
 960:	09 c0       	rjmp	.+18     	; 0x974 <vfprintf+0x216>
 962:	90 95       	com	r25
 964:	80 95       	com	r24
 966:	70 95       	com	r23
 968:	61 95       	neg	r22
 96a:	7f 4f       	sbci	r23, 0xFF	; 255
 96c:	8f 4f       	sbci	r24, 0xFF	; 255
 96e:	9f 4f       	sbci	r25, 0xFF	; 255
 970:	20 68       	ori	r18, 0x80	; 128
 972:	72 2e       	mov	r7, r18
 974:	2a e0       	ldi	r18, 0x0A	; 10
 976:	30 e0       	ldi	r19, 0x00	; 0
 978:	a4 01       	movw	r20, r8
 97a:	7b d2       	rcall	.+1270   	; 0xe72 <__ultoa_invert>
 97c:	a8 2e       	mov	r10, r24
 97e:	a8 18       	sub	r10, r8
 980:	43 c0       	rjmp	.+134    	; 0xa08 <vfprintf+0x2aa>
 982:	85 37       	cpi	r24, 0x75	; 117
 984:	29 f4       	brne	.+10     	; 0x990 <vfprintf+0x232>
 986:	2f 7e       	andi	r18, 0xEF	; 239
 988:	b2 2e       	mov	r11, r18
 98a:	2a e0       	ldi	r18, 0x0A	; 10
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	25 c0       	rjmp	.+74     	; 0x9da <vfprintf+0x27c>
 990:	f2 2f       	mov	r31, r18
 992:	f9 7f       	andi	r31, 0xF9	; 249
 994:	bf 2e       	mov	r11, r31
 996:	8f 36       	cpi	r24, 0x6F	; 111
 998:	c1 f0       	breq	.+48     	; 0x9ca <vfprintf+0x26c>
 99a:	18 f4       	brcc	.+6      	; 0x9a2 <vfprintf+0x244>
 99c:	88 35       	cpi	r24, 0x58	; 88
 99e:	79 f0       	breq	.+30     	; 0x9be <vfprintf+0x260>
 9a0:	ad c0       	rjmp	.+346    	; 0xafc <vfprintf+0x39e>
 9a2:	80 37       	cpi	r24, 0x70	; 112
 9a4:	19 f0       	breq	.+6      	; 0x9ac <vfprintf+0x24e>
 9a6:	88 37       	cpi	r24, 0x78	; 120
 9a8:	21 f0       	breq	.+8      	; 0x9b2 <vfprintf+0x254>
 9aa:	a8 c0       	rjmp	.+336    	; 0xafc <vfprintf+0x39e>
 9ac:	2f 2f       	mov	r18, r31
 9ae:	20 61       	ori	r18, 0x10	; 16
 9b0:	b2 2e       	mov	r11, r18
 9b2:	b4 fe       	sbrs	r11, 4
 9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <vfprintf+0x272>
 9b6:	8b 2d       	mov	r24, r11
 9b8:	84 60       	ori	r24, 0x04	; 4
 9ba:	b8 2e       	mov	r11, r24
 9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <vfprintf+0x272>
 9be:	24 ff       	sbrs	r18, 4
 9c0:	0a c0       	rjmp	.+20     	; 0x9d6 <vfprintf+0x278>
 9c2:	9f 2f       	mov	r25, r31
 9c4:	96 60       	ori	r25, 0x06	; 6
 9c6:	b9 2e       	mov	r11, r25
 9c8:	06 c0       	rjmp	.+12     	; 0x9d6 <vfprintf+0x278>
 9ca:	28 e0       	ldi	r18, 0x08	; 8
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	05 c0       	rjmp	.+10     	; 0x9da <vfprintf+0x27c>
 9d0:	20 e1       	ldi	r18, 0x10	; 16
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <vfprintf+0x27c>
 9d6:	20 e1       	ldi	r18, 0x10	; 16
 9d8:	32 e0       	ldi	r19, 0x02	; 2
 9da:	f8 01       	movw	r30, r16
 9dc:	b7 fe       	sbrs	r11, 7
 9de:	07 c0       	rjmp	.+14     	; 0x9ee <vfprintf+0x290>
 9e0:	60 81       	ld	r22, Z
 9e2:	71 81       	ldd	r23, Z+1	; 0x01
 9e4:	82 81       	ldd	r24, Z+2	; 0x02
 9e6:	93 81       	ldd	r25, Z+3	; 0x03
 9e8:	0c 5f       	subi	r16, 0xFC	; 252
 9ea:	1f 4f       	sbci	r17, 0xFF	; 255
 9ec:	06 c0       	rjmp	.+12     	; 0x9fa <vfprintf+0x29c>
 9ee:	60 81       	ld	r22, Z
 9f0:	71 81       	ldd	r23, Z+1	; 0x01
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 5f       	subi	r16, 0xFE	; 254
 9f8:	1f 4f       	sbci	r17, 0xFF	; 255
 9fa:	a4 01       	movw	r20, r8
 9fc:	3a d2       	rcall	.+1140   	; 0xe72 <__ultoa_invert>
 9fe:	a8 2e       	mov	r10, r24
 a00:	a8 18       	sub	r10, r8
 a02:	fb 2d       	mov	r31, r11
 a04:	ff 77       	andi	r31, 0x7F	; 127
 a06:	7f 2e       	mov	r7, r31
 a08:	76 fe       	sbrs	r7, 6
 a0a:	0b c0       	rjmp	.+22     	; 0xa22 <vfprintf+0x2c4>
 a0c:	37 2d       	mov	r19, r7
 a0e:	3e 7f       	andi	r19, 0xFE	; 254
 a10:	a5 14       	cp	r10, r5
 a12:	50 f4       	brcc	.+20     	; 0xa28 <vfprintf+0x2ca>
 a14:	74 fe       	sbrs	r7, 4
 a16:	0a c0       	rjmp	.+20     	; 0xa2c <vfprintf+0x2ce>
 a18:	72 fc       	sbrc	r7, 2
 a1a:	08 c0       	rjmp	.+16     	; 0xa2c <vfprintf+0x2ce>
 a1c:	37 2d       	mov	r19, r7
 a1e:	3e 7e       	andi	r19, 0xEE	; 238
 a20:	05 c0       	rjmp	.+10     	; 0xa2c <vfprintf+0x2ce>
 a22:	ba 2c       	mov	r11, r10
 a24:	37 2d       	mov	r19, r7
 a26:	03 c0       	rjmp	.+6      	; 0xa2e <vfprintf+0x2d0>
 a28:	ba 2c       	mov	r11, r10
 a2a:	01 c0       	rjmp	.+2      	; 0xa2e <vfprintf+0x2d0>
 a2c:	b5 2c       	mov	r11, r5
 a2e:	34 ff       	sbrs	r19, 4
 a30:	0d c0       	rjmp	.+26     	; 0xa4c <vfprintf+0x2ee>
 a32:	fe 01       	movw	r30, r28
 a34:	ea 0d       	add	r30, r10
 a36:	f1 1d       	adc	r31, r1
 a38:	80 81       	ld	r24, Z
 a3a:	80 33       	cpi	r24, 0x30	; 48
 a3c:	11 f4       	brne	.+4      	; 0xa42 <vfprintf+0x2e4>
 a3e:	39 7e       	andi	r19, 0xE9	; 233
 a40:	09 c0       	rjmp	.+18     	; 0xa54 <vfprintf+0x2f6>
 a42:	32 ff       	sbrs	r19, 2
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <vfprintf+0x2f4>
 a46:	b3 94       	inc	r11
 a48:	b3 94       	inc	r11
 a4a:	04 c0       	rjmp	.+8      	; 0xa54 <vfprintf+0x2f6>
 a4c:	83 2f       	mov	r24, r19
 a4e:	86 78       	andi	r24, 0x86	; 134
 a50:	09 f0       	breq	.+2      	; 0xa54 <vfprintf+0x2f6>
 a52:	b3 94       	inc	r11
 a54:	33 fd       	sbrc	r19, 3
 a56:	12 c0       	rjmp	.+36     	; 0xa7c <vfprintf+0x31e>
 a58:	30 ff       	sbrs	r19, 0
 a5a:	06 c0       	rjmp	.+12     	; 0xa68 <vfprintf+0x30a>
 a5c:	5a 2c       	mov	r5, r10
 a5e:	b3 14       	cp	r11, r3
 a60:	18 f4       	brcc	.+6      	; 0xa68 <vfprintf+0x30a>
 a62:	53 0c       	add	r5, r3
 a64:	5b 18       	sub	r5, r11
 a66:	b3 2c       	mov	r11, r3
 a68:	b3 14       	cp	r11, r3
 a6a:	60 f4       	brcc	.+24     	; 0xa84 <vfprintf+0x326>
 a6c:	b7 01       	movw	r22, r14
 a6e:	80 e2       	ldi	r24, 0x20	; 32
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	3c 87       	std	Y+12, r19	; 0x0c
 a74:	c6 d1       	rcall	.+908    	; 0xe02 <fputc>
 a76:	b3 94       	inc	r11
 a78:	3c 85       	ldd	r19, Y+12	; 0x0c
 a7a:	f6 cf       	rjmp	.-20     	; 0xa68 <vfprintf+0x30a>
 a7c:	b3 14       	cp	r11, r3
 a7e:	10 f4       	brcc	.+4      	; 0xa84 <vfprintf+0x326>
 a80:	3b 18       	sub	r3, r11
 a82:	01 c0       	rjmp	.+2      	; 0xa86 <vfprintf+0x328>
 a84:	31 2c       	mov	r3, r1
 a86:	34 ff       	sbrs	r19, 4
 a88:	11 c0       	rjmp	.+34     	; 0xaac <vfprintf+0x34e>
 a8a:	b7 01       	movw	r22, r14
 a8c:	80 e3       	ldi	r24, 0x30	; 48
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	3c 87       	std	Y+12, r19	; 0x0c
 a92:	b7 d1       	rcall	.+878    	; 0xe02 <fputc>
 a94:	3c 85       	ldd	r19, Y+12	; 0x0c
 a96:	32 ff       	sbrs	r19, 2
 a98:	16 c0       	rjmp	.+44     	; 0xac6 <vfprintf+0x368>
 a9a:	31 fd       	sbrc	r19, 1
 a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <vfprintf+0x346>
 a9e:	88 e7       	ldi	r24, 0x78	; 120
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <vfprintf+0x34a>
 aa4:	88 e5       	ldi	r24, 0x58	; 88
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	b7 01       	movw	r22, r14
 aaa:	0c c0       	rjmp	.+24     	; 0xac4 <vfprintf+0x366>
 aac:	83 2f       	mov	r24, r19
 aae:	86 78       	andi	r24, 0x86	; 134
 ab0:	51 f0       	breq	.+20     	; 0xac6 <vfprintf+0x368>
 ab2:	31 ff       	sbrs	r19, 1
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0x35c>
 ab6:	8b e2       	ldi	r24, 0x2B	; 43
 ab8:	01 c0       	rjmp	.+2      	; 0xabc <vfprintf+0x35e>
 aba:	80 e2       	ldi	r24, 0x20	; 32
 abc:	37 fd       	sbrc	r19, 7
 abe:	8d e2       	ldi	r24, 0x2D	; 45
 ac0:	b7 01       	movw	r22, r14
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	9e d1       	rcall	.+828    	; 0xe02 <fputc>
 ac6:	a5 14       	cp	r10, r5
 ac8:	30 f4       	brcc	.+12     	; 0xad6 <vfprintf+0x378>
 aca:	b7 01       	movw	r22, r14
 acc:	80 e3       	ldi	r24, 0x30	; 48
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	98 d1       	rcall	.+816    	; 0xe02 <fputc>
 ad2:	5a 94       	dec	r5
 ad4:	f8 cf       	rjmp	.-16     	; 0xac6 <vfprintf+0x368>
 ad6:	aa 94       	dec	r10
 ad8:	f4 01       	movw	r30, r8
 ada:	ea 0d       	add	r30, r10
 adc:	f1 1d       	adc	r31, r1
 ade:	80 81       	ld	r24, Z
 ae0:	b7 01       	movw	r22, r14
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	8e d1       	rcall	.+796    	; 0xe02 <fputc>
 ae6:	a1 10       	cpse	r10, r1
 ae8:	f6 cf       	rjmp	.-20     	; 0xad6 <vfprintf+0x378>
 aea:	33 20       	and	r3, r3
 aec:	09 f4       	brne	.+2      	; 0xaf0 <vfprintf+0x392>
 aee:	5d ce       	rjmp	.-838    	; 0x7aa <vfprintf+0x4c>
 af0:	b7 01       	movw	r22, r14
 af2:	80 e2       	ldi	r24, 0x20	; 32
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	85 d1       	rcall	.+778    	; 0xe02 <fputc>
 af8:	3a 94       	dec	r3
 afa:	f7 cf       	rjmp	.-18     	; 0xaea <vfprintf+0x38c>
 afc:	f7 01       	movw	r30, r14
 afe:	86 81       	ldd	r24, Z+6	; 0x06
 b00:	97 81       	ldd	r25, Z+7	; 0x07
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <vfprintf+0x3aa>
 b04:	8f ef       	ldi	r24, 0xFF	; 255
 b06:	9f ef       	ldi	r25, 0xFF	; 255
 b08:	2c 96       	adiw	r28, 0x0c	; 12
 b0a:	0f b6       	in	r0, 0x3f	; 63
 b0c:	f8 94       	cli
 b0e:	de bf       	out	0x3e, r29	; 62
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	cd bf       	out	0x3d, r28	; 61
 b14:	df 91       	pop	r29
 b16:	cf 91       	pop	r28
 b18:	1f 91       	pop	r17
 b1a:	0f 91       	pop	r16
 b1c:	ff 90       	pop	r15
 b1e:	ef 90       	pop	r14
 b20:	df 90       	pop	r13
 b22:	cf 90       	pop	r12
 b24:	bf 90       	pop	r11
 b26:	af 90       	pop	r10
 b28:	9f 90       	pop	r9
 b2a:	8f 90       	pop	r8
 b2c:	7f 90       	pop	r7
 b2e:	6f 90       	pop	r6
 b30:	5f 90       	pop	r5
 b32:	4f 90       	pop	r4
 b34:	3f 90       	pop	r3
 b36:	2f 90       	pop	r2
 b38:	08 95       	ret

00000b3a <calloc>:
 b3a:	0f 93       	push	r16
 b3c:	1f 93       	push	r17
 b3e:	cf 93       	push	r28
 b40:	df 93       	push	r29
 b42:	86 9f       	mul	r24, r22
 b44:	80 01       	movw	r16, r0
 b46:	87 9f       	mul	r24, r23
 b48:	10 0d       	add	r17, r0
 b4a:	96 9f       	mul	r25, r22
 b4c:	10 0d       	add	r17, r0
 b4e:	11 24       	eor	r1, r1
 b50:	c8 01       	movw	r24, r16
 b52:	0d d0       	rcall	.+26     	; 0xb6e <malloc>
 b54:	ec 01       	movw	r28, r24
 b56:	00 97       	sbiw	r24, 0x00	; 0
 b58:	21 f0       	breq	.+8      	; 0xb62 <calloc+0x28>
 b5a:	a8 01       	movw	r20, r16
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	70 e0       	ldi	r23, 0x00	; 0
 b60:	3e d1       	rcall	.+636    	; 0xdde <memset>
 b62:	ce 01       	movw	r24, r28
 b64:	df 91       	pop	r29
 b66:	cf 91       	pop	r28
 b68:	1f 91       	pop	r17
 b6a:	0f 91       	pop	r16
 b6c:	08 95       	ret

00000b6e <malloc>:
 b6e:	cf 93       	push	r28
 b70:	df 93       	push	r29
 b72:	82 30       	cpi	r24, 0x02	; 2
 b74:	91 05       	cpc	r25, r1
 b76:	10 f4       	brcc	.+4      	; 0xb7c <malloc+0xe>
 b78:	82 e0       	ldi	r24, 0x02	; 2
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <__flp>
 b80:	f0 91 07 03 	lds	r31, 0x0307	; 0x800307 <__flp+0x1>
 b84:	20 e0       	ldi	r18, 0x00	; 0
 b86:	30 e0       	ldi	r19, 0x00	; 0
 b88:	c0 e0       	ldi	r28, 0x00	; 0
 b8a:	d0 e0       	ldi	r29, 0x00	; 0
 b8c:	30 97       	sbiw	r30, 0x00	; 0
 b8e:	11 f1       	breq	.+68     	; 0xbd4 <malloc+0x66>
 b90:	40 81       	ld	r20, Z
 b92:	51 81       	ldd	r21, Z+1	; 0x01
 b94:	48 17       	cp	r20, r24
 b96:	59 07       	cpc	r21, r25
 b98:	c0 f0       	brcs	.+48     	; 0xbca <malloc+0x5c>
 b9a:	48 17       	cp	r20, r24
 b9c:	59 07       	cpc	r21, r25
 b9e:	61 f4       	brne	.+24     	; 0xbb8 <malloc+0x4a>
 ba0:	82 81       	ldd	r24, Z+2	; 0x02
 ba2:	93 81       	ldd	r25, Z+3	; 0x03
 ba4:	20 97       	sbiw	r28, 0x00	; 0
 ba6:	19 f0       	breq	.+6      	; 0xbae <malloc+0x40>
 ba8:	9b 83       	std	Y+3, r25	; 0x03
 baa:	8a 83       	std	Y+2, r24	; 0x02
 bac:	2b c0       	rjmp	.+86     	; 0xc04 <malloc+0x96>
 bae:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <__flp+0x1>
 bb2:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__flp>
 bb6:	26 c0       	rjmp	.+76     	; 0xc04 <malloc+0x96>
 bb8:	21 15       	cp	r18, r1
 bba:	31 05       	cpc	r19, r1
 bbc:	19 f0       	breq	.+6      	; 0xbc4 <malloc+0x56>
 bbe:	42 17       	cp	r20, r18
 bc0:	53 07       	cpc	r21, r19
 bc2:	18 f4       	brcc	.+6      	; 0xbca <malloc+0x5c>
 bc4:	9a 01       	movw	r18, r20
 bc6:	be 01       	movw	r22, r28
 bc8:	df 01       	movw	r26, r30
 bca:	ef 01       	movw	r28, r30
 bcc:	02 80       	ldd	r0, Z+2	; 0x02
 bce:	f3 81       	ldd	r31, Z+3	; 0x03
 bd0:	e0 2d       	mov	r30, r0
 bd2:	dc cf       	rjmp	.-72     	; 0xb8c <malloc+0x1e>
 bd4:	21 15       	cp	r18, r1
 bd6:	31 05       	cpc	r19, r1
 bd8:	09 f1       	breq	.+66     	; 0xc1c <malloc+0xae>
 bda:	28 1b       	sub	r18, r24
 bdc:	39 0b       	sbc	r19, r25
 bde:	24 30       	cpi	r18, 0x04	; 4
 be0:	31 05       	cpc	r19, r1
 be2:	90 f4       	brcc	.+36     	; 0xc08 <malloc+0x9a>
 be4:	12 96       	adiw	r26, 0x02	; 2
 be6:	8d 91       	ld	r24, X+
 be8:	9c 91       	ld	r25, X
 bea:	13 97       	sbiw	r26, 0x03	; 3
 bec:	61 15       	cp	r22, r1
 bee:	71 05       	cpc	r23, r1
 bf0:	21 f0       	breq	.+8      	; 0xbfa <malloc+0x8c>
 bf2:	fb 01       	movw	r30, r22
 bf4:	93 83       	std	Z+3, r25	; 0x03
 bf6:	82 83       	std	Z+2, r24	; 0x02
 bf8:	04 c0       	rjmp	.+8      	; 0xc02 <malloc+0x94>
 bfa:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <__flp+0x1>
 bfe:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <__flp>
 c02:	fd 01       	movw	r30, r26
 c04:	32 96       	adiw	r30, 0x02	; 2
 c06:	44 c0       	rjmp	.+136    	; 0xc90 <malloc+0x122>
 c08:	fd 01       	movw	r30, r26
 c0a:	e2 0f       	add	r30, r18
 c0c:	f3 1f       	adc	r31, r19
 c0e:	81 93       	st	Z+, r24
 c10:	91 93       	st	Z+, r25
 c12:	22 50       	subi	r18, 0x02	; 2
 c14:	31 09       	sbc	r19, r1
 c16:	2d 93       	st	X+, r18
 c18:	3c 93       	st	X, r19
 c1a:	3a c0       	rjmp	.+116    	; 0xc90 <malloc+0x122>
 c1c:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <__brkval>
 c20:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <__brkval+0x1>
 c24:	23 2b       	or	r18, r19
 c26:	41 f4       	brne	.+16     	; 0xc38 <malloc+0xca>
 c28:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 c2c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 c30:	30 93 05 03 	sts	0x0305, r19	; 0x800305 <__brkval+0x1>
 c34:	20 93 04 03 	sts	0x0304, r18	; 0x800304 <__brkval>
 c38:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 c3c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 c40:	21 15       	cp	r18, r1
 c42:	31 05       	cpc	r19, r1
 c44:	41 f4       	brne	.+16     	; 0xc56 <malloc+0xe8>
 c46:	2d b7       	in	r18, 0x3d	; 61
 c48:	3e b7       	in	r19, 0x3e	; 62
 c4a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 c4e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 c52:	24 1b       	sub	r18, r20
 c54:	35 0b       	sbc	r19, r21
 c56:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <__brkval>
 c5a:	f0 91 05 03 	lds	r31, 0x0305	; 0x800305 <__brkval+0x1>
 c5e:	e2 17       	cp	r30, r18
 c60:	f3 07       	cpc	r31, r19
 c62:	a0 f4       	brcc	.+40     	; 0xc8c <malloc+0x11e>
 c64:	2e 1b       	sub	r18, r30
 c66:	3f 0b       	sbc	r19, r31
 c68:	28 17       	cp	r18, r24
 c6a:	39 07       	cpc	r19, r25
 c6c:	78 f0       	brcs	.+30     	; 0xc8c <malloc+0x11e>
 c6e:	ac 01       	movw	r20, r24
 c70:	4e 5f       	subi	r20, 0xFE	; 254
 c72:	5f 4f       	sbci	r21, 0xFF	; 255
 c74:	24 17       	cp	r18, r20
 c76:	35 07       	cpc	r19, r21
 c78:	48 f0       	brcs	.+18     	; 0xc8c <malloc+0x11e>
 c7a:	4e 0f       	add	r20, r30
 c7c:	5f 1f       	adc	r21, r31
 c7e:	50 93 05 03 	sts	0x0305, r21	; 0x800305 <__brkval+0x1>
 c82:	40 93 04 03 	sts	0x0304, r20	; 0x800304 <__brkval>
 c86:	81 93       	st	Z+, r24
 c88:	91 93       	st	Z+, r25
 c8a:	02 c0       	rjmp	.+4      	; 0xc90 <malloc+0x122>
 c8c:	e0 e0       	ldi	r30, 0x00	; 0
 c8e:	f0 e0       	ldi	r31, 0x00	; 0
 c90:	cf 01       	movw	r24, r30
 c92:	df 91       	pop	r29
 c94:	cf 91       	pop	r28
 c96:	08 95       	ret

00000c98 <free>:
 c98:	0f 93       	push	r16
 c9a:	1f 93       	push	r17
 c9c:	cf 93       	push	r28
 c9e:	df 93       	push	r29
 ca0:	00 97       	sbiw	r24, 0x00	; 0
 ca2:	09 f4       	brne	.+2      	; 0xca6 <free+0xe>
 ca4:	8c c0       	rjmp	.+280    	; 0xdbe <free+0x126>
 ca6:	fc 01       	movw	r30, r24
 ca8:	32 97       	sbiw	r30, 0x02	; 2
 caa:	13 82       	std	Z+3, r1	; 0x03
 cac:	12 82       	std	Z+2, r1	; 0x02
 cae:	00 91 06 03 	lds	r16, 0x0306	; 0x800306 <__flp>
 cb2:	10 91 07 03 	lds	r17, 0x0307	; 0x800307 <__flp+0x1>
 cb6:	01 15       	cp	r16, r1
 cb8:	11 05       	cpc	r17, r1
 cba:	81 f4       	brne	.+32     	; 0xcdc <free+0x44>
 cbc:	20 81       	ld	r18, Z
 cbe:	31 81       	ldd	r19, Z+1	; 0x01
 cc0:	82 0f       	add	r24, r18
 cc2:	93 1f       	adc	r25, r19
 cc4:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <__brkval>
 cc8:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <__brkval+0x1>
 ccc:	28 17       	cp	r18, r24
 cce:	39 07       	cpc	r19, r25
 cd0:	79 f5       	brne	.+94     	; 0xd30 <free+0x98>
 cd2:	f0 93 05 03 	sts	0x0305, r31	; 0x800305 <__brkval+0x1>
 cd6:	e0 93 04 03 	sts	0x0304, r30	; 0x800304 <__brkval>
 cda:	71 c0       	rjmp	.+226    	; 0xdbe <free+0x126>
 cdc:	d8 01       	movw	r26, r16
 cde:	40 e0       	ldi	r20, 0x00	; 0
 ce0:	50 e0       	ldi	r21, 0x00	; 0
 ce2:	ae 17       	cp	r26, r30
 ce4:	bf 07       	cpc	r27, r31
 ce6:	50 f4       	brcc	.+20     	; 0xcfc <free+0x64>
 ce8:	12 96       	adiw	r26, 0x02	; 2
 cea:	2d 91       	ld	r18, X+
 cec:	3c 91       	ld	r19, X
 cee:	13 97       	sbiw	r26, 0x03	; 3
 cf0:	ad 01       	movw	r20, r26
 cf2:	21 15       	cp	r18, r1
 cf4:	31 05       	cpc	r19, r1
 cf6:	09 f1       	breq	.+66     	; 0xd3a <free+0xa2>
 cf8:	d9 01       	movw	r26, r18
 cfa:	f3 cf       	rjmp	.-26     	; 0xce2 <free+0x4a>
 cfc:	9d 01       	movw	r18, r26
 cfe:	da 01       	movw	r26, r20
 d00:	33 83       	std	Z+3, r19	; 0x03
 d02:	22 83       	std	Z+2, r18	; 0x02
 d04:	60 81       	ld	r22, Z
 d06:	71 81       	ldd	r23, Z+1	; 0x01
 d08:	86 0f       	add	r24, r22
 d0a:	97 1f       	adc	r25, r23
 d0c:	82 17       	cp	r24, r18
 d0e:	93 07       	cpc	r25, r19
 d10:	69 f4       	brne	.+26     	; 0xd2c <free+0x94>
 d12:	ec 01       	movw	r28, r24
 d14:	28 81       	ld	r18, Y
 d16:	39 81       	ldd	r19, Y+1	; 0x01
 d18:	26 0f       	add	r18, r22
 d1a:	37 1f       	adc	r19, r23
 d1c:	2e 5f       	subi	r18, 0xFE	; 254
 d1e:	3f 4f       	sbci	r19, 0xFF	; 255
 d20:	31 83       	std	Z+1, r19	; 0x01
 d22:	20 83       	st	Z, r18
 d24:	8a 81       	ldd	r24, Y+2	; 0x02
 d26:	9b 81       	ldd	r25, Y+3	; 0x03
 d28:	93 83       	std	Z+3, r25	; 0x03
 d2a:	82 83       	std	Z+2, r24	; 0x02
 d2c:	45 2b       	or	r20, r21
 d2e:	29 f4       	brne	.+10     	; 0xd3a <free+0xa2>
 d30:	f0 93 07 03 	sts	0x0307, r31	; 0x800307 <__flp+0x1>
 d34:	e0 93 06 03 	sts	0x0306, r30	; 0x800306 <__flp>
 d38:	42 c0       	rjmp	.+132    	; 0xdbe <free+0x126>
 d3a:	13 96       	adiw	r26, 0x03	; 3
 d3c:	fc 93       	st	X, r31
 d3e:	ee 93       	st	-X, r30
 d40:	12 97       	sbiw	r26, 0x02	; 2
 d42:	ed 01       	movw	r28, r26
 d44:	49 91       	ld	r20, Y+
 d46:	59 91       	ld	r21, Y+
 d48:	9e 01       	movw	r18, r28
 d4a:	24 0f       	add	r18, r20
 d4c:	35 1f       	adc	r19, r21
 d4e:	e2 17       	cp	r30, r18
 d50:	f3 07       	cpc	r31, r19
 d52:	71 f4       	brne	.+28     	; 0xd70 <free+0xd8>
 d54:	80 81       	ld	r24, Z
 d56:	91 81       	ldd	r25, Z+1	; 0x01
 d58:	84 0f       	add	r24, r20
 d5a:	95 1f       	adc	r25, r21
 d5c:	02 96       	adiw	r24, 0x02	; 2
 d5e:	11 96       	adiw	r26, 0x01	; 1
 d60:	9c 93       	st	X, r25
 d62:	8e 93       	st	-X, r24
 d64:	82 81       	ldd	r24, Z+2	; 0x02
 d66:	93 81       	ldd	r25, Z+3	; 0x03
 d68:	13 96       	adiw	r26, 0x03	; 3
 d6a:	9c 93       	st	X, r25
 d6c:	8e 93       	st	-X, r24
 d6e:	12 97       	sbiw	r26, 0x02	; 2
 d70:	e0 e0       	ldi	r30, 0x00	; 0
 d72:	f0 e0       	ldi	r31, 0x00	; 0
 d74:	d8 01       	movw	r26, r16
 d76:	12 96       	adiw	r26, 0x02	; 2
 d78:	8d 91       	ld	r24, X+
 d7a:	9c 91       	ld	r25, X
 d7c:	13 97       	sbiw	r26, 0x03	; 3
 d7e:	00 97       	sbiw	r24, 0x00	; 0
 d80:	19 f0       	breq	.+6      	; 0xd88 <free+0xf0>
 d82:	f8 01       	movw	r30, r16
 d84:	8c 01       	movw	r16, r24
 d86:	f6 cf       	rjmp	.-20     	; 0xd74 <free+0xdc>
 d88:	8d 91       	ld	r24, X+
 d8a:	9c 91       	ld	r25, X
 d8c:	98 01       	movw	r18, r16
 d8e:	2e 5f       	subi	r18, 0xFE	; 254
 d90:	3f 4f       	sbci	r19, 0xFF	; 255
 d92:	82 0f       	add	r24, r18
 d94:	93 1f       	adc	r25, r19
 d96:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <__brkval>
 d9a:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <__brkval+0x1>
 d9e:	28 17       	cp	r18, r24
 da0:	39 07       	cpc	r19, r25
 da2:	69 f4       	brne	.+26     	; 0xdbe <free+0x126>
 da4:	30 97       	sbiw	r30, 0x00	; 0
 da6:	29 f4       	brne	.+10     	; 0xdb2 <free+0x11a>
 da8:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <__flp+0x1>
 dac:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <__flp>
 db0:	02 c0       	rjmp	.+4      	; 0xdb6 <free+0x11e>
 db2:	13 82       	std	Z+3, r1	; 0x03
 db4:	12 82       	std	Z+2, r1	; 0x02
 db6:	10 93 05 03 	sts	0x0305, r17	; 0x800305 <__brkval+0x1>
 dba:	00 93 04 03 	sts	0x0304, r16	; 0x800304 <__brkval>
 dbe:	df 91       	pop	r29
 dc0:	cf 91       	pop	r28
 dc2:	1f 91       	pop	r17
 dc4:	0f 91       	pop	r16
 dc6:	08 95       	ret

00000dc8 <strnlen_P>:
 dc8:	fc 01       	movw	r30, r24
 dca:	05 90       	lpm	r0, Z+
 dcc:	61 50       	subi	r22, 0x01	; 1
 dce:	70 40       	sbci	r23, 0x00	; 0
 dd0:	01 10       	cpse	r0, r1
 dd2:	d8 f7       	brcc	.-10     	; 0xdca <strnlen_P+0x2>
 dd4:	80 95       	com	r24
 dd6:	90 95       	com	r25
 dd8:	8e 0f       	add	r24, r30
 dda:	9f 1f       	adc	r25, r31
 ddc:	08 95       	ret

00000dde <memset>:
 dde:	dc 01       	movw	r26, r24
 de0:	01 c0       	rjmp	.+2      	; 0xde4 <memset+0x6>
 de2:	6d 93       	st	X+, r22
 de4:	41 50       	subi	r20, 0x01	; 1
 de6:	50 40       	sbci	r21, 0x00	; 0
 de8:	e0 f7       	brcc	.-8      	; 0xde2 <memset+0x4>
 dea:	08 95       	ret

00000dec <strnlen>:
 dec:	fc 01       	movw	r30, r24
 dee:	61 50       	subi	r22, 0x01	; 1
 df0:	70 40       	sbci	r23, 0x00	; 0
 df2:	01 90       	ld	r0, Z+
 df4:	01 10       	cpse	r0, r1
 df6:	d8 f7       	brcc	.-10     	; 0xdee <strnlen+0x2>
 df8:	80 95       	com	r24
 dfa:	90 95       	com	r25
 dfc:	8e 0f       	add	r24, r30
 dfe:	9f 1f       	adc	r25, r31
 e00:	08 95       	ret

00000e02 <fputc>:
 e02:	0f 93       	push	r16
 e04:	1f 93       	push	r17
 e06:	cf 93       	push	r28
 e08:	df 93       	push	r29
 e0a:	fb 01       	movw	r30, r22
 e0c:	23 81       	ldd	r18, Z+3	; 0x03
 e0e:	21 fd       	sbrc	r18, 1
 e10:	03 c0       	rjmp	.+6      	; 0xe18 <fputc+0x16>
 e12:	8f ef       	ldi	r24, 0xFF	; 255
 e14:	9f ef       	ldi	r25, 0xFF	; 255
 e16:	28 c0       	rjmp	.+80     	; 0xe68 <fputc+0x66>
 e18:	22 ff       	sbrs	r18, 2
 e1a:	16 c0       	rjmp	.+44     	; 0xe48 <fputc+0x46>
 e1c:	46 81       	ldd	r20, Z+6	; 0x06
 e1e:	57 81       	ldd	r21, Z+7	; 0x07
 e20:	24 81       	ldd	r18, Z+4	; 0x04
 e22:	35 81       	ldd	r19, Z+5	; 0x05
 e24:	42 17       	cp	r20, r18
 e26:	53 07       	cpc	r21, r19
 e28:	44 f4       	brge	.+16     	; 0xe3a <fputc+0x38>
 e2a:	a0 81       	ld	r26, Z
 e2c:	b1 81       	ldd	r27, Z+1	; 0x01
 e2e:	9d 01       	movw	r18, r26
 e30:	2f 5f       	subi	r18, 0xFF	; 255
 e32:	3f 4f       	sbci	r19, 0xFF	; 255
 e34:	31 83       	std	Z+1, r19	; 0x01
 e36:	20 83       	st	Z, r18
 e38:	8c 93       	st	X, r24
 e3a:	26 81       	ldd	r18, Z+6	; 0x06
 e3c:	37 81       	ldd	r19, Z+7	; 0x07
 e3e:	2f 5f       	subi	r18, 0xFF	; 255
 e40:	3f 4f       	sbci	r19, 0xFF	; 255
 e42:	37 83       	std	Z+7, r19	; 0x07
 e44:	26 83       	std	Z+6, r18	; 0x06
 e46:	10 c0       	rjmp	.+32     	; 0xe68 <fputc+0x66>
 e48:	eb 01       	movw	r28, r22
 e4a:	09 2f       	mov	r16, r25
 e4c:	18 2f       	mov	r17, r24
 e4e:	00 84       	ldd	r0, Z+8	; 0x08
 e50:	f1 85       	ldd	r31, Z+9	; 0x09
 e52:	e0 2d       	mov	r30, r0
 e54:	19 95       	eicall
 e56:	89 2b       	or	r24, r25
 e58:	e1 f6       	brne	.-72     	; 0xe12 <fputc+0x10>
 e5a:	8e 81       	ldd	r24, Y+6	; 0x06
 e5c:	9f 81       	ldd	r25, Y+7	; 0x07
 e5e:	01 96       	adiw	r24, 0x01	; 1
 e60:	9f 83       	std	Y+7, r25	; 0x07
 e62:	8e 83       	std	Y+6, r24	; 0x06
 e64:	81 2f       	mov	r24, r17
 e66:	90 2f       	mov	r25, r16
 e68:	df 91       	pop	r29
 e6a:	cf 91       	pop	r28
 e6c:	1f 91       	pop	r17
 e6e:	0f 91       	pop	r16
 e70:	08 95       	ret

00000e72 <__ultoa_invert>:
 e72:	fa 01       	movw	r30, r20
 e74:	aa 27       	eor	r26, r26
 e76:	28 30       	cpi	r18, 0x08	; 8
 e78:	51 f1       	breq	.+84     	; 0xece <__ultoa_invert+0x5c>
 e7a:	20 31       	cpi	r18, 0x10	; 16
 e7c:	81 f1       	breq	.+96     	; 0xede <__ultoa_invert+0x6c>
 e7e:	e8 94       	clt
 e80:	6f 93       	push	r22
 e82:	6e 7f       	andi	r22, 0xFE	; 254
 e84:	6e 5f       	subi	r22, 0xFE	; 254
 e86:	7f 4f       	sbci	r23, 0xFF	; 255
 e88:	8f 4f       	sbci	r24, 0xFF	; 255
 e8a:	9f 4f       	sbci	r25, 0xFF	; 255
 e8c:	af 4f       	sbci	r26, 0xFF	; 255
 e8e:	b1 e0       	ldi	r27, 0x01	; 1
 e90:	3e d0       	rcall	.+124    	; 0xf0e <__ultoa_invert+0x9c>
 e92:	b4 e0       	ldi	r27, 0x04	; 4
 e94:	3c d0       	rcall	.+120    	; 0xf0e <__ultoa_invert+0x9c>
 e96:	67 0f       	add	r22, r23
 e98:	78 1f       	adc	r23, r24
 e9a:	89 1f       	adc	r24, r25
 e9c:	9a 1f       	adc	r25, r26
 e9e:	a1 1d       	adc	r26, r1
 ea0:	68 0f       	add	r22, r24
 ea2:	79 1f       	adc	r23, r25
 ea4:	8a 1f       	adc	r24, r26
 ea6:	91 1d       	adc	r25, r1
 ea8:	a1 1d       	adc	r26, r1
 eaa:	6a 0f       	add	r22, r26
 eac:	71 1d       	adc	r23, r1
 eae:	81 1d       	adc	r24, r1
 eb0:	91 1d       	adc	r25, r1
 eb2:	a1 1d       	adc	r26, r1
 eb4:	20 d0       	rcall	.+64     	; 0xef6 <__ultoa_invert+0x84>
 eb6:	09 f4       	brne	.+2      	; 0xeba <__ultoa_invert+0x48>
 eb8:	68 94       	set
 eba:	3f 91       	pop	r19
 ebc:	2a e0       	ldi	r18, 0x0A	; 10
 ebe:	26 9f       	mul	r18, r22
 ec0:	11 24       	eor	r1, r1
 ec2:	30 19       	sub	r19, r0
 ec4:	30 5d       	subi	r19, 0xD0	; 208
 ec6:	31 93       	st	Z+, r19
 ec8:	de f6       	brtc	.-74     	; 0xe80 <__ultoa_invert+0xe>
 eca:	cf 01       	movw	r24, r30
 ecc:	08 95       	ret
 ece:	46 2f       	mov	r20, r22
 ed0:	47 70       	andi	r20, 0x07	; 7
 ed2:	40 5d       	subi	r20, 0xD0	; 208
 ed4:	41 93       	st	Z+, r20
 ed6:	b3 e0       	ldi	r27, 0x03	; 3
 ed8:	0f d0       	rcall	.+30     	; 0xef8 <__ultoa_invert+0x86>
 eda:	c9 f7       	brne	.-14     	; 0xece <__ultoa_invert+0x5c>
 edc:	f6 cf       	rjmp	.-20     	; 0xeca <__ultoa_invert+0x58>
 ede:	46 2f       	mov	r20, r22
 ee0:	4f 70       	andi	r20, 0x0F	; 15
 ee2:	40 5d       	subi	r20, 0xD0	; 208
 ee4:	4a 33       	cpi	r20, 0x3A	; 58
 ee6:	18 f0       	brcs	.+6      	; 0xeee <__ultoa_invert+0x7c>
 ee8:	49 5d       	subi	r20, 0xD9	; 217
 eea:	31 fd       	sbrc	r19, 1
 eec:	40 52       	subi	r20, 0x20	; 32
 eee:	41 93       	st	Z+, r20
 ef0:	02 d0       	rcall	.+4      	; 0xef6 <__ultoa_invert+0x84>
 ef2:	a9 f7       	brne	.-22     	; 0xede <__ultoa_invert+0x6c>
 ef4:	ea cf       	rjmp	.-44     	; 0xeca <__ultoa_invert+0x58>
 ef6:	b4 e0       	ldi	r27, 0x04	; 4
 ef8:	a6 95       	lsr	r26
 efa:	97 95       	ror	r25
 efc:	87 95       	ror	r24
 efe:	77 95       	ror	r23
 f00:	67 95       	ror	r22
 f02:	ba 95       	dec	r27
 f04:	c9 f7       	brne	.-14     	; 0xef8 <__ultoa_invert+0x86>
 f06:	00 97       	sbiw	r24, 0x00	; 0
 f08:	61 05       	cpc	r22, r1
 f0a:	71 05       	cpc	r23, r1
 f0c:	08 95       	ret
 f0e:	9b 01       	movw	r18, r22
 f10:	ac 01       	movw	r20, r24
 f12:	0a 2e       	mov	r0, r26
 f14:	06 94       	lsr	r0
 f16:	57 95       	ror	r21
 f18:	47 95       	ror	r20
 f1a:	37 95       	ror	r19
 f1c:	27 95       	ror	r18
 f1e:	ba 95       	dec	r27
 f20:	c9 f7       	brne	.-14     	; 0xf14 <__ultoa_invert+0xa2>
 f22:	62 0f       	add	r22, r18
 f24:	73 1f       	adc	r23, r19
 f26:	84 1f       	adc	r24, r20
 f28:	95 1f       	adc	r25, r21
 f2a:	a0 1d       	adc	r26, r0
 f2c:	08 95       	ret

00000f2e <_exit>:
 f2e:	f8 94       	cli

00000f30 <__stop_program>:
 f30:	ff cf       	rjmp	.-2      	; 0xf30 <__stop_program>
