
NODE2atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800200  00000d48  00000ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  008002de  008002de  00000eba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001baa  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ce  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aea  00000000  00000000  00003ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  000049e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078b  00000000  00000000  00004cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000792  00000000  00000000  00005447  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005bd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	30 c1       	rjmp	.+608    	; 0x26e <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e4       	ldi	r30, 0x48	; 72
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 3d       	cpi	r26, 0xDE	; 222
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae ed       	ldi	r26, 0xDE	; 222
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 3e       	cpi	r26, 0xEB	; 235
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ce d0       	rcall	.+412    	; 0x2bc <main>
 120:	11 c6       	rjmp	.+3106   	; 0xd44 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:
			return -1;
		}
	}
	
	return 0;
}
 124:	48 d1       	rcall	.+656    	; 0x3b6 <MCP_init>
 126:	48 e6       	ldi	r20, 0x68	; 104
 128:	60 e6       	ldi	r22, 0x60	; 96
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	5d d1       	rcall	.+698    	; 0x3e8 <MCP_bit_modify>
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	63 e0       	ldi	r22, 0x03	; 3
 132:	8b e2       	ldi	r24, 0x2B	; 43
 134:	59 d1       	rcall	.+690    	; 0x3e8 <MCP_bit_modify>
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	60 ee       	ldi	r22, 0xE0	; 224
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	55 d1       	rcall	.+682    	; 0x3e8 <MCP_bit_modify>
 13e:	8e e0       	ldi	r24, 0x0E	; 14
 140:	28 d1       	rcall	.+592    	; 0x392 <MCP_read>
 142:	80 7e       	andi	r24, 0xE0	; 224
 144:	51 f0       	breq	.+20     	; 0x15a <CAN_init+0x36>
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	9f 93       	push	r25
 14c:	8f 93       	push	r24
 14e:	ff d1       	rcall	.+1022   	; 0x54e <printf>
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	08 95       	ret
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 95       	ret

00000160 <CAN_int_vect>:
	}
}

 int CAN_int_vect(void) {
 	//Clear interrupt flag
  	MCP_bit_modify(MCP_CANINTF, MCP_RXF0SIDL, MCP_RXF0SIDH);
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	8c e2       	ldi	r24, 0x2C	; 44
 166:	40 d1       	rcall	.+640    	; 0x3e8 <MCP_bit_modify>
  	rx_flag = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <__data_end>
 	return 0;
 }
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret

00000174 <CAN_data_receive>:



can_msg CAN_data_receive(void) {
 174:	9f 92       	push	r9
 176:	af 92       	push	r10
 178:	bf 92       	push	r11
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	2b 97       	sbiw	r28, 0x0b	; 11
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
 19a:	5c 01       	movw	r10, r24
	printf("asdfassdf\n\r");
 19c:	8a e2       	ldi	r24, 0x2A	; 42
 19e:	92 e0       	ldi	r25, 0x02	; 2
 1a0:	9f 93       	push	r25
 1a2:	8f 93       	push	r24
 1a4:	d4 d1       	rcall	.+936    	; 0x54e <printf>
	uint8_t i;
	can_msg message = {0};
 1a6:	fe 01       	movw	r30, r28
 1a8:	31 96       	adiw	r30, 0x01	; 1
 1aa:	8b e0       	ldi	r24, 0x0B	; 11
 1ac:	df 01       	movw	r26, r30
 1ae:	1d 92       	st	X+, r1
 1b0:	8a 95       	dec	r24
 1b2:	e9 f7       	brne	.-6      	; 0x1ae <CAN_data_receive+0x3a>
	
	//Check if RX buffer has a message
	if (rx_flag == 1) {
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <__data_end>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	b1 f5       	brne	.+108    	; 0x22c <CAN_data_receive+0xb8>
		
		//Get message id
		message.id  = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
 1c0:	81 e6       	ldi	r24, 0x61	; 97
 1c2:	e7 d0       	rcall	.+462    	; 0x392 <MCP_read>
 1c4:	c8 2e       	mov	r12, r24
 1c6:	82 e6       	ldi	r24, 0x62	; 98
 1c8:	e4 d0       	rcall	.+456    	; 0x392 <MCP_read>
 1ca:	82 95       	swap	r24
 1cc:	86 95       	lsr	r24
 1ce:	87 70       	andi	r24, 0x07	; 7
 1d0:	d1 2c       	mov	r13, r1
 1d2:	cc 0c       	add	r12, r12
 1d4:	dd 1c       	adc	r13, r13
 1d6:	cc 0c       	add	r12, r12
 1d8:	dd 1c       	adc	r13, r13
 1da:	cc 0c       	add	r12, r12
 1dc:	dd 1c       	adc	r13, r13
 1de:	c8 2a       	or	r12, r24
		
		//Get message length
		//message.length = (MCP_CANCTRL) & (MCP_read(MCP_RXB0DLC));
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
 1e0:	85 e6       	ldi	r24, 0x65	; 101
 1e2:	d7 d0       	rcall	.+430    	; 0x392 <MCP_read>
 1e4:	08 2f       	mov	r16, r24
 1e6:	0f 70       	andi	r16, 0x0F	; 15
		printf("len %d\n\r", message.length);
 1e8:	1f 92       	push	r1
 1ea:	0f 93       	push	r16
 1ec:	86 e3       	ldi	r24, 0x36	; 54
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	9f 93       	push	r25
 1f2:	8f 93       	push	r24
 1f4:	ac d1       	rcall	.+856    	; 0x54e <printf>
		
		//Get message data
		for(i = 0; i < message.length; i++) {
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	00 23       	and	r16, r16
 200:	91 f0       	breq	.+36     	; 0x226 <CAN_data_receive+0xb2>
 202:	7e 01       	movw	r14, r28
 204:	b4 e0       	ldi	r27, 0x04	; 4
 206:	eb 0e       	add	r14, r27
 208:	f1 1c       	adc	r15, r1
 20a:	0f 2e       	mov	r0, r31
 20c:	f6 e6       	ldi	r31, 0x66	; 102
 20e:	9f 2e       	mov	r9, r31
 210:	f0 2d       	mov	r31, r0
 212:	90 0e       	add	r9, r16
 214:	16 e6       	ldi	r17, 0x66	; 102
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
 216:	81 2f       	mov	r24, r17
 218:	bc d0       	rcall	.+376    	; 0x392 <MCP_read>
 21a:	f7 01       	movw	r30, r14
 21c:	81 93       	st	Z+, r24
 21e:	7f 01       	movw	r14, r30
 220:	1f 5f       	subi	r17, 0xFF	; 255
		//message.length = (MCP_CANCTRL) & (MCP_read(MCP_RXB0DLC));
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
		printf("len %d\n\r", message.length);
		
		//Get message data
		for(i = 0; i < message.length; i++) {
 222:	19 11       	cpse	r17, r9
 224:	f8 cf       	rjmp	.-16     	; 0x216 <CAN_data_receive+0xa2>
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Clear interrupt flag
		rx_flag = 0;
 226:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <__data_end>
 22a:	03 c0       	rjmp	.+6      	; 0x232 <CAN_data_receive+0xbe>


can_msg CAN_data_receive(void) {
	printf("asdfassdf\n\r");
	uint8_t i;
	can_msg message = {0};
 22c:	00 e0       	ldi	r16, 0x00	; 0
 22e:	c1 2c       	mov	r12, r1
 230:	d1 2c       	mov	r13, r1
		//} else {
		//Message not received
		//message.id = -1;
	//}
	
	return message;
 232:	da 82       	std	Y+2, r13	; 0x02
 234:	c9 82       	std	Y+1, r12	; 0x01
 236:	0b 83       	std	Y+3, r16	; 0x03
 238:	8b e0       	ldi	r24, 0x0B	; 11
 23a:	fe 01       	movw	r30, r28
 23c:	31 96       	adiw	r30, 0x01	; 1
 23e:	d5 01       	movw	r26, r10
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	8a 95       	dec	r24
 246:	e1 f7       	brne	.-8      	; 0x240 <CAN_data_receive+0xcc>
}
 248:	c5 01       	movw	r24, r10
 24a:	2b 96       	adiw	r28, 0x0b	; 11
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	df 90       	pop	r13
 264:	cf 90       	pop	r12
 266:	bf 90       	pop	r11
 268:	af 90       	pop	r10
 26a:	9f 90       	pop	r9
 26c:	08 95       	ret

0000026e <__vector_3>:

//Interrupt service routine for CAN bus
ISR(INT2_vect) {
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	0b b6       	in	r0, 0x3b	; 59
 27a:	0f 92       	push	r0
 27c:	2f 93       	push	r18
 27e:	3f 93       	push	r19
 280:	4f 93       	push	r20
 282:	5f 93       	push	r21
 284:	6f 93       	push	r22
 286:	7f 93       	push	r23
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
//	_delay_ms(10);
	CAN_int_vect();
 294:	65 df       	rcall	.-310    	; 0x160 <CAN_int_vect>
// 	else if (interrupt & MCP_RX1IF){
// 		rx_flag = 1;
// 		// clear CANINTF.RX1IF
// 		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
// 	}
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0b be       	out	0x3b, r0	; 59
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <main>:
	
	uint8_t x, y;
	uint8_t i=0;
	

    int main(void){
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	2b 97       	sbiw	r28, 0x0b	; 11
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
		
		cli();
 2d0:	f8 94       	cli
		
		
		
		EICRA |= (0 << ISC21) | (0 << ISC20);
 2d2:	e9 e6       	ldi	r30, 0x69	; 105
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	80 83       	st	Z, r24
		// Enable external interrupts of INT2
		EIMSK |= (1 << INT2);
 2da:	ea 9a       	sbi	0x1d, 2	; 29
		
		DDRD &= ~(1 << PIND2);		//Set D2(INT2) as input
 2dc:	52 98       	cbi	0x0a, 2	; 10
		int variabel = 1;
		
		can_msg can_msg_send;
		can_msg can_msg_receive;
		
		UART_Init(UBRREG);
 2de:	87 e6       	ldi	r24, 0x67	; 103
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	d8 d0       	rcall	.+432    	; 0x494 <UART_Init>
// 		SPI_init();
// 		MCP_init();

		if (CAN_init() == 0) {
 2e4:	1f df       	rcall	.-450    	; 0x124 <CAN_init>
 2e6:	89 2b       	or	r24, r25
 2e8:	41 f4       	brne	.+16     	; 0x2fa <main+0x3e>
			printf("CAN BE WORKING\n\r");
 2ea:	8f e3       	ldi	r24, 0x3F	; 63
 2ec:	92 e0       	ldi	r25, 0x02	; 2
 2ee:	9f 93       	push	r25
 2f0:	8f 93       	push	r24
 2f2:	2d d1       	rcall	.+602    	; 0x54e <printf>
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	07 c0       	rjmp	.+14     	; 0x308 <main+0x4c>
			can_msg_send.id = 2;
			can_msg_send.length = 8;
			} else {
			printf("CAN NOT BE WORKING \n\r");
 2fa:	80 e5       	ldi	r24, 0x50	; 80
 2fc:	92 e0       	ldi	r25, 0x02	; 2
 2fe:	9f 93       	push	r25
 300:	8f 93       	push	r24
 302:	25 d1       	rcall	.+586    	; 0x54e <printf>
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
		}

		sei();
 308:	78 94       	sei

	while(1){

			printf("loopyloop \n\r");
 30a:	0f 2e       	mov	r0, r31
 30c:	f6 e6       	ldi	r31, 0x66	; 102
 30e:	cf 2e       	mov	r12, r31
 310:	f2 e0       	ldi	r31, 0x02	; 2
 312:	df 2e       	mov	r13, r31
 314:	f0 2d       	mov	r31, r0
	
// 			
// 			can_msg_receive = CAN_data_receive();
// 			x=can_msg_receive.data[0];
// 			y=can_msg_receive.data[1];
			printf("y1 er %02x \n\r",x);
 316:	0f 2e       	mov	r0, r31
 318:	f3 e7       	ldi	r31, 0x73	; 115
 31a:	ef 2e       	mov	r14, r31
 31c:	f2 e0       	ldi	r31, 0x02	; 2
 31e:	ff 2e       	mov	r15, r31
 320:	f0 2d       	mov	r31, r0
			printf("y2 er %02x \n\r",y);
 322:	01 e8       	ldi	r16, 0x81	; 129
 324:	12 e0       	ldi	r17, 0x02	; 2

		sei();

	while(1){

			printf("loopyloop \n\r");
 326:	df 92       	push	r13
 328:	cf 92       	push	r12
 32a:	11 d1       	rcall	.+546    	; 0x54e <printf>
// 				i=0;
// 			}
// 			can_msg_send.data[1] = i;
// 			
// 			CAN_message_send(&can_msg_send);
			can_msg_receive = CAN_data_receive();
 32c:	ce 01       	movw	r24, r28
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	21 df       	rcall	.-446    	; 0x174 <CAN_data_receive>
			x=can_msg_receive.data[0];
 332:	8c 81       	ldd	r24, Y+4	; 0x04
 334:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <x>
			y=can_msg_receive.data[1];
 338:	9d 81       	ldd	r25, Y+5	; 0x05
 33a:	90 93 e0 02 	sts	0x02E0, r25	; 0x8002e0 <y>
	
// 			
// 			can_msg_receive = CAN_data_receive();
// 			x=can_msg_receive.data[0];
// 			y=can_msg_receive.data[1];
			printf("y1 er %02x \n\r",x);
 33e:	1f 92       	push	r1
 340:	8f 93       	push	r24
 342:	ff 92       	push	r15
 344:	ef 92       	push	r14
 346:	03 d1       	rcall	.+518    	; 0x54e <printf>
			printf("y2 er %02x \n\r",y);
 348:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <y>
 34c:	1f 92       	push	r1
 34e:	8f 93       	push	r24
 350:	1f 93       	push	r17
 352:	0f 93       	push	r16
 354:	fc d0       	rcall	.+504    	; 0x54e <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	84 e3       	ldi	r24, 0x34	; 52
 35a:	9c e0       	ldi	r25, 0x0C	; 12
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0xa0>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0xaa>
 366:	00 00       	nop
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	d9 cf       	rjmp	.-78     	; 0x326 <main+0x6a>

00000374 <MCP_reset>:
	SPI_send(MCP_READ_STATUS);
	uint8_t status = SPI_send(0);
	SPI_set_ss(1);
	
	return status;
}
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	71 d0       	rcall	.+226    	; 0x45c <SPI_set_ss>
 37a:	80 ec       	ldi	r24, 0xC0	; 192
 37c:	69 d0       	rcall	.+210    	; 0x450 <SPI_send>
 37e:	8f e1       	ldi	r24, 0x1F	; 31
 380:	93 e0       	ldi	r25, 0x03	; 3
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <MCP_reset+0xe>
 386:	00 c0       	rjmp	.+0      	; 0x388 <MCP_reset+0x14>
 388:	00 00       	nop
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	66 c0       	rjmp	.+204    	; 0x45c <SPI_set_ss>
 390:	08 95       	ret

00000392 <MCP_read>:
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	60 d0       	rcall	.+192    	; 0x45c <SPI_set_ss>
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	58 d0       	rcall	.+176    	; 0x450 <SPI_send>
 3a0:	8c 2f       	mov	r24, r28
 3a2:	56 d0       	rcall	.+172    	; 0x450 <SPI_send>
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	54 d0       	rcall	.+168    	; 0x450 <SPI_send>
 3a8:	c8 2f       	mov	r28, r24
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	56 d0       	rcall	.+172    	; 0x45c <SPI_set_ss>
 3b0:	8c 2f       	mov	r24, r28
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <MCP_init>:
 3b6:	30 d0       	rcall	.+96     	; 0x418 <SPI_init>
 3b8:	dd df       	rcall	.-70     	; 0x374 <MCP_reset>
 3ba:	8f e8       	ldi	r24, 0x8F	; 143
 3bc:	92 e0       	ldi	r25, 0x02	; 2
 3be:	9f 93       	push	r25
 3c0:	8f 93       	push	r24
 3c2:	c5 d0       	rcall	.+394    	; 0x54e <printf>
 3c4:	8e e0       	ldi	r24, 0x0E	; 14
 3c6:	e5 df       	rcall	.-54     	; 0x392 <MCP_read>
 3c8:	80 7e       	andi	r24, 0xE0	; 224
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	80 38       	cpi	r24, 0x80	; 128
 3d0:	49 f0       	breq	.+18     	; 0x3e4 <MCP_init+0x2e>
 3d2:	89 e9       	ldi	r24, 0x99	; 153
 3d4:	92 e0       	ldi	r25, 0x02	; 2
 3d6:	9f 93       	push	r25
 3d8:	8f 93       	push	r24
 3da:	b9 d0       	rcall	.+370    	; 0x54e <printf>
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	08 95       	ret
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	08 95       	ret

000003e8 <MCP_bit_modify>:

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 3e8:	1f 93       	push	r17
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	18 2f       	mov	r17, r24
 3f0:	d6 2f       	mov	r29, r22
 3f2:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	31 d0       	rcall	.+98     	; 0x45c <SPI_set_ss>
	SPI_send(MCP_BITMOD);
 3fa:	85 e0       	ldi	r24, 0x05	; 5
 3fc:	29 d0       	rcall	.+82     	; 0x450 <SPI_send>
	
	SPI_send(address);
 3fe:	81 2f       	mov	r24, r17
 400:	27 d0       	rcall	.+78     	; 0x450 <SPI_send>
	SPI_send(mask);
 402:	8d 2f       	mov	r24, r29
 404:	25 d0       	rcall	.+74     	; 0x450 <SPI_send>
	SPI_send(data);
 406:	8c 2f       	mov	r24, r28
 408:	23 d0       	rcall	.+70     	; 0x450 <SPI_send>
	
	SPI_set_ss(1);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	26 d0       	rcall	.+76     	; 0x45c <SPI_set_ss>
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	1f 91       	pop	r17
 416:	08 95       	ret

00000418 <SPI_init>:
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
	
	return SPDR;
}
 418:	8b eb       	ldi	r24, 0xBB	; 187
 41a:	92 e0       	ldi	r25, 0x02	; 2
 41c:	9f 93       	push	r25
 41e:	8f 93       	push	r24
 420:	96 d0       	rcall	.+300    	; 0x54e <printf>
 422:	84 b1       	in	r24, 0x04	; 4
 424:	87 68       	ori	r24, 0x87	; 135
 426:	84 b9       	out	0x04, r24	; 4
 428:	23 98       	cbi	0x04, 3	; 4
 42a:	89 ec       	ldi	r24, 0xC9	; 201
 42c:	92 e0       	ldi	r25, 0x02	; 2
 42e:	9f 93       	push	r25
 430:	8f 93       	push	r24
 432:	8d d0       	rcall	.+282    	; 0x54e <printf>
 434:	81 e5       	ldi	r24, 0x51	; 81
 436:	8c bd       	out	0x2c, r24	; 44
 438:	83 ed       	ldi	r24, 0xD3	; 211
 43a:	92 e0       	ldi	r25, 0x02	; 2
 43c:	9f 93       	push	r25
 43e:	8f 93       	push	r24
 440:	86 d0       	rcall	.+268    	; 0x54e <printf>
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	08 95       	ret

00000450 <SPI_send>:
 450:	8e bd       	out	0x2e, r24	; 46
 452:	0d b4       	in	r0, 0x2d	; 45
 454:	07 fe       	sbrs	r0, 7
 456:	fd cf       	rjmp	.-6      	; 0x452 <SPI_send+0x2>
 458:	8e b5       	in	r24, 0x2e	; 46
 45a:	08 95       	ret

0000045c <SPI_set_ss>:


void SPI_set_ss( int select )
{
	//for ATmega 162 set chip-select
	if (select == 1){
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	91 05       	cpc	r25, r1
 460:	11 f4       	brne	.+4      	; 0x466 <SPI_set_ss+0xa>
		set_bit(PORTB, SPI_SS);
 462:	2f 9a       	sbi	0x05, 7	; 5
 464:	08 95       	ret
	}
	else if (select == 0){
 466:	89 2b       	or	r24, r25
 468:	09 f4       	brne	.+2      	; 0x46c <SPI_set_ss+0x10>
		clear_bit(PORTB, SPI_SS);
 46a:	2f 98       	cbi	0x05, 7	; 5
 46c:	08 95       	ret

0000046e <UART_TX>:
}

int UART_TX(char data, FILE * _in){
	(void)(_in);
	
	while( !(UCSR0A & (1 << UDRE0)) );
 46e:	e0 ec       	ldi	r30, 0xC0	; 192
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	90 81       	ld	r25, Z
 474:	95 ff       	sbrs	r25, 5
 476:	fd cf       	rjmp	.-6      	; 0x472 <UART_TX+0x4>
	
	// send data
	UDR0 = data;
 478:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	
	return 0;
}
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	08 95       	ret

00000482 <UART_RX>:

int UART_RX(FILE * _in ){
	(void)(_in);
	while( !(UCSR0A & (1 << RXC0)) );
 482:	e0 ec       	ldi	r30, 0xC0	; 192
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	88 23       	and	r24, r24
 48a:	ec f7       	brge	.-6      	; 0x486 <UART_RX+0x4>
	
	// Data recieved
	return UDR0;
 48c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	08 95       	ret

00000494 <UART_Init>:


void UART_Init(unsigned int ubrr)
{
	// Baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 494:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)(ubrr);
 498:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	// Enable Rx and Tx
	
	UCSR0B = (1 << RXEN0 ) | (1 << TXEN0);
 49c:	88 e1       	ldi	r24, 0x18	; 24
 49e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1 << USBS0);
 4a2:	e2 ec       	ldi	r30, 0xC2	; 194
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	88 e0       	ldi	r24, 0x08	; 8
 4a8:	80 83       	st	Z, r24
	UCSR0C = (3 << UCSZ00);
 4aa:	86 e0       	ldi	r24, 0x06	; 6
 4ac:	80 83       	st	Z, r24
	
	

	
	fdevopen(UART_TX, UART_RX);
 4ae:	61 e4       	ldi	r22, 0x41	; 65
 4b0:	72 e0       	ldi	r23, 0x02	; 2
 4b2:	87 e3       	ldi	r24, 0x37	; 55
 4b4:	92 e0       	ldi	r25, 0x02	; 2
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <fdevopen>
 4b8:	08 95       	ret

000004ba <fdevopen>:
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	00 97       	sbiw	r24, 0x00	; 0
 4c4:	31 f4       	brne	.+12     	; 0x4d2 <fdevopen+0x18>
 4c6:	61 15       	cp	r22, r1
 4c8:	71 05       	cpc	r23, r1
 4ca:	19 f4       	brne	.+6      	; 0x4d2 <fdevopen+0x18>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	39 c0       	rjmp	.+114    	; 0x544 <fdevopen+0x8a>
 4d2:	8b 01       	movw	r16, r22
 4d4:	ec 01       	movw	r28, r24
 4d6:	6e e0       	ldi	r22, 0x0E	; 14
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	38 d2       	rcall	.+1136   	; 0x950 <calloc>
 4e0:	fc 01       	movw	r30, r24
 4e2:	89 2b       	or	r24, r25
 4e4:	99 f3       	breq	.-26     	; 0x4cc <fdevopen+0x12>
 4e6:	80 e8       	ldi	r24, 0x80	; 128
 4e8:	83 83       	std	Z+3, r24	; 0x03
 4ea:	01 15       	cp	r16, r1
 4ec:	11 05       	cpc	r17, r1
 4ee:	71 f0       	breq	.+28     	; 0x50c <fdevopen+0x52>
 4f0:	13 87       	std	Z+11, r17	; 0x0b
 4f2:	02 87       	std	Z+10, r16	; 0x0a
 4f4:	81 e8       	ldi	r24, 0x81	; 129
 4f6:	83 83       	std	Z+3, r24	; 0x03
 4f8:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <__iob>
 4fc:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <__iob+0x1>
 500:	89 2b       	or	r24, r25
 502:	21 f4       	brne	.+8      	; 0x50c <fdevopen+0x52>
 504:	f0 93 e2 02 	sts	0x02E2, r31	; 0x8002e2 <__iob+0x1>
 508:	e0 93 e1 02 	sts	0x02E1, r30	; 0x8002e1 <__iob>
 50c:	20 97       	sbiw	r28, 0x00	; 0
 50e:	c9 f0       	breq	.+50     	; 0x542 <fdevopen+0x88>
 510:	d1 87       	std	Z+9, r29	; 0x09
 512:	c0 87       	std	Z+8, r28	; 0x08
 514:	83 81       	ldd	r24, Z+3	; 0x03
 516:	82 60       	ori	r24, 0x02	; 2
 518:	83 83       	std	Z+3, r24	; 0x03
 51a:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <__iob+0x2>
 51e:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <__iob+0x3>
 522:	89 2b       	or	r24, r25
 524:	71 f4       	brne	.+28     	; 0x542 <fdevopen+0x88>
 526:	f0 93 e4 02 	sts	0x02E4, r31	; 0x8002e4 <__iob+0x3>
 52a:	e0 93 e3 02 	sts	0x02E3, r30	; 0x8002e3 <__iob+0x2>
 52e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <__iob+0x4>
 532:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <__iob+0x5>
 536:	89 2b       	or	r24, r25
 538:	21 f4       	brne	.+8      	; 0x542 <fdevopen+0x88>
 53a:	f0 93 e6 02 	sts	0x02E6, r31	; 0x8002e6 <__iob+0x5>
 53e:	e0 93 e5 02 	sts	0x02E5, r30	; 0x8002e5 <__iob+0x4>
 542:	cf 01       	movw	r24, r30
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	08 95       	ret

0000054e <printf>:
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	cd b7       	in	r28, 0x3d	; 61
 554:	de b7       	in	r29, 0x3e	; 62
 556:	ae 01       	movw	r20, r28
 558:	4a 5f       	subi	r20, 0xFA	; 250
 55a:	5f 4f       	sbci	r21, 0xFF	; 255
 55c:	fa 01       	movw	r30, r20
 55e:	61 91       	ld	r22, Z+
 560:	71 91       	ld	r23, Z+
 562:	af 01       	movw	r20, r30
 564:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <__iob+0x2>
 568:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <__iob+0x3>
 56c:	03 d0       	rcall	.+6      	; 0x574 <vfprintf>
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <vfprintf>:
 574:	2f 92       	push	r2
 576:	3f 92       	push	r3
 578:	4f 92       	push	r4
 57a:	5f 92       	push	r5
 57c:	6f 92       	push	r6
 57e:	7f 92       	push	r7
 580:	8f 92       	push	r8
 582:	9f 92       	push	r9
 584:	af 92       	push	r10
 586:	bf 92       	push	r11
 588:	cf 92       	push	r12
 58a:	df 92       	push	r13
 58c:	ef 92       	push	r14
 58e:	ff 92       	push	r15
 590:	0f 93       	push	r16
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	2c 97       	sbiw	r28, 0x0c	; 12
 59e:	0f b6       	in	r0, 0x3f	; 63
 5a0:	f8 94       	cli
 5a2:	de bf       	out	0x3e, r29	; 62
 5a4:	0f be       	out	0x3f, r0	; 63
 5a6:	cd bf       	out	0x3d, r28	; 61
 5a8:	7c 01       	movw	r14, r24
 5aa:	6b 01       	movw	r12, r22
 5ac:	8a 01       	movw	r16, r20
 5ae:	fc 01       	movw	r30, r24
 5b0:	17 82       	std	Z+7, r1	; 0x07
 5b2:	16 82       	std	Z+6, r1	; 0x06
 5b4:	83 81       	ldd	r24, Z+3	; 0x03
 5b6:	81 ff       	sbrs	r24, 1
 5b8:	b0 c1       	rjmp	.+864    	; 0x91a <vfprintf+0x3a6>
 5ba:	ce 01       	movw	r24, r28
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	4c 01       	movw	r8, r24
 5c0:	f7 01       	movw	r30, r14
 5c2:	93 81       	ldd	r25, Z+3	; 0x03
 5c4:	f6 01       	movw	r30, r12
 5c6:	93 fd       	sbrc	r25, 3
 5c8:	85 91       	lpm	r24, Z+
 5ca:	93 ff       	sbrs	r25, 3
 5cc:	81 91       	ld	r24, Z+
 5ce:	6f 01       	movw	r12, r30
 5d0:	88 23       	and	r24, r24
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <vfprintf+0x62>
 5d4:	9e c1       	rjmp	.+828    	; 0x912 <vfprintf+0x39e>
 5d6:	85 32       	cpi	r24, 0x25	; 37
 5d8:	39 f4       	brne	.+14     	; 0x5e8 <vfprintf+0x74>
 5da:	93 fd       	sbrc	r25, 3
 5dc:	85 91       	lpm	r24, Z+
 5de:	93 ff       	sbrs	r25, 3
 5e0:	81 91       	ld	r24, Z+
 5e2:	6f 01       	movw	r12, r30
 5e4:	85 32       	cpi	r24, 0x25	; 37
 5e6:	21 f4       	brne	.+8      	; 0x5f0 <vfprintf+0x7c>
 5e8:	b7 01       	movw	r22, r14
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	15 d3       	rcall	.+1578   	; 0xc18 <fputc>
 5ee:	e8 cf       	rjmp	.-48     	; 0x5c0 <vfprintf+0x4c>
 5f0:	51 2c       	mov	r5, r1
 5f2:	31 2c       	mov	r3, r1
 5f4:	20 e0       	ldi	r18, 0x00	; 0
 5f6:	20 32       	cpi	r18, 0x20	; 32
 5f8:	a0 f4       	brcc	.+40     	; 0x622 <vfprintf+0xae>
 5fa:	8b 32       	cpi	r24, 0x2B	; 43
 5fc:	69 f0       	breq	.+26     	; 0x618 <vfprintf+0xa4>
 5fe:	30 f4       	brcc	.+12     	; 0x60c <vfprintf+0x98>
 600:	80 32       	cpi	r24, 0x20	; 32
 602:	59 f0       	breq	.+22     	; 0x61a <vfprintf+0xa6>
 604:	83 32       	cpi	r24, 0x23	; 35
 606:	69 f4       	brne	.+26     	; 0x622 <vfprintf+0xae>
 608:	20 61       	ori	r18, 0x10	; 16
 60a:	2c c0       	rjmp	.+88     	; 0x664 <vfprintf+0xf0>
 60c:	8d 32       	cpi	r24, 0x2D	; 45
 60e:	39 f0       	breq	.+14     	; 0x61e <vfprintf+0xaa>
 610:	80 33       	cpi	r24, 0x30	; 48
 612:	39 f4       	brne	.+14     	; 0x622 <vfprintf+0xae>
 614:	21 60       	ori	r18, 0x01	; 1
 616:	26 c0       	rjmp	.+76     	; 0x664 <vfprintf+0xf0>
 618:	22 60       	ori	r18, 0x02	; 2
 61a:	24 60       	ori	r18, 0x04	; 4
 61c:	23 c0       	rjmp	.+70     	; 0x664 <vfprintf+0xf0>
 61e:	28 60       	ori	r18, 0x08	; 8
 620:	21 c0       	rjmp	.+66     	; 0x664 <vfprintf+0xf0>
 622:	27 fd       	sbrc	r18, 7
 624:	27 c0       	rjmp	.+78     	; 0x674 <vfprintf+0x100>
 626:	30 ed       	ldi	r19, 0xD0	; 208
 628:	38 0f       	add	r19, r24
 62a:	3a 30       	cpi	r19, 0x0A	; 10
 62c:	78 f4       	brcc	.+30     	; 0x64c <vfprintf+0xd8>
 62e:	26 ff       	sbrs	r18, 6
 630:	06 c0       	rjmp	.+12     	; 0x63e <vfprintf+0xca>
 632:	fa e0       	ldi	r31, 0x0A	; 10
 634:	5f 9e       	mul	r5, r31
 636:	30 0d       	add	r19, r0
 638:	11 24       	eor	r1, r1
 63a:	53 2e       	mov	r5, r19
 63c:	13 c0       	rjmp	.+38     	; 0x664 <vfprintf+0xf0>
 63e:	8a e0       	ldi	r24, 0x0A	; 10
 640:	38 9e       	mul	r3, r24
 642:	30 0d       	add	r19, r0
 644:	11 24       	eor	r1, r1
 646:	33 2e       	mov	r3, r19
 648:	20 62       	ori	r18, 0x20	; 32
 64a:	0c c0       	rjmp	.+24     	; 0x664 <vfprintf+0xf0>
 64c:	8e 32       	cpi	r24, 0x2E	; 46
 64e:	21 f4       	brne	.+8      	; 0x658 <vfprintf+0xe4>
 650:	26 fd       	sbrc	r18, 6
 652:	5f c1       	rjmp	.+702    	; 0x912 <vfprintf+0x39e>
 654:	20 64       	ori	r18, 0x40	; 64
 656:	06 c0       	rjmp	.+12     	; 0x664 <vfprintf+0xf0>
 658:	8c 36       	cpi	r24, 0x6C	; 108
 65a:	11 f4       	brne	.+4      	; 0x660 <vfprintf+0xec>
 65c:	20 68       	ori	r18, 0x80	; 128
 65e:	02 c0       	rjmp	.+4      	; 0x664 <vfprintf+0xf0>
 660:	88 36       	cpi	r24, 0x68	; 104
 662:	41 f4       	brne	.+16     	; 0x674 <vfprintf+0x100>
 664:	f6 01       	movw	r30, r12
 666:	93 fd       	sbrc	r25, 3
 668:	85 91       	lpm	r24, Z+
 66a:	93 ff       	sbrs	r25, 3
 66c:	81 91       	ld	r24, Z+
 66e:	6f 01       	movw	r12, r30
 670:	81 11       	cpse	r24, r1
 672:	c1 cf       	rjmp	.-126    	; 0x5f6 <vfprintf+0x82>
 674:	98 2f       	mov	r25, r24
 676:	9f 7d       	andi	r25, 0xDF	; 223
 678:	95 54       	subi	r25, 0x45	; 69
 67a:	93 30       	cpi	r25, 0x03	; 3
 67c:	28 f4       	brcc	.+10     	; 0x688 <vfprintf+0x114>
 67e:	0c 5f       	subi	r16, 0xFC	; 252
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	ff e3       	ldi	r31, 0x3F	; 63
 684:	f9 83       	std	Y+1, r31	; 0x01
 686:	0d c0       	rjmp	.+26     	; 0x6a2 <vfprintf+0x12e>
 688:	83 36       	cpi	r24, 0x63	; 99
 68a:	31 f0       	breq	.+12     	; 0x698 <vfprintf+0x124>
 68c:	83 37       	cpi	r24, 0x73	; 115
 68e:	71 f0       	breq	.+28     	; 0x6ac <vfprintf+0x138>
 690:	83 35       	cpi	r24, 0x53	; 83
 692:	09 f0       	breq	.+2      	; 0x696 <vfprintf+0x122>
 694:	57 c0       	rjmp	.+174    	; 0x744 <vfprintf+0x1d0>
 696:	21 c0       	rjmp	.+66     	; 0x6da <vfprintf+0x166>
 698:	f8 01       	movw	r30, r16
 69a:	80 81       	ld	r24, Z
 69c:	89 83       	std	Y+1, r24	; 0x01
 69e:	0e 5f       	subi	r16, 0xFE	; 254
 6a0:	1f 4f       	sbci	r17, 0xFF	; 255
 6a2:	44 24       	eor	r4, r4
 6a4:	43 94       	inc	r4
 6a6:	51 2c       	mov	r5, r1
 6a8:	54 01       	movw	r10, r8
 6aa:	14 c0       	rjmp	.+40     	; 0x6d4 <vfprintf+0x160>
 6ac:	38 01       	movw	r6, r16
 6ae:	f2 e0       	ldi	r31, 0x02	; 2
 6b0:	6f 0e       	add	r6, r31
 6b2:	71 1c       	adc	r7, r1
 6b4:	f8 01       	movw	r30, r16
 6b6:	a0 80       	ld	r10, Z
 6b8:	b1 80       	ldd	r11, Z+1	; 0x01
 6ba:	26 ff       	sbrs	r18, 6
 6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <vfprintf+0x150>
 6be:	65 2d       	mov	r22, r5
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <vfprintf+0x154>
 6c4:	6f ef       	ldi	r22, 0xFF	; 255
 6c6:	7f ef       	ldi	r23, 0xFF	; 255
 6c8:	c5 01       	movw	r24, r10
 6ca:	2c 87       	std	Y+12, r18	; 0x0c
 6cc:	9a d2       	rcall	.+1332   	; 0xc02 <strnlen>
 6ce:	2c 01       	movw	r4, r24
 6d0:	83 01       	movw	r16, r6
 6d2:	2c 85       	ldd	r18, Y+12	; 0x0c
 6d4:	2f 77       	andi	r18, 0x7F	; 127
 6d6:	22 2e       	mov	r2, r18
 6d8:	16 c0       	rjmp	.+44     	; 0x706 <vfprintf+0x192>
 6da:	38 01       	movw	r6, r16
 6dc:	f2 e0       	ldi	r31, 0x02	; 2
 6de:	6f 0e       	add	r6, r31
 6e0:	71 1c       	adc	r7, r1
 6e2:	f8 01       	movw	r30, r16
 6e4:	a0 80       	ld	r10, Z
 6e6:	b1 80       	ldd	r11, Z+1	; 0x01
 6e8:	26 ff       	sbrs	r18, 6
 6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <vfprintf+0x17e>
 6ec:	65 2d       	mov	r22, r5
 6ee:	70 e0       	ldi	r23, 0x00	; 0
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <vfprintf+0x182>
 6f2:	6f ef       	ldi	r22, 0xFF	; 255
 6f4:	7f ef       	ldi	r23, 0xFF	; 255
 6f6:	c5 01       	movw	r24, r10
 6f8:	2c 87       	std	Y+12, r18	; 0x0c
 6fa:	71 d2       	rcall	.+1250   	; 0xbde <strnlen_P>
 6fc:	2c 01       	movw	r4, r24
 6fe:	2c 85       	ldd	r18, Y+12	; 0x0c
 700:	20 68       	ori	r18, 0x80	; 128
 702:	22 2e       	mov	r2, r18
 704:	83 01       	movw	r16, r6
 706:	23 fc       	sbrc	r2, 3
 708:	19 c0       	rjmp	.+50     	; 0x73c <vfprintf+0x1c8>
 70a:	83 2d       	mov	r24, r3
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	48 16       	cp	r4, r24
 710:	59 06       	cpc	r5, r25
 712:	a0 f4       	brcc	.+40     	; 0x73c <vfprintf+0x1c8>
 714:	b7 01       	movw	r22, r14
 716:	80 e2       	ldi	r24, 0x20	; 32
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	7e d2       	rcall	.+1276   	; 0xc18 <fputc>
 71c:	3a 94       	dec	r3
 71e:	f5 cf       	rjmp	.-22     	; 0x70a <vfprintf+0x196>
 720:	f5 01       	movw	r30, r10
 722:	27 fc       	sbrc	r2, 7
 724:	85 91       	lpm	r24, Z+
 726:	27 fe       	sbrs	r2, 7
 728:	81 91       	ld	r24, Z+
 72a:	5f 01       	movw	r10, r30
 72c:	b7 01       	movw	r22, r14
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	73 d2       	rcall	.+1254   	; 0xc18 <fputc>
 732:	31 10       	cpse	r3, r1
 734:	3a 94       	dec	r3
 736:	f1 e0       	ldi	r31, 0x01	; 1
 738:	4f 1a       	sub	r4, r31
 73a:	51 08       	sbc	r5, r1
 73c:	41 14       	cp	r4, r1
 73e:	51 04       	cpc	r5, r1
 740:	79 f7       	brne	.-34     	; 0x720 <vfprintf+0x1ac>
 742:	de c0       	rjmp	.+444    	; 0x900 <vfprintf+0x38c>
 744:	84 36       	cpi	r24, 0x64	; 100
 746:	11 f0       	breq	.+4      	; 0x74c <vfprintf+0x1d8>
 748:	89 36       	cpi	r24, 0x69	; 105
 74a:	31 f5       	brne	.+76     	; 0x798 <vfprintf+0x224>
 74c:	f8 01       	movw	r30, r16
 74e:	27 ff       	sbrs	r18, 7
 750:	07 c0       	rjmp	.+14     	; 0x760 <vfprintf+0x1ec>
 752:	60 81       	ld	r22, Z
 754:	71 81       	ldd	r23, Z+1	; 0x01
 756:	82 81       	ldd	r24, Z+2	; 0x02
 758:	93 81       	ldd	r25, Z+3	; 0x03
 75a:	0c 5f       	subi	r16, 0xFC	; 252
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	08 c0       	rjmp	.+16     	; 0x770 <vfprintf+0x1fc>
 760:	60 81       	ld	r22, Z
 762:	71 81       	ldd	r23, Z+1	; 0x01
 764:	07 2e       	mov	r0, r23
 766:	00 0c       	add	r0, r0
 768:	88 0b       	sbc	r24, r24
 76a:	99 0b       	sbc	r25, r25
 76c:	0e 5f       	subi	r16, 0xFE	; 254
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	2f 76       	andi	r18, 0x6F	; 111
 772:	72 2e       	mov	r7, r18
 774:	97 ff       	sbrs	r25, 7
 776:	09 c0       	rjmp	.+18     	; 0x78a <vfprintf+0x216>
 778:	90 95       	com	r25
 77a:	80 95       	com	r24
 77c:	70 95       	com	r23
 77e:	61 95       	neg	r22
 780:	7f 4f       	sbci	r23, 0xFF	; 255
 782:	8f 4f       	sbci	r24, 0xFF	; 255
 784:	9f 4f       	sbci	r25, 0xFF	; 255
 786:	20 68       	ori	r18, 0x80	; 128
 788:	72 2e       	mov	r7, r18
 78a:	2a e0       	ldi	r18, 0x0A	; 10
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	a4 01       	movw	r20, r8
 790:	7b d2       	rcall	.+1270   	; 0xc88 <__ultoa_invert>
 792:	a8 2e       	mov	r10, r24
 794:	a8 18       	sub	r10, r8
 796:	43 c0       	rjmp	.+134    	; 0x81e <vfprintf+0x2aa>
 798:	85 37       	cpi	r24, 0x75	; 117
 79a:	29 f4       	brne	.+10     	; 0x7a6 <vfprintf+0x232>
 79c:	2f 7e       	andi	r18, 0xEF	; 239
 79e:	b2 2e       	mov	r11, r18
 7a0:	2a e0       	ldi	r18, 0x0A	; 10
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	25 c0       	rjmp	.+74     	; 0x7f0 <vfprintf+0x27c>
 7a6:	f2 2f       	mov	r31, r18
 7a8:	f9 7f       	andi	r31, 0xF9	; 249
 7aa:	bf 2e       	mov	r11, r31
 7ac:	8f 36       	cpi	r24, 0x6F	; 111
 7ae:	c1 f0       	breq	.+48     	; 0x7e0 <vfprintf+0x26c>
 7b0:	18 f4       	brcc	.+6      	; 0x7b8 <vfprintf+0x244>
 7b2:	88 35       	cpi	r24, 0x58	; 88
 7b4:	79 f0       	breq	.+30     	; 0x7d4 <vfprintf+0x260>
 7b6:	ad c0       	rjmp	.+346    	; 0x912 <vfprintf+0x39e>
 7b8:	80 37       	cpi	r24, 0x70	; 112
 7ba:	19 f0       	breq	.+6      	; 0x7c2 <vfprintf+0x24e>
 7bc:	88 37       	cpi	r24, 0x78	; 120
 7be:	21 f0       	breq	.+8      	; 0x7c8 <vfprintf+0x254>
 7c0:	a8 c0       	rjmp	.+336    	; 0x912 <vfprintf+0x39e>
 7c2:	2f 2f       	mov	r18, r31
 7c4:	20 61       	ori	r18, 0x10	; 16
 7c6:	b2 2e       	mov	r11, r18
 7c8:	b4 fe       	sbrs	r11, 4
 7ca:	0d c0       	rjmp	.+26     	; 0x7e6 <vfprintf+0x272>
 7cc:	8b 2d       	mov	r24, r11
 7ce:	84 60       	ori	r24, 0x04	; 4
 7d0:	b8 2e       	mov	r11, r24
 7d2:	09 c0       	rjmp	.+18     	; 0x7e6 <vfprintf+0x272>
 7d4:	24 ff       	sbrs	r18, 4
 7d6:	0a c0       	rjmp	.+20     	; 0x7ec <vfprintf+0x278>
 7d8:	9f 2f       	mov	r25, r31
 7da:	96 60       	ori	r25, 0x06	; 6
 7dc:	b9 2e       	mov	r11, r25
 7de:	06 c0       	rjmp	.+12     	; 0x7ec <vfprintf+0x278>
 7e0:	28 e0       	ldi	r18, 0x08	; 8
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <vfprintf+0x27c>
 7e6:	20 e1       	ldi	r18, 0x10	; 16
 7e8:	30 e0       	ldi	r19, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <vfprintf+0x27c>
 7ec:	20 e1       	ldi	r18, 0x10	; 16
 7ee:	32 e0       	ldi	r19, 0x02	; 2
 7f0:	f8 01       	movw	r30, r16
 7f2:	b7 fe       	sbrs	r11, 7
 7f4:	07 c0       	rjmp	.+14     	; 0x804 <vfprintf+0x290>
 7f6:	60 81       	ld	r22, Z
 7f8:	71 81       	ldd	r23, Z+1	; 0x01
 7fa:	82 81       	ldd	r24, Z+2	; 0x02
 7fc:	93 81       	ldd	r25, Z+3	; 0x03
 7fe:	0c 5f       	subi	r16, 0xFC	; 252
 800:	1f 4f       	sbci	r17, 0xFF	; 255
 802:	06 c0       	rjmp	.+12     	; 0x810 <vfprintf+0x29c>
 804:	60 81       	ld	r22, Z
 806:	71 81       	ldd	r23, Z+1	; 0x01
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 5f       	subi	r16, 0xFE	; 254
 80e:	1f 4f       	sbci	r17, 0xFF	; 255
 810:	a4 01       	movw	r20, r8
 812:	3a d2       	rcall	.+1140   	; 0xc88 <__ultoa_invert>
 814:	a8 2e       	mov	r10, r24
 816:	a8 18       	sub	r10, r8
 818:	fb 2d       	mov	r31, r11
 81a:	ff 77       	andi	r31, 0x7F	; 127
 81c:	7f 2e       	mov	r7, r31
 81e:	76 fe       	sbrs	r7, 6
 820:	0b c0       	rjmp	.+22     	; 0x838 <vfprintf+0x2c4>
 822:	37 2d       	mov	r19, r7
 824:	3e 7f       	andi	r19, 0xFE	; 254
 826:	a5 14       	cp	r10, r5
 828:	50 f4       	brcc	.+20     	; 0x83e <vfprintf+0x2ca>
 82a:	74 fe       	sbrs	r7, 4
 82c:	0a c0       	rjmp	.+20     	; 0x842 <vfprintf+0x2ce>
 82e:	72 fc       	sbrc	r7, 2
 830:	08 c0       	rjmp	.+16     	; 0x842 <vfprintf+0x2ce>
 832:	37 2d       	mov	r19, r7
 834:	3e 7e       	andi	r19, 0xEE	; 238
 836:	05 c0       	rjmp	.+10     	; 0x842 <vfprintf+0x2ce>
 838:	ba 2c       	mov	r11, r10
 83a:	37 2d       	mov	r19, r7
 83c:	03 c0       	rjmp	.+6      	; 0x844 <vfprintf+0x2d0>
 83e:	ba 2c       	mov	r11, r10
 840:	01 c0       	rjmp	.+2      	; 0x844 <vfprintf+0x2d0>
 842:	b5 2c       	mov	r11, r5
 844:	34 ff       	sbrs	r19, 4
 846:	0d c0       	rjmp	.+26     	; 0x862 <vfprintf+0x2ee>
 848:	fe 01       	movw	r30, r28
 84a:	ea 0d       	add	r30, r10
 84c:	f1 1d       	adc	r31, r1
 84e:	80 81       	ld	r24, Z
 850:	80 33       	cpi	r24, 0x30	; 48
 852:	11 f4       	brne	.+4      	; 0x858 <vfprintf+0x2e4>
 854:	39 7e       	andi	r19, 0xE9	; 233
 856:	09 c0       	rjmp	.+18     	; 0x86a <vfprintf+0x2f6>
 858:	32 ff       	sbrs	r19, 2
 85a:	06 c0       	rjmp	.+12     	; 0x868 <vfprintf+0x2f4>
 85c:	b3 94       	inc	r11
 85e:	b3 94       	inc	r11
 860:	04 c0       	rjmp	.+8      	; 0x86a <vfprintf+0x2f6>
 862:	83 2f       	mov	r24, r19
 864:	86 78       	andi	r24, 0x86	; 134
 866:	09 f0       	breq	.+2      	; 0x86a <vfprintf+0x2f6>
 868:	b3 94       	inc	r11
 86a:	33 fd       	sbrc	r19, 3
 86c:	12 c0       	rjmp	.+36     	; 0x892 <vfprintf+0x31e>
 86e:	30 ff       	sbrs	r19, 0
 870:	06 c0       	rjmp	.+12     	; 0x87e <vfprintf+0x30a>
 872:	5a 2c       	mov	r5, r10
 874:	b3 14       	cp	r11, r3
 876:	18 f4       	brcc	.+6      	; 0x87e <vfprintf+0x30a>
 878:	53 0c       	add	r5, r3
 87a:	5b 18       	sub	r5, r11
 87c:	b3 2c       	mov	r11, r3
 87e:	b3 14       	cp	r11, r3
 880:	60 f4       	brcc	.+24     	; 0x89a <vfprintf+0x326>
 882:	b7 01       	movw	r22, r14
 884:	80 e2       	ldi	r24, 0x20	; 32
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	3c 87       	std	Y+12, r19	; 0x0c
 88a:	c6 d1       	rcall	.+908    	; 0xc18 <fputc>
 88c:	b3 94       	inc	r11
 88e:	3c 85       	ldd	r19, Y+12	; 0x0c
 890:	f6 cf       	rjmp	.-20     	; 0x87e <vfprintf+0x30a>
 892:	b3 14       	cp	r11, r3
 894:	10 f4       	brcc	.+4      	; 0x89a <vfprintf+0x326>
 896:	3b 18       	sub	r3, r11
 898:	01 c0       	rjmp	.+2      	; 0x89c <vfprintf+0x328>
 89a:	31 2c       	mov	r3, r1
 89c:	34 ff       	sbrs	r19, 4
 89e:	11 c0       	rjmp	.+34     	; 0x8c2 <vfprintf+0x34e>
 8a0:	b7 01       	movw	r22, r14
 8a2:	80 e3       	ldi	r24, 0x30	; 48
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	3c 87       	std	Y+12, r19	; 0x0c
 8a8:	b7 d1       	rcall	.+878    	; 0xc18 <fputc>
 8aa:	3c 85       	ldd	r19, Y+12	; 0x0c
 8ac:	32 ff       	sbrs	r19, 2
 8ae:	16 c0       	rjmp	.+44     	; 0x8dc <vfprintf+0x368>
 8b0:	31 fd       	sbrc	r19, 1
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <vfprintf+0x346>
 8b4:	88 e7       	ldi	r24, 0x78	; 120
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <vfprintf+0x34a>
 8ba:	88 e5       	ldi	r24, 0x58	; 88
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	b7 01       	movw	r22, r14
 8c0:	0c c0       	rjmp	.+24     	; 0x8da <vfprintf+0x366>
 8c2:	83 2f       	mov	r24, r19
 8c4:	86 78       	andi	r24, 0x86	; 134
 8c6:	51 f0       	breq	.+20     	; 0x8dc <vfprintf+0x368>
 8c8:	31 ff       	sbrs	r19, 1
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <vfprintf+0x35c>
 8cc:	8b e2       	ldi	r24, 0x2B	; 43
 8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <vfprintf+0x35e>
 8d0:	80 e2       	ldi	r24, 0x20	; 32
 8d2:	37 fd       	sbrc	r19, 7
 8d4:	8d e2       	ldi	r24, 0x2D	; 45
 8d6:	b7 01       	movw	r22, r14
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	9e d1       	rcall	.+828    	; 0xc18 <fputc>
 8dc:	a5 14       	cp	r10, r5
 8de:	30 f4       	brcc	.+12     	; 0x8ec <vfprintf+0x378>
 8e0:	b7 01       	movw	r22, r14
 8e2:	80 e3       	ldi	r24, 0x30	; 48
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	98 d1       	rcall	.+816    	; 0xc18 <fputc>
 8e8:	5a 94       	dec	r5
 8ea:	f8 cf       	rjmp	.-16     	; 0x8dc <vfprintf+0x368>
 8ec:	aa 94       	dec	r10
 8ee:	f4 01       	movw	r30, r8
 8f0:	ea 0d       	add	r30, r10
 8f2:	f1 1d       	adc	r31, r1
 8f4:	80 81       	ld	r24, Z
 8f6:	b7 01       	movw	r22, r14
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	8e d1       	rcall	.+796    	; 0xc18 <fputc>
 8fc:	a1 10       	cpse	r10, r1
 8fe:	f6 cf       	rjmp	.-20     	; 0x8ec <vfprintf+0x378>
 900:	33 20       	and	r3, r3
 902:	09 f4       	brne	.+2      	; 0x906 <vfprintf+0x392>
 904:	5d ce       	rjmp	.-838    	; 0x5c0 <vfprintf+0x4c>
 906:	b7 01       	movw	r22, r14
 908:	80 e2       	ldi	r24, 0x20	; 32
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	85 d1       	rcall	.+778    	; 0xc18 <fputc>
 90e:	3a 94       	dec	r3
 910:	f7 cf       	rjmp	.-18     	; 0x900 <vfprintf+0x38c>
 912:	f7 01       	movw	r30, r14
 914:	86 81       	ldd	r24, Z+6	; 0x06
 916:	97 81       	ldd	r25, Z+7	; 0x07
 918:	02 c0       	rjmp	.+4      	; 0x91e <vfprintf+0x3aa>
 91a:	8f ef       	ldi	r24, 0xFF	; 255
 91c:	9f ef       	ldi	r25, 0xFF	; 255
 91e:	2c 96       	adiw	r28, 0x0c	; 12
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	f8 94       	cli
 924:	de bf       	out	0x3e, r29	; 62
 926:	0f be       	out	0x3f, r0	; 63
 928:	cd bf       	out	0x3d, r28	; 61
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	ff 90       	pop	r15
 934:	ef 90       	pop	r14
 936:	df 90       	pop	r13
 938:	cf 90       	pop	r12
 93a:	bf 90       	pop	r11
 93c:	af 90       	pop	r10
 93e:	9f 90       	pop	r9
 940:	8f 90       	pop	r8
 942:	7f 90       	pop	r7
 944:	6f 90       	pop	r6
 946:	5f 90       	pop	r5
 948:	4f 90       	pop	r4
 94a:	3f 90       	pop	r3
 94c:	2f 90       	pop	r2
 94e:	08 95       	ret

00000950 <calloc>:
 950:	0f 93       	push	r16
 952:	1f 93       	push	r17
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
 958:	86 9f       	mul	r24, r22
 95a:	80 01       	movw	r16, r0
 95c:	87 9f       	mul	r24, r23
 95e:	10 0d       	add	r17, r0
 960:	96 9f       	mul	r25, r22
 962:	10 0d       	add	r17, r0
 964:	11 24       	eor	r1, r1
 966:	c8 01       	movw	r24, r16
 968:	0d d0       	rcall	.+26     	; 0x984 <malloc>
 96a:	ec 01       	movw	r28, r24
 96c:	00 97       	sbiw	r24, 0x00	; 0
 96e:	21 f0       	breq	.+8      	; 0x978 <calloc+0x28>
 970:	a8 01       	movw	r20, r16
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	3e d1       	rcall	.+636    	; 0xbf4 <memset>
 978:	ce 01       	movw	r24, r28
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	1f 91       	pop	r17
 980:	0f 91       	pop	r16
 982:	08 95       	ret

00000984 <malloc>:
 984:	cf 93       	push	r28
 986:	df 93       	push	r29
 988:	82 30       	cpi	r24, 0x02	; 2
 98a:	91 05       	cpc	r25, r1
 98c:	10 f4       	brcc	.+4      	; 0x992 <malloc+0xe>
 98e:	82 e0       	ldi	r24, 0x02	; 2
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <__flp>
 996:	f0 91 ea 02 	lds	r31, 0x02EA	; 0x8002ea <__flp+0x1>
 99a:	20 e0       	ldi	r18, 0x00	; 0
 99c:	30 e0       	ldi	r19, 0x00	; 0
 99e:	c0 e0       	ldi	r28, 0x00	; 0
 9a0:	d0 e0       	ldi	r29, 0x00	; 0
 9a2:	30 97       	sbiw	r30, 0x00	; 0
 9a4:	11 f1       	breq	.+68     	; 0x9ea <malloc+0x66>
 9a6:	40 81       	ld	r20, Z
 9a8:	51 81       	ldd	r21, Z+1	; 0x01
 9aa:	48 17       	cp	r20, r24
 9ac:	59 07       	cpc	r21, r25
 9ae:	c0 f0       	brcs	.+48     	; 0x9e0 <malloc+0x5c>
 9b0:	48 17       	cp	r20, r24
 9b2:	59 07       	cpc	r21, r25
 9b4:	61 f4       	brne	.+24     	; 0x9ce <malloc+0x4a>
 9b6:	82 81       	ldd	r24, Z+2	; 0x02
 9b8:	93 81       	ldd	r25, Z+3	; 0x03
 9ba:	20 97       	sbiw	r28, 0x00	; 0
 9bc:	19 f0       	breq	.+6      	; 0x9c4 <malloc+0x40>
 9be:	9b 83       	std	Y+3, r25	; 0x03
 9c0:	8a 83       	std	Y+2, r24	; 0x02
 9c2:	2b c0       	rjmp	.+86     	; 0xa1a <malloc+0x96>
 9c4:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <__flp+0x1>
 9c8:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <__flp>
 9cc:	26 c0       	rjmp	.+76     	; 0xa1a <malloc+0x96>
 9ce:	21 15       	cp	r18, r1
 9d0:	31 05       	cpc	r19, r1
 9d2:	19 f0       	breq	.+6      	; 0x9da <malloc+0x56>
 9d4:	42 17       	cp	r20, r18
 9d6:	53 07       	cpc	r21, r19
 9d8:	18 f4       	brcc	.+6      	; 0x9e0 <malloc+0x5c>
 9da:	9a 01       	movw	r18, r20
 9dc:	be 01       	movw	r22, r28
 9de:	df 01       	movw	r26, r30
 9e0:	ef 01       	movw	r28, r30
 9e2:	02 80       	ldd	r0, Z+2	; 0x02
 9e4:	f3 81       	ldd	r31, Z+3	; 0x03
 9e6:	e0 2d       	mov	r30, r0
 9e8:	dc cf       	rjmp	.-72     	; 0x9a2 <malloc+0x1e>
 9ea:	21 15       	cp	r18, r1
 9ec:	31 05       	cpc	r19, r1
 9ee:	09 f1       	breq	.+66     	; 0xa32 <malloc+0xae>
 9f0:	28 1b       	sub	r18, r24
 9f2:	39 0b       	sbc	r19, r25
 9f4:	24 30       	cpi	r18, 0x04	; 4
 9f6:	31 05       	cpc	r19, r1
 9f8:	90 f4       	brcc	.+36     	; 0xa1e <malloc+0x9a>
 9fa:	12 96       	adiw	r26, 0x02	; 2
 9fc:	8d 91       	ld	r24, X+
 9fe:	9c 91       	ld	r25, X
 a00:	13 97       	sbiw	r26, 0x03	; 3
 a02:	61 15       	cp	r22, r1
 a04:	71 05       	cpc	r23, r1
 a06:	21 f0       	breq	.+8      	; 0xa10 <malloc+0x8c>
 a08:	fb 01       	movw	r30, r22
 a0a:	93 83       	std	Z+3, r25	; 0x03
 a0c:	82 83       	std	Z+2, r24	; 0x02
 a0e:	04 c0       	rjmp	.+8      	; 0xa18 <malloc+0x94>
 a10:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <__flp+0x1>
 a14:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <__flp>
 a18:	fd 01       	movw	r30, r26
 a1a:	32 96       	adiw	r30, 0x02	; 2
 a1c:	44 c0       	rjmp	.+136    	; 0xaa6 <malloc+0x122>
 a1e:	fd 01       	movw	r30, r26
 a20:	e2 0f       	add	r30, r18
 a22:	f3 1f       	adc	r31, r19
 a24:	81 93       	st	Z+, r24
 a26:	91 93       	st	Z+, r25
 a28:	22 50       	subi	r18, 0x02	; 2
 a2a:	31 09       	sbc	r19, r1
 a2c:	2d 93       	st	X+, r18
 a2e:	3c 93       	st	X, r19
 a30:	3a c0       	rjmp	.+116    	; 0xaa6 <malloc+0x122>
 a32:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <__brkval>
 a36:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <__brkval+0x1>
 a3a:	23 2b       	or	r18, r19
 a3c:	41 f4       	brne	.+16     	; 0xa4e <malloc+0xca>
 a3e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 a42:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 a46:	30 93 e8 02 	sts	0x02E8, r19	; 0x8002e8 <__brkval+0x1>
 a4a:	20 93 e7 02 	sts	0x02E7, r18	; 0x8002e7 <__brkval>
 a4e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 a52:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 a56:	21 15       	cp	r18, r1
 a58:	31 05       	cpc	r19, r1
 a5a:	41 f4       	brne	.+16     	; 0xa6c <malloc+0xe8>
 a5c:	2d b7       	in	r18, 0x3d	; 61
 a5e:	3e b7       	in	r19, 0x3e	; 62
 a60:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 a64:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 a68:	24 1b       	sub	r18, r20
 a6a:	35 0b       	sbc	r19, r21
 a6c:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <__brkval>
 a70:	f0 91 e8 02 	lds	r31, 0x02E8	; 0x8002e8 <__brkval+0x1>
 a74:	e2 17       	cp	r30, r18
 a76:	f3 07       	cpc	r31, r19
 a78:	a0 f4       	brcc	.+40     	; 0xaa2 <malloc+0x11e>
 a7a:	2e 1b       	sub	r18, r30
 a7c:	3f 0b       	sbc	r19, r31
 a7e:	28 17       	cp	r18, r24
 a80:	39 07       	cpc	r19, r25
 a82:	78 f0       	brcs	.+30     	; 0xaa2 <malloc+0x11e>
 a84:	ac 01       	movw	r20, r24
 a86:	4e 5f       	subi	r20, 0xFE	; 254
 a88:	5f 4f       	sbci	r21, 0xFF	; 255
 a8a:	24 17       	cp	r18, r20
 a8c:	35 07       	cpc	r19, r21
 a8e:	48 f0       	brcs	.+18     	; 0xaa2 <malloc+0x11e>
 a90:	4e 0f       	add	r20, r30
 a92:	5f 1f       	adc	r21, r31
 a94:	50 93 e8 02 	sts	0x02E8, r21	; 0x8002e8 <__brkval+0x1>
 a98:	40 93 e7 02 	sts	0x02E7, r20	; 0x8002e7 <__brkval>
 a9c:	81 93       	st	Z+, r24
 a9e:	91 93       	st	Z+, r25
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <malloc+0x122>
 aa2:	e0 e0       	ldi	r30, 0x00	; 0
 aa4:	f0 e0       	ldi	r31, 0x00	; 0
 aa6:	cf 01       	movw	r24, r30
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	08 95       	ret

00000aae <free>:
 aae:	0f 93       	push	r16
 ab0:	1f 93       	push	r17
 ab2:	cf 93       	push	r28
 ab4:	df 93       	push	r29
 ab6:	00 97       	sbiw	r24, 0x00	; 0
 ab8:	09 f4       	brne	.+2      	; 0xabc <free+0xe>
 aba:	8c c0       	rjmp	.+280    	; 0xbd4 <free+0x126>
 abc:	fc 01       	movw	r30, r24
 abe:	32 97       	sbiw	r30, 0x02	; 2
 ac0:	13 82       	std	Z+3, r1	; 0x03
 ac2:	12 82       	std	Z+2, r1	; 0x02
 ac4:	00 91 e9 02 	lds	r16, 0x02E9	; 0x8002e9 <__flp>
 ac8:	10 91 ea 02 	lds	r17, 0x02EA	; 0x8002ea <__flp+0x1>
 acc:	01 15       	cp	r16, r1
 ace:	11 05       	cpc	r17, r1
 ad0:	81 f4       	brne	.+32     	; 0xaf2 <free+0x44>
 ad2:	20 81       	ld	r18, Z
 ad4:	31 81       	ldd	r19, Z+1	; 0x01
 ad6:	82 0f       	add	r24, r18
 ad8:	93 1f       	adc	r25, r19
 ada:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <__brkval>
 ade:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <__brkval+0x1>
 ae2:	28 17       	cp	r18, r24
 ae4:	39 07       	cpc	r19, r25
 ae6:	79 f5       	brne	.+94     	; 0xb46 <free+0x98>
 ae8:	f0 93 e8 02 	sts	0x02E8, r31	; 0x8002e8 <__brkval+0x1>
 aec:	e0 93 e7 02 	sts	0x02E7, r30	; 0x8002e7 <__brkval>
 af0:	71 c0       	rjmp	.+226    	; 0xbd4 <free+0x126>
 af2:	d8 01       	movw	r26, r16
 af4:	40 e0       	ldi	r20, 0x00	; 0
 af6:	50 e0       	ldi	r21, 0x00	; 0
 af8:	ae 17       	cp	r26, r30
 afa:	bf 07       	cpc	r27, r31
 afc:	50 f4       	brcc	.+20     	; 0xb12 <free+0x64>
 afe:	12 96       	adiw	r26, 0x02	; 2
 b00:	2d 91       	ld	r18, X+
 b02:	3c 91       	ld	r19, X
 b04:	13 97       	sbiw	r26, 0x03	; 3
 b06:	ad 01       	movw	r20, r26
 b08:	21 15       	cp	r18, r1
 b0a:	31 05       	cpc	r19, r1
 b0c:	09 f1       	breq	.+66     	; 0xb50 <free+0xa2>
 b0e:	d9 01       	movw	r26, r18
 b10:	f3 cf       	rjmp	.-26     	; 0xaf8 <free+0x4a>
 b12:	9d 01       	movw	r18, r26
 b14:	da 01       	movw	r26, r20
 b16:	33 83       	std	Z+3, r19	; 0x03
 b18:	22 83       	std	Z+2, r18	; 0x02
 b1a:	60 81       	ld	r22, Z
 b1c:	71 81       	ldd	r23, Z+1	; 0x01
 b1e:	86 0f       	add	r24, r22
 b20:	97 1f       	adc	r25, r23
 b22:	82 17       	cp	r24, r18
 b24:	93 07       	cpc	r25, r19
 b26:	69 f4       	brne	.+26     	; 0xb42 <free+0x94>
 b28:	ec 01       	movw	r28, r24
 b2a:	28 81       	ld	r18, Y
 b2c:	39 81       	ldd	r19, Y+1	; 0x01
 b2e:	26 0f       	add	r18, r22
 b30:	37 1f       	adc	r19, r23
 b32:	2e 5f       	subi	r18, 0xFE	; 254
 b34:	3f 4f       	sbci	r19, 0xFF	; 255
 b36:	31 83       	std	Z+1, r19	; 0x01
 b38:	20 83       	st	Z, r18
 b3a:	8a 81       	ldd	r24, Y+2	; 0x02
 b3c:	9b 81       	ldd	r25, Y+3	; 0x03
 b3e:	93 83       	std	Z+3, r25	; 0x03
 b40:	82 83       	std	Z+2, r24	; 0x02
 b42:	45 2b       	or	r20, r21
 b44:	29 f4       	brne	.+10     	; 0xb50 <free+0xa2>
 b46:	f0 93 ea 02 	sts	0x02EA, r31	; 0x8002ea <__flp+0x1>
 b4a:	e0 93 e9 02 	sts	0x02E9, r30	; 0x8002e9 <__flp>
 b4e:	42 c0       	rjmp	.+132    	; 0xbd4 <free+0x126>
 b50:	13 96       	adiw	r26, 0x03	; 3
 b52:	fc 93       	st	X, r31
 b54:	ee 93       	st	-X, r30
 b56:	12 97       	sbiw	r26, 0x02	; 2
 b58:	ed 01       	movw	r28, r26
 b5a:	49 91       	ld	r20, Y+
 b5c:	59 91       	ld	r21, Y+
 b5e:	9e 01       	movw	r18, r28
 b60:	24 0f       	add	r18, r20
 b62:	35 1f       	adc	r19, r21
 b64:	e2 17       	cp	r30, r18
 b66:	f3 07       	cpc	r31, r19
 b68:	71 f4       	brne	.+28     	; 0xb86 <free+0xd8>
 b6a:	80 81       	ld	r24, Z
 b6c:	91 81       	ldd	r25, Z+1	; 0x01
 b6e:	84 0f       	add	r24, r20
 b70:	95 1f       	adc	r25, r21
 b72:	02 96       	adiw	r24, 0x02	; 2
 b74:	11 96       	adiw	r26, 0x01	; 1
 b76:	9c 93       	st	X, r25
 b78:	8e 93       	st	-X, r24
 b7a:	82 81       	ldd	r24, Z+2	; 0x02
 b7c:	93 81       	ldd	r25, Z+3	; 0x03
 b7e:	13 96       	adiw	r26, 0x03	; 3
 b80:	9c 93       	st	X, r25
 b82:	8e 93       	st	-X, r24
 b84:	12 97       	sbiw	r26, 0x02	; 2
 b86:	e0 e0       	ldi	r30, 0x00	; 0
 b88:	f0 e0       	ldi	r31, 0x00	; 0
 b8a:	d8 01       	movw	r26, r16
 b8c:	12 96       	adiw	r26, 0x02	; 2
 b8e:	8d 91       	ld	r24, X+
 b90:	9c 91       	ld	r25, X
 b92:	13 97       	sbiw	r26, 0x03	; 3
 b94:	00 97       	sbiw	r24, 0x00	; 0
 b96:	19 f0       	breq	.+6      	; 0xb9e <free+0xf0>
 b98:	f8 01       	movw	r30, r16
 b9a:	8c 01       	movw	r16, r24
 b9c:	f6 cf       	rjmp	.-20     	; 0xb8a <free+0xdc>
 b9e:	8d 91       	ld	r24, X+
 ba0:	9c 91       	ld	r25, X
 ba2:	98 01       	movw	r18, r16
 ba4:	2e 5f       	subi	r18, 0xFE	; 254
 ba6:	3f 4f       	sbci	r19, 0xFF	; 255
 ba8:	82 0f       	add	r24, r18
 baa:	93 1f       	adc	r25, r19
 bac:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <__brkval>
 bb0:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <__brkval+0x1>
 bb4:	28 17       	cp	r18, r24
 bb6:	39 07       	cpc	r19, r25
 bb8:	69 f4       	brne	.+26     	; 0xbd4 <free+0x126>
 bba:	30 97       	sbiw	r30, 0x00	; 0
 bbc:	29 f4       	brne	.+10     	; 0xbc8 <free+0x11a>
 bbe:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <__flp+0x1>
 bc2:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <__flp>
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <free+0x11e>
 bc8:	13 82       	std	Z+3, r1	; 0x03
 bca:	12 82       	std	Z+2, r1	; 0x02
 bcc:	10 93 e8 02 	sts	0x02E8, r17	; 0x8002e8 <__brkval+0x1>
 bd0:	00 93 e7 02 	sts	0x02E7, r16	; 0x8002e7 <__brkval>
 bd4:	df 91       	pop	r29
 bd6:	cf 91       	pop	r28
 bd8:	1f 91       	pop	r17
 bda:	0f 91       	pop	r16
 bdc:	08 95       	ret

00000bde <strnlen_P>:
 bde:	fc 01       	movw	r30, r24
 be0:	05 90       	lpm	r0, Z+
 be2:	61 50       	subi	r22, 0x01	; 1
 be4:	70 40       	sbci	r23, 0x00	; 0
 be6:	01 10       	cpse	r0, r1
 be8:	d8 f7       	brcc	.-10     	; 0xbe0 <strnlen_P+0x2>
 bea:	80 95       	com	r24
 bec:	90 95       	com	r25
 bee:	8e 0f       	add	r24, r30
 bf0:	9f 1f       	adc	r25, r31
 bf2:	08 95       	ret

00000bf4 <memset>:
 bf4:	dc 01       	movw	r26, r24
 bf6:	01 c0       	rjmp	.+2      	; 0xbfa <memset+0x6>
 bf8:	6d 93       	st	X+, r22
 bfa:	41 50       	subi	r20, 0x01	; 1
 bfc:	50 40       	sbci	r21, 0x00	; 0
 bfe:	e0 f7       	brcc	.-8      	; 0xbf8 <memset+0x4>
 c00:	08 95       	ret

00000c02 <strnlen>:
 c02:	fc 01       	movw	r30, r24
 c04:	61 50       	subi	r22, 0x01	; 1
 c06:	70 40       	sbci	r23, 0x00	; 0
 c08:	01 90       	ld	r0, Z+
 c0a:	01 10       	cpse	r0, r1
 c0c:	d8 f7       	brcc	.-10     	; 0xc04 <strnlen+0x2>
 c0e:	80 95       	com	r24
 c10:	90 95       	com	r25
 c12:	8e 0f       	add	r24, r30
 c14:	9f 1f       	adc	r25, r31
 c16:	08 95       	ret

00000c18 <fputc>:
 c18:	0f 93       	push	r16
 c1a:	1f 93       	push	r17
 c1c:	cf 93       	push	r28
 c1e:	df 93       	push	r29
 c20:	fb 01       	movw	r30, r22
 c22:	23 81       	ldd	r18, Z+3	; 0x03
 c24:	21 fd       	sbrc	r18, 1
 c26:	03 c0       	rjmp	.+6      	; 0xc2e <fputc+0x16>
 c28:	8f ef       	ldi	r24, 0xFF	; 255
 c2a:	9f ef       	ldi	r25, 0xFF	; 255
 c2c:	28 c0       	rjmp	.+80     	; 0xc7e <fputc+0x66>
 c2e:	22 ff       	sbrs	r18, 2
 c30:	16 c0       	rjmp	.+44     	; 0xc5e <fputc+0x46>
 c32:	46 81       	ldd	r20, Z+6	; 0x06
 c34:	57 81       	ldd	r21, Z+7	; 0x07
 c36:	24 81       	ldd	r18, Z+4	; 0x04
 c38:	35 81       	ldd	r19, Z+5	; 0x05
 c3a:	42 17       	cp	r20, r18
 c3c:	53 07       	cpc	r21, r19
 c3e:	44 f4       	brge	.+16     	; 0xc50 <fputc+0x38>
 c40:	a0 81       	ld	r26, Z
 c42:	b1 81       	ldd	r27, Z+1	; 0x01
 c44:	9d 01       	movw	r18, r26
 c46:	2f 5f       	subi	r18, 0xFF	; 255
 c48:	3f 4f       	sbci	r19, 0xFF	; 255
 c4a:	31 83       	std	Z+1, r19	; 0x01
 c4c:	20 83       	st	Z, r18
 c4e:	8c 93       	st	X, r24
 c50:	26 81       	ldd	r18, Z+6	; 0x06
 c52:	37 81       	ldd	r19, Z+7	; 0x07
 c54:	2f 5f       	subi	r18, 0xFF	; 255
 c56:	3f 4f       	sbci	r19, 0xFF	; 255
 c58:	37 83       	std	Z+7, r19	; 0x07
 c5a:	26 83       	std	Z+6, r18	; 0x06
 c5c:	10 c0       	rjmp	.+32     	; 0xc7e <fputc+0x66>
 c5e:	eb 01       	movw	r28, r22
 c60:	09 2f       	mov	r16, r25
 c62:	18 2f       	mov	r17, r24
 c64:	00 84       	ldd	r0, Z+8	; 0x08
 c66:	f1 85       	ldd	r31, Z+9	; 0x09
 c68:	e0 2d       	mov	r30, r0
 c6a:	19 95       	eicall
 c6c:	89 2b       	or	r24, r25
 c6e:	e1 f6       	brne	.-72     	; 0xc28 <fputc+0x10>
 c70:	8e 81       	ldd	r24, Y+6	; 0x06
 c72:	9f 81       	ldd	r25, Y+7	; 0x07
 c74:	01 96       	adiw	r24, 0x01	; 1
 c76:	9f 83       	std	Y+7, r25	; 0x07
 c78:	8e 83       	std	Y+6, r24	; 0x06
 c7a:	81 2f       	mov	r24, r17
 c7c:	90 2f       	mov	r25, r16
 c7e:	df 91       	pop	r29
 c80:	cf 91       	pop	r28
 c82:	1f 91       	pop	r17
 c84:	0f 91       	pop	r16
 c86:	08 95       	ret

00000c88 <__ultoa_invert>:
 c88:	fa 01       	movw	r30, r20
 c8a:	aa 27       	eor	r26, r26
 c8c:	28 30       	cpi	r18, 0x08	; 8
 c8e:	51 f1       	breq	.+84     	; 0xce4 <__ultoa_invert+0x5c>
 c90:	20 31       	cpi	r18, 0x10	; 16
 c92:	81 f1       	breq	.+96     	; 0xcf4 <__ultoa_invert+0x6c>
 c94:	e8 94       	clt
 c96:	6f 93       	push	r22
 c98:	6e 7f       	andi	r22, 0xFE	; 254
 c9a:	6e 5f       	subi	r22, 0xFE	; 254
 c9c:	7f 4f       	sbci	r23, 0xFF	; 255
 c9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ca0:	9f 4f       	sbci	r25, 0xFF	; 255
 ca2:	af 4f       	sbci	r26, 0xFF	; 255
 ca4:	b1 e0       	ldi	r27, 0x01	; 1
 ca6:	3e d0       	rcall	.+124    	; 0xd24 <__ultoa_invert+0x9c>
 ca8:	b4 e0       	ldi	r27, 0x04	; 4
 caa:	3c d0       	rcall	.+120    	; 0xd24 <__ultoa_invert+0x9c>
 cac:	67 0f       	add	r22, r23
 cae:	78 1f       	adc	r23, r24
 cb0:	89 1f       	adc	r24, r25
 cb2:	9a 1f       	adc	r25, r26
 cb4:	a1 1d       	adc	r26, r1
 cb6:	68 0f       	add	r22, r24
 cb8:	79 1f       	adc	r23, r25
 cba:	8a 1f       	adc	r24, r26
 cbc:	91 1d       	adc	r25, r1
 cbe:	a1 1d       	adc	r26, r1
 cc0:	6a 0f       	add	r22, r26
 cc2:	71 1d       	adc	r23, r1
 cc4:	81 1d       	adc	r24, r1
 cc6:	91 1d       	adc	r25, r1
 cc8:	a1 1d       	adc	r26, r1
 cca:	20 d0       	rcall	.+64     	; 0xd0c <__ultoa_invert+0x84>
 ccc:	09 f4       	brne	.+2      	; 0xcd0 <__ultoa_invert+0x48>
 cce:	68 94       	set
 cd0:	3f 91       	pop	r19
 cd2:	2a e0       	ldi	r18, 0x0A	; 10
 cd4:	26 9f       	mul	r18, r22
 cd6:	11 24       	eor	r1, r1
 cd8:	30 19       	sub	r19, r0
 cda:	30 5d       	subi	r19, 0xD0	; 208
 cdc:	31 93       	st	Z+, r19
 cde:	de f6       	brtc	.-74     	; 0xc96 <__ultoa_invert+0xe>
 ce0:	cf 01       	movw	r24, r30
 ce2:	08 95       	ret
 ce4:	46 2f       	mov	r20, r22
 ce6:	47 70       	andi	r20, 0x07	; 7
 ce8:	40 5d       	subi	r20, 0xD0	; 208
 cea:	41 93       	st	Z+, r20
 cec:	b3 e0       	ldi	r27, 0x03	; 3
 cee:	0f d0       	rcall	.+30     	; 0xd0e <__ultoa_invert+0x86>
 cf0:	c9 f7       	brne	.-14     	; 0xce4 <__ultoa_invert+0x5c>
 cf2:	f6 cf       	rjmp	.-20     	; 0xce0 <__ultoa_invert+0x58>
 cf4:	46 2f       	mov	r20, r22
 cf6:	4f 70       	andi	r20, 0x0F	; 15
 cf8:	40 5d       	subi	r20, 0xD0	; 208
 cfa:	4a 33       	cpi	r20, 0x3A	; 58
 cfc:	18 f0       	brcs	.+6      	; 0xd04 <__ultoa_invert+0x7c>
 cfe:	49 5d       	subi	r20, 0xD9	; 217
 d00:	31 fd       	sbrc	r19, 1
 d02:	40 52       	subi	r20, 0x20	; 32
 d04:	41 93       	st	Z+, r20
 d06:	02 d0       	rcall	.+4      	; 0xd0c <__ultoa_invert+0x84>
 d08:	a9 f7       	brne	.-22     	; 0xcf4 <__ultoa_invert+0x6c>
 d0a:	ea cf       	rjmp	.-44     	; 0xce0 <__ultoa_invert+0x58>
 d0c:	b4 e0       	ldi	r27, 0x04	; 4
 d0e:	a6 95       	lsr	r26
 d10:	97 95       	ror	r25
 d12:	87 95       	ror	r24
 d14:	77 95       	ror	r23
 d16:	67 95       	ror	r22
 d18:	ba 95       	dec	r27
 d1a:	c9 f7       	brne	.-14     	; 0xd0e <__ultoa_invert+0x86>
 d1c:	00 97       	sbiw	r24, 0x00	; 0
 d1e:	61 05       	cpc	r22, r1
 d20:	71 05       	cpc	r23, r1
 d22:	08 95       	ret
 d24:	9b 01       	movw	r18, r22
 d26:	ac 01       	movw	r20, r24
 d28:	0a 2e       	mov	r0, r26
 d2a:	06 94       	lsr	r0
 d2c:	57 95       	ror	r21
 d2e:	47 95       	ror	r20
 d30:	37 95       	ror	r19
 d32:	27 95       	ror	r18
 d34:	ba 95       	dec	r27
 d36:	c9 f7       	brne	.-14     	; 0xd2a <__ultoa_invert+0xa2>
 d38:	62 0f       	add	r22, r18
 d3a:	73 1f       	adc	r23, r19
 d3c:	84 1f       	adc	r24, r20
 d3e:	95 1f       	adc	r25, r21
 d40:	a0 1d       	adc	r26, r0
 d42:	08 95       	ret

00000d44 <_exit>:
 d44:	f8 94       	cli

00000d46 <__stop_program>:
 d46:	ff cf       	rjmp	.-2      	; 0xd46 <__stop_program>
