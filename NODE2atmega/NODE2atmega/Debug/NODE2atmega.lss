
NODE2atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800200  00000ece  00000f62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ece  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800312  00800312  00001074  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c5e  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012e7  00000000  00000000  00002e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b29  00000000  00000000  0000417d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  00004ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078b  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000776  00000000  00000000  0000570b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005e81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	94 c1       	rjmp	.+808    	; 0x336 <__vector_3>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	13 e0       	ldi	r17, 0x03	; 3
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ec       	ldi	r30, 0xCE	; 206
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	23 e0       	ldi	r18, 0x03	; 3
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b3 e0       	ldi	r27, 0x03	; 3
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 32       	cpi	r26, 0x20	; 32
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	32 d1       	rcall	.+612    	; 0x384 <main>
 120:	d4 c6       	rjmp	.+3496   	; 0xeca <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:

uint8_t rx_flag = 0;

int CAN_init(void) {
	//Enter config mode
	MCP_init();
 124:	ec d1       	rcall	.+984    	; 0x4fe <MCP_init>
	
	//RX0 - Turn masks/filters off, rollover disabled?
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, 0b01101000);
 126:	48 e6       	ldi	r20, 0x68	; 104
 128:	60 e6       	ldi	r22, 0x60	; 96
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	20 d2       	rcall	.+1088   	; 0x56e <MCP_bit_modify>
	//Enable interrupt when message is received (RX0IE = 1)
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0x01);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	63 e0       	ldi	r22, 0x03	; 3
 132:	8b e2       	ldi	r24, 0x2B	; 43
 134:	1c d2       	rcall	.+1080   	; 0x56e <MCP_bit_modify>
	
	//Enable normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
 136:	40 e4       	ldi	r20, 0x40	; 64
 138:	60 ee       	ldi	r22, 0xE0	; 224
 13a:	8f e0       	ldi	r24, 0x0F	; 15
 13c:	18 d2       	rcall	.+1072   	; 0x56e <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
 13e:	8e e0       	ldi	r24, 0x0E	; 14
 140:	cc d1       	rcall	.+920    	; 0x4da <MCP_read>
	if ((value & MODE_MASK) != MODE_LOOPBACK){
 142:	80 7e       	andi	r24, 0xE0	; 224
 144:	80 34       	cpi	r24, 0x40	; 64
 146:	51 f0       	breq	.+20     	; 0x15c <CAN_init+0x38>
		printf("ERROR..ERROR...LOOPBACK NOT WORKING");
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	92 e0       	ldi	r25, 0x02	; 2
 14c:	9f 93       	push	r25
 14e:	8f 93       	push	r24
 150:	c1 d2       	rcall	.+1410   	; 0x6d4 <printf>
		return 1;
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	08 95       	ret
	}
	
	

	return 0;
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
}
 160:	08 95       	ret

00000162 <CAN_error>:
	
	return 0;
}

int CAN_error(void) {
	uint8_t error = MCP_read(MCP_TXB0CTRL);
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	ba d1       	rcall	.+884    	; 0x4da <MCP_read>
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
 166:	84 fd       	sbrc	r24, 4
 168:	05 c0       	rjmp	.+10     	; 0x174 <CAN_error+0x12>
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
 16a:	85 fd       	sbrc	r24, 5
 16c:	06 c0       	rjmp	.+12     	; 0x17a <CAN_error+0x18>
	
	return 0;
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret

int CAN_error(void) {
	uint8_t error = MCP_read(MCP_TXB0CTRL);
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	08 95       	ret
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
 17a:	8e ef       	ldi	r24, 0xFE	; 254
 17c:	9f ef       	ldi	r25, 0xFF	; 255
	
	return 0;
}
 17e:	08 95       	ret

00000180 <CAN_transmit_complete>:


int CAN_transmit_complete(void) {
	//Check if TX buffer is not pending transmission (TXREQ = 0)
	if (test_bit(MCP_read(MCP_TXB0CTRL), 3)) {
 180:	80 e3       	ldi	r24, 0x30	; 48
 182:	ab d1       	rcall	.+854    	; 0x4da <MCP_read>
 184:	86 95       	lsr	r24
 186:	86 95       	lsr	r24
 188:	86 95       	lsr	r24
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	89 27       	eor	r24, r25
		return 0;
		} else {
		return 1;
	}
}
 18e:	81 70       	andi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	08 95       	ret

00000194 <CAN_message_send>:
	

	return 0;
}

int CAN_message_send(can_msg* message) {
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	8c 01       	movw	r16, r24
	uint8_t i;
	
	//Check if there is no pending transmission
	if (CAN_transmit_complete()) {
 19c:	f1 df       	rcall	.-30     	; 0x180 <CAN_transmit_complete>
 19e:	89 2b       	or	r24, r25
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <CAN_message_send+0x10>
 1a2:	38 c0       	rjmp	.+112    	; 0x214 <CAN_message_send+0x80>
		
		//Set the message id (use standard identifier)
		MCP_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
 1a4:	f8 01       	movw	r30, r16
 1a6:	60 81       	ld	r22, Z
 1a8:	71 81       	ldd	r23, Z+1	; 0x01
 1aa:	76 95       	lsr	r23
 1ac:	67 95       	ror	r22
 1ae:	76 95       	lsr	r23
 1b0:	67 95       	ror	r22
 1b2:	76 95       	lsr	r23
 1b4:	67 95       	ror	r22
 1b6:	81 e3       	ldi	r24, 0x31	; 49
 1b8:	bb d1       	rcall	.+886    	; 0x530 <MCP_write>
		MCP_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
 1ba:	f8 01       	movw	r30, r16
 1bc:	60 81       	ld	r22, Z
 1be:	71 81       	ldd	r23, Z+1	; 0x01
 1c0:	66 0f       	add	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	62 95       	swap	r22
 1c6:	72 95       	swap	r23
 1c8:	70 7f       	andi	r23, 0xF0	; 240
 1ca:	76 27       	eor	r23, r22
 1cc:	60 7f       	andi	r22, 0xF0	; 240
 1ce:	76 27       	eor	r23, r22
 1d0:	82 e3       	ldi	r24, 0x32	; 50
 1d2:	ae d1       	rcall	.+860    	; 0x530 <MCP_write>
		MCP_write(MCP_TXB0EID8, 0);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	83 e4       	ldi	r24, 0x43	; 67
 1d8:	ab d1       	rcall	.+854    	; 0x530 <MCP_write>
		MCP_write(MCP_TXB0EID0, 0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	84 e4       	ldi	r24, 0x44	; 68
 1de:	a8 d1       	rcall	.+848    	; 0x530 <MCP_write>
		
		//Set data length and use data frame (RTR = 0)
		MCP_write(MCP_TXB0DLC, message->length);
 1e0:	f8 01       	movw	r30, r16
 1e2:	62 81       	ldd	r22, Z+2	; 0x02
 1e4:	85 e3       	ldi	r24, 0x35	; 53
 1e6:	a4 d1       	rcall	.+840    	; 0x530 <MCP_write>

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
 1e8:	f8 01       	movw	r30, r16
 1ea:	82 81       	ldd	r24, Z+2	; 0x02
 1ec:	88 23       	and	r24, r24
 1ee:	69 f0       	breq	.+26     	; 0x20a <CAN_message_send+0x76>
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
			MCP_write(MCP_TXB0D0 + i, message->data[i]);
 1f2:	f8 01       	movw	r30, r16
 1f4:	ec 0f       	add	r30, r28
 1f6:	f1 1d       	adc	r31, r1
 1f8:	63 81       	ldd	r22, Z+3	; 0x03
 1fa:	86 e3       	ldi	r24, 0x36	; 54
 1fc:	8c 0f       	add	r24, r28
 1fe:	98 d1       	rcall	.+816    	; 0x530 <MCP_write>
		
		//Set data length and use data frame (RTR = 0)
		MCP_write(MCP_TXB0DLC, message->length);

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
 200:	cf 5f       	subi	r28, 0xFF	; 255
 202:	f8 01       	movw	r30, r16
 204:	82 81       	ldd	r24, Z+2	; 0x02
 206:	c8 17       	cp	r28, r24
 208:	a0 f3       	brcs	.-24     	; 0x1f2 <CAN_message_send+0x5e>
			MCP_write(MCP_TXB0D0 + i, message->data[i]);
		}
		
		//Request to send via TX0
		MCP_request_to_send(MCP_RTS_TX0);
 20a:	81 e8       	ldi	r24, 0x81	; 129
 20c:	a4 d1       	rcall	.+840    	; 0x556 <MCP_request_to_send>
		if (CAN_error() < 0) {
			return -1;
		}
	}
	
	return 0;
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	06 c0       	rjmp	.+12     	; 0x220 <CAN_message_send+0x8c>
		
		//Request to send via TX0
		MCP_request_to_send(MCP_RTS_TX0);
		
		} else {
		if (CAN_error() < 0) {
 214:	a6 df       	rcall	.-180    	; 0x162 <CAN_error>
 216:	99 0f       	add	r25, r25
 218:	99 0b       	sbc	r25, r25
 21a:	89 2f       	mov	r24, r25
 21c:	99 0f       	add	r25, r25
 21e:	99 0b       	sbc	r25, r25
			return -1;
		}
	}
	
	return 0;
}
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <CAN_int_vect>:
	}
}

 int CAN_int_vect(void) {
 	//Clear interrupt flag
  	MCP_bit_modify(MCP_CANINTF, MCP_RXF0SIDL, MCP_RXF0SIDH);
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	8c e2       	ldi	r24, 0x2C	; 44
 22e:	9f d1       	rcall	.+830    	; 0x56e <MCP_bit_modify>
  	rx_flag = 1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <__data_end>
 	return 0;
 }
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	08 95       	ret

0000023c <CAN_data_receive>:



can_msg CAN_data_receive(void) {
 23c:	9f 92       	push	r9
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	2b 97       	sbiw	r28, 0x0b	; 11
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	f8 94       	cli
 25c:	de bf       	out	0x3e, r29	; 62
 25e:	0f be       	out	0x3f, r0	; 63
 260:	cd bf       	out	0x3d, r28	; 61
 262:	5c 01       	movw	r10, r24
	printf("asdfassdf\n\r");
 264:	8a e2       	ldi	r24, 0x2A	; 42
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	9f 93       	push	r25
 26a:	8f 93       	push	r24
 26c:	33 d2       	rcall	.+1126   	; 0x6d4 <printf>
	uint8_t i;
	can_msg message = {0};
 26e:	fe 01       	movw	r30, r28
 270:	31 96       	adiw	r30, 0x01	; 1
 272:	8b e0       	ldi	r24, 0x0B	; 11
 274:	df 01       	movw	r26, r30
 276:	1d 92       	st	X+, r1
 278:	8a 95       	dec	r24
 27a:	e9 f7       	brne	.-6      	; 0x276 <CAN_data_receive+0x3a>
	
	//Check if RX buffer has a message
	if (rx_flag == 1) {
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <__data_end>
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	b1 f5       	brne	.+108    	; 0x2f4 <CAN_data_receive+0xb8>
		
		//Get message id
		message.id  = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
 288:	81 e6       	ldi	r24, 0x61	; 97
 28a:	27 d1       	rcall	.+590    	; 0x4da <MCP_read>
 28c:	c8 2e       	mov	r12, r24
 28e:	82 e6       	ldi	r24, 0x62	; 98
 290:	24 d1       	rcall	.+584    	; 0x4da <MCP_read>
 292:	82 95       	swap	r24
 294:	86 95       	lsr	r24
 296:	87 70       	andi	r24, 0x07	; 7
 298:	d1 2c       	mov	r13, r1
 29a:	cc 0c       	add	r12, r12
 29c:	dd 1c       	adc	r13, r13
 29e:	cc 0c       	add	r12, r12
 2a0:	dd 1c       	adc	r13, r13
 2a2:	cc 0c       	add	r12, r12
 2a4:	dd 1c       	adc	r13, r13
 2a6:	c8 2a       	or	r12, r24
		
		//Get message length
		//message.length = (MCP_CANCTRL) & (MCP_read(MCP_RXB0DLC));
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
 2a8:	85 e6       	ldi	r24, 0x65	; 101
 2aa:	17 d1       	rcall	.+558    	; 0x4da <MCP_read>
 2ac:	08 2f       	mov	r16, r24
 2ae:	0f 70       	andi	r16, 0x0F	; 15
		printf("len %d\n\r", message.length);
 2b0:	1f 92       	push	r1
 2b2:	0f 93       	push	r16
 2b4:	86 e3       	ldi	r24, 0x36	; 54
 2b6:	92 e0       	ldi	r25, 0x02	; 2
 2b8:	9f 93       	push	r25
 2ba:	8f 93       	push	r24
 2bc:	0b d2       	rcall	.+1046   	; 0x6d4 <printf>
		
		//Get message data
		for(i = 0; i < message.length; i++) {
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	00 23       	and	r16, r16
 2c8:	91 f0       	breq	.+36     	; 0x2ee <CAN_data_receive+0xb2>
 2ca:	7e 01       	movw	r14, r28
 2cc:	b4 e0       	ldi	r27, 0x04	; 4
 2ce:	eb 0e       	add	r14, r27
 2d0:	f1 1c       	adc	r15, r1
 2d2:	0f 2e       	mov	r0, r31
 2d4:	f6 e6       	ldi	r31, 0x66	; 102
 2d6:	9f 2e       	mov	r9, r31
 2d8:	f0 2d       	mov	r31, r0
 2da:	90 0e       	add	r9, r16
 2dc:	16 e6       	ldi	r17, 0x66	; 102
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
 2de:	81 2f       	mov	r24, r17
 2e0:	fc d0       	rcall	.+504    	; 0x4da <MCP_read>
 2e2:	f7 01       	movw	r30, r14
 2e4:	81 93       	st	Z+, r24
 2e6:	7f 01       	movw	r14, r30
 2e8:	1f 5f       	subi	r17, 0xFF	; 255
		//message.length = (MCP_CANCTRL) & (MCP_read(MCP_RXB0DLC));
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
		printf("len %d\n\r", message.length);
		
		//Get message data
		for(i = 0; i < message.length; i++) {
 2ea:	19 11       	cpse	r17, r9
 2ec:	f8 cf       	rjmp	.-16     	; 0x2de <CAN_data_receive+0xa2>
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Clear interrupt flag
		rx_flag = 0;
 2ee:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <__data_end>
 2f2:	03 c0       	rjmp	.+6      	; 0x2fa <CAN_data_receive+0xbe>


can_msg CAN_data_receive(void) {
	printf("asdfassdf\n\r");
	uint8_t i;
	can_msg message = {0};
 2f4:	00 e0       	ldi	r16, 0x00	; 0
 2f6:	c1 2c       	mov	r12, r1
 2f8:	d1 2c       	mov	r13, r1
		//} else {
		//Message not received
		//message.id = -1;
	//}
	
	return message;
 2fa:	da 82       	std	Y+2, r13	; 0x02
 2fc:	c9 82       	std	Y+1, r12	; 0x01
 2fe:	0b 83       	std	Y+3, r16	; 0x03
 300:	8b e0       	ldi	r24, 0x0B	; 11
 302:	fe 01       	movw	r30, r28
 304:	31 96       	adiw	r30, 0x01	; 1
 306:	d5 01       	movw	r26, r10
 308:	01 90       	ld	r0, Z+
 30a:	0d 92       	st	X+, r0
 30c:	8a 95       	dec	r24
 30e:	e1 f7       	brne	.-8      	; 0x308 <CAN_data_receive+0xcc>
}
 310:	c5 01       	movw	r24, r10
 312:	2b 96       	adiw	r28, 0x0b	; 11
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	f8 94       	cli
 318:	de bf       	out	0x3e, r29	; 62
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	cd bf       	out	0x3d, r28	; 61
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	cf 90       	pop	r12
 32e:	bf 90       	pop	r11
 330:	af 90       	pop	r10
 332:	9f 90       	pop	r9
 334:	08 95       	ret

00000336 <__vector_3>:

//Interrupt service routine for CAN bus
ISR(INT2_vect) {
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	0b b6       	in	r0, 0x3b	; 59
 342:	0f 92       	push	r0
 344:	2f 93       	push	r18
 346:	3f 93       	push	r19
 348:	4f 93       	push	r20
 34a:	5f 93       	push	r21
 34c:	6f 93       	push	r22
 34e:	7f 93       	push	r23
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
 354:	af 93       	push	r26
 356:	bf 93       	push	r27
 358:	ef 93       	push	r30
 35a:	ff 93       	push	r31
//	_delay_ms(10);
	CAN_int_vect();
 35c:	65 df       	rcall	.-310    	; 0x228 <CAN_int_vect>
// 	else if (interrupt & MCP_RX1IF){
// 		rx_flag = 1;
// 		// clear CANINTF.RX1IF
// 		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
// 	}
}
 35e:	ff 91       	pop	r31
 360:	ef 91       	pop	r30
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	7f 91       	pop	r23
 36c:	6f 91       	pop	r22
 36e:	5f 91       	pop	r21
 370:	4f 91       	pop	r20
 372:	3f 91       	pop	r19
 374:	2f 91       	pop	r18
 376:	0f 90       	pop	r0
 378:	0b be       	out	0x3b, r0	; 59
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <main>:
	
	uint8_t x, y;
	uint8_t i=0;
	

    int main(void){
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	cd b7       	in	r28, 0x3d	; 61
 38a:	de b7       	in	r29, 0x3e	; 62
 38c:	66 97       	sbiw	r28, 0x16	; 22
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	de bf       	out	0x3e, r29	; 62
 394:	0f be       	out	0x3f, r0	; 63
 396:	cd bf       	out	0x3d, r28	; 61
		
		cli();
 398:	f8 94       	cli
		
		
		
		EICRA |= (0 << ISC21) | (0 << ISC20);
 39a:	e9 e6       	ldi	r30, 0x69	; 105
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	80 83       	st	Z, r24
		// Enable external interrupts of INT2
		EIMSK |= (1 << INT2);
 3a2:	ea 9a       	sbi	0x1d, 2	; 29
		
		DDRD &= ~(1 << PIND2);		//Set D2(INT2) as input
 3a4:	52 98       	cbi	0x0a, 2	; 10
		int variabel = 1;
		
		can_msg can_msg_send;
		can_msg can_msg_receive;
		
		UART_Init(UBRREG);
 3a6:	87 e6       	ldi	r24, 0x67	; 103
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	37 d1       	rcall	.+622    	; 0x61a <UART_Init>
// 		SPI_init();
// 		MCP_init();

		if (CAN_init() == 0) {
 3ac:	bb de       	rcall	.-650    	; 0x124 <CAN_init>
 3ae:	89 2b       	or	r24, r25
 3b0:	71 f4       	brne	.+28     	; 0x3ce <main+0x4a>
			printf("CAN BE WORKING\n\r");
 3b2:	8f e3       	ldi	r24, 0x3F	; 63
 3b4:	92 e0       	ldi	r25, 0x02	; 2
 3b6:	9f 93       	push	r25
 3b8:	8f 93       	push	r24
 3ba:	8c d1       	rcall	.+792    	; 0x6d4 <printf>
			can_msg_send.id = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	9a 83       	std	Y+2, r25	; 0x02
 3c2:	89 83       	std	Y+1, r24	; 0x01
			can_msg_send.length = 8;
 3c4:	88 e0       	ldi	r24, 0x08	; 8
 3c6:	8b 83       	std	Y+3, r24	; 0x03
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <main+0x58>
			} else {
			printf("CAN NOT BE WORKING \n\r");
 3ce:	80 e5       	ldi	r24, 0x50	; 80
 3d0:	92 e0       	ldi	r25, 0x02	; 2
 3d2:	9f 93       	push	r25
 3d4:	8f 93       	push	r24
 3d6:	7e d1       	rcall	.+764    	; 0x6d4 <printf>
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
		}

		sei();
 3dc:	78 94       	sei
// 			if (MCP_read(addr)==data)
// 				printf("success\n");
// 			else
// 				printf("error\n");
			
			can_msg_send.data[0] = 0x10;
 3de:	68 94       	set
 3e0:	55 24       	eor	r5, r5
 3e2:	54 f8       	bld	r5, 4
			
			CAN_message_send(&can_msg_send);
			can_msg_receive = CAN_data_receive();
			x=can_msg_receive.data[0];
			y=can_msg_receive.data[1];
			printf("CANSTAT: %02x\n\r", MCP_read(MCP_CANSTAT));
 3e4:	0f 2e       	mov	r0, r31
 3e6:	f6 e6       	ldi	r31, 0x66	; 102
 3e8:	8f 2e       	mov	r8, r31
 3ea:	f2 e0       	ldi	r31, 0x02	; 2
 3ec:	9f 2e       	mov	r9, r31
 3ee:	f0 2d       	mov	r31, r0
			printf("CANINTF: %02x\n\r",MCP_read(MCP_CANINTF));
 3f0:	0f 2e       	mov	r0, r31
 3f2:	f6 e7       	ldi	r31, 0x76	; 118
 3f4:	af 2e       	mov	r10, r31
 3f6:	f2 e0       	ldi	r31, 0x02	; 2
 3f8:	bf 2e       	mov	r11, r31
 3fa:	f0 2d       	mov	r31, r0
			printf("CANTERF: %02x\n\r",MCP_read(MCP_RX0IF));
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f6 e8       	ldi	r31, 0x86	; 134
 400:	cf 2e       	mov	r12, r31
 402:	f2 e0       	ldi	r31, 0x02	; 2
 404:	df 2e       	mov	r13, r31
 406:	f0 2d       	mov	r31, r0
			printf("TXb0CTRL: %02x\n\r",MCP_read(MCP_TXB0CTRL));
 408:	0f 2e       	mov	r0, r31
 40a:	f6 e9       	ldi	r31, 0x96	; 150
 40c:	ef 2e       	mov	r14, r31
 40e:	f2 e0       	ldi	r31, 0x02	; 2
 410:	ff 2e       	mov	r15, r31
 412:	f0 2d       	mov	r31, r0
			printf("y1 er %02x \n\r",x);
 414:	07 ea       	ldi	r16, 0xA7	; 167
 416:	12 e0       	ldi	r17, 0x02	; 2
			printf("y2 er %02x \n\r",y);
 418:	0f 2e       	mov	r0, r31
 41a:	f5 eb       	ldi	r31, 0xB5	; 181
 41c:	6f 2e       	mov	r6, r31
 41e:	f2 e0       	ldi	r31, 0x02	; 2
 420:	7f 2e       	mov	r7, r31
 422:	f0 2d       	mov	r31, r0
// 			if (MCP_read(addr)==data)
// 				printf("success\n");
// 			else
// 				printf("error\n");
			
			can_msg_send.data[0] = 0x10;
 424:	5c 82       	std	Y+4, r5	; 0x04
			i=i+1;
 426:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <i>
 42a:	8f 5f       	subi	r24, 0xFF	; 255
 42c:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <i>
			if (i>0xFF)
			{
				i=0;
			}
			can_msg_send.data[1] = i;
 430:	8d 83       	std	Y+5, r24	; 0x05
			
			CAN_message_send(&can_msg_send);
 432:	ce 01       	movw	r24, r28
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	ae de       	rcall	.-676    	; 0x194 <CAN_message_send>
			can_msg_receive = CAN_data_receive();
 438:	ce 01       	movw	r24, r28
 43a:	0c 96       	adiw	r24, 0x0c	; 12
 43c:	ff de       	rcall	.-514    	; 0x23c <CAN_data_receive>
			x=can_msg_receive.data[0];
 43e:	8f 85       	ldd	r24, Y+15	; 0x0f
 440:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <x>
			y=can_msg_receive.data[1];
 444:	88 89       	ldd	r24, Y+16	; 0x10
 446:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <y>
			printf("CANSTAT: %02x\n\r", MCP_read(MCP_CANSTAT));
 44a:	8e e0       	ldi	r24, 0x0E	; 14
 44c:	46 d0       	rcall	.+140    	; 0x4da <MCP_read>
 44e:	1f 92       	push	r1
 450:	8f 93       	push	r24
 452:	9f 92       	push	r9
 454:	8f 92       	push	r8
 456:	3e d1       	rcall	.+636    	; 0x6d4 <printf>
			printf("CANINTF: %02x\n\r",MCP_read(MCP_CANINTF));
 458:	8c e2       	ldi	r24, 0x2C	; 44
 45a:	3f d0       	rcall	.+126    	; 0x4da <MCP_read>
 45c:	1f 92       	push	r1
 45e:	8f 93       	push	r24
 460:	bf 92       	push	r11
 462:	af 92       	push	r10
 464:	37 d1       	rcall	.+622    	; 0x6d4 <printf>
			printf("CANTERF: %02x\n\r",MCP_read(MCP_RX0IF));
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	38 d0       	rcall	.+112    	; 0x4da <MCP_read>
 46a:	1f 92       	push	r1
 46c:	8f 93       	push	r24
 46e:	df 92       	push	r13
 470:	cf 92       	push	r12
 472:	30 d1       	rcall	.+608    	; 0x6d4 <printf>
			printf("TXb0CTRL: %02x\n\r",MCP_read(MCP_TXB0CTRL));
 474:	80 e3       	ldi	r24, 0x30	; 48
 476:	31 d0       	rcall	.+98     	; 0x4da <MCP_read>
 478:	1f 92       	push	r1
 47a:	8f 93       	push	r24
 47c:	ff 92       	push	r15
 47e:	ef 92       	push	r14
 480:	29 d1       	rcall	.+594    	; 0x6d4 <printf>
			printf("y1 er %02x \n\r",x);
 482:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <x>
 486:	1f 92       	push	r1
 488:	8f 93       	push	r24
 48a:	1f 93       	push	r17
 48c:	0f 93       	push	r16
 48e:	22 d1       	rcall	.+580    	; 0x6d4 <printf>
			printf("y2 er %02x \n\r",y);
 490:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <y>
 494:	1f 92       	push	r1
 496:	8f 93       	push	r24
 498:	7f 92       	push	r7
 49a:	6f 92       	push	r6
 49c:	1b d1       	rcall	.+566    	; 0x6d4 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 49e:	2f ef       	ldi	r18, 0xFF	; 255
 4a0:	84 e3       	ldi	r24, 0x34	; 52
 4a2:	9c e0       	ldi	r25, 0x0C	; 12
 4a4:	21 50       	subi	r18, 0x01	; 1
 4a6:	80 40       	sbci	r24, 0x00	; 0
 4a8:	90 40       	sbci	r25, 0x00	; 0
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4ae:	00 00       	nop
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	b4 cf       	rjmp	.-152    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>

000004bc <MCP_reset>:
	SPI_send(MCP_READ_STATUS);
	uint8_t status = SPI_send(0);
	SPI_set_ss(1);
	
	return status;
}
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	90 d0       	rcall	.+288    	; 0x5e2 <SPI_set_ss>
 4c2:	80 ec       	ldi	r24, 0xC0	; 192
 4c4:	88 d0       	rcall	.+272    	; 0x5d6 <SPI_send>
 4c6:	8f e1       	ldi	r24, 0x1F	; 31
 4c8:	93 e0       	ldi	r25, 0x03	; 3
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <MCP_reset+0xe>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <MCP_reset+0x14>
 4d0:	00 00       	nop
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	85 c0       	rjmp	.+266    	; 0x5e2 <SPI_set_ss>
 4d8:	08 95       	ret

000004da <MCP_read>:
 4da:	cf 93       	push	r28
 4dc:	c8 2f       	mov	r28, r24
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	7f d0       	rcall	.+254    	; 0x5e2 <SPI_set_ss>
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	77 d0       	rcall	.+238    	; 0x5d6 <SPI_send>
 4e8:	8c 2f       	mov	r24, r28
 4ea:	75 d0       	rcall	.+234    	; 0x5d6 <SPI_send>
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	73 d0       	rcall	.+230    	; 0x5d6 <SPI_send>
 4f0:	c8 2f       	mov	r28, r24
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	75 d0       	rcall	.+234    	; 0x5e2 <SPI_set_ss>
 4f8:	8c 2f       	mov	r24, r28
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <MCP_init>:
 4fe:	4f d0       	rcall	.+158    	; 0x59e <SPI_init>
 500:	dd df       	rcall	.-70     	; 0x4bc <MCP_reset>
 502:	83 ec       	ldi	r24, 0xC3	; 195
 504:	92 e0       	ldi	r25, 0x02	; 2
 506:	9f 93       	push	r25
 508:	8f 93       	push	r24
 50a:	e4 d0       	rcall	.+456    	; 0x6d4 <printf>
 50c:	8e e0       	ldi	r24, 0x0E	; 14
 50e:	e5 df       	rcall	.-54     	; 0x4da <MCP_read>
 510:	80 7e       	andi	r24, 0xE0	; 224
 512:	0f 90       	pop	r0
 514:	0f 90       	pop	r0
 516:	80 38       	cpi	r24, 0x80	; 128
 518:	49 f0       	breq	.+18     	; 0x52c <MCP_init+0x2e>
 51a:	8d ec       	ldi	r24, 0xCD	; 205
 51c:	92 e0       	ldi	r25, 0x02	; 2
 51e:	9f 93       	push	r25
 520:	8f 93       	push	r24
 522:	d8 d0       	rcall	.+432    	; 0x6d4 <printf>
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	08 95       	ret
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	08 95       	ret

00000530 <MCP_write>:
 530:	cf 93       	push	r28
 532:	df 93       	push	r29
 534:	d8 2f       	mov	r29, r24
 536:	c6 2f       	mov	r28, r22
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	52 d0       	rcall	.+164    	; 0x5e2 <SPI_set_ss>
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	4a d0       	rcall	.+148    	; 0x5d6 <SPI_send>
 542:	8d 2f       	mov	r24, r29
 544:	48 d0       	rcall	.+144    	; 0x5d6 <SPI_send>
 546:	8c 2f       	mov	r24, r28
 548:	46 d0       	rcall	.+140    	; 0x5d6 <SPI_send>
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	49 d0       	rcall	.+146    	; 0x5e2 <SPI_set_ss>
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <MCP_request_to_send>:
 556:	cf 93       	push	r28
 558:	c8 2f       	mov	r28, r24
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	41 d0       	rcall	.+130    	; 0x5e2 <SPI_set_ss>
 560:	8c 2f       	mov	r24, r28
 562:	39 d0       	rcall	.+114    	; 0x5d6 <SPI_send>
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	3c d0       	rcall	.+120    	; 0x5e2 <SPI_set_ss>
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <MCP_bit_modify>:

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	18 2f       	mov	r17, r24
 576:	d6 2f       	mov	r29, r22
 578:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	31 d0       	rcall	.+98     	; 0x5e2 <SPI_set_ss>
	SPI_send(MCP_BITMOD);
 580:	85 e0       	ldi	r24, 0x05	; 5
 582:	29 d0       	rcall	.+82     	; 0x5d6 <SPI_send>
	
	SPI_send(address);
 584:	81 2f       	mov	r24, r17
 586:	27 d0       	rcall	.+78     	; 0x5d6 <SPI_send>
	SPI_send(mask);
 588:	8d 2f       	mov	r24, r29
 58a:	25 d0       	rcall	.+74     	; 0x5d6 <SPI_send>
	SPI_send(data);
 58c:	8c 2f       	mov	r24, r28
 58e:	23 d0       	rcall	.+70     	; 0x5d6 <SPI_send>
	
	SPI_set_ss(1);
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	26 d0       	rcall	.+76     	; 0x5e2 <SPI_set_ss>
}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	08 95       	ret

0000059e <SPI_init>:
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
	
	return SPDR;
}
 59e:	8f ee       	ldi	r24, 0xEF	; 239
 5a0:	92 e0       	ldi	r25, 0x02	; 2
 5a2:	9f 93       	push	r25
 5a4:	8f 93       	push	r24
 5a6:	96 d0       	rcall	.+300    	; 0x6d4 <printf>
 5a8:	84 b1       	in	r24, 0x04	; 4
 5aa:	87 68       	ori	r24, 0x87	; 135
 5ac:	84 b9       	out	0x04, r24	; 4
 5ae:	23 98       	cbi	0x04, 3	; 4
 5b0:	8d ef       	ldi	r24, 0xFD	; 253
 5b2:	92 e0       	ldi	r25, 0x02	; 2
 5b4:	9f 93       	push	r25
 5b6:	8f 93       	push	r24
 5b8:	8d d0       	rcall	.+282    	; 0x6d4 <printf>
 5ba:	81 e5       	ldi	r24, 0x51	; 81
 5bc:	8c bd       	out	0x2c, r24	; 44
 5be:	87 e0       	ldi	r24, 0x07	; 7
 5c0:	93 e0       	ldi	r25, 0x03	; 3
 5c2:	9f 93       	push	r25
 5c4:	8f 93       	push	r24
 5c6:	86 d0       	rcall	.+268    	; 0x6d4 <printf>
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	08 95       	ret

000005d6 <SPI_send>:
 5d6:	8e bd       	out	0x2e, r24	; 46
 5d8:	0d b4       	in	r0, 0x2d	; 45
 5da:	07 fe       	sbrs	r0, 7
 5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <SPI_send+0x2>
 5de:	8e b5       	in	r24, 0x2e	; 46
 5e0:	08 95       	ret

000005e2 <SPI_set_ss>:


void SPI_set_ss( int select )
{
	//for ATmega 162 set chip-select
	if (select == 1){
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	91 05       	cpc	r25, r1
 5e6:	11 f4       	brne	.+4      	; 0x5ec <SPI_set_ss+0xa>
		set_bit(PORTB, SPI_SS);
 5e8:	2f 9a       	sbi	0x05, 7	; 5
 5ea:	08 95       	ret
	}
	else if (select == 0){
 5ec:	89 2b       	or	r24, r25
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <SPI_set_ss+0x10>
		clear_bit(PORTB, SPI_SS);
 5f0:	2f 98       	cbi	0x05, 7	; 5
 5f2:	08 95       	ret

000005f4 <UART_TX>:
}

int UART_TX(char data, FILE * _in){
	(void)(_in);
	
	while( !(UCSR0A & (1 << UDRE0)) );
 5f4:	e0 ec       	ldi	r30, 0xC0	; 192
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	90 81       	ld	r25, Z
 5fa:	95 ff       	sbrs	r25, 5
 5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <UART_TX+0x4>
	
	// send data
	UDR0 = data;
 5fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	
	return 0;
}
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	08 95       	ret

00000608 <UART_RX>:

int UART_RX(FILE * _in ){
	(void)(_in);
	while( !(UCSR0A & (1 << RXC0)) );
 608:	e0 ec       	ldi	r30, 0xC0	; 192
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	88 23       	and	r24, r24
 610:	ec f7       	brge	.-6      	; 0x60c <UART_RX+0x4>
	
	// Data recieved
	return UDR0;
 612:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	08 95       	ret

0000061a <UART_Init>:


void UART_Init(unsigned int ubrr)
{
	// Baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 61a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)(ubrr);
 61e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	// Enable Rx and Tx
	
	UCSR0B = (1 << RXEN0 ) | (1 << TXEN0);
 622:	88 e1       	ldi	r24, 0x18	; 24
 624:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (1 << USBS0);
 628:	e2 ec       	ldi	r30, 0xC2	; 194
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	88 e0       	ldi	r24, 0x08	; 8
 62e:	80 83       	st	Z, r24
	UCSR0C = (3 << UCSZ00);
 630:	86 e0       	ldi	r24, 0x06	; 6
 632:	80 83       	st	Z, r24
	
	

	
	fdevopen(UART_TX, UART_RX);
 634:	64 e0       	ldi	r22, 0x04	; 4
 636:	73 e0       	ldi	r23, 0x03	; 3
 638:	8a ef       	ldi	r24, 0xFA	; 250
 63a:	92 e0       	ldi	r25, 0x02	; 2
 63c:	01 c0       	rjmp	.+2      	; 0x640 <fdevopen>
 63e:	08 95       	ret

00000640 <fdevopen>:
 640:	0f 93       	push	r16
 642:	1f 93       	push	r17
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	00 97       	sbiw	r24, 0x00	; 0
 64a:	31 f4       	brne	.+12     	; 0x658 <fdevopen+0x18>
 64c:	61 15       	cp	r22, r1
 64e:	71 05       	cpc	r23, r1
 650:	19 f4       	brne	.+6      	; 0x658 <fdevopen+0x18>
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	39 c0       	rjmp	.+114    	; 0x6ca <fdevopen+0x8a>
 658:	8b 01       	movw	r16, r22
 65a:	ec 01       	movw	r28, r24
 65c:	6e e0       	ldi	r22, 0x0E	; 14
 65e:	70 e0       	ldi	r23, 0x00	; 0
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	38 d2       	rcall	.+1136   	; 0xad6 <calloc>
 666:	fc 01       	movw	r30, r24
 668:	89 2b       	or	r24, r25
 66a:	99 f3       	breq	.-26     	; 0x652 <fdevopen+0x12>
 66c:	80 e8       	ldi	r24, 0x80	; 128
 66e:	83 83       	std	Z+3, r24	; 0x03
 670:	01 15       	cp	r16, r1
 672:	11 05       	cpc	r17, r1
 674:	71 f0       	breq	.+28     	; 0x692 <fdevopen+0x52>
 676:	13 87       	std	Z+11, r17	; 0x0b
 678:	02 87       	std	Z+10, r16	; 0x0a
 67a:	81 e8       	ldi	r24, 0x81	; 129
 67c:	83 83       	std	Z+3, r24	; 0x03
 67e:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <__iob>
 682:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <__iob+0x1>
 686:	89 2b       	or	r24, r25
 688:	21 f4       	brne	.+8      	; 0x692 <fdevopen+0x52>
 68a:	f0 93 17 03 	sts	0x0317, r31	; 0x800317 <__iob+0x1>
 68e:	e0 93 16 03 	sts	0x0316, r30	; 0x800316 <__iob>
 692:	20 97       	sbiw	r28, 0x00	; 0
 694:	c9 f0       	breq	.+50     	; 0x6c8 <fdevopen+0x88>
 696:	d1 87       	std	Z+9, r29	; 0x09
 698:	c0 87       	std	Z+8, r28	; 0x08
 69a:	83 81       	ldd	r24, Z+3	; 0x03
 69c:	82 60       	ori	r24, 0x02	; 2
 69e:	83 83       	std	Z+3, r24	; 0x03
 6a0:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__iob+0x2>
 6a4:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <__iob+0x3>
 6a8:	89 2b       	or	r24, r25
 6aa:	71 f4       	brne	.+28     	; 0x6c8 <fdevopen+0x88>
 6ac:	f0 93 19 03 	sts	0x0319, r31	; 0x800319 <__iob+0x3>
 6b0:	e0 93 18 03 	sts	0x0318, r30	; 0x800318 <__iob+0x2>
 6b4:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__iob+0x4>
 6b8:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__iob+0x5>
 6bc:	89 2b       	or	r24, r25
 6be:	21 f4       	brne	.+8      	; 0x6c8 <fdevopen+0x88>
 6c0:	f0 93 1b 03 	sts	0x031B, r31	; 0x80031b <__iob+0x5>
 6c4:	e0 93 1a 03 	sts	0x031A, r30	; 0x80031a <__iob+0x4>
 6c8:	cf 01       	movw	r24, r30
 6ca:	df 91       	pop	r29
 6cc:	cf 91       	pop	r28
 6ce:	1f 91       	pop	r17
 6d0:	0f 91       	pop	r16
 6d2:	08 95       	ret

000006d4 <printf>:
 6d4:	cf 93       	push	r28
 6d6:	df 93       	push	r29
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
 6dc:	ae 01       	movw	r20, r28
 6de:	4a 5f       	subi	r20, 0xFA	; 250
 6e0:	5f 4f       	sbci	r21, 0xFF	; 255
 6e2:	fa 01       	movw	r30, r20
 6e4:	61 91       	ld	r22, Z+
 6e6:	71 91       	ld	r23, Z+
 6e8:	af 01       	movw	r20, r30
 6ea:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__iob+0x2>
 6ee:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <__iob+0x3>
 6f2:	03 d0       	rcall	.+6      	; 0x6fa <vfprintf>
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <vfprintf>:
 6fa:	2f 92       	push	r2
 6fc:	3f 92       	push	r3
 6fe:	4f 92       	push	r4
 700:	5f 92       	push	r5
 702:	6f 92       	push	r6
 704:	7f 92       	push	r7
 706:	8f 92       	push	r8
 708:	9f 92       	push	r9
 70a:	af 92       	push	r10
 70c:	bf 92       	push	r11
 70e:	cf 92       	push	r12
 710:	df 92       	push	r13
 712:	ef 92       	push	r14
 714:	ff 92       	push	r15
 716:	0f 93       	push	r16
 718:	1f 93       	push	r17
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	cd b7       	in	r28, 0x3d	; 61
 720:	de b7       	in	r29, 0x3e	; 62
 722:	2c 97       	sbiw	r28, 0x0c	; 12
 724:	0f b6       	in	r0, 0x3f	; 63
 726:	f8 94       	cli
 728:	de bf       	out	0x3e, r29	; 62
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	cd bf       	out	0x3d, r28	; 61
 72e:	7c 01       	movw	r14, r24
 730:	6b 01       	movw	r12, r22
 732:	8a 01       	movw	r16, r20
 734:	fc 01       	movw	r30, r24
 736:	17 82       	std	Z+7, r1	; 0x07
 738:	16 82       	std	Z+6, r1	; 0x06
 73a:	83 81       	ldd	r24, Z+3	; 0x03
 73c:	81 ff       	sbrs	r24, 1
 73e:	b0 c1       	rjmp	.+864    	; 0xaa0 <vfprintf+0x3a6>
 740:	ce 01       	movw	r24, r28
 742:	01 96       	adiw	r24, 0x01	; 1
 744:	4c 01       	movw	r8, r24
 746:	f7 01       	movw	r30, r14
 748:	93 81       	ldd	r25, Z+3	; 0x03
 74a:	f6 01       	movw	r30, r12
 74c:	93 fd       	sbrc	r25, 3
 74e:	85 91       	lpm	r24, Z+
 750:	93 ff       	sbrs	r25, 3
 752:	81 91       	ld	r24, Z+
 754:	6f 01       	movw	r12, r30
 756:	88 23       	and	r24, r24
 758:	09 f4       	brne	.+2      	; 0x75c <vfprintf+0x62>
 75a:	9e c1       	rjmp	.+828    	; 0xa98 <vfprintf+0x39e>
 75c:	85 32       	cpi	r24, 0x25	; 37
 75e:	39 f4       	brne	.+14     	; 0x76e <vfprintf+0x74>
 760:	93 fd       	sbrc	r25, 3
 762:	85 91       	lpm	r24, Z+
 764:	93 ff       	sbrs	r25, 3
 766:	81 91       	ld	r24, Z+
 768:	6f 01       	movw	r12, r30
 76a:	85 32       	cpi	r24, 0x25	; 37
 76c:	21 f4       	brne	.+8      	; 0x776 <vfprintf+0x7c>
 76e:	b7 01       	movw	r22, r14
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	15 d3       	rcall	.+1578   	; 0xd9e <fputc>
 774:	e8 cf       	rjmp	.-48     	; 0x746 <vfprintf+0x4c>
 776:	51 2c       	mov	r5, r1
 778:	31 2c       	mov	r3, r1
 77a:	20 e0       	ldi	r18, 0x00	; 0
 77c:	20 32       	cpi	r18, 0x20	; 32
 77e:	a0 f4       	brcc	.+40     	; 0x7a8 <vfprintf+0xae>
 780:	8b 32       	cpi	r24, 0x2B	; 43
 782:	69 f0       	breq	.+26     	; 0x79e <vfprintf+0xa4>
 784:	30 f4       	brcc	.+12     	; 0x792 <vfprintf+0x98>
 786:	80 32       	cpi	r24, 0x20	; 32
 788:	59 f0       	breq	.+22     	; 0x7a0 <vfprintf+0xa6>
 78a:	83 32       	cpi	r24, 0x23	; 35
 78c:	69 f4       	brne	.+26     	; 0x7a8 <vfprintf+0xae>
 78e:	20 61       	ori	r18, 0x10	; 16
 790:	2c c0       	rjmp	.+88     	; 0x7ea <vfprintf+0xf0>
 792:	8d 32       	cpi	r24, 0x2D	; 45
 794:	39 f0       	breq	.+14     	; 0x7a4 <vfprintf+0xaa>
 796:	80 33       	cpi	r24, 0x30	; 48
 798:	39 f4       	brne	.+14     	; 0x7a8 <vfprintf+0xae>
 79a:	21 60       	ori	r18, 0x01	; 1
 79c:	26 c0       	rjmp	.+76     	; 0x7ea <vfprintf+0xf0>
 79e:	22 60       	ori	r18, 0x02	; 2
 7a0:	24 60       	ori	r18, 0x04	; 4
 7a2:	23 c0       	rjmp	.+70     	; 0x7ea <vfprintf+0xf0>
 7a4:	28 60       	ori	r18, 0x08	; 8
 7a6:	21 c0       	rjmp	.+66     	; 0x7ea <vfprintf+0xf0>
 7a8:	27 fd       	sbrc	r18, 7
 7aa:	27 c0       	rjmp	.+78     	; 0x7fa <vfprintf+0x100>
 7ac:	30 ed       	ldi	r19, 0xD0	; 208
 7ae:	38 0f       	add	r19, r24
 7b0:	3a 30       	cpi	r19, 0x0A	; 10
 7b2:	78 f4       	brcc	.+30     	; 0x7d2 <vfprintf+0xd8>
 7b4:	26 ff       	sbrs	r18, 6
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <vfprintf+0xca>
 7b8:	fa e0       	ldi	r31, 0x0A	; 10
 7ba:	5f 9e       	mul	r5, r31
 7bc:	30 0d       	add	r19, r0
 7be:	11 24       	eor	r1, r1
 7c0:	53 2e       	mov	r5, r19
 7c2:	13 c0       	rjmp	.+38     	; 0x7ea <vfprintf+0xf0>
 7c4:	8a e0       	ldi	r24, 0x0A	; 10
 7c6:	38 9e       	mul	r3, r24
 7c8:	30 0d       	add	r19, r0
 7ca:	11 24       	eor	r1, r1
 7cc:	33 2e       	mov	r3, r19
 7ce:	20 62       	ori	r18, 0x20	; 32
 7d0:	0c c0       	rjmp	.+24     	; 0x7ea <vfprintf+0xf0>
 7d2:	8e 32       	cpi	r24, 0x2E	; 46
 7d4:	21 f4       	brne	.+8      	; 0x7de <vfprintf+0xe4>
 7d6:	26 fd       	sbrc	r18, 6
 7d8:	5f c1       	rjmp	.+702    	; 0xa98 <vfprintf+0x39e>
 7da:	20 64       	ori	r18, 0x40	; 64
 7dc:	06 c0       	rjmp	.+12     	; 0x7ea <vfprintf+0xf0>
 7de:	8c 36       	cpi	r24, 0x6C	; 108
 7e0:	11 f4       	brne	.+4      	; 0x7e6 <vfprintf+0xec>
 7e2:	20 68       	ori	r18, 0x80	; 128
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <vfprintf+0xf0>
 7e6:	88 36       	cpi	r24, 0x68	; 104
 7e8:	41 f4       	brne	.+16     	; 0x7fa <vfprintf+0x100>
 7ea:	f6 01       	movw	r30, r12
 7ec:	93 fd       	sbrc	r25, 3
 7ee:	85 91       	lpm	r24, Z+
 7f0:	93 ff       	sbrs	r25, 3
 7f2:	81 91       	ld	r24, Z+
 7f4:	6f 01       	movw	r12, r30
 7f6:	81 11       	cpse	r24, r1
 7f8:	c1 cf       	rjmp	.-126    	; 0x77c <vfprintf+0x82>
 7fa:	98 2f       	mov	r25, r24
 7fc:	9f 7d       	andi	r25, 0xDF	; 223
 7fe:	95 54       	subi	r25, 0x45	; 69
 800:	93 30       	cpi	r25, 0x03	; 3
 802:	28 f4       	brcc	.+10     	; 0x80e <vfprintf+0x114>
 804:	0c 5f       	subi	r16, 0xFC	; 252
 806:	1f 4f       	sbci	r17, 0xFF	; 255
 808:	ff e3       	ldi	r31, 0x3F	; 63
 80a:	f9 83       	std	Y+1, r31	; 0x01
 80c:	0d c0       	rjmp	.+26     	; 0x828 <vfprintf+0x12e>
 80e:	83 36       	cpi	r24, 0x63	; 99
 810:	31 f0       	breq	.+12     	; 0x81e <vfprintf+0x124>
 812:	83 37       	cpi	r24, 0x73	; 115
 814:	71 f0       	breq	.+28     	; 0x832 <vfprintf+0x138>
 816:	83 35       	cpi	r24, 0x53	; 83
 818:	09 f0       	breq	.+2      	; 0x81c <vfprintf+0x122>
 81a:	57 c0       	rjmp	.+174    	; 0x8ca <vfprintf+0x1d0>
 81c:	21 c0       	rjmp	.+66     	; 0x860 <vfprintf+0x166>
 81e:	f8 01       	movw	r30, r16
 820:	80 81       	ld	r24, Z
 822:	89 83       	std	Y+1, r24	; 0x01
 824:	0e 5f       	subi	r16, 0xFE	; 254
 826:	1f 4f       	sbci	r17, 0xFF	; 255
 828:	44 24       	eor	r4, r4
 82a:	43 94       	inc	r4
 82c:	51 2c       	mov	r5, r1
 82e:	54 01       	movw	r10, r8
 830:	14 c0       	rjmp	.+40     	; 0x85a <vfprintf+0x160>
 832:	38 01       	movw	r6, r16
 834:	f2 e0       	ldi	r31, 0x02	; 2
 836:	6f 0e       	add	r6, r31
 838:	71 1c       	adc	r7, r1
 83a:	f8 01       	movw	r30, r16
 83c:	a0 80       	ld	r10, Z
 83e:	b1 80       	ldd	r11, Z+1	; 0x01
 840:	26 ff       	sbrs	r18, 6
 842:	03 c0       	rjmp	.+6      	; 0x84a <vfprintf+0x150>
 844:	65 2d       	mov	r22, r5
 846:	70 e0       	ldi	r23, 0x00	; 0
 848:	02 c0       	rjmp	.+4      	; 0x84e <vfprintf+0x154>
 84a:	6f ef       	ldi	r22, 0xFF	; 255
 84c:	7f ef       	ldi	r23, 0xFF	; 255
 84e:	c5 01       	movw	r24, r10
 850:	2c 87       	std	Y+12, r18	; 0x0c
 852:	9a d2       	rcall	.+1332   	; 0xd88 <strnlen>
 854:	2c 01       	movw	r4, r24
 856:	83 01       	movw	r16, r6
 858:	2c 85       	ldd	r18, Y+12	; 0x0c
 85a:	2f 77       	andi	r18, 0x7F	; 127
 85c:	22 2e       	mov	r2, r18
 85e:	16 c0       	rjmp	.+44     	; 0x88c <vfprintf+0x192>
 860:	38 01       	movw	r6, r16
 862:	f2 e0       	ldi	r31, 0x02	; 2
 864:	6f 0e       	add	r6, r31
 866:	71 1c       	adc	r7, r1
 868:	f8 01       	movw	r30, r16
 86a:	a0 80       	ld	r10, Z
 86c:	b1 80       	ldd	r11, Z+1	; 0x01
 86e:	26 ff       	sbrs	r18, 6
 870:	03 c0       	rjmp	.+6      	; 0x878 <vfprintf+0x17e>
 872:	65 2d       	mov	r22, r5
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <vfprintf+0x182>
 878:	6f ef       	ldi	r22, 0xFF	; 255
 87a:	7f ef       	ldi	r23, 0xFF	; 255
 87c:	c5 01       	movw	r24, r10
 87e:	2c 87       	std	Y+12, r18	; 0x0c
 880:	71 d2       	rcall	.+1250   	; 0xd64 <strnlen_P>
 882:	2c 01       	movw	r4, r24
 884:	2c 85       	ldd	r18, Y+12	; 0x0c
 886:	20 68       	ori	r18, 0x80	; 128
 888:	22 2e       	mov	r2, r18
 88a:	83 01       	movw	r16, r6
 88c:	23 fc       	sbrc	r2, 3
 88e:	19 c0       	rjmp	.+50     	; 0x8c2 <vfprintf+0x1c8>
 890:	83 2d       	mov	r24, r3
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	48 16       	cp	r4, r24
 896:	59 06       	cpc	r5, r25
 898:	a0 f4       	brcc	.+40     	; 0x8c2 <vfprintf+0x1c8>
 89a:	b7 01       	movw	r22, r14
 89c:	80 e2       	ldi	r24, 0x20	; 32
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	7e d2       	rcall	.+1276   	; 0xd9e <fputc>
 8a2:	3a 94       	dec	r3
 8a4:	f5 cf       	rjmp	.-22     	; 0x890 <vfprintf+0x196>
 8a6:	f5 01       	movw	r30, r10
 8a8:	27 fc       	sbrc	r2, 7
 8aa:	85 91       	lpm	r24, Z+
 8ac:	27 fe       	sbrs	r2, 7
 8ae:	81 91       	ld	r24, Z+
 8b0:	5f 01       	movw	r10, r30
 8b2:	b7 01       	movw	r22, r14
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	73 d2       	rcall	.+1254   	; 0xd9e <fputc>
 8b8:	31 10       	cpse	r3, r1
 8ba:	3a 94       	dec	r3
 8bc:	f1 e0       	ldi	r31, 0x01	; 1
 8be:	4f 1a       	sub	r4, r31
 8c0:	51 08       	sbc	r5, r1
 8c2:	41 14       	cp	r4, r1
 8c4:	51 04       	cpc	r5, r1
 8c6:	79 f7       	brne	.-34     	; 0x8a6 <vfprintf+0x1ac>
 8c8:	de c0       	rjmp	.+444    	; 0xa86 <vfprintf+0x38c>
 8ca:	84 36       	cpi	r24, 0x64	; 100
 8cc:	11 f0       	breq	.+4      	; 0x8d2 <vfprintf+0x1d8>
 8ce:	89 36       	cpi	r24, 0x69	; 105
 8d0:	31 f5       	brne	.+76     	; 0x91e <vfprintf+0x224>
 8d2:	f8 01       	movw	r30, r16
 8d4:	27 ff       	sbrs	r18, 7
 8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <vfprintf+0x1ec>
 8d8:	60 81       	ld	r22, Z
 8da:	71 81       	ldd	r23, Z+1	; 0x01
 8dc:	82 81       	ldd	r24, Z+2	; 0x02
 8de:	93 81       	ldd	r25, Z+3	; 0x03
 8e0:	0c 5f       	subi	r16, 0xFC	; 252
 8e2:	1f 4f       	sbci	r17, 0xFF	; 255
 8e4:	08 c0       	rjmp	.+16     	; 0x8f6 <vfprintf+0x1fc>
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	07 2e       	mov	r0, r23
 8ec:	00 0c       	add	r0, r0
 8ee:	88 0b       	sbc	r24, r24
 8f0:	99 0b       	sbc	r25, r25
 8f2:	0e 5f       	subi	r16, 0xFE	; 254
 8f4:	1f 4f       	sbci	r17, 0xFF	; 255
 8f6:	2f 76       	andi	r18, 0x6F	; 111
 8f8:	72 2e       	mov	r7, r18
 8fa:	97 ff       	sbrs	r25, 7
 8fc:	09 c0       	rjmp	.+18     	; 0x910 <vfprintf+0x216>
 8fe:	90 95       	com	r25
 900:	80 95       	com	r24
 902:	70 95       	com	r23
 904:	61 95       	neg	r22
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	8f 4f       	sbci	r24, 0xFF	; 255
 90a:	9f 4f       	sbci	r25, 0xFF	; 255
 90c:	20 68       	ori	r18, 0x80	; 128
 90e:	72 2e       	mov	r7, r18
 910:	2a e0       	ldi	r18, 0x0A	; 10
 912:	30 e0       	ldi	r19, 0x00	; 0
 914:	a4 01       	movw	r20, r8
 916:	7b d2       	rcall	.+1270   	; 0xe0e <__ultoa_invert>
 918:	a8 2e       	mov	r10, r24
 91a:	a8 18       	sub	r10, r8
 91c:	43 c0       	rjmp	.+134    	; 0x9a4 <vfprintf+0x2aa>
 91e:	85 37       	cpi	r24, 0x75	; 117
 920:	29 f4       	brne	.+10     	; 0x92c <vfprintf+0x232>
 922:	2f 7e       	andi	r18, 0xEF	; 239
 924:	b2 2e       	mov	r11, r18
 926:	2a e0       	ldi	r18, 0x0A	; 10
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	25 c0       	rjmp	.+74     	; 0x976 <vfprintf+0x27c>
 92c:	f2 2f       	mov	r31, r18
 92e:	f9 7f       	andi	r31, 0xF9	; 249
 930:	bf 2e       	mov	r11, r31
 932:	8f 36       	cpi	r24, 0x6F	; 111
 934:	c1 f0       	breq	.+48     	; 0x966 <vfprintf+0x26c>
 936:	18 f4       	brcc	.+6      	; 0x93e <vfprintf+0x244>
 938:	88 35       	cpi	r24, 0x58	; 88
 93a:	79 f0       	breq	.+30     	; 0x95a <vfprintf+0x260>
 93c:	ad c0       	rjmp	.+346    	; 0xa98 <vfprintf+0x39e>
 93e:	80 37       	cpi	r24, 0x70	; 112
 940:	19 f0       	breq	.+6      	; 0x948 <vfprintf+0x24e>
 942:	88 37       	cpi	r24, 0x78	; 120
 944:	21 f0       	breq	.+8      	; 0x94e <vfprintf+0x254>
 946:	a8 c0       	rjmp	.+336    	; 0xa98 <vfprintf+0x39e>
 948:	2f 2f       	mov	r18, r31
 94a:	20 61       	ori	r18, 0x10	; 16
 94c:	b2 2e       	mov	r11, r18
 94e:	b4 fe       	sbrs	r11, 4
 950:	0d c0       	rjmp	.+26     	; 0x96c <vfprintf+0x272>
 952:	8b 2d       	mov	r24, r11
 954:	84 60       	ori	r24, 0x04	; 4
 956:	b8 2e       	mov	r11, r24
 958:	09 c0       	rjmp	.+18     	; 0x96c <vfprintf+0x272>
 95a:	24 ff       	sbrs	r18, 4
 95c:	0a c0       	rjmp	.+20     	; 0x972 <vfprintf+0x278>
 95e:	9f 2f       	mov	r25, r31
 960:	96 60       	ori	r25, 0x06	; 6
 962:	b9 2e       	mov	r11, r25
 964:	06 c0       	rjmp	.+12     	; 0x972 <vfprintf+0x278>
 966:	28 e0       	ldi	r18, 0x08	; 8
 968:	30 e0       	ldi	r19, 0x00	; 0
 96a:	05 c0       	rjmp	.+10     	; 0x976 <vfprintf+0x27c>
 96c:	20 e1       	ldi	r18, 0x10	; 16
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	02 c0       	rjmp	.+4      	; 0x976 <vfprintf+0x27c>
 972:	20 e1       	ldi	r18, 0x10	; 16
 974:	32 e0       	ldi	r19, 0x02	; 2
 976:	f8 01       	movw	r30, r16
 978:	b7 fe       	sbrs	r11, 7
 97a:	07 c0       	rjmp	.+14     	; 0x98a <vfprintf+0x290>
 97c:	60 81       	ld	r22, Z
 97e:	71 81       	ldd	r23, Z+1	; 0x01
 980:	82 81       	ldd	r24, Z+2	; 0x02
 982:	93 81       	ldd	r25, Z+3	; 0x03
 984:	0c 5f       	subi	r16, 0xFC	; 252
 986:	1f 4f       	sbci	r17, 0xFF	; 255
 988:	06 c0       	rjmp	.+12     	; 0x996 <vfprintf+0x29c>
 98a:	60 81       	ld	r22, Z
 98c:	71 81       	ldd	r23, Z+1	; 0x01
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 5f       	subi	r16, 0xFE	; 254
 994:	1f 4f       	sbci	r17, 0xFF	; 255
 996:	a4 01       	movw	r20, r8
 998:	3a d2       	rcall	.+1140   	; 0xe0e <__ultoa_invert>
 99a:	a8 2e       	mov	r10, r24
 99c:	a8 18       	sub	r10, r8
 99e:	fb 2d       	mov	r31, r11
 9a0:	ff 77       	andi	r31, 0x7F	; 127
 9a2:	7f 2e       	mov	r7, r31
 9a4:	76 fe       	sbrs	r7, 6
 9a6:	0b c0       	rjmp	.+22     	; 0x9be <vfprintf+0x2c4>
 9a8:	37 2d       	mov	r19, r7
 9aa:	3e 7f       	andi	r19, 0xFE	; 254
 9ac:	a5 14       	cp	r10, r5
 9ae:	50 f4       	brcc	.+20     	; 0x9c4 <vfprintf+0x2ca>
 9b0:	74 fe       	sbrs	r7, 4
 9b2:	0a c0       	rjmp	.+20     	; 0x9c8 <vfprintf+0x2ce>
 9b4:	72 fc       	sbrc	r7, 2
 9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <vfprintf+0x2ce>
 9b8:	37 2d       	mov	r19, r7
 9ba:	3e 7e       	andi	r19, 0xEE	; 238
 9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <vfprintf+0x2ce>
 9be:	ba 2c       	mov	r11, r10
 9c0:	37 2d       	mov	r19, r7
 9c2:	03 c0       	rjmp	.+6      	; 0x9ca <vfprintf+0x2d0>
 9c4:	ba 2c       	mov	r11, r10
 9c6:	01 c0       	rjmp	.+2      	; 0x9ca <vfprintf+0x2d0>
 9c8:	b5 2c       	mov	r11, r5
 9ca:	34 ff       	sbrs	r19, 4
 9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <vfprintf+0x2ee>
 9ce:	fe 01       	movw	r30, r28
 9d0:	ea 0d       	add	r30, r10
 9d2:	f1 1d       	adc	r31, r1
 9d4:	80 81       	ld	r24, Z
 9d6:	80 33       	cpi	r24, 0x30	; 48
 9d8:	11 f4       	brne	.+4      	; 0x9de <vfprintf+0x2e4>
 9da:	39 7e       	andi	r19, 0xE9	; 233
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <vfprintf+0x2f6>
 9de:	32 ff       	sbrs	r19, 2
 9e0:	06 c0       	rjmp	.+12     	; 0x9ee <vfprintf+0x2f4>
 9e2:	b3 94       	inc	r11
 9e4:	b3 94       	inc	r11
 9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <vfprintf+0x2f6>
 9e8:	83 2f       	mov	r24, r19
 9ea:	86 78       	andi	r24, 0x86	; 134
 9ec:	09 f0       	breq	.+2      	; 0x9f0 <vfprintf+0x2f6>
 9ee:	b3 94       	inc	r11
 9f0:	33 fd       	sbrc	r19, 3
 9f2:	12 c0       	rjmp	.+36     	; 0xa18 <vfprintf+0x31e>
 9f4:	30 ff       	sbrs	r19, 0
 9f6:	06 c0       	rjmp	.+12     	; 0xa04 <vfprintf+0x30a>
 9f8:	5a 2c       	mov	r5, r10
 9fa:	b3 14       	cp	r11, r3
 9fc:	18 f4       	brcc	.+6      	; 0xa04 <vfprintf+0x30a>
 9fe:	53 0c       	add	r5, r3
 a00:	5b 18       	sub	r5, r11
 a02:	b3 2c       	mov	r11, r3
 a04:	b3 14       	cp	r11, r3
 a06:	60 f4       	brcc	.+24     	; 0xa20 <vfprintf+0x326>
 a08:	b7 01       	movw	r22, r14
 a0a:	80 e2       	ldi	r24, 0x20	; 32
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	3c 87       	std	Y+12, r19	; 0x0c
 a10:	c6 d1       	rcall	.+908    	; 0xd9e <fputc>
 a12:	b3 94       	inc	r11
 a14:	3c 85       	ldd	r19, Y+12	; 0x0c
 a16:	f6 cf       	rjmp	.-20     	; 0xa04 <vfprintf+0x30a>
 a18:	b3 14       	cp	r11, r3
 a1a:	10 f4       	brcc	.+4      	; 0xa20 <vfprintf+0x326>
 a1c:	3b 18       	sub	r3, r11
 a1e:	01 c0       	rjmp	.+2      	; 0xa22 <vfprintf+0x328>
 a20:	31 2c       	mov	r3, r1
 a22:	34 ff       	sbrs	r19, 4
 a24:	11 c0       	rjmp	.+34     	; 0xa48 <vfprintf+0x34e>
 a26:	b7 01       	movw	r22, r14
 a28:	80 e3       	ldi	r24, 0x30	; 48
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	3c 87       	std	Y+12, r19	; 0x0c
 a2e:	b7 d1       	rcall	.+878    	; 0xd9e <fputc>
 a30:	3c 85       	ldd	r19, Y+12	; 0x0c
 a32:	32 ff       	sbrs	r19, 2
 a34:	16 c0       	rjmp	.+44     	; 0xa62 <vfprintf+0x368>
 a36:	31 fd       	sbrc	r19, 1
 a38:	03 c0       	rjmp	.+6      	; 0xa40 <vfprintf+0x346>
 a3a:	88 e7       	ldi	r24, 0x78	; 120
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <vfprintf+0x34a>
 a40:	88 e5       	ldi	r24, 0x58	; 88
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	b7 01       	movw	r22, r14
 a46:	0c c0       	rjmp	.+24     	; 0xa60 <vfprintf+0x366>
 a48:	83 2f       	mov	r24, r19
 a4a:	86 78       	andi	r24, 0x86	; 134
 a4c:	51 f0       	breq	.+20     	; 0xa62 <vfprintf+0x368>
 a4e:	31 ff       	sbrs	r19, 1
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <vfprintf+0x35c>
 a52:	8b e2       	ldi	r24, 0x2B	; 43
 a54:	01 c0       	rjmp	.+2      	; 0xa58 <vfprintf+0x35e>
 a56:	80 e2       	ldi	r24, 0x20	; 32
 a58:	37 fd       	sbrc	r19, 7
 a5a:	8d e2       	ldi	r24, 0x2D	; 45
 a5c:	b7 01       	movw	r22, r14
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	9e d1       	rcall	.+828    	; 0xd9e <fputc>
 a62:	a5 14       	cp	r10, r5
 a64:	30 f4       	brcc	.+12     	; 0xa72 <vfprintf+0x378>
 a66:	b7 01       	movw	r22, r14
 a68:	80 e3       	ldi	r24, 0x30	; 48
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	98 d1       	rcall	.+816    	; 0xd9e <fputc>
 a6e:	5a 94       	dec	r5
 a70:	f8 cf       	rjmp	.-16     	; 0xa62 <vfprintf+0x368>
 a72:	aa 94       	dec	r10
 a74:	f4 01       	movw	r30, r8
 a76:	ea 0d       	add	r30, r10
 a78:	f1 1d       	adc	r31, r1
 a7a:	80 81       	ld	r24, Z
 a7c:	b7 01       	movw	r22, r14
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	8e d1       	rcall	.+796    	; 0xd9e <fputc>
 a82:	a1 10       	cpse	r10, r1
 a84:	f6 cf       	rjmp	.-20     	; 0xa72 <vfprintf+0x378>
 a86:	33 20       	and	r3, r3
 a88:	09 f4       	brne	.+2      	; 0xa8c <vfprintf+0x392>
 a8a:	5d ce       	rjmp	.-838    	; 0x746 <vfprintf+0x4c>
 a8c:	b7 01       	movw	r22, r14
 a8e:	80 e2       	ldi	r24, 0x20	; 32
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	85 d1       	rcall	.+778    	; 0xd9e <fputc>
 a94:	3a 94       	dec	r3
 a96:	f7 cf       	rjmp	.-18     	; 0xa86 <vfprintf+0x38c>
 a98:	f7 01       	movw	r30, r14
 a9a:	86 81       	ldd	r24, Z+6	; 0x06
 a9c:	97 81       	ldd	r25, Z+7	; 0x07
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <vfprintf+0x3aa>
 aa0:	8f ef       	ldi	r24, 0xFF	; 255
 aa2:	9f ef       	ldi	r25, 0xFF	; 255
 aa4:	2c 96       	adiw	r28, 0x0c	; 12
 aa6:	0f b6       	in	r0, 0x3f	; 63
 aa8:	f8 94       	cli
 aaa:	de bf       	out	0x3e, r29	; 62
 aac:	0f be       	out	0x3f, r0	; 63
 aae:	cd bf       	out	0x3d, r28	; 61
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	1f 91       	pop	r17
 ab6:	0f 91       	pop	r16
 ab8:	ff 90       	pop	r15
 aba:	ef 90       	pop	r14
 abc:	df 90       	pop	r13
 abe:	cf 90       	pop	r12
 ac0:	bf 90       	pop	r11
 ac2:	af 90       	pop	r10
 ac4:	9f 90       	pop	r9
 ac6:	8f 90       	pop	r8
 ac8:	7f 90       	pop	r7
 aca:	6f 90       	pop	r6
 acc:	5f 90       	pop	r5
 ace:	4f 90       	pop	r4
 ad0:	3f 90       	pop	r3
 ad2:	2f 90       	pop	r2
 ad4:	08 95       	ret

00000ad6 <calloc>:
 ad6:	0f 93       	push	r16
 ad8:	1f 93       	push	r17
 ada:	cf 93       	push	r28
 adc:	df 93       	push	r29
 ade:	86 9f       	mul	r24, r22
 ae0:	80 01       	movw	r16, r0
 ae2:	87 9f       	mul	r24, r23
 ae4:	10 0d       	add	r17, r0
 ae6:	96 9f       	mul	r25, r22
 ae8:	10 0d       	add	r17, r0
 aea:	11 24       	eor	r1, r1
 aec:	c8 01       	movw	r24, r16
 aee:	0d d0       	rcall	.+26     	; 0xb0a <malloc>
 af0:	ec 01       	movw	r28, r24
 af2:	00 97       	sbiw	r24, 0x00	; 0
 af4:	21 f0       	breq	.+8      	; 0xafe <calloc+0x28>
 af6:	a8 01       	movw	r20, r16
 af8:	60 e0       	ldi	r22, 0x00	; 0
 afa:	70 e0       	ldi	r23, 0x00	; 0
 afc:	3e d1       	rcall	.+636    	; 0xd7a <memset>
 afe:	ce 01       	movw	r24, r28
 b00:	df 91       	pop	r29
 b02:	cf 91       	pop	r28
 b04:	1f 91       	pop	r17
 b06:	0f 91       	pop	r16
 b08:	08 95       	ret

00000b0a <malloc>:
 b0a:	cf 93       	push	r28
 b0c:	df 93       	push	r29
 b0e:	82 30       	cpi	r24, 0x02	; 2
 b10:	91 05       	cpc	r25, r1
 b12:	10 f4       	brcc	.+4      	; 0xb18 <malloc+0xe>
 b14:	82 e0       	ldi	r24, 0x02	; 2
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	e0 91 1e 03 	lds	r30, 0x031E	; 0x80031e <__flp>
 b1c:	f0 91 1f 03 	lds	r31, 0x031F	; 0x80031f <__flp+0x1>
 b20:	20 e0       	ldi	r18, 0x00	; 0
 b22:	30 e0       	ldi	r19, 0x00	; 0
 b24:	c0 e0       	ldi	r28, 0x00	; 0
 b26:	d0 e0       	ldi	r29, 0x00	; 0
 b28:	30 97       	sbiw	r30, 0x00	; 0
 b2a:	11 f1       	breq	.+68     	; 0xb70 <malloc+0x66>
 b2c:	40 81       	ld	r20, Z
 b2e:	51 81       	ldd	r21, Z+1	; 0x01
 b30:	48 17       	cp	r20, r24
 b32:	59 07       	cpc	r21, r25
 b34:	c0 f0       	brcs	.+48     	; 0xb66 <malloc+0x5c>
 b36:	48 17       	cp	r20, r24
 b38:	59 07       	cpc	r21, r25
 b3a:	61 f4       	brne	.+24     	; 0xb54 <malloc+0x4a>
 b3c:	82 81       	ldd	r24, Z+2	; 0x02
 b3e:	93 81       	ldd	r25, Z+3	; 0x03
 b40:	20 97       	sbiw	r28, 0x00	; 0
 b42:	19 f0       	breq	.+6      	; 0xb4a <malloc+0x40>
 b44:	9b 83       	std	Y+3, r25	; 0x03
 b46:	8a 83       	std	Y+2, r24	; 0x02
 b48:	2b c0       	rjmp	.+86     	; 0xba0 <malloc+0x96>
 b4a:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <__flp+0x1>
 b4e:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <__flp>
 b52:	26 c0       	rjmp	.+76     	; 0xba0 <malloc+0x96>
 b54:	21 15       	cp	r18, r1
 b56:	31 05       	cpc	r19, r1
 b58:	19 f0       	breq	.+6      	; 0xb60 <malloc+0x56>
 b5a:	42 17       	cp	r20, r18
 b5c:	53 07       	cpc	r21, r19
 b5e:	18 f4       	brcc	.+6      	; 0xb66 <malloc+0x5c>
 b60:	9a 01       	movw	r18, r20
 b62:	be 01       	movw	r22, r28
 b64:	df 01       	movw	r26, r30
 b66:	ef 01       	movw	r28, r30
 b68:	02 80       	ldd	r0, Z+2	; 0x02
 b6a:	f3 81       	ldd	r31, Z+3	; 0x03
 b6c:	e0 2d       	mov	r30, r0
 b6e:	dc cf       	rjmp	.-72     	; 0xb28 <malloc+0x1e>
 b70:	21 15       	cp	r18, r1
 b72:	31 05       	cpc	r19, r1
 b74:	09 f1       	breq	.+66     	; 0xbb8 <malloc+0xae>
 b76:	28 1b       	sub	r18, r24
 b78:	39 0b       	sbc	r19, r25
 b7a:	24 30       	cpi	r18, 0x04	; 4
 b7c:	31 05       	cpc	r19, r1
 b7e:	90 f4       	brcc	.+36     	; 0xba4 <malloc+0x9a>
 b80:	12 96       	adiw	r26, 0x02	; 2
 b82:	8d 91       	ld	r24, X+
 b84:	9c 91       	ld	r25, X
 b86:	13 97       	sbiw	r26, 0x03	; 3
 b88:	61 15       	cp	r22, r1
 b8a:	71 05       	cpc	r23, r1
 b8c:	21 f0       	breq	.+8      	; 0xb96 <malloc+0x8c>
 b8e:	fb 01       	movw	r30, r22
 b90:	93 83       	std	Z+3, r25	; 0x03
 b92:	82 83       	std	Z+2, r24	; 0x02
 b94:	04 c0       	rjmp	.+8      	; 0xb9e <malloc+0x94>
 b96:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <__flp+0x1>
 b9a:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <__flp>
 b9e:	fd 01       	movw	r30, r26
 ba0:	32 96       	adiw	r30, 0x02	; 2
 ba2:	44 c0       	rjmp	.+136    	; 0xc2c <malloc+0x122>
 ba4:	fd 01       	movw	r30, r26
 ba6:	e2 0f       	add	r30, r18
 ba8:	f3 1f       	adc	r31, r19
 baa:	81 93       	st	Z+, r24
 bac:	91 93       	st	Z+, r25
 bae:	22 50       	subi	r18, 0x02	; 2
 bb0:	31 09       	sbc	r19, r1
 bb2:	2d 93       	st	X+, r18
 bb4:	3c 93       	st	X, r19
 bb6:	3a c0       	rjmp	.+116    	; 0xc2c <malloc+0x122>
 bb8:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <__brkval>
 bbc:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <__brkval+0x1>
 bc0:	23 2b       	or	r18, r19
 bc2:	41 f4       	brne	.+16     	; 0xbd4 <malloc+0xca>
 bc4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 bc8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 bcc:	30 93 1d 03 	sts	0x031D, r19	; 0x80031d <__brkval+0x1>
 bd0:	20 93 1c 03 	sts	0x031C, r18	; 0x80031c <__brkval>
 bd4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 bd8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 bdc:	21 15       	cp	r18, r1
 bde:	31 05       	cpc	r19, r1
 be0:	41 f4       	brne	.+16     	; 0xbf2 <malloc+0xe8>
 be2:	2d b7       	in	r18, 0x3d	; 61
 be4:	3e b7       	in	r19, 0x3e	; 62
 be6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 bea:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 bee:	24 1b       	sub	r18, r20
 bf0:	35 0b       	sbc	r19, r21
 bf2:	e0 91 1c 03 	lds	r30, 0x031C	; 0x80031c <__brkval>
 bf6:	f0 91 1d 03 	lds	r31, 0x031D	; 0x80031d <__brkval+0x1>
 bfa:	e2 17       	cp	r30, r18
 bfc:	f3 07       	cpc	r31, r19
 bfe:	a0 f4       	brcc	.+40     	; 0xc28 <malloc+0x11e>
 c00:	2e 1b       	sub	r18, r30
 c02:	3f 0b       	sbc	r19, r31
 c04:	28 17       	cp	r18, r24
 c06:	39 07       	cpc	r19, r25
 c08:	78 f0       	brcs	.+30     	; 0xc28 <malloc+0x11e>
 c0a:	ac 01       	movw	r20, r24
 c0c:	4e 5f       	subi	r20, 0xFE	; 254
 c0e:	5f 4f       	sbci	r21, 0xFF	; 255
 c10:	24 17       	cp	r18, r20
 c12:	35 07       	cpc	r19, r21
 c14:	48 f0       	brcs	.+18     	; 0xc28 <malloc+0x11e>
 c16:	4e 0f       	add	r20, r30
 c18:	5f 1f       	adc	r21, r31
 c1a:	50 93 1d 03 	sts	0x031D, r21	; 0x80031d <__brkval+0x1>
 c1e:	40 93 1c 03 	sts	0x031C, r20	; 0x80031c <__brkval>
 c22:	81 93       	st	Z+, r24
 c24:	91 93       	st	Z+, r25
 c26:	02 c0       	rjmp	.+4      	; 0xc2c <malloc+0x122>
 c28:	e0 e0       	ldi	r30, 0x00	; 0
 c2a:	f0 e0       	ldi	r31, 0x00	; 0
 c2c:	cf 01       	movw	r24, r30
 c2e:	df 91       	pop	r29
 c30:	cf 91       	pop	r28
 c32:	08 95       	ret

00000c34 <free>:
 c34:	0f 93       	push	r16
 c36:	1f 93       	push	r17
 c38:	cf 93       	push	r28
 c3a:	df 93       	push	r29
 c3c:	00 97       	sbiw	r24, 0x00	; 0
 c3e:	09 f4       	brne	.+2      	; 0xc42 <free+0xe>
 c40:	8c c0       	rjmp	.+280    	; 0xd5a <free+0x126>
 c42:	fc 01       	movw	r30, r24
 c44:	32 97       	sbiw	r30, 0x02	; 2
 c46:	13 82       	std	Z+3, r1	; 0x03
 c48:	12 82       	std	Z+2, r1	; 0x02
 c4a:	00 91 1e 03 	lds	r16, 0x031E	; 0x80031e <__flp>
 c4e:	10 91 1f 03 	lds	r17, 0x031F	; 0x80031f <__flp+0x1>
 c52:	01 15       	cp	r16, r1
 c54:	11 05       	cpc	r17, r1
 c56:	81 f4       	brne	.+32     	; 0xc78 <free+0x44>
 c58:	20 81       	ld	r18, Z
 c5a:	31 81       	ldd	r19, Z+1	; 0x01
 c5c:	82 0f       	add	r24, r18
 c5e:	93 1f       	adc	r25, r19
 c60:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <__brkval>
 c64:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <__brkval+0x1>
 c68:	28 17       	cp	r18, r24
 c6a:	39 07       	cpc	r19, r25
 c6c:	79 f5       	brne	.+94     	; 0xccc <free+0x98>
 c6e:	f0 93 1d 03 	sts	0x031D, r31	; 0x80031d <__brkval+0x1>
 c72:	e0 93 1c 03 	sts	0x031C, r30	; 0x80031c <__brkval>
 c76:	71 c0       	rjmp	.+226    	; 0xd5a <free+0x126>
 c78:	d8 01       	movw	r26, r16
 c7a:	40 e0       	ldi	r20, 0x00	; 0
 c7c:	50 e0       	ldi	r21, 0x00	; 0
 c7e:	ae 17       	cp	r26, r30
 c80:	bf 07       	cpc	r27, r31
 c82:	50 f4       	brcc	.+20     	; 0xc98 <free+0x64>
 c84:	12 96       	adiw	r26, 0x02	; 2
 c86:	2d 91       	ld	r18, X+
 c88:	3c 91       	ld	r19, X
 c8a:	13 97       	sbiw	r26, 0x03	; 3
 c8c:	ad 01       	movw	r20, r26
 c8e:	21 15       	cp	r18, r1
 c90:	31 05       	cpc	r19, r1
 c92:	09 f1       	breq	.+66     	; 0xcd6 <free+0xa2>
 c94:	d9 01       	movw	r26, r18
 c96:	f3 cf       	rjmp	.-26     	; 0xc7e <free+0x4a>
 c98:	9d 01       	movw	r18, r26
 c9a:	da 01       	movw	r26, r20
 c9c:	33 83       	std	Z+3, r19	; 0x03
 c9e:	22 83       	std	Z+2, r18	; 0x02
 ca0:	60 81       	ld	r22, Z
 ca2:	71 81       	ldd	r23, Z+1	; 0x01
 ca4:	86 0f       	add	r24, r22
 ca6:	97 1f       	adc	r25, r23
 ca8:	82 17       	cp	r24, r18
 caa:	93 07       	cpc	r25, r19
 cac:	69 f4       	brne	.+26     	; 0xcc8 <free+0x94>
 cae:	ec 01       	movw	r28, r24
 cb0:	28 81       	ld	r18, Y
 cb2:	39 81       	ldd	r19, Y+1	; 0x01
 cb4:	26 0f       	add	r18, r22
 cb6:	37 1f       	adc	r19, r23
 cb8:	2e 5f       	subi	r18, 0xFE	; 254
 cba:	3f 4f       	sbci	r19, 0xFF	; 255
 cbc:	31 83       	std	Z+1, r19	; 0x01
 cbe:	20 83       	st	Z, r18
 cc0:	8a 81       	ldd	r24, Y+2	; 0x02
 cc2:	9b 81       	ldd	r25, Y+3	; 0x03
 cc4:	93 83       	std	Z+3, r25	; 0x03
 cc6:	82 83       	std	Z+2, r24	; 0x02
 cc8:	45 2b       	or	r20, r21
 cca:	29 f4       	brne	.+10     	; 0xcd6 <free+0xa2>
 ccc:	f0 93 1f 03 	sts	0x031F, r31	; 0x80031f <__flp+0x1>
 cd0:	e0 93 1e 03 	sts	0x031E, r30	; 0x80031e <__flp>
 cd4:	42 c0       	rjmp	.+132    	; 0xd5a <free+0x126>
 cd6:	13 96       	adiw	r26, 0x03	; 3
 cd8:	fc 93       	st	X, r31
 cda:	ee 93       	st	-X, r30
 cdc:	12 97       	sbiw	r26, 0x02	; 2
 cde:	ed 01       	movw	r28, r26
 ce0:	49 91       	ld	r20, Y+
 ce2:	59 91       	ld	r21, Y+
 ce4:	9e 01       	movw	r18, r28
 ce6:	24 0f       	add	r18, r20
 ce8:	35 1f       	adc	r19, r21
 cea:	e2 17       	cp	r30, r18
 cec:	f3 07       	cpc	r31, r19
 cee:	71 f4       	brne	.+28     	; 0xd0c <free+0xd8>
 cf0:	80 81       	ld	r24, Z
 cf2:	91 81       	ldd	r25, Z+1	; 0x01
 cf4:	84 0f       	add	r24, r20
 cf6:	95 1f       	adc	r25, r21
 cf8:	02 96       	adiw	r24, 0x02	; 2
 cfa:	11 96       	adiw	r26, 0x01	; 1
 cfc:	9c 93       	st	X, r25
 cfe:	8e 93       	st	-X, r24
 d00:	82 81       	ldd	r24, Z+2	; 0x02
 d02:	93 81       	ldd	r25, Z+3	; 0x03
 d04:	13 96       	adiw	r26, 0x03	; 3
 d06:	9c 93       	st	X, r25
 d08:	8e 93       	st	-X, r24
 d0a:	12 97       	sbiw	r26, 0x02	; 2
 d0c:	e0 e0       	ldi	r30, 0x00	; 0
 d0e:	f0 e0       	ldi	r31, 0x00	; 0
 d10:	d8 01       	movw	r26, r16
 d12:	12 96       	adiw	r26, 0x02	; 2
 d14:	8d 91       	ld	r24, X+
 d16:	9c 91       	ld	r25, X
 d18:	13 97       	sbiw	r26, 0x03	; 3
 d1a:	00 97       	sbiw	r24, 0x00	; 0
 d1c:	19 f0       	breq	.+6      	; 0xd24 <free+0xf0>
 d1e:	f8 01       	movw	r30, r16
 d20:	8c 01       	movw	r16, r24
 d22:	f6 cf       	rjmp	.-20     	; 0xd10 <free+0xdc>
 d24:	8d 91       	ld	r24, X+
 d26:	9c 91       	ld	r25, X
 d28:	98 01       	movw	r18, r16
 d2a:	2e 5f       	subi	r18, 0xFE	; 254
 d2c:	3f 4f       	sbci	r19, 0xFF	; 255
 d2e:	82 0f       	add	r24, r18
 d30:	93 1f       	adc	r25, r19
 d32:	20 91 1c 03 	lds	r18, 0x031C	; 0x80031c <__brkval>
 d36:	30 91 1d 03 	lds	r19, 0x031D	; 0x80031d <__brkval+0x1>
 d3a:	28 17       	cp	r18, r24
 d3c:	39 07       	cpc	r19, r25
 d3e:	69 f4       	brne	.+26     	; 0xd5a <free+0x126>
 d40:	30 97       	sbiw	r30, 0x00	; 0
 d42:	29 f4       	brne	.+10     	; 0xd4e <free+0x11a>
 d44:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <__flp+0x1>
 d48:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <__flp>
 d4c:	02 c0       	rjmp	.+4      	; 0xd52 <free+0x11e>
 d4e:	13 82       	std	Z+3, r1	; 0x03
 d50:	12 82       	std	Z+2, r1	; 0x02
 d52:	10 93 1d 03 	sts	0x031D, r17	; 0x80031d <__brkval+0x1>
 d56:	00 93 1c 03 	sts	0x031C, r16	; 0x80031c <__brkval>
 d5a:	df 91       	pop	r29
 d5c:	cf 91       	pop	r28
 d5e:	1f 91       	pop	r17
 d60:	0f 91       	pop	r16
 d62:	08 95       	ret

00000d64 <strnlen_P>:
 d64:	fc 01       	movw	r30, r24
 d66:	05 90       	lpm	r0, Z+
 d68:	61 50       	subi	r22, 0x01	; 1
 d6a:	70 40       	sbci	r23, 0x00	; 0
 d6c:	01 10       	cpse	r0, r1
 d6e:	d8 f7       	brcc	.-10     	; 0xd66 <strnlen_P+0x2>
 d70:	80 95       	com	r24
 d72:	90 95       	com	r25
 d74:	8e 0f       	add	r24, r30
 d76:	9f 1f       	adc	r25, r31
 d78:	08 95       	ret

00000d7a <memset>:
 d7a:	dc 01       	movw	r26, r24
 d7c:	01 c0       	rjmp	.+2      	; 0xd80 <memset+0x6>
 d7e:	6d 93       	st	X+, r22
 d80:	41 50       	subi	r20, 0x01	; 1
 d82:	50 40       	sbci	r21, 0x00	; 0
 d84:	e0 f7       	brcc	.-8      	; 0xd7e <memset+0x4>
 d86:	08 95       	ret

00000d88 <strnlen>:
 d88:	fc 01       	movw	r30, r24
 d8a:	61 50       	subi	r22, 0x01	; 1
 d8c:	70 40       	sbci	r23, 0x00	; 0
 d8e:	01 90       	ld	r0, Z+
 d90:	01 10       	cpse	r0, r1
 d92:	d8 f7       	brcc	.-10     	; 0xd8a <strnlen+0x2>
 d94:	80 95       	com	r24
 d96:	90 95       	com	r25
 d98:	8e 0f       	add	r24, r30
 d9a:	9f 1f       	adc	r25, r31
 d9c:	08 95       	ret

00000d9e <fputc>:
 d9e:	0f 93       	push	r16
 da0:	1f 93       	push	r17
 da2:	cf 93       	push	r28
 da4:	df 93       	push	r29
 da6:	fb 01       	movw	r30, r22
 da8:	23 81       	ldd	r18, Z+3	; 0x03
 daa:	21 fd       	sbrc	r18, 1
 dac:	03 c0       	rjmp	.+6      	; 0xdb4 <fputc+0x16>
 dae:	8f ef       	ldi	r24, 0xFF	; 255
 db0:	9f ef       	ldi	r25, 0xFF	; 255
 db2:	28 c0       	rjmp	.+80     	; 0xe04 <fputc+0x66>
 db4:	22 ff       	sbrs	r18, 2
 db6:	16 c0       	rjmp	.+44     	; 0xde4 <fputc+0x46>
 db8:	46 81       	ldd	r20, Z+6	; 0x06
 dba:	57 81       	ldd	r21, Z+7	; 0x07
 dbc:	24 81       	ldd	r18, Z+4	; 0x04
 dbe:	35 81       	ldd	r19, Z+5	; 0x05
 dc0:	42 17       	cp	r20, r18
 dc2:	53 07       	cpc	r21, r19
 dc4:	44 f4       	brge	.+16     	; 0xdd6 <fputc+0x38>
 dc6:	a0 81       	ld	r26, Z
 dc8:	b1 81       	ldd	r27, Z+1	; 0x01
 dca:	9d 01       	movw	r18, r26
 dcc:	2f 5f       	subi	r18, 0xFF	; 255
 dce:	3f 4f       	sbci	r19, 0xFF	; 255
 dd0:	31 83       	std	Z+1, r19	; 0x01
 dd2:	20 83       	st	Z, r18
 dd4:	8c 93       	st	X, r24
 dd6:	26 81       	ldd	r18, Z+6	; 0x06
 dd8:	37 81       	ldd	r19, Z+7	; 0x07
 dda:	2f 5f       	subi	r18, 0xFF	; 255
 ddc:	3f 4f       	sbci	r19, 0xFF	; 255
 dde:	37 83       	std	Z+7, r19	; 0x07
 de0:	26 83       	std	Z+6, r18	; 0x06
 de2:	10 c0       	rjmp	.+32     	; 0xe04 <fputc+0x66>
 de4:	eb 01       	movw	r28, r22
 de6:	09 2f       	mov	r16, r25
 de8:	18 2f       	mov	r17, r24
 dea:	00 84       	ldd	r0, Z+8	; 0x08
 dec:	f1 85       	ldd	r31, Z+9	; 0x09
 dee:	e0 2d       	mov	r30, r0
 df0:	19 95       	eicall
 df2:	89 2b       	or	r24, r25
 df4:	e1 f6       	brne	.-72     	; 0xdae <fputc+0x10>
 df6:	8e 81       	ldd	r24, Y+6	; 0x06
 df8:	9f 81       	ldd	r25, Y+7	; 0x07
 dfa:	01 96       	adiw	r24, 0x01	; 1
 dfc:	9f 83       	std	Y+7, r25	; 0x07
 dfe:	8e 83       	std	Y+6, r24	; 0x06
 e00:	81 2f       	mov	r24, r17
 e02:	90 2f       	mov	r25, r16
 e04:	df 91       	pop	r29
 e06:	cf 91       	pop	r28
 e08:	1f 91       	pop	r17
 e0a:	0f 91       	pop	r16
 e0c:	08 95       	ret

00000e0e <__ultoa_invert>:
 e0e:	fa 01       	movw	r30, r20
 e10:	aa 27       	eor	r26, r26
 e12:	28 30       	cpi	r18, 0x08	; 8
 e14:	51 f1       	breq	.+84     	; 0xe6a <__ultoa_invert+0x5c>
 e16:	20 31       	cpi	r18, 0x10	; 16
 e18:	81 f1       	breq	.+96     	; 0xe7a <__ultoa_invert+0x6c>
 e1a:	e8 94       	clt
 e1c:	6f 93       	push	r22
 e1e:	6e 7f       	andi	r22, 0xFE	; 254
 e20:	6e 5f       	subi	r22, 0xFE	; 254
 e22:	7f 4f       	sbci	r23, 0xFF	; 255
 e24:	8f 4f       	sbci	r24, 0xFF	; 255
 e26:	9f 4f       	sbci	r25, 0xFF	; 255
 e28:	af 4f       	sbci	r26, 0xFF	; 255
 e2a:	b1 e0       	ldi	r27, 0x01	; 1
 e2c:	3e d0       	rcall	.+124    	; 0xeaa <__ultoa_invert+0x9c>
 e2e:	b4 e0       	ldi	r27, 0x04	; 4
 e30:	3c d0       	rcall	.+120    	; 0xeaa <__ultoa_invert+0x9c>
 e32:	67 0f       	add	r22, r23
 e34:	78 1f       	adc	r23, r24
 e36:	89 1f       	adc	r24, r25
 e38:	9a 1f       	adc	r25, r26
 e3a:	a1 1d       	adc	r26, r1
 e3c:	68 0f       	add	r22, r24
 e3e:	79 1f       	adc	r23, r25
 e40:	8a 1f       	adc	r24, r26
 e42:	91 1d       	adc	r25, r1
 e44:	a1 1d       	adc	r26, r1
 e46:	6a 0f       	add	r22, r26
 e48:	71 1d       	adc	r23, r1
 e4a:	81 1d       	adc	r24, r1
 e4c:	91 1d       	adc	r25, r1
 e4e:	a1 1d       	adc	r26, r1
 e50:	20 d0       	rcall	.+64     	; 0xe92 <__ultoa_invert+0x84>
 e52:	09 f4       	brne	.+2      	; 0xe56 <__ultoa_invert+0x48>
 e54:	68 94       	set
 e56:	3f 91       	pop	r19
 e58:	2a e0       	ldi	r18, 0x0A	; 10
 e5a:	26 9f       	mul	r18, r22
 e5c:	11 24       	eor	r1, r1
 e5e:	30 19       	sub	r19, r0
 e60:	30 5d       	subi	r19, 0xD0	; 208
 e62:	31 93       	st	Z+, r19
 e64:	de f6       	brtc	.-74     	; 0xe1c <__ultoa_invert+0xe>
 e66:	cf 01       	movw	r24, r30
 e68:	08 95       	ret
 e6a:	46 2f       	mov	r20, r22
 e6c:	47 70       	andi	r20, 0x07	; 7
 e6e:	40 5d       	subi	r20, 0xD0	; 208
 e70:	41 93       	st	Z+, r20
 e72:	b3 e0       	ldi	r27, 0x03	; 3
 e74:	0f d0       	rcall	.+30     	; 0xe94 <__ultoa_invert+0x86>
 e76:	c9 f7       	brne	.-14     	; 0xe6a <__ultoa_invert+0x5c>
 e78:	f6 cf       	rjmp	.-20     	; 0xe66 <__ultoa_invert+0x58>
 e7a:	46 2f       	mov	r20, r22
 e7c:	4f 70       	andi	r20, 0x0F	; 15
 e7e:	40 5d       	subi	r20, 0xD0	; 208
 e80:	4a 33       	cpi	r20, 0x3A	; 58
 e82:	18 f0       	brcs	.+6      	; 0xe8a <__ultoa_invert+0x7c>
 e84:	49 5d       	subi	r20, 0xD9	; 217
 e86:	31 fd       	sbrc	r19, 1
 e88:	40 52       	subi	r20, 0x20	; 32
 e8a:	41 93       	st	Z+, r20
 e8c:	02 d0       	rcall	.+4      	; 0xe92 <__ultoa_invert+0x84>
 e8e:	a9 f7       	brne	.-22     	; 0xe7a <__ultoa_invert+0x6c>
 e90:	ea cf       	rjmp	.-44     	; 0xe66 <__ultoa_invert+0x58>
 e92:	b4 e0       	ldi	r27, 0x04	; 4
 e94:	a6 95       	lsr	r26
 e96:	97 95       	ror	r25
 e98:	87 95       	ror	r24
 e9a:	77 95       	ror	r23
 e9c:	67 95       	ror	r22
 e9e:	ba 95       	dec	r27
 ea0:	c9 f7       	brne	.-14     	; 0xe94 <__ultoa_invert+0x86>
 ea2:	00 97       	sbiw	r24, 0x00	; 0
 ea4:	61 05       	cpc	r22, r1
 ea6:	71 05       	cpc	r23, r1
 ea8:	08 95       	ret
 eaa:	9b 01       	movw	r18, r22
 eac:	ac 01       	movw	r20, r24
 eae:	0a 2e       	mov	r0, r26
 eb0:	06 94       	lsr	r0
 eb2:	57 95       	ror	r21
 eb4:	47 95       	ror	r20
 eb6:	37 95       	ror	r19
 eb8:	27 95       	ror	r18
 eba:	ba 95       	dec	r27
 ebc:	c9 f7       	brne	.-14     	; 0xeb0 <__ultoa_invert+0xa2>
 ebe:	62 0f       	add	r22, r18
 ec0:	73 1f       	adc	r23, r19
 ec2:	84 1f       	adc	r24, r20
 ec4:	95 1f       	adc	r25, r21
 ec6:	a0 1d       	adc	r26, r0
 ec8:	08 95       	ret

00000eca <_exit>:
 eca:	f8 94       	cli

00000ecc <__stop_program>:
 ecc:	ff cf       	rjmp	.-2      	; 0xecc <__stop_program>
