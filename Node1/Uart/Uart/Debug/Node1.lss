
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000314  00800100  0000388a  0000391e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000388a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  00800414  00800414  00003c32  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00003ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050e5  00000000  00000000  00003f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001506  00000000  00000000  00009009  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026e3  00000000  00000000  0000a50f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000640  00000000  00000000  0000cbf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008dc  00000000  00000000  0000d234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027d9  00000000  00000000  0000db10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000218  00000000  00000000  000102e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__ctors_end>
       4:	0c 94 f9 02 	jmp	0x5f2	; 0x5f2 <__vector_1>
       8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      10:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      14:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      18:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      1c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      20:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      24:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      28:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      2c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      30:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      34:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      38:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      3c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      40:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      44:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      48:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      4c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      50:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      54:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      58:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      5c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      60:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      64:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      68:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      6c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      70:	31 05       	cpc	r19, r1
      72:	50 06       	cpc	r5, r16
      74:	cd 06       	cpc	r12, r29
      76:	5f 07       	cpc	r21, r31
      78:	c6 07       	cpc	r28, r22
      7a:	34 08       	sbc	r3, r4
      7c:	8b 08       	sbc	r8, r11
      7e:	f8 08       	sbc	r15, r8
      80:	64 09       	sbc	r22, r4
      82:	c8 09       	sbc	r28, r8
      84:	33 0a       	sbc	r3, r19
      86:	8a 0a       	sbc	r8, r26
      88:	f7 0a       	sbc	r15, r23
      8a:	5b 0b       	sbc	r21, r27
      8c:	c6 0b       	sbc	r28, r22
      8e:	32 0c       	add	r3, r2
      90:	89 0c       	add	r8, r9
      92:	5c 11       	cpse	r21, r12
      94:	5c 11       	cpse	r21, r12
      96:	5c 11       	cpse	r21, r12
      98:	5c 11       	cpse	r21, r12
      9a:	5c 11       	cpse	r21, r12
      9c:	5c 11       	cpse	r21, r12
      9e:	ed 0c       	add	r14, r13
      a0:	ad 0d       	add	r26, r13
      a2:	6d 0e       	add	r6, r29
      a4:	bf 0e       	add	r11, r31
      a6:	40 0f       	add	r20, r16
      a8:	ea 0f       	add	r30, r26

000000aa <__trampolines_end>:
	...
      b2:	00 06       	cpc	r0, r16
      b4:	5f 5f       	subi	r21, 0xFF	; 255
      b6:	06 00       	.word	0x0006	; ????
      b8:	00 00       	nop
      ba:	00 07       	cpc	r16, r16
      bc:	07 00       	.word	0x0007	; ????
      be:	07 07       	cpc	r16, r23
      c0:	00 00       	nop
      c2:	14 7f       	andi	r17, 0xF4	; 244
      c4:	7f 14       	cp	r7, r15
      c6:	7f 7f       	andi	r23, 0xFF	; 255
      c8:	14 00       	.word	0x0014	; ????
      ca:	24 2e       	mov	r2, r20
      cc:	6b 6b       	ori	r22, 0xBB	; 187
      ce:	3a 12       	cpse	r3, r26
      d0:	00 00       	nop
      d2:	46 66       	ori	r20, 0x66	; 102
      d4:	30 18       	sub	r3, r0
      d6:	0c 66       	ori	r16, 0x6C	; 108
      d8:	62 00       	.word	0x0062	; ????
      da:	30 7a       	andi	r19, 0xA0	; 160
      dc:	4f 5d       	subi	r20, 0xDF	; 223
      de:	37 7a       	andi	r19, 0xA7	; 167
      e0:	48 00       	.word	0x0048	; ????
      e2:	04 07       	cpc	r16, r20
      e4:	03 00       	.word	0x0003	; ????
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	00 1c       	adc	r0, r0
      ec:	3e 63       	ori	r19, 0x3E	; 62
      ee:	41 00       	.word	0x0041	; ????
      f0:	00 00       	nop
      f2:	00 41       	sbci	r16, 0x10	; 16
      f4:	63 3e       	cpi	r22, 0xE3	; 227
      f6:	1c 00       	.word	0x001c	; ????
      f8:	00 00       	nop
      fa:	08 2a       	or	r0, r24
      fc:	3e 1c       	adc	r3, r14
      fe:	1c 3e       	cpi	r17, 0xEC	; 236
     100:	2a 08       	sbc	r2, r10
     102:	08 08       	sbc	r0, r8
     104:	3e 3e       	cpi	r19, 0xEE	; 238
     106:	08 08       	sbc	r0, r8
     108:	00 00       	nop
     10a:	00 a0       	ldd	r0, Z+32	; 0x20
     10c:	e0 60       	ori	r30, 0x00	; 0
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	08 08       	sbc	r0, r8
     114:	08 08       	sbc	r0, r8
     116:	08 08       	sbc	r0, r8
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	60 60       	ori	r22, 0x00	; 0
     11e:	00 00       	nop
     120:	00 00       	nop
     122:	60 30       	cpi	r22, 0x00	; 0
     124:	18 0c       	add	r1, r8
     126:	06 03       	mulsu	r16, r22
     128:	01 00       	.word	0x0001	; ????
     12a:	3e 7f       	andi	r19, 0xFE	; 254
     12c:	59 4d       	sbci	r21, 0xD9	; 217
     12e:	7f 3e       	cpi	r23, 0xEF	; 239
     130:	00 00       	nop
     132:	42 42       	sbci	r20, 0x22	; 34
     134:	7f 7f       	andi	r23, 0xFF	; 255
     136:	40 40       	sbci	r20, 0x00	; 0
     138:	00 00       	nop
     13a:	62 73       	andi	r22, 0x32	; 50
     13c:	59 49       	sbci	r21, 0x99	; 153
     13e:	6f 66       	ori	r22, 0x6F	; 111
     140:	00 00       	nop
     142:	22 63       	ori	r18, 0x32	; 50
     144:	49 49       	sbci	r20, 0x99	; 153
     146:	7f 36       	cpi	r23, 0x6F	; 111
     148:	00 00       	nop
     14a:	18 1c       	adc	r1, r8
     14c:	16 13       	cpse	r17, r22
     14e:	7f 7f       	andi	r23, 0xFF	; 255
     150:	10 00       	.word	0x0010	; ????
     152:	27 67       	ori	r18, 0x77	; 119
     154:	45 45       	sbci	r20, 0x55	; 85
     156:	7d 39       	cpi	r23, 0x9D	; 157
     158:	00 00       	nop
     15a:	3c 7e       	andi	r19, 0xEC	; 236
     15c:	4b 49       	sbci	r20, 0x9B	; 155
     15e:	79 30       	cpi	r23, 0x09	; 9
     160:	00 00       	nop
     162:	03 63       	ori	r16, 0x33	; 51
     164:	71 19       	sub	r23, r1
     166:	0f 07       	cpc	r16, r31
     168:	00 00       	nop
     16a:	36 7f       	andi	r19, 0xF6	; 246
     16c:	49 49       	sbci	r20, 0x99	; 153
     16e:	7f 36       	cpi	r23, 0x6F	; 111
     170:	00 00       	nop
     172:	06 4f       	sbci	r16, 0xF6	; 246
     174:	49 69       	ori	r20, 0x99	; 153
     176:	3f 1e       	adc	r3, r31
     178:	00 00       	nop
     17a:	00 00       	nop
     17c:	6c 6c       	ori	r22, 0xCC	; 204
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	00 a0       	ldd	r0, Z+32	; 0x20
     184:	ec 6c       	ori	r30, 0xCC	; 204
     186:	00 00       	nop
     188:	00 00       	nop
     18a:	08 1c       	adc	r0, r8
     18c:	36 63       	ori	r19, 0x36	; 54
     18e:	41 00       	.word	0x0041	; ????
     190:	00 00       	nop
     192:	14 14       	cp	r1, r4
     194:	14 14       	cp	r1, r4
     196:	14 14       	cp	r1, r4
     198:	00 00       	nop
     19a:	00 41       	sbci	r16, 0x10	; 16
     19c:	63 36       	cpi	r22, 0x63	; 99
     19e:	1c 08       	sbc	r1, r12
     1a0:	00 00       	nop
     1a2:	02 03       	mulsu	r16, r18
     1a4:	51 59       	subi	r21, 0x91	; 145
     1a6:	0f 06       	cpc	r0, r31
     1a8:	00 00       	nop
     1aa:	3e 7f       	andi	r19, 0xFE	; 254
     1ac:	41 5d       	subi	r20, 0xD1	; 209
     1ae:	5d 1f       	adc	r21, r29
     1b0:	1e 00       	.word	0x001e	; ????
     1b2:	7c 7e       	andi	r23, 0xEC	; 236
     1b4:	13 13       	cpse	r17, r19
     1b6:	7e 7c       	andi	r23, 0xCE	; 206
     1b8:	00 00       	nop
     1ba:	41 7f       	andi	r20, 0xF1	; 241
     1bc:	7f 49       	sbci	r23, 0x9F	; 159
     1be:	49 7f       	andi	r20, 0xF9	; 249
     1c0:	36 00       	.word	0x0036	; ????
     1c2:	1c 3e       	cpi	r17, 0xEC	; 236
     1c4:	63 41       	sbci	r22, 0x13	; 19
     1c6:	41 63       	ori	r20, 0x31	; 49
     1c8:	22 00       	.word	0x0022	; ????
     1ca:	41 7f       	andi	r20, 0xF1	; 241
     1cc:	7f 41       	sbci	r23, 0x1F	; 31
     1ce:	63 7f       	andi	r22, 0xF3	; 243
     1d0:	1c 00       	.word	0x001c	; ????
     1d2:	41 7f       	andi	r20, 0xF1	; 241
     1d4:	7f 49       	sbci	r23, 0x9F	; 159
     1d6:	5d 41       	sbci	r21, 0x1D	; 29
     1d8:	63 00       	.word	0x0063	; ????
     1da:	41 7f       	andi	r20, 0xF1	; 241
     1dc:	7f 49       	sbci	r23, 0x9F	; 159
     1de:	1d 01       	movw	r2, r26
     1e0:	03 00       	.word	0x0003	; ????
     1e2:	1c 3e       	cpi	r17, 0xEC	; 236
     1e4:	63 41       	sbci	r22, 0x13	; 19
     1e6:	51 73       	andi	r21, 0x31	; 49
     1e8:	72 00       	.word	0x0072	; ????
     1ea:	7f 7f       	andi	r23, 0xFF	; 255
     1ec:	08 08       	sbc	r0, r8
     1ee:	7f 7f       	andi	r23, 0xFF	; 255
     1f0:	00 00       	nop
     1f2:	00 41       	sbci	r16, 0x10	; 16
     1f4:	7f 7f       	andi	r23, 0xFF	; 255
     1f6:	41 00       	.word	0x0041	; ????
     1f8:	00 00       	nop
     1fa:	30 70       	andi	r19, 0x00	; 0
     1fc:	40 41       	sbci	r20, 0x10	; 16
     1fe:	7f 3f       	cpi	r23, 0xFF	; 255
     200:	01 00       	.word	0x0001	; ????
     202:	41 7f       	andi	r20, 0xF1	; 241
     204:	7f 08       	sbc	r7, r15
     206:	1c 77       	andi	r17, 0x7C	; 124
     208:	63 00       	.word	0x0063	; ????
     20a:	41 7f       	andi	r20, 0xF1	; 241
     20c:	7f 41       	sbci	r23, 0x1F	; 31
     20e:	40 60       	ori	r20, 0x00	; 0
     210:	70 00       	.word	0x0070	; ????
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	06 0c       	add	r0, r6
     216:	06 7f       	andi	r16, 0xF6	; 246
     218:	7f 00       	.word	0x007f	; ????
     21a:	7f 7f       	andi	r23, 0xFF	; 255
     21c:	06 0c       	add	r0, r6
     21e:	18 7f       	andi	r17, 0xF8	; 248
     220:	7f 00       	.word	0x007f	; ????
     222:	1c 3e       	cpi	r17, 0xEC	; 236
     224:	63 41       	sbci	r22, 0x13	; 19
     226:	63 3e       	cpi	r22, 0xE3	; 227
     228:	1c 00       	.word	0x001c	; ????
     22a:	41 7f       	andi	r20, 0xF1	; 241
     22c:	7f 49       	sbci	r23, 0x9F	; 159
     22e:	09 0f       	add	r16, r25
     230:	06 00       	.word	0x0006	; ????
     232:	1e 3f       	cpi	r17, 0xFE	; 254
     234:	21 71       	andi	r18, 0x11	; 17
     236:	7f 5e       	subi	r23, 0xEF	; 239
     238:	00 00       	nop
     23a:	41 7f       	andi	r20, 0xF1	; 241
     23c:	7f 19       	sub	r23, r15
     23e:	39 6f       	ori	r19, 0xF9	; 249
     240:	46 00       	.word	0x0046	; ????
     242:	26 67       	ori	r18, 0x76	; 118
     244:	4d 59       	subi	r20, 0x9D	; 157
     246:	7b 32       	cpi	r23, 0x2B	; 43
     248:	00 00       	nop
     24a:	03 41       	sbci	r16, 0x13	; 19
     24c:	7f 7f       	andi	r23, 0xFF	; 255
     24e:	41 03       	mulsu	r20, r17
     250:	00 00       	nop
     252:	7f 7f       	andi	r23, 0xFF	; 255
     254:	40 40       	sbci	r20, 0x00	; 0
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	00 00       	nop
     25a:	1f 3f       	cpi	r17, 0xFF	; 255
     25c:	60 60       	ori	r22, 0x00	; 0
     25e:	3f 1f       	adc	r19, r31
     260:	00 00       	nop
     262:	7f 7f       	andi	r23, 0xFF	; 255
     264:	30 18       	sub	r3, r0
     266:	30 7f       	andi	r19, 0xF0	; 240
     268:	7f 00       	.word	0x007f	; ????
     26a:	63 77       	andi	r22, 0x73	; 115
     26c:	1c 08       	sbc	r1, r12
     26e:	1c 77       	andi	r17, 0x7C	; 124
     270:	63 00       	.word	0x0063	; ????
     272:	07 4f       	sbci	r16, 0xF7	; 247
     274:	78 78       	andi	r23, 0x88	; 136
     276:	4f 07       	cpc	r20, r31
     278:	00 00       	nop
     27a:	67 73       	andi	r22, 0x37	; 55
     27c:	59 4d       	sbci	r21, 0xD9	; 217
     27e:	47 63       	ori	r20, 0x37	; 55
     280:	71 00       	.word	0x0071	; ????
     282:	00 7f       	andi	r16, 0xF0	; 240
     284:	7f 41       	sbci	r23, 0x1F	; 31
     286:	41 00       	.word	0x0041	; ????
     288:	00 00       	nop
     28a:	00 00       	nop
     28c:	00 00       	nop
     28e:	06 06       	cpc	r0, r22
     290:	02 02       	muls	r16, r18
     292:	00 00       	nop
     294:	00 00       	nop
     296:	0e 06       	cpc	r0, r30
     298:	06 06       	cpc	r0, r22
     29a:	00 02       	muls	r16, r16
     29c:	02 02       	muls	r16, r18
     29e:	02 02       	muls	r16, r18
     2a0:	02 00       	.word	0x0002	; ????
     2a2:	06 06       	cpc	r0, r22
     2a4:	06 06       	cpc	r0, r22
     2a6:	06 06       	cpc	r0, r22
     2a8:	06 06       	cpc	r0, r22
     2aa:	06 06       	cpc	r0, r22
     2ac:	06 0e       	add	r0, r22
     2ae:	00 00       	nop
     2b0:	00 00       	nop
     2b2:	20 74       	andi	r18, 0x40	; 64
     2b4:	54 54       	subi	r21, 0x44	; 68
     2b6:	3c 78       	andi	r19, 0x8C	; 140
     2b8:	40 00       	.word	0x0040	; ????
     2ba:	41 3f       	cpi	r20, 0xF1	; 241
     2bc:	7f 44       	sbci	r23, 0x4F	; 79
     2be:	44 7c       	andi	r20, 0xC4	; 196
     2c0:	38 00       	.word	0x0038	; ????
     2c2:	38 7c       	andi	r19, 0xC8	; 200
     2c4:	44 44       	sbci	r20, 0x44	; 68
     2c6:	6c 28       	or	r6, r12
     2c8:	00 00       	nop
     2ca:	30 78       	andi	r19, 0x80	; 128
     2cc:	48 49       	sbci	r20, 0x98	; 152
     2ce:	3f 7f       	andi	r19, 0xFF	; 255
     2d0:	40 00       	.word	0x0040	; ????
     2d2:	38 7c       	andi	r19, 0xC8	; 200
     2d4:	54 54       	subi	r21, 0x44	; 68
     2d6:	5c 18       	sub	r5, r12
     2d8:	00 00       	nop
     2da:	48 7e       	andi	r20, 0xE8	; 232
     2dc:	7f 49       	sbci	r23, 0x9F	; 159
     2de:	03 02       	muls	r16, r19
     2e0:	00 00       	nop
     2e2:	98 bc       	out	0x28, r9	; 40
     2e4:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2e6:	f8 7c       	andi	r31, 0xC8	; 200
     2e8:	04 00       	.word	0x0004	; ????
     2ea:	41 7f       	andi	r20, 0xF1	; 241
     2ec:	7f 08       	sbc	r7, r15
     2ee:	04 7c       	andi	r16, 0xC4	; 196
     2f0:	78 00       	.word	0x0078	; ????
     2f2:	00 44       	sbci	r16, 0x40	; 64
     2f4:	7d 7d       	andi	r23, 0xDD	; 221
     2f6:	40 00       	.word	0x0040	; ????
     2f8:	00 00       	nop
     2fa:	40 c4       	rjmp	.+2176   	; 0xb7c <init_menu+0x168>
     2fc:	84 fd       	sbrc	r24, 4
     2fe:	7d 00       	.word	0x007d	; ????
     300:	00 00       	nop
     302:	41 7f       	andi	r20, 0xF1	; 241
     304:	7f 10       	cpse	r7, r15
     306:	38 6c       	ori	r19, 0xC8	; 200
     308:	44 00       	.word	0x0044	; ????
     30a:	00 41       	sbci	r16, 0x10	; 16
     30c:	7f 7f       	andi	r23, 0xFF	; 255
     30e:	40 00       	.word	0x0040	; ????
     310:	00 00       	nop
     312:	7c 7c       	andi	r23, 0xCC	; 204
     314:	0c 18       	sub	r0, r12
     316:	0c 7c       	andi	r16, 0xCC	; 204
     318:	78 00       	.word	0x0078	; ????
     31a:	7c 7c       	andi	r23, 0xCC	; 204
     31c:	04 04       	cpc	r0, r4
     31e:	7c 78       	andi	r23, 0x8C	; 140
     320:	00 00       	nop
     322:	38 7c       	andi	r19, 0xC8	; 200
     324:	44 44       	sbci	r20, 0x44	; 68
     326:	7c 38       	cpi	r23, 0x8C	; 140
     328:	00 00       	nop
     32a:	84 fc       	sbrc	r8, 4
     32c:	f8 a4       	ldd	r15, Y+40	; 0x28
     32e:	24 3c       	cpi	r18, 0xC4	; 196
     330:	18 00       	.word	0x0018	; ????
     332:	18 3c       	cpi	r17, 0xC8	; 200
     334:	24 a4       	ldd	r2, Z+44	; 0x2c
     336:	f8 fc       	.word	0xfcf8	; ????
     338:	84 00       	.word	0x0084	; ????
     33a:	44 7c       	andi	r20, 0xC4	; 196
     33c:	78 44       	sbci	r23, 0x48	; 72
     33e:	1c 18       	sub	r1, r12
     340:	00 00       	nop
     342:	48 5c       	subi	r20, 0xC8	; 200
     344:	54 54       	subi	r21, 0x44	; 68
     346:	74 24       	eor	r7, r4
     348:	00 00       	nop
     34a:	00 04       	cpc	r0, r0
     34c:	3e 7f       	andi	r19, 0xFE	; 254
     34e:	44 24       	eor	r4, r4
     350:	00 00       	nop
     352:	3c 7c       	andi	r19, 0xCC	; 204
     354:	40 40       	sbci	r20, 0x00	; 0
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	40 00       	.word	0x0040	; ????
     35a:	1c 3c       	cpi	r17, 0xCC	; 204
     35c:	60 60       	ori	r22, 0x00	; 0
     35e:	3c 1c       	adc	r3, r12
     360:	00 00       	nop
     362:	3c 7c       	andi	r19, 0xCC	; 204
     364:	60 30       	cpi	r22, 0x00	; 0
     366:	60 7c       	andi	r22, 0xC0	; 192
     368:	3c 00       	.word	0x003c	; ????
     36a:	44 6c       	ori	r20, 0xC4	; 196
     36c:	38 10       	cpse	r3, r8
     36e:	38 6c       	ori	r19, 0xC8	; 200
     370:	44 00       	.word	0x0044	; ????
     372:	9c bc       	out	0x2c, r9	; 44
     374:	a0 a0       	ldd	r10, Z+32	; 0x20
     376:	fc 7c       	andi	r31, 0xCC	; 204
     378:	00 00       	nop
     37a:	4c 64       	ori	r20, 0x4C	; 76
     37c:	74 5c       	subi	r23, 0xC4	; 196
     37e:	4c 64       	ori	r20, 0x4C	; 76
     380:	00 00       	nop
     382:	08 08       	sbc	r0, r8
     384:	3e 77       	andi	r19, 0x7E	; 126
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	00 77       	andi	r16, 0x70	; 112
     38e:	77 00       	.word	0x0077	; ????
     390:	00 00       	nop
     392:	00 1e       	adc	r0, r16
     394:	3f fc       	.word	0xfc3f	; ????
     396:	fc 3f       	cpi	r31, 0xFC	; 252
     398:	1e 00       	.word	0x001e	; ????
     39a:	38 7c       	andi	r19, 0xC8	; 200
     39c:	7c 7c       	andi	r23, 0xCC	; 204
     39e:	7c 38       	cpi	r23, 0x8C	; 140
	...

000003a2 <__ctors_end>:
     3a2:	11 24       	eor	r1, r1
     3a4:	1f be       	out	0x3f, r1	; 63
     3a6:	cf ef       	ldi	r28, 0xFF	; 255
     3a8:	d4 e0       	ldi	r29, 0x04	; 4
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	cd bf       	out	0x3d, r28	; 61

000003ae <__do_copy_data>:
     3ae:	14 e0       	ldi	r17, 0x04	; 4
     3b0:	a0 e0       	ldi	r26, 0x00	; 0
     3b2:	b1 e0       	ldi	r27, 0x01	; 1
     3b4:	ea e8       	ldi	r30, 0x8A	; 138
     3b6:	f8 e3       	ldi	r31, 0x38	; 56
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <__do_copy_data+0x10>
     3ba:	05 90       	lpm	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	a4 31       	cpi	r26, 0x14	; 20
     3c0:	b1 07       	cpc	r27, r17
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <__do_copy_data+0xc>

000003c4 <__do_clear_bss>:
     3c4:	24 e0       	ldi	r18, 0x04	; 4
     3c6:	a4 e1       	ldi	r26, 0x14	; 20
     3c8:	b4 e0       	ldi	r27, 0x04	; 4
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <.do_clear_bss_start>

000003cc <.do_clear_bss_loop>:
     3cc:	1d 92       	st	X+, r1

000003ce <.do_clear_bss_start>:
     3ce:	a0 36       	cpi	r26, 0x60	; 96
     3d0:	b2 07       	cpc	r27, r18
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <.do_clear_bss_loop>
     3d4:	0e 94 f7 03 	call	0x7ee	; 0x7ee <main>
     3d8:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <_exit>

000003dc <__bad_interrupt>:
     3dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e0 <ADC_init>:
#include "setup.h"
#include <util/delay.h>

int ADC_init(void) {
	//Enable the external memory interface/4 bits address, page 26-35 in Atmega162 data sheet
	MCUCR |= (1<<SRE);
     3e0:	85 b7       	in	r24, 0x35	; 53
     3e2:	80 68       	ori	r24, 0x80	; 128
     3e4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     3e6:	80 b7       	in	r24, 0x30	; 48
     3e8:	80 62       	ori	r24, 0x20	; 32
     3ea:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input, INT0, PD2
	DDRB &= ~(1<<PIND2);
     3ec:	ba 98       	cbi	0x17, 2	; 23
	
	return 0;
}
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	08 95       	ret

000003f4 <ADC_read>:
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC, used as chip select
	volatile char *adc = (char *) 0x1400;
	
	//checks if the channel is valid, we can only use channel 1-4.
	if(channel > 3) {return 0;}
     3f4:	84 30       	cpi	r24, 0x04	; 4
     3f6:	48 f4       	brcc	.+18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	
	//Choose channel in ADC, lets us chose what device we want to read
	*adc = 0x04 | channel;
     3f8:	84 60       	ori	r24, 0x04	; 4
     3fa:	e0 e0       	ldi	r30, 0x00	; 0
     3fc:	f4 e1       	ldi	r31, 0x14	; 20
     3fe:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     400:	84 ea       	ldi	r24, 0xA4	; 164
     402:	8a 95       	dec	r24
     404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>

	//delay to let the adc finish its conversion
	_delay_us(100);
	return *adc;
     406:	80 81       	ld	r24, Z
     408:	08 95       	ret
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC, used as chip select
	volatile char *adc = (char *) 0x1400;
	
	//checks if the channel is valid, we can only use channel 1-4.
	if(channel > 3) {return 0;}
     40a:	80 e0       	ldi	r24, 0x00	; 0
	*adc = 0x04 | channel;

	//delay to let the adc finish its conversion
	_delay_us(100);
	return *adc;
     40c:	08 95       	ret

0000040e <CAN_init>:
uint8_t rx_flag = 0;

//function to initiate can, and set it in the right mode
int CAN_init(void) {
	//Enter config mode
	MCP_init();
     40e:	0e 94 af 04 	call	0x95e	; 0x95e <MCP_init>
	
	//Turn masks/filters off, rollover disabled
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, 0b01101100);
     412:	4c e6       	ldi	r20, 0x6C	; 108
     414:	60 e6       	ldi	r22, 0x60	; 96
     416:	80 e6       	ldi	r24, 0x60	; 96
     418:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <MCP_bit_modify>
	//Enable interrupt when message is received
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0x01);
     41c:	41 e0       	ldi	r20, 0x01	; 1
     41e:	63 e0       	ldi	r22, 0x03	; 3
     420:	8b e2       	ldi	r24, 0x2B	; 43
     422:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <MCP_bit_modify>
	
	//Enable normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	60 ee       	ldi	r22, 0xE0	; 224
     42a:	8f e0       	ldi	r24, 0x0F	; 15
     42c:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <MCP_bit_modify>
	
	//check if can is in normal mode, for debugging
	uint8_t value = MCP_read(MCP_CANSTAT);
     430:	8e e0       	ldi	r24, 0x0E	; 14
     432:	0e 94 98 04 	call	0x930	; 0x930 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     436:	80 7e       	andi	r24, 0xE0	; 224
     438:	59 f0       	breq	.+22     	; 0x450 <CAN_init+0x42>
		printf("ERROR..ERROR...NORMAL MODE NOT WORKING");
     43a:	83 e6       	ldi	r24, 0x63	; 99
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	9f 93       	push	r25
     440:	8f 93       	push	r24
     442:	0e 94 11 18 	call	0x3022	; 0x3022 <printf>
		return 1;
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	08 95       	ret
	}
	
	

	return 0;
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
}
     454:	08 95       	ret

00000456 <CAN_error>:
}


//Function that checks for error
int CAN_error(void) {
	uint8_t error = MCP_read(MCP_TXB0CTRL);
     456:	80 e3       	ldi	r24, 0x30	; 48
     458:	0e 94 98 04 	call	0x930	; 0x930 <MCP_read>
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
     45c:	84 fd       	sbrc	r24, 4
     45e:	05 c0       	rjmp	.+10     	; 0x46a <CAN_error+0x14>
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
     460:	85 fd       	sbrc	r24, 5
     462:	06 c0       	rjmp	.+12     	; 0x470 <CAN_error+0x1a>
	
	return 0;
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	08 95       	ret
//Function that checks for error
int CAN_error(void) {
	uint8_t error = MCP_read(MCP_TXB0CTRL);
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
     46a:	8f ef       	ldi	r24, 0xFF	; 255
     46c:	9f ef       	ldi	r25, 0xFF	; 255
     46e:	08 95       	ret
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
     470:	8e ef       	ldi	r24, 0xFE	; 254
     472:	9f ef       	ldi	r25, 0xFF	; 255
	
	return 0;
}
     474:	08 95       	ret

00000476 <CAN_transmit_complete>:


int CAN_transmit_complete(void) {
	//Check if TX buffer is not pending transmission (TXREQ = 0)
	if (test_bit(MCP_read(MCP_TXB0CTRL), 3)) {
     476:	80 e3       	ldi	r24, 0x30	; 48
     478:	0e 94 98 04 	call	0x930	; 0x930 <MCP_read>
     47c:	86 95       	lsr	r24
     47e:	86 95       	lsr	r24
     480:	86 95       	lsr	r24
     482:	91 e0       	ldi	r25, 0x01	; 1
     484:	89 27       	eor	r24, r25
		return 0;
		} else {
		return 1;
	}
}
     486:	81 70       	andi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	08 95       	ret

0000048c <CAN_message_send>:
	return 0;
}


//Function to send CAN messages, sets, id, length and puts data into data 1-8
int CAN_message_send(can_msg* message) {
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	8c 01       	movw	r16, r24
	uint8_t i;
	
	//Check if there is no pending transmission
	if (CAN_transmit_complete()) {
     494:	0e 94 3b 02 	call	0x476	; 0x476 <CAN_transmit_complete>
     498:	89 2b       	or	r24, r25
     49a:	09 f4       	brne	.+2      	; 0x49e <CAN_message_send+0x12>
     49c:	3f c0       	rjmp	.+126    	; 0x51c <__stack+0x1d>
		
		//Set the message id
		MCP_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
     49e:	f8 01       	movw	r30, r16
     4a0:	60 81       	ld	r22, Z
     4a2:	71 81       	ldd	r23, Z+1	; 0x01
     4a4:	76 95       	lsr	r23
     4a6:	67 95       	ror	r22
     4a8:	76 95       	lsr	r23
     4aa:	67 95       	ror	r22
     4ac:	76 95       	lsr	r23
     4ae:	67 95       	ror	r22
     4b0:	81 e3       	ldi	r24, 0x31	; 49
     4b2:	0e 94 c5 04 	call	0x98a	; 0x98a <MCP_write>
		MCP_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
     4b6:	f8 01       	movw	r30, r16
     4b8:	60 81       	ld	r22, Z
     4ba:	71 81       	ldd	r23, Z+1	; 0x01
     4bc:	66 0f       	add	r22, r22
     4be:	77 1f       	adc	r23, r23
     4c0:	62 95       	swap	r22
     4c2:	72 95       	swap	r23
     4c4:	70 7f       	andi	r23, 0xF0	; 240
     4c6:	76 27       	eor	r23, r22
     4c8:	60 7f       	andi	r22, 0xF0	; 240
     4ca:	76 27       	eor	r23, r22
     4cc:	82 e3       	ldi	r24, 0x32	; 50
     4ce:	0e 94 c5 04 	call	0x98a	; 0x98a <MCP_write>
		MCP_write(MCP_TXB0EID8, 0);
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	83 e4       	ldi	r24, 0x43	; 67
     4d6:	0e 94 c5 04 	call	0x98a	; 0x98a <MCP_write>
		MCP_write(MCP_TXB0EID0, 0);
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	84 e4       	ldi	r24, 0x44	; 68
     4de:	0e 94 c5 04 	call	0x98a	; 0x98a <MCP_write>
		
		//Set data length
		MCP_write(MCP_TXB0DLC, message->length);
     4e2:	f8 01       	movw	r30, r16
     4e4:	62 81       	ldd	r22, Z+2	; 0x02
     4e6:	85 e3       	ldi	r24, 0x35	; 53
     4e8:	0e 94 c5 04 	call	0x98a	; 0x98a <MCP_write>

		//Set data bytes (max. 8 bytes, 0-7)
		for (i = 0; i < message->length; i++) {
     4ec:	f8 01       	movw	r30, r16
     4ee:	82 81       	ldd	r24, Z+2	; 0x02
     4f0:	88 23       	and	r24, r24
     4f2:	71 f0       	breq	.+28     	; 0x510 <__stack+0x11>
     4f4:	c0 e0       	ldi	r28, 0x00	; 0
			MCP_write(MCP_TXB0D0 + i, message->data[i]);
     4f6:	f8 01       	movw	r30, r16
     4f8:	ec 0f       	add	r30, r28
     4fa:	f1 1d       	adc	r31, r1
     4fc:	63 81       	ldd	r22, Z+3	; 0x03
     4fe:	86 e3       	ldi	r24, 0x36	; 54
     500:	8c 0f       	add	r24, r28
     502:	0e 94 c5 04 	call	0x98a	; 0x98a <MCP_write>
		
		//Set data length
		MCP_write(MCP_TXB0DLC, message->length);

		//Set data bytes (max. 8 bytes, 0-7)
		for (i = 0; i < message->length; i++) {
     506:	cf 5f       	subi	r28, 0xFF	; 255
     508:	f8 01       	movw	r30, r16
     50a:	82 81       	ldd	r24, Z+2	; 0x02
     50c:	c8 17       	cp	r28, r24
     50e:	98 f3       	brcs	.-26     	; 0x4f6 <CAN_message_send+0x6a>
			MCP_write(MCP_TXB0D0 + i, message->data[i]);
		}
		
		//Request to send via TX0
		MCP_request_to_send(MCP_RTS_TX0);
     510:	81 e8       	ldi	r24, 0x81	; 129
     512:	0e 94 dd 04 	call	0x9ba	; 0x9ba <MCP_request_to_send>
		if (CAN_error() < 0) {
			return -1;
		}
	}
	
	return 0;
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	07 c0       	rjmp	.+14     	; 0x52a <__stack+0x2b>
		
		//Request to send via TX0
		MCP_request_to_send(MCP_RTS_TX0);
		//return error if it does not work
		} else {
		if (CAN_error() < 0) {
     51c:	0e 94 2b 02 	call	0x456	; 0x456 <CAN_error>
     520:	99 0f       	add	r25, r25
     522:	99 0b       	sbc	r25, r25
     524:	89 2f       	mov	r24, r25
     526:	99 0f       	add	r25, r25
     528:	99 0b       	sbc	r25, r25
			return -1;
		}
	}
	
	return 0;
}
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	08 95       	ret

00000532 <CAN_data_receive>:
}



//function that makes it possible to receive can messages
can_msg CAN_data_receive(void) {
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	2b 97       	sbiw	r28, 0x0b	; 11
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	6c 01       	movw	r12, r24
	uint8_t i;
	can_msg message;
	
	//Check if RX buffer has a message
	if (rx_flag == 1) {
     55a:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <__data_end>
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	51 f5       	brne	.+84     	; 0x5b6 <CAN_data_receive+0x84>
		
		//Get message id
		message.id  = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
     562:	81 e6       	ldi	r24, 0x61	; 97
     564:	0e 94 98 04 	call	0x930	; 0x930 <MCP_read>
     568:	a8 2e       	mov	r10, r24
     56a:	82 e6       	ldi	r24, 0x62	; 98
     56c:	0e 94 98 04 	call	0x930	; 0x930 <MCP_read>
     570:	b1 2c       	mov	r11, r1
     572:	aa 0c       	add	r10, r10
     574:	bb 1c       	adc	r11, r11
     576:	aa 0c       	add	r10, r10
     578:	bb 1c       	adc	r11, r11
     57a:	aa 0c       	add	r10, r10
     57c:	bb 1c       	adc	r11, r11
     57e:	82 95       	swap	r24
     580:	86 95       	lsr	r24
     582:	87 70       	andi	r24, 0x07	; 7
     584:	a8 2a       	or	r10, r24
		
		//Get message length
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
     586:	85 e6       	ldi	r24, 0x65	; 101
     588:	0e 94 98 04 	call	0x930	; 0x930 <MCP_read>
     58c:	8f 70       	andi	r24, 0x0F	; 15
     58e:	98 2e       	mov	r9, r24
		
		//Get message data
		for(i = 0; i < message.length; i++) {
     590:	81 f0       	breq	.+32     	; 0x5b2 <CAN_data_receive+0x80>
     592:	7e 01       	movw	r14, r28
     594:	84 e0       	ldi	r24, 0x04	; 4
     596:	e8 0e       	add	r14, r24
     598:	f1 1c       	adc	r15, r1
     59a:	06 e6       	ldi	r16, 0x66	; 102
     59c:	09 0d       	add	r16, r9
     59e:	16 e6       	ldi	r17, 0x66	; 102
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
     5a0:	81 2f       	mov	r24, r17
     5a2:	0e 94 98 04 	call	0x930	; 0x930 <MCP_read>
     5a6:	f7 01       	movw	r30, r14
     5a8:	81 93       	st	Z+, r24
     5aa:	7f 01       	movw	r14, r30
     5ac:	1f 5f       	subi	r17, 0xFF	; 255
		
		//Get message length
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
		
		//Get message data
		for(i = 0; i < message.length; i++) {
     5ae:	10 13       	cpse	r17, r16
     5b0:	f7 cf       	rjmp	.-18     	; 0x5a0 <CAN_data_receive+0x6e>
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
	}
		
		//Clear interrupt flag
		rx_flag = 0;
     5b2:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <__data_end>
	}
		
	
	return message;
     5b6:	ba 82       	std	Y+2, r11	; 0x02
     5b8:	a9 82       	std	Y+1, r10	; 0x01
     5ba:	9b 82       	std	Y+3, r9	; 0x03
     5bc:	8b e0       	ldi	r24, 0x0B	; 11
     5be:	fe 01       	movw	r30, r28
     5c0:	31 96       	adiw	r30, 0x01	; 1
     5c2:	d6 01       	movw	r26, r12
     5c4:	01 90       	ld	r0, Z+
     5c6:	0d 92       	st	X+, r0
     5c8:	8a 95       	dec	r24
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <CAN_data_receive+0x92>
}
     5cc:	c6 01       	movw	r24, r12
     5ce:	2b 96       	adiw	r28, 0x0b	; 11
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	bf 90       	pop	r11
     5ec:	af 90       	pop	r10
     5ee:	9f 90       	pop	r9
     5f0:	08 95       	ret

000005f2 <__vector_1>:

//Interrupt for CAN
ISR(INT0_vect) {
     5f2:	1f 92       	push	r1
     5f4:	0f 92       	push	r0
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	0f 92       	push	r0
     5fa:	11 24       	eor	r1, r1
     5fc:	2f 93       	push	r18
     5fe:	3f 93       	push	r19
     600:	4f 93       	push	r20
     602:	5f 93       	push	r21
     604:	6f 93       	push	r22
     606:	7f 93       	push	r23
     608:	8f 93       	push	r24
     60a:	9f 93       	push	r25
     60c:	af 93       	push	r26
     60e:	bf 93       	push	r27
     610:	ef 93       	push	r30
     612:	ff 93       	push	r31
	MCP_bit_modify(MCP_CANINTF, MCP_RXF0SIDL, MCP_RXF0SIDH);
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	8c e2       	ldi	r24, 0x2C	; 44
     61a:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <MCP_bit_modify>
	rx_flag = 1;
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <__data_end>
}
     624:	ff 91       	pop	r31
     626:	ef 91       	pop	r30
     628:	bf 91       	pop	r27
     62a:	af 91       	pop	r26
     62c:	9f 91       	pop	r25
     62e:	8f 91       	pop	r24
     630:	7f 91       	pop	r23
     632:	6f 91       	pop	r22
     634:	5f 91       	pop	r21
     636:	4f 91       	pop	r20
     638:	3f 91       	pop	r19
     63a:	2f 91       	pop	r18
     63c:	0f 90       	pop	r0
     63e:	0f be       	out	0x3f, r0	; 63
     640:	0f 90       	pop	r0
     642:	1f 90       	pop	r1
     644:	18 95       	reti

00000646 <JOY_calibrate>:
	return 0;
}

//the calibrate function reads the initial values of the joystick and assumes these are the neutral positions.
int JOY_calibrate(void) {
	mid_x=ADC_read(0);
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     64c:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <mid_x>
	mid_y=ADC_read(1);
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     656:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <mid_y>
	return 0;
}
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	08 95       	ret

00000660 <joy_init>:

uint8_t mid_x, mid_y;

int joy_init(void){
	// let the ADC set itself up
	ADC_init();
     660:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <ADC_init>
	
	//Set Button pins to input
	DDRB &= ~(1<<PINB0) & ~(1<<PINB1) & ~(1<<PINB2);
     664:	87 b3       	in	r24, 0x17	; 23
     666:	88 7f       	andi	r24, 0xF8	; 248
     668:	87 bb       	out	0x17, r24	; 23
	//set pull up resistors
	PORTB |= (1<<PINB0) | (1<<PINB1) | (1<<PINB2); 
     66a:	88 b3       	in	r24, 0x18	; 24
     66c:	87 60       	ori	r24, 0x07	; 7
     66e:	88 bb       	out	0x18, r24	; 24
	
	//Let the joystick calibrate itself
	JOY_calibrate();
     670:	0e 94 23 03 	call	0x646	; 0x646 <JOY_calibrate>
	
	return 0;
}
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	08 95       	ret

0000067a <joy_button>:
	return 0;
}

// setting the inputs for the pins that the buttons are connected to
int joy_button(int button){
	switch (button) {
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	91 05       	cpc	r25, r1
     67e:	59 f0       	breq	.+22     	; 0x696 <joy_button+0x1c>
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	91 05       	cpc	r25, r1
     684:	79 f0       	breq	.+30     	; 0x6a4 <joy_button+0x2a>
     686:	89 2b       	or	r24, r25
     688:	a9 f4       	brne	.+42     	; 0x6b4 <joy_button+0x3a>
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     68a:	96 b3       	in	r25, 0x16	; 22
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	89 27       	eor	r24, r25
     690:	81 70       	andi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	08 95       	ret
			break;
		case 1: // left button
			if (!test_bit(PINB,PINB1)) return 1;
     696:	86 b3       	in	r24, 0x16	; 22

// setting the inputs for the pins that the buttons are connected to
int joy_button(int button){
	switch (button) {
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     698:	86 95       	lsr	r24
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	89 27       	eor	r24, r25
     69e:	81 70       	andi	r24, 0x01	; 1
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	08 95       	ret
			break;
		case 1: // left button
			if (!test_bit(PINB,PINB1)) return 1;
			break;	
		case 2: // right button
			if (!test_bit(PINB,PINB2)) return 1;
     6a4:	86 b3       	in	r24, 0x16	; 22

// setting the inputs for the pins that the buttons are connected to
int joy_button(int button){
	switch (button) {
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     6a6:	86 95       	lsr	r24
     6a8:	86 95       	lsr	r24
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	89 27       	eor	r24, r25
     6ae:	81 70       	andi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	08 95       	ret
			if (!test_bit(PINB,PINB2)) return 1;
			break;
		default:
				break;
	}
	return 0;
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
}
     6b8:	08 95       	ret

000006ba <JOY_getPosition>:

// function that is used to get the position of the joystick
joy_position JOY_getPosition(void) {
     6ba:	cf 93       	push	r28
	joy_position position;
	uint8_t x, y;
	
	//Read position x from channel 0
	x = ADC_read(1);
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     6c2:	c8 2f       	mov	r28, r24
	//Read position y from channel 1
	y = ADC_read(0);
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     6ca:	e8 2f       	mov	r30, r24
	
	//Calculate position x percentage
	if(x > mid_x) {
     6cc:	40 91 1e 04 	lds	r20, 0x041E	; 0x80041e <mid_x>
     6d0:	4c 17       	cp	r20, r28
     6d2:	98 f4       	brcc	.+38     	; 0x6fa <JOY_getPosition+0x40>
		position.x = 100 * (x - mid_x) / (0xFF - mid_x);
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	2c 2f       	mov	r18, r28
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	24 1b       	sub	r18, r20
     6dc:	35 0b       	sbc	r19, r21
     6de:	64 e6       	ldi	r22, 0x64	; 100
     6e0:	62 9f       	mul	r22, r18
     6e2:	c0 01       	movw	r24, r0
     6e4:	63 9f       	mul	r22, r19
     6e6:	90 0d       	add	r25, r0
     6e8:	11 24       	eor	r1, r1
     6ea:	6f ef       	ldi	r22, 0xFF	; 255
     6ec:	70 e0       	ldi	r23, 0x00	; 0
     6ee:	64 1b       	sub	r22, r20
     6f0:	75 0b       	sbc	r23, r21
     6f2:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__divmodhi4>
     6f6:	46 2f       	mov	r20, r22
     6f8:	13 c0       	rjmp	.+38     	; 0x720 <JOY_getPosition+0x66>
		} else if (x < mid_x) {
     6fa:	c4 17       	cp	r28, r20
     6fc:	80 f4       	brcc	.+32     	; 0x71e <JOY_getPosition+0x64>
		position.x = 100 * (x - mid_x) / (mid_x - 0);
     6fe:	64 2f       	mov	r22, r20
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	2c 2f       	mov	r18, r28
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	26 1b       	sub	r18, r22
     708:	37 0b       	sbc	r19, r23
     70a:	44 e6       	ldi	r20, 0x64	; 100
     70c:	42 9f       	mul	r20, r18
     70e:	c0 01       	movw	r24, r0
     710:	43 9f       	mul	r20, r19
     712:	90 0d       	add	r25, r0
     714:	11 24       	eor	r1, r1
     716:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__divmodhi4>
     71a:	46 2f       	mov	r20, r22
     71c:	01 c0       	rjmp	.+2      	; 0x720 <JOY_getPosition+0x66>
		} else {
		position.x = 0;
     71e:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	//Calculate position y percentage
	if(y > mid_y) {
     720:	20 91 1d 04 	lds	r18, 0x041D	; 0x80041d <mid_y>
     724:	2e 17       	cp	r18, r30
     726:	90 f4       	brcc	.+36     	; 0x74c <JOY_getPosition+0x92>
		position.y = 100 * (y - mid_y) / (0xFF - mid_y);
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	e2 1b       	sub	r30, r18
     72e:	f3 0b       	sbc	r31, r19
     730:	54 e6       	ldi	r21, 0x64	; 100
     732:	5e 9f       	mul	r21, r30
     734:	c0 01       	movw	r24, r0
     736:	5f 9f       	mul	r21, r31
     738:	90 0d       	add	r25, r0
     73a:	11 24       	eor	r1, r1
     73c:	6f ef       	ldi	r22, 0xFF	; 255
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	62 1b       	sub	r22, r18
     742:	73 0b       	sbc	r23, r19
     744:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__divmodhi4>
     748:	76 2f       	mov	r23, r22
     74a:	13 c0       	rjmp	.+38     	; 0x772 <JOY_getPosition+0xb8>
		} else if (y < mid_y) {
     74c:	e2 17       	cp	r30, r18
     74e:	80 f4       	brcc	.+32     	; 0x770 <JOY_getPosition+0xb6>
		position.y = 100 * (y - mid_y) / (mid_y - 0);
     750:	62 2f       	mov	r22, r18
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	2e 2f       	mov	r18, r30
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	26 1b       	sub	r18, r22
     75a:	37 0b       	sbc	r19, r23
     75c:	54 e6       	ldi	r21, 0x64	; 100
     75e:	52 9f       	mul	r21, r18
     760:	c0 01       	movw	r24, r0
     762:	53 9f       	mul	r21, r19
     764:	90 0d       	add	r25, r0
     766:	11 24       	eor	r1, r1
     768:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__divmodhi4>
     76c:	76 2f       	mov	r23, r22
     76e:	01 c0       	rjmp	.+2      	; 0x772 <JOY_getPosition+0xb8>
		} else {
		position.y = 0;
     770:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	return position;
}
     772:	64 2f       	mov	r22, r20
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <JOY_getDirection>:
//function to find the direction of the joystick, for use in the menu, represented both as a string and an integer
joy_position JOY_getDirection(void) {
	joy_position position;
	
	//Get actual position of joystick
	position = JOY_getPosition();
     77c:	0e 94 5d 03 	call	0x6ba	; 0x6ba <JOY_getPosition>
     780:	27 2f       	mov	r18, r23
	
	if(position.x < -45) {
     782:	63 3d       	cpi	r22, 0xD3	; 211
     784:	24 f0       	brlt	.+8      	; 0x78e <JOY_getDirection+0x12>
		position.sidedir = 2;
		} 
	else if(position.x > 45) {
     786:	6e 32       	cpi	r22, 0x2E	; 46
     788:	1c f0       	brlt	.+6      	; 0x790 <JOY_getDirection+0x14>
		position.sidedir = 1;
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	01 c0       	rjmp	.+2      	; 0x790 <JOY_getDirection+0x14>
	
	//Get actual position of joystick
	position = JOY_getPosition();
	
	if(position.x < -45) {
		position.sidedir = 2;
     78e:	92 e0       	ldi	r25, 0x02	; 2
		} 
	else if(position.x > 45) {
		position.sidedir = 1;
	}
	
	if(position.y < -45) {
     790:	23 3d       	cpi	r18, 0xD3	; 211
     792:	24 f0       	brlt	.+8      	; 0x79c <JOY_getDirection+0x20>
		position.dir = 2;
		} 
	else if(position.y > 45) {
     794:	2e 32       	cpi	r18, 0x2E	; 46
     796:	1c f0       	brlt	.+6      	; 0x79e <JOY_getDirection+0x22>
		position.dir = 1;
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	01 c0       	rjmp	.+2      	; 0x79e <JOY_getDirection+0x22>
	else if(position.x > 45) {
		position.sidedir = 1;
	}
	
	if(position.y < -45) {
		position.dir = 2;
     79c:	82 e0       	ldi	r24, 0x02	; 2
		} 
	else if(position.y > 45) {
		position.dir = 1;
	}
	
	if((position.x >= -44 && position.x <= 44) && (position.y >= -44 && position.y <= 44)){
     79e:	2c e2       	ldi	r18, 0x2C	; 44
     7a0:	26 0f       	add	r18, r22
     7a2:	29 35       	cpi	r18, 0x59	; 89
     7a4:	30 f4       	brcc	.+12     	; 0x7b2 <JOY_getDirection+0x36>
     7a6:	2c e2       	ldi	r18, 0x2C	; 44
     7a8:	27 0f       	add	r18, r23
     7aa:	29 35       	cpi	r18, 0x59	; 89
     7ac:	10 f4       	brcc	.+4      	; 0x7b2 <JOY_getDirection+0x36>
		position.dir = 0;
		position.sidedir = 0;
     7ae:	90 e0       	ldi	r25, 0x00	; 0
	else if(position.y > 45) {
		position.dir = 1;
	}
	
	if((position.x >= -44 && position.x <= 44) && (position.y >= -44 && position.y <= 44)){
		position.dir = 0;
     7b0:	80 e0       	ldi	r24, 0x00	; 0
		position.sidedir = 0;
	}
	
	return position;
}
     7b2:	08 95       	ret

000007b4 <JOY_getSliderPosition>:
//find the slider position, for both sliders
slider_position JOY_getSliderPosition(void) {
     7b4:	cf 93       	push	r28
	slider_position position;
	uint8_t l, r;
	
	//Read left slider from channel 2
	l = ADC_read(2);
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     7bc:	c8 2f       	mov	r28, r24
	//Read right slider from channel 3
	r = ADC_read(3);
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     7c4:	48 2f       	mov	r20, r24
	
	//Calculate position percentage
	position.left = 100 * l / 0xFF;
	position.right = 100 * r / 0xFF;
	
	return position;
     7c6:	24 e6       	ldi	r18, 0x64	; 100
     7c8:	2c 9f       	mul	r18, r28
     7ca:	c0 01       	movw	r24, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	ef ef       	ldi	r30, 0xFF	; 255
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	bf 01       	movw	r22, r30
     7d4:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__divmodhi4>
     7d8:	36 2f       	mov	r19, r22
     7da:	24 9f       	mul	r18, r20
     7dc:	c0 01       	movw	r24, r0
     7de:	11 24       	eor	r1, r1
     7e0:	bf 01       	movw	r22, r30
     7e2:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__divmodhi4>
     7e6:	96 2f       	mov	r25, r22
}
     7e8:	83 2f       	mov	r24, r19
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <main>:
int score;
int x, y;
	
int main(void)
{
	cli();
     7ee:	f8 94       	cli
	
	GICR  |= (1 << INT0);						//Enable INT0
     7f0:	8b b7       	in	r24, 0x3b	; 59
     7f2:	80 64       	ori	r24, 0x40	; 64
     7f4:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (0 << ISC01) | (0 << ISC00);		//On falling edge
     7f6:	85 b7       	in	r24, 0x35	; 53
     7f8:	85 bf       	out	0x35, r24	; 53
	DDRD &= ~(1 << PIND2);						//Set D2(INT0) as input
     7fa:	8a 98       	cbi	0x11, 2	; 17
	
	UART_Init(UBRREG);
     7fc:	8e e1       	ldi	r24, 0x1E	; 30
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <UART_Init>
	ADC_init();
     804:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <ADC_init>
	SPI_init();
     808:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <SPI_init>
	MCP_init();
     80c:	0e 94 af 04 	call	0x95e	; 0x95e <MCP_init>
	joy_init();
     810:	0e 94 30 03 	call	0x660	; 0x660 <joy_init>
	SRAM_init();
     814:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <SRAM_init>
	OLED_init();;
     818:	0e 94 04 12 	call	0x2408	; 0x2408 <OLED_init>
	JOY_calibrate();
     81c:	0e 94 23 03 	call	0x646	; 0x646 <JOY_calibrate>
	
	if (CAN_init() == 0) {
     820:	0e 94 07 02 	call	0x40e	; 0x40e <CAN_init>
     824:	89 2b       	or	r24, r25
     826:	89 f4       	brne	.+34     	; 0x84a <main+0x5c>
		printf("CAN initiated \n\r");
     828:	8a e8       	ldi	r24, 0x8A	; 138
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	0e 94 11 18 	call	0x3022	; 0x3022 <printf>
		can_msg_send.id = 2;
     834:	ef e1       	ldi	r30, 0x1F	; 31
     836:	f4 e0       	ldi	r31, 0x04	; 4
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	91 83       	std	Z+1, r25	; 0x01
     83e:	80 83       	st	Z, r24
		can_msg_send.length = 7;
     840:	87 e0       	ldi	r24, 0x07	; 7
     842:	82 83       	std	Z+2, r24	; 0x02
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	08 c0       	rjmp	.+16     	; 0x85a <main+0x6c>
		} else {
		printf("CAN not initiated properly \n\r");
     84a:	8b e9       	ldi	r24, 0x9B	; 155
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	0e 94 11 18 	call	0x3022	; 0x3022 <printf>
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
	}

	if (joy_init() == 0) {
     85a:	0e 94 30 03 	call	0x660	; 0x660 <joy_init>
     85e:	89 2b       	or	r24, r25
     860:	49 f4       	brne	.+18     	; 0x874 <main+0x86>
		printf(" Joystick initiated \n\r");
     862:	89 eb       	ldi	r24, 0xB9	; 185
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	9f 93       	push	r25
     868:	8f 93       	push	r24
     86a:	0e 94 11 18 	call	0x3022	; 0x3022 <printf>
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	08 c0       	rjmp	.+16     	; 0x884 <main+0x96>
		} else {
		printf(" Joystick not initiated properly\n\r");
     874:	80 ed       	ldi	r24, 0xD0	; 208
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	0e 94 11 18 	call	0x3022	; 0x3022 <printf>
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
	}
	
	sei();
     884:	78 94       	sei
	while(1){
			joy_pos = JOY_getDirection();
			slider_pos = JOY_getSliderPosition();
		if (menuactive == 1){
			gamestep = init_menu();
			can_msg_send.data[4] = 0;
     886:	cf e1       	ldi	r28, 0x1F	; 31
     888:	d4 e0       	ldi	r29, 0x04	; 4
     88a:	ec 2e       	mov	r14, r28
     88c:	fd 2e       	mov	r15, r29
			CAN_message_send(&can_msg_send);
		}
		if (menuactive == 2){
			can_msg_send.data[3] = diff;
			can_msg_send.data[4] = 1;
     88e:	dd 24       	eor	r13, r13
     890:	d3 94       	inc	r13
			CAN_message_send(&can_msg_send);
			_delay_ms(50);
			score = OLED_game(diff);
			gamestep = 1;
     892:	01 e0       	ldi	r16, 0x01	; 1
     894:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	sei();
	
	while(1){
			joy_pos = JOY_getDirection();
     896:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
     89a:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
     89e:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
     8a2:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
     8a6:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
			slider_pos = JOY_getSliderPosition();
     8aa:	0e 94 da 03 	call	0x7b4	; 0x7b4 <JOY_getSliderPosition>
     8ae:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <slider_pos+0x1>
     8b2:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <slider_pos>
		if (menuactive == 1){
     8b6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <menuactive>
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	59 f4       	brne	.+22     	; 0x8d4 <main+0xe6>
			gamestep = init_menu();
     8be:	0e 94 0a 05 	call	0xa14	; 0xa14 <init_menu>
     8c2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <gamestep+0x1>
     8c6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <gamestep>
			can_msg_send.data[4] = 0;
     8ca:	1f 82       	std	Y+7, r1	; 0x07
			CAN_message_send(&can_msg_send);
     8cc:	8e 2d       	mov	r24, r14
     8ce:	9f 2d       	mov	r25, r15
     8d0:	0e 94 46 02 	call	0x48c	; 0x48c <CAN_message_send>
		}
		if (menuactive == 2){
     8d4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <menuactive>
     8d8:	82 30       	cpi	r24, 0x02	; 2
     8da:	e9 f6       	brne	.-70     	; 0x896 <main+0xa8>
			can_msg_send.data[3] = diff;
     8dc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <diff>
     8e0:	8e 83       	std	Y+6, r24	; 0x06
			can_msg_send.data[4] = 1;
     8e2:	df 82       	std	Y+7, r13	; 0x07
			CAN_message_send(&can_msg_send);
     8e4:	ce 01       	movw	r24, r28
     8e6:	0e 94 46 02 	call	0x48c	; 0x48c <CAN_message_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ea:	8e ed       	ldi	r24, 0xDE	; 222
     8ec:	9f ee       	ldi	r25, 0xEF	; 239
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <main+0x100>
			_delay_ms(50);
			score = OLED_game(diff);
     8f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <diff>
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 ff 13 	call	0x27fe	; 0x27fe <OLED_game>
     8fc:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <score+0x1>
     900:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <score>
			gamestep = 1;
     904:	10 93 09 01 	sts	0x0109, r17	; 0x800109 <gamestep+0x1>
     908:	00 93 08 01 	sts	0x0108, r16	; 0x800108 <gamestep>
     90c:	c4 cf       	rjmp	.-120    	; 0x896 <main+0xa8>

0000090e <MCP_reset>:
	SPI_send(MCP_READ_STATUS);
	uint8_t status = SPI_send(0);
	SPI_set_ss(1);
	
	return status;
}
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <SPI_set_ss>
     916:	80 ec       	ldi	r24, 0xC0	; 192
     918:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
     91c:	85 ef       	ldi	r24, 0xF5	; 245
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	f1 f7       	brne	.-4      	; 0x920 <MCP_reset+0x12>
     924:	00 c0       	rjmp	.+0      	; 0x926 <MCP_reset+0x18>
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <SPI_set_ss>
     92e:	08 95       	ret

00000930 <MCP_read>:
     930:	cf 93       	push	r28
     932:	c8 2f       	mov	r28, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <SPI_set_ss>
     93c:	83 e0       	ldi	r24, 0x03	; 3
     93e:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
     942:	8c 2f       	mov	r24, r28
     944:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
     94e:	c8 2f       	mov	r28, r24
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <SPI_set_ss>
     958:	8c 2f       	mov	r24, r28
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <MCP_init>:
     95e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <SPI_init>
     962:	0e 94 87 04 	call	0x90e	; 0x90e <MCP_reset>
     966:	8e e0       	ldi	r24, 0x0E	; 14
     968:	0e 94 98 04 	call	0x930	; 0x930 <MCP_read>
     96c:	80 7e       	andi	r24, 0xE0	; 224
     96e:	80 38       	cpi	r24, 0x80	; 128
     970:	51 f0       	breq	.+20     	; 0x986 <MCP_init+0x28>
     972:	83 ef       	ldi	r24, 0xF3	; 243
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	9f 93       	push	r25
     978:	8f 93       	push	r24
     97a:	0e 94 11 18 	call	0x3022	; 0x3022 <printf>
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	08 95       	ret
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	08 95       	ret

0000098a <MCP_write>:
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	d8 2f       	mov	r29, r24
     990:	c6 2f       	mov	r28, r22
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <SPI_set_ss>
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
     9a0:	8d 2f       	mov	r24, r29
     9a2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
     9a6:	8c 2f       	mov	r24, r28
     9a8:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <SPI_set_ss>
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <MCP_request_to_send>:
     9ba:	cf 93       	push	r28
     9bc:	c8 2f       	mov	r28, r24
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <SPI_set_ss>
     9c6:	8c 2f       	mov	r24, r28
     9c8:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <SPI_set_ss>
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <MCP_bit_modify>:

//function that lets us change the settings of the MCP
void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	18 2f       	mov	r17, r24
     9e0:	d6 2f       	mov	r29, r22
     9e2:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <SPI_set_ss>
	SPI_send(MCP_BITMOD);
     9ec:	85 e0       	ldi	r24, 0x05	; 5
     9ee:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
	
	SPI_send(address);
     9f2:	81 2f       	mov	r24, r17
     9f4:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
	SPI_send(mask);
     9f8:	8d 2f       	mov	r24, r29
     9fa:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
	SPI_send(data);
     9fe:	8c 2f       	mov	r24, r28
     a00:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <SPI_send>
	
	SPI_set_ss(1);
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <SPI_set_ss>
}
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	08 95       	ret

00000a14 <init_menu>:
extern char* highscorename3[4] = {".", ".", ".", "."};
char buffer[8];
char* name[4];
joy_position joy_pos;

int init_menu(void) {
     a14:	2f 92       	push	r2
     a16:	3f 92       	push	r3
     a18:	4f 92       	push	r4
     a1a:	5f 92       	push	r5
     a1c:	6f 92       	push	r6
     a1e:	7f 92       	push	r7
     a20:	8f 92       	push	r8
     a22:	9f 92       	push	r9
     a24:	af 92       	push	r10
     a26:	bf 92       	push	r11
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	60 97       	sbiw	r28, 0x10	; 16
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
	switch(menynummer){
     a48:	e0 91 15 04 	lds	r30, 0x0415	; 0x800415 <menynummer>
     a4c:	f0 91 16 04 	lds	r31, 0x0416	; 0x800416 <menynummer+0x1>
     a50:	ed 31       	cpi	r30, 0x1D	; 29
     a52:	f1 05       	cpc	r31, r1
     a54:	10 f0       	brcs	.+4      	; 0xa5a <init_menu+0x46>
     a56:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <init_menu+0x18a4>
     a5a:	e8 5c       	subi	r30, 0xC8	; 200
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__tablejump2__>
		case 0 : // Welcome-screen
				OLED_clear();
     a62:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
				float y = 2;
				float z = 1;
				float w = 1;
				float x = 1;
     a66:	0f 2e       	mov	r0, r31
     a68:	c1 2c       	mov	r12, r1
     a6a:	d1 2c       	mov	r13, r1
     a6c:	f0 e8       	ldi	r31, 0x80	; 128
     a6e:	ef 2e       	mov	r14, r31
     a70:	ff e3       	ldi	r31, 0x3F	; 63
     a72:	ff 2e       	mov	r15, r31
     a74:	f0 2d       	mov	r31, r0
	switch(menynummer){
		case 0 : // Welcome-screen
				OLED_clear();
				float y = 2;
				float z = 1;
				float w = 1;
     a76:	26 01       	movw	r4, r12
     a78:	37 01       	movw	r6, r14
int init_menu(void) {
	switch(menynummer){
		case 0 : // Welcome-screen
				OLED_clear();
				float y = 2;
				float z = 1;
     a7a:	46 01       	movw	r8, r12
     a7c:	57 01       	movw	r10, r14

int init_menu(void) {
	switch(menynummer){
		case 0 : // Welcome-screen
				OLED_clear();
				float y = 2;
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e4       	ldi	r27, 0x40	; 64
     a86:	89 83       	std	Y+1, r24	; 0x01
     a88:	9a 83       	std	Y+2, r25	; 0x02
     a8a:	ab 83       	std	Y+3, r26	; 0x03
     a8c:	bc 83       	std	Y+4, r27	; 0x04
					if (y == 2){w = w*-1;}
					if (x == 15){z = z*-1;}
					if (x == 0){z = z*-1;}
					joy_pos = JOY_getDirection();
					_delay_ms(125);
					if (joy_pos.sidedir == 1){
     a8e:	0e e3       	ldi	r16, 0x3E	; 62
     a90:	14 e0       	ldi	r17, 0x04	; 4
						menynummer = 28;
					}
					else if (joy_pos.sidedir == 2){
						menynummer = 28;
     a92:	0f 2e       	mov	r0, r31
     a94:	fc e1       	ldi	r31, 0x1C	; 28
     a96:	2f 2e       	mov	r2, r31
     a98:	31 2c       	mov	r3, r1
     a9a:	f0 2d       	mov	r31, r0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	ba 87       	std	Y+10, r27	; 0x0a
     aa2:	a9 87       	std	Y+9, r26	; 0x09
     aa4:	3e 82       	std	Y+6, r3	; 0x06
     aa6:	2d 82       	std	Y+5, r2	; 0x05
				float y = 2;
				float z = 1;
				float w = 1;
				float x = 1;
				int counter = 0;
				while (menynummer == 0){
     aa8:	f2 c0       	rjmp	.+484    	; 0xc8e <init_menu+0x27a>
					OLED_clear();
     aaa:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
					OLED_pos(7,x-2);
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e4       	ldi	r21, 0x40	; 64
     ab6:	c7 01       	movw	r24, r14
     ab8:	b6 01       	movw	r22, r12
     aba:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__subsf3>
     abe:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__fixunssfsi>
     ac2:	87 e0       	ldi	r24, 0x07	; 7
     ac4:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
					OLED_print("]_`");
     ac8:	85 e1       	ldi	r24, 0x15	; 21
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
					OLED_pos(1,6);
     ad0:	66 e0       	ldi	r22, 0x06	; 6
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
					if (counter < 10){
     ad8:	e9 85       	ldd	r30, Y+9	; 0x09
     ada:	fa 85       	ldd	r31, Y+10	; 0x0a
     adc:	3a 97       	sbiw	r30, 0x0a	; 10
     ade:	2c f4       	brge	.+10     	; 0xaea <init_menu+0xd6>
						OLED_print("00");
     ae0:	89 e1       	ldi	r24, 0x19	; 25
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <init_menu+0xe8>
					}
					else if (counter < 100){
     aea:	29 85       	ldd	r18, Y+9	; 0x09
     aec:	3a 85       	ldd	r19, Y+10	; 0x0a
     aee:	24 36       	cpi	r18, 0x64	; 100
     af0:	31 05       	cpc	r19, r1
     af2:	24 f4       	brge	.+8      	; 0xafc <init_menu+0xe8>
						OLED_print("0");
     af4:	8a e1       	ldi	r24, 0x1A	; 26
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     afc:	4a e0       	ldi	r20, 0x0A	; 10
     afe:	66 e4       	ldi	r22, 0x46	; 70
     b00:	74 e0       	ldi	r23, 0x04	; 4
     b02:	89 85       	ldd	r24, Y+9	; 0x09
     b04:	9a 85       	ldd	r25, Y+10	; 0x0a
     b06:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__itoa_ncheck>
					}
					OLED_print(itoa(counter, buffer, 10));
     b0a:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
					OLED_pos(y,x-1);
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	40 e8       	ldi	r20, 0x80	; 128
     b14:	5f e3       	ldi	r21, 0x3F	; 63
     b16:	c7 01       	movw	r24, r14
     b18:	b6 01       	movw	r22, r12
     b1a:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__subsf3>
     b1e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__fixunssfsi>
     b22:	36 2e       	mov	r3, r22
     b24:	69 81       	ldd	r22, Y+1	; 0x01
     b26:	7a 81       	ldd	r23, Y+2	; 0x02
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__fixunssfsi>
     b30:	86 2f       	mov	r24, r22
     b32:	63 2d       	mov	r22, r3
     b34:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
					OLED_print("~");
     b38:	82 e7       	ldi	r24, 0x72	; 114
     b3a:	93 e0       	ldi	r25, 0x03	; 3
     b3c:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
					OLED_pos(8,1);
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	88 e0       	ldi	r24, 0x08	; 8
     b44:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
					OLED_print("Press any key");
     b48:	8c e1       	ldi	r24, 0x1C	; 28
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
					x = x + z*1;
     b50:	a5 01       	movw	r20, r10
     b52:	94 01       	movw	r18, r8
     b54:	c7 01       	movw	r24, r14
     b56:	b6 01       	movw	r22, r12
     b58:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__addsf3>
     b5c:	6b 01       	movw	r12, r22
     b5e:	7c 01       	movw	r14, r24
					y = y + w*0.5;
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	5f e3       	ldi	r21, 0x3F	; 63
     b68:	c3 01       	movw	r24, r6
     b6a:	b2 01       	movw	r22, r4
     b6c:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__mulsf3>
     b70:	9b 01       	movw	r18, r22
     b72:	ac 01       	movw	r20, r24
     b74:	69 81       	ldd	r22, Y+1	; 0x01
     b76:	7a 81       	ldd	r23, Y+2	; 0x02
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__addsf3>
     b80:	69 83       	std	Y+1, r22	; 0x01
     b82:	7a 83       	std	Y+2, r23	; 0x02
     b84:	8b 83       	std	Y+3, r24	; 0x03
     b86:	9c 83       	std	Y+4, r25	; 0x04
					if (y == 6){w = w*-1; counter = counter + 1;}
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 ec       	ldi	r20, 0xC0	; 192
     b8e:	50 e4       	ldi	r21, 0x40	; 64
     b90:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
     b94:	81 11       	cpse	r24, r1
     b96:	0a c0       	rjmp	.+20     	; 0xbac <init_menu+0x198>
     b98:	77 fa       	bst	r7, 7
     b9a:	70 94       	com	r7
     b9c:	77 f8       	bld	r7, 7
     b9e:	70 94       	com	r7
     ba0:	89 85       	ldd	r24, Y+9	; 0x09
     ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	9a 87       	std	Y+10, r25	; 0x0a
     ba8:	89 87       	std	Y+9, r24	; 0x09
     baa:	10 c0       	rjmp	.+32     	; 0xbcc <init_menu+0x1b8>
					if (y == 2){w = w*-1;}
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e4       	ldi	r21, 0x40	; 64
     bb4:	69 81       	ldd	r22, Y+1	; 0x01
     bb6:	7a 81       	ldd	r23, Y+2	; 0x02
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	9c 81       	ldd	r25, Y+4	; 0x04
     bbc:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
     bc0:	81 11       	cpse	r24, r1
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <init_menu+0x1b8>
     bc4:	77 fa       	bst	r7, 7
     bc6:	70 94       	com	r7
     bc8:	77 f8       	bld	r7, 7
     bca:	70 94       	com	r7
					if (x == 15){z = z*-1;}
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e7       	ldi	r20, 0x70	; 112
     bd2:	51 e4       	ldi	r21, 0x41	; 65
     bd4:	c7 01       	movw	r24, r14
     bd6:	b6 01       	movw	r22, r12
     bd8:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
     bdc:	81 11       	cpse	r24, r1
     bde:	05 c0       	rjmp	.+10     	; 0xbea <init_menu+0x1d6>
     be0:	b7 fa       	bst	r11, 7
     be2:	b0 94       	com	r11
     be4:	b7 f8       	bld	r11, 7
     be6:	b0 94       	com	r11
     be8:	0d c0       	rjmp	.+26     	; 0xc04 <init_menu+0x1f0>
					if (x == 0){z = z*-1;}
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	a9 01       	movw	r20, r18
     bf0:	c7 01       	movw	r24, r14
     bf2:	b6 01       	movw	r22, r12
     bf4:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
     bf8:	81 11       	cpse	r24, r1
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <init_menu+0x1f0>
     bfc:	b7 fa       	bst	r11, 7
     bfe:	b0 94       	com	r11
     c00:	b7 f8       	bld	r11, 7
     c02:	b0 94       	com	r11
					joy_pos = JOY_getDirection();
     c04:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
     c08:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
     c0c:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
     c10:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
     c14:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
     c18:	9c eb       	ldi	r25, 0xBC	; 188
     c1a:	af ed       	ldi	r26, 0xDF	; 223
     c1c:	b1 e0       	ldi	r27, 0x01	; 1
     c1e:	91 50       	subi	r25, 0x01	; 1
     c20:	a0 40       	sbci	r26, 0x00	; 0
     c22:	b0 40       	sbci	r27, 0x00	; 0
     c24:	e1 f7       	brne	.-8      	; 0xc1e <init_menu+0x20a>
     c26:	00 00       	nop
					_delay_ms(125);
					if (joy_pos.sidedir == 1){
     c28:	f8 01       	movw	r30, r16
     c2a:	83 81       	ldd	r24, Z+3	; 0x03
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	39 f4       	brne	.+14     	; 0xc3e <init_menu+0x22a>
						menynummer = 28;
     c30:	2d 81       	ldd	r18, Y+5	; 0x05
     c32:	3e 81       	ldd	r19, Y+6	; 0x06
     c34:	30 93 16 04 	sts	0x0416, r19	; 0x800416 <menynummer+0x1>
     c38:	20 93 15 04 	sts	0x0415, r18	; 0x800415 <menynummer>
     c3c:	28 c0       	rjmp	.+80     	; 0xc8e <init_menu+0x27a>
					}
					else if (joy_pos.sidedir == 2){
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	39 f4       	brne	.+14     	; 0xc50 <init_menu+0x23c>
						menynummer = 28;
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
     c4a:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
     c4e:	1f c0       	rjmp	.+62     	; 0xc8e <init_menu+0x27a>
					}
					else if (joy_pos.dir == 1){
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	39 f4       	brne	.+14     	; 0xc64 <init_menu+0x250>
						menynummer = 1;
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
     c5e:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
     c62:	15 c0       	rjmp	.+42     	; 0xc8e <init_menu+0x27a>
					}
					else if (joy_pos.dir == 2){
     c64:	82 30       	cpi	r24, 0x02	; 2
     c66:	39 f4       	brne	.+14     	; 0xc76 <init_menu+0x262>
						menynummer = 1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
     c70:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
     c74:	0c c0       	rjmp	.+24     	; 0xc8e <init_menu+0x27a>
					}
					else if (joy_button(1) == 0){
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
     c7e:	89 2b       	or	r24, r25
     c80:	31 f4       	brne	.+12     	; 0xc8e <init_menu+0x27a>
						menynummer = 1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
     c8a:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
				float y = 2;
				float z = 1;
				float w = 1;
				float x = 1;
				int counter = 0;
				while (menynummer == 0){
     c8e:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
     c92:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
     c96:	89 2b       	or	r24, r25
     c98:	09 f4       	brne	.+2      	; 0xc9c <init_menu+0x288>
     c9a:	07 cf       	rjmp	.-498    	; 0xaaa <init_menu+0x96>
     c9c:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <init_menu+0x18a4>
						menynummer = 1;
					}
			}
			break;
		case 1 : // Main menu - Start Game
			OLED_clear();
     ca0:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Start game");
     cac:	8a e2       	ldi	r24, 0x2A	; 42
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Difficulty");
     cbc:	87 e3       	ldi	r24, 0x37	; 55
     cbe:	92 e0       	ldi	r25, 0x02	; 2
     cc0:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	85 e0       	ldi	r24, 0x05	; 5
     cc8:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Highscores");
     ccc:	84 e4       	ldi	r24, 0x44	; 68
     cce:	92 e0       	ldi	r25, 0x02	; 2
     cd0:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	87 e0       	ldi	r24, 0x07	; 7
     cd8:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Mini-Pong");
     cdc:	81 e5       	ldi	r24, 0x51	; 81
     cde:	92 e0       	ldi	r25, 0x02	; 2
     ce0:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
     ce4:	b3 e9       	ldi	r27, 0x93	; 147
     ce6:	ef ef       	ldi	r30, 0xFF	; 255
     ce8:	f2 e0       	ldi	r31, 0x02	; 2
     cea:	b1 50       	subi	r27, 0x01	; 1
     cec:	e0 40       	sbci	r30, 0x00	; 0
     cee:	f0 40       	sbci	r31, 0x00	; 0
     cf0:	e1 f7       	brne	.-8      	; 0xcea <init_menu+0x2d6>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <init_menu+0x2e0>
     cf4:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 4;
				}
				else if (joy_pos.dir == 2){
					menynummer = 2;
     cf6:	02 e0       	ldi	r16, 0x02	; 2
     cf8:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
			while(menynummer == 1){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 4;
     cfa:	68 94       	set
     cfc:	ee 24       	eor	r14, r14
     cfe:	e2 f8       	bld	r14, 2
     d00:	f1 2c       	mov	r15, r1
     d02:	42 c0       	rjmp	.+132    	; 0xd88 <init_menu+0x374>
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("  Mini-Pong");
			_delay_ms(200);
			while(menynummer == 1){
				joy_pos = JOY_getDirection();
     d04:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
     d08:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
     d0c:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
     d10:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
     d14:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
     d18:	8e ed       	ldi	r24, 0xDE	; 222
     d1a:	9f ee       	ldi	r25, 0xEF	; 239
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	f1 f7       	brne	.-4      	; 0xd1c <init_menu+0x308>
				_delay_ms(50);
				if (joy_pos.dir == 1){
     d20:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	29 f4       	brne	.+10     	; 0xd32 <init_menu+0x31e>
					menynummer = 4;
     d28:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
     d2c:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
     d30:	2b c0       	rjmp	.+86     	; 0xd88 <init_menu+0x374>
				}
				else if (joy_pos.dir == 2){
     d32:	82 30       	cpi	r24, 0x02	; 2
     d34:	29 f4       	brne	.+10     	; 0xd40 <init_menu+0x32c>
					menynummer = 2;
     d36:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
     d3a:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
     d3e:	24 c0       	rjmp	.+72     	; 0xd88 <init_menu+0x374>
				}
				else if (joy_button(1) == 0){
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
     d48:	89 2b       	or	r24, r25
     d4a:	f1 f4       	brne	.+60     	; 0xd88 <init_menu+0x374>
					menuactive = 2;
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <highscorename3>
     d54:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <menuactive>
					menynummer = 27;
     d58:	8b e1       	ldi	r24, 0x1B	; 27
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
     d60:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
					gamestep = 1;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <gamestep+0x1>
     d6c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <gamestep>
					hp = 3;
     d70:	83 e0       	ldi	r24, 0x03	; 3
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <hp+0x1>
     d78:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <hp>
					score = 0;
     d7c:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <score+0x1>
     d80:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <score>
					break;
     d84:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <init_menu+0x18a4>
			OLED_pos(5, 1);
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("  Mini-Pong");
			_delay_ms(200);
			while(menynummer == 1){
     d88:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
     d8c:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	09 f4       	brne	.+2      	; 0xd96 <init_menu+0x382>
     d94:	b7 cf       	rjmp	.-146    	; 0xd04 <init_menu+0x2f0>
     d96:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <init_menu+0x18a4>
					break;
				}
			}
			break;
		case 2 : // Main menu - Difficulty
			OLED_clear();
     d9a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Start game");
     da6:	8d e5       	ldi	r24, 0x5D	; 93
     da8:	92 e0       	ldi	r25, 0x02	; 2
     daa:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Difficulty");
     db6:	8a e6       	ldi	r24, 0x6A	; 106
     db8:	92 e0       	ldi	r25, 0x02	; 2
     dba:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	85 e0       	ldi	r24, 0x05	; 5
     dc2:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Highscores");
     dc6:	84 e4       	ldi	r24, 0x44	; 68
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	87 e0       	ldi	r24, 0x07	; 7
     dd2:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Mini-Pong");
     dd6:	81 e5       	ldi	r24, 0x51	; 81
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
     dde:	93 e9       	ldi	r25, 0x93	; 147
     de0:	af ef       	ldi	r26, 0xFF	; 255
     de2:	b2 e0       	ldi	r27, 0x02	; 2
     de4:	91 50       	subi	r25, 0x01	; 1
     de6:	a0 40       	sbci	r26, 0x00	; 0
     de8:	b0 40       	sbci	r27, 0x00	; 0
     dea:	e1 f7       	brne	.-8      	; 0xde4 <init_menu+0x3d0>
     dec:	00 c0       	rjmp	.+0      	; 0xdee <init_menu+0x3da>
     dee:	00 00       	nop
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 2){
					menynummer = 9;
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 3){
					menynummer = 13;
     df0:	0f 2e       	mov	r0, r31
     df2:	fd e0       	ldi	r31, 0x0D	; 13
     df4:	af 2e       	mov	r10, r31
     df6:	b1 2c       	mov	r11, r1
     df8:	f0 2d       	mov	r31, r0
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 1){
					menynummer = 5;
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 2){
					menynummer = 9;
     dfa:	0f 2e       	mov	r0, r31
     dfc:	f9 e0       	ldi	r31, 0x09	; 9
     dfe:	cf 2e       	mov	r12, r31
     e00:	d1 2c       	mov	r13, r1
     e02:	f0 2d       	mov	r31, r0
				}
				else if (joy_pos.dir == 1){
					menynummer = 1;
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 1){
					menynummer = 5;
     e04:	0f 2e       	mov	r0, r31
     e06:	f5 e0       	ldi	r31, 0x05	; 5
     e08:	ef 2e       	mov	r14, r31
     e0a:	f1 2c       	mov	r15, r1
     e0c:	f0 2d       	mov	r31, r0
			_delay_ms(200);
			while(menynummer == 2){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 3;
     e0e:	03 e0       	ldi	r16, 0x03	; 3
     e10:	10 e0       	ldi	r17, 0x00	; 0
     e12:	4c c0       	rjmp	.+152    	; 0xeac <init_menu+0x498>
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("  Mini-Pong");
			_delay_ms(200);
			while(menynummer == 2){
				joy_pos = JOY_getDirection();
     e14:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
     e18:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
     e1c:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
     e20:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
     e24:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
     e28:	ee ed       	ldi	r30, 0xDE	; 222
     e2a:	ff ee       	ldi	r31, 0xEF	; 239
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <init_menu+0x418>
				_delay_ms(50);
				if (joy_pos.dir == 2){
     e30:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
     e34:	82 30       	cpi	r24, 0x02	; 2
     e36:	29 f4       	brne	.+10     	; 0xe42 <init_menu+0x42e>
					menynummer = 3;
     e38:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
     e3c:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
     e40:	35 c0       	rjmp	.+106    	; 0xeac <init_menu+0x498>
				}
				else if (joy_pos.dir == 1){
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	39 f4       	brne	.+14     	; 0xe54 <init_menu+0x440>
					menynummer = 1;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
     e4e:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
     e52:	2c c0       	rjmp	.+88     	; 0xeac <init_menu+0x498>
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 1){
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
     e5c:	89 2b       	or	r24, r25
     e5e:	49 f4       	brne	.+18     	; 0xe72 <init_menu+0x45e>
     e60:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <vanskelighetsgrad>
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	29 f4       	brne	.+10     	; 0xe72 <init_menu+0x45e>
					menynummer = 5;
     e68:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
     e6c:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
     e70:	1d c0       	rjmp	.+58     	; 0xeac <init_menu+0x498>
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 2){
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
     e7a:	89 2b       	or	r24, r25
     e7c:	49 f4       	brne	.+18     	; 0xe90 <init_menu+0x47c>
     e7e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <vanskelighetsgrad>
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	29 f4       	brne	.+10     	; 0xe90 <init_menu+0x47c>
					menynummer = 9;
     e86:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <menynummer+0x1>
     e8a:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <menynummer>
     e8e:	0e c0       	rjmp	.+28     	; 0xeac <init_menu+0x498>
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 3){
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
     e98:	89 2b       	or	r24, r25
     e9a:	41 f4       	brne	.+16     	; 0xeac <init_menu+0x498>
     e9c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <vanskelighetsgrad>
     ea0:	83 30       	cpi	r24, 0x03	; 3
     ea2:	21 f4       	brne	.+8      	; 0xeac <init_menu+0x498>
					menynummer = 13;
     ea4:	b0 92 16 04 	sts	0x0416, r11	; 0x800416 <menynummer+0x1>
     ea8:	a0 92 15 04 	sts	0x0415, r10	; 0x800415 <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("  Mini-Pong");
			_delay_ms(200);
			while(menynummer == 2){
     eac:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
     eb0:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
     eb4:	02 97       	sbiw	r24, 0x02	; 2
     eb6:	09 f4       	brne	.+2      	; 0xeba <init_menu+0x4a6>
     eb8:	ad cf       	rjmp	.-166    	; 0xe14 <init_menu+0x400>
     eba:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <init_menu+0x18a4>
					menynummer = 13;
				}
			}
			break;
		case 3 : // Main menu - Highscores
			OLED_clear();
     ebe:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Start game");
     eca:	8d e5       	ldi	r24, 0x5D	; 93
     ecc:	92 e0       	ldi	r25, 0x02	; 2
     ece:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Difficulty");
     eda:	87 e3       	ldi	r24, 0x37	; 55
     edc:	92 e0       	ldi	r25, 0x02	; 2
     ede:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	85 e0       	ldi	r24, 0x05	; 5
     ee6:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Highscores");
     eea:	87 e7       	ldi	r24, 0x77	; 119
     eec:	92 e0       	ldi	r25, 0x02	; 2
     eee:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	87 e0       	ldi	r24, 0x07	; 7
     ef6:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Mini-Pong");
     efa:	81 e5       	ldi	r24, 0x51	; 81
     efc:	92 e0       	ldi	r25, 0x02	; 2
     efe:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
     f02:	f3 e9       	ldi	r31, 0x93	; 147
     f04:	2f ef       	ldi	r18, 0xFF	; 255
     f06:	32 e0       	ldi	r19, 0x02	; 2
     f08:	f1 50       	subi	r31, 0x01	; 1
     f0a:	20 40       	sbci	r18, 0x00	; 0
     f0c:	30 40       	sbci	r19, 0x00	; 0
     f0e:	e1 f7       	brne	.-8      	; 0xf08 <init_menu+0x4f4>
     f10:	00 c0       	rjmp	.+0      	; 0xf12 <init_menu+0x4fe>
     f12:	00 00       	nop
				}
				else if (joy_pos.dir == 1){
					menynummer = 2;
				}
				else if (joy_button(1) == 0){
					menynummer = 23;
     f14:	0f 2e       	mov	r0, r31
     f16:	f7 e1       	ldi	r31, 0x17	; 23
     f18:	cf 2e       	mov	r12, r31
     f1a:	d1 2c       	mov	r13, r1
     f1c:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 4;
				}
				else if (joy_pos.dir == 1){
					menynummer = 2;
     f1e:	02 e0       	ldi	r16, 0x02	; 2
     f20:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
			while(menynummer == 3){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 4;
     f22:	68 94       	set
     f24:	ee 24       	eor	r14, r14
     f26:	e2 f8       	bld	r14, 2
     f28:	f1 2c       	mov	r15, r1
     f2a:	28 c0       	rjmp	.+80     	; 0xf7c <init_menu+0x568>
			OLED_print("* Highscores");
			OLED_pos(7, 1);
			OLED_print("  Mini-Pong");
			_delay_ms(200);
			while(menynummer == 3){
				joy_pos = JOY_getDirection();
     f2c:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
     f30:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
     f34:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
     f38:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
     f3c:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
     f40:	8e ed       	ldi	r24, 0xDE	; 222
     f42:	9f ee       	ldi	r25, 0xEF	; 239
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <init_menu+0x530>
				_delay_ms(50);
				if (joy_pos.dir == 2){
     f48:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	29 f4       	brne	.+10     	; 0xf5a <init_menu+0x546>
					menynummer = 4;
     f50:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
     f54:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
     f58:	11 c0       	rjmp	.+34     	; 0xf7c <init_menu+0x568>
				}
				else if (joy_pos.dir == 1){
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	29 f4       	brne	.+10     	; 0xf68 <init_menu+0x554>
					menynummer = 2;
     f5e:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
     f62:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
     f66:	0a c0       	rjmp	.+20     	; 0xf7c <init_menu+0x568>
				}
				else if (joy_button(1) == 0){
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
     f70:	89 2b       	or	r24, r25
     f72:	21 f4       	brne	.+8      	; 0xf7c <init_menu+0x568>
					menynummer = 23;
     f74:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <menynummer+0x1>
     f78:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <menynummer>
			OLED_pos(5, 1);
			OLED_print("* Highscores");
			OLED_pos(7, 1);
			OLED_print("  Mini-Pong");
			_delay_ms(200);
			while(menynummer == 3){
     f7c:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
     f80:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
     f84:	03 97       	sbiw	r24, 0x03	; 3
     f86:	91 f2       	breq	.-92     	; 0xf2c <init_menu+0x518>
     f88:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <init_menu+0x18a4>
					menynummer = 23;
				}
			}
			break;
		case 4 : // Main menu - Mini-Pong
			OLED_clear();
     f8c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Start game");
     f98:	8d e5       	ldi	r24, 0x5D	; 93
     f9a:	92 e0       	ldi	r25, 0x02	; 2
     f9c:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Difficulty");
     fa8:	87 e3       	ldi	r24, 0x37	; 55
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	85 e0       	ldi	r24, 0x05	; 5
     fb4:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Highscores");
     fb8:	84 e4       	ldi	r24, 0x44	; 68
     fba:	92 e0       	ldi	r25, 0x02	; 2
     fbc:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
     fc0:	61 e0       	ldi	r22, 0x01	; 1
     fc2:	87 e0       	ldi	r24, 0x07	; 7
     fc4:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Mini-Pong");
     fc8:	84 e8       	ldi	r24, 0x84	; 132
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
     fd0:	93 e9       	ldi	r25, 0x93	; 147
     fd2:	af ef       	ldi	r26, 0xFF	; 255
     fd4:	b2 e0       	ldi	r27, 0x02	; 2
     fd6:	91 50       	subi	r25, 0x01	; 1
     fd8:	a0 40       	sbci	r26, 0x00	; 0
     fda:	b0 40       	sbci	r27, 0x00	; 0
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <init_menu+0x5c2>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <init_menu+0x5cc>
     fe0:	00 00       	nop
				}
				else if (joy_pos.dir == 1){
					menynummer = 3;
				}
				else if (joy_button(1) == 0){
					menynummer = 28;
     fe2:	0f 2e       	mov	r0, r31
     fe4:	fc e1       	ldi	r31, 0x1C	; 28
     fe6:	ef 2e       	mov	r14, r31
     fe8:	f1 2c       	mov	r15, r1
     fea:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 1;
				}
				else if (joy_pos.dir == 1){
					menynummer = 3;
     fec:	03 e0       	ldi	r16, 0x03	; 3
     fee:	10 e0       	ldi	r17, 0x00	; 0
     ff0:	33 c0       	rjmp	.+102    	; 0x1058 <init_menu+0x644>
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("* Mini-Pong");
			_delay_ms(200);
			while(menynummer == 4){
				joy_pos = JOY_getDirection();
     ff2:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
     ff6:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
     ffa:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
     ffe:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    1002:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    1006:	ee ed       	ldi	r30, 0xDE	; 222
    1008:	ff ee       	ldi	r31, 0xEF	; 239
    100a:	31 97       	sbiw	r30, 0x01	; 1
    100c:	f1 f7       	brne	.-4      	; 0x100a <init_menu+0x5f6>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    100e:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    1012:	82 30       	cpi	r24, 0x02	; 2
    1014:	39 f4       	brne	.+14     	; 0x1024 <init_menu+0x610>
					menynummer = 1;
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    101e:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
    1022:	1a c0       	rjmp	.+52     	; 0x1058 <init_menu+0x644>
				}
				else if (joy_pos.dir == 1){
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	29 f4       	brne	.+10     	; 0x1032 <init_menu+0x61e>
					menynummer = 3;
    1028:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    102c:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    1030:	13 c0       	rjmp	.+38     	; 0x1058 <init_menu+0x644>
				}
				else if (joy_button(1) == 0){
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    103a:	89 2b       	or	r24, r25
    103c:	69 f4       	brne	.+26     	; 0x1058 <init_menu+0x644>
					menynummer = 28;
    103e:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    1042:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
    1046:	fe ea       	ldi	r31, 0xAE	; 174
    1048:	2f e3       	ldi	r18, 0x3F	; 63
    104a:	32 e0       	ldi	r19, 0x02	; 2
    104c:	f1 50       	subi	r31, 0x01	; 1
    104e:	20 40       	sbci	r18, 0x00	; 0
    1050:	30 40       	sbci	r19, 0x00	; 0
    1052:	e1 f7       	brne	.-8      	; 0x104c <init_menu+0x638>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <init_menu+0x642>
    1056:	00 00       	nop
			OLED_pos(5, 1);
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("* Mini-Pong");
			_delay_ms(200);
			while(menynummer == 4){
    1058:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    105c:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    1060:	04 97       	sbiw	r24, 0x04	; 4
    1062:	39 f2       	breq	.-114    	; 0xff2 <init_menu+0x5de>
    1064:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <init_menu+0x18a4>
					_delay_ms(150);
				}
			}
			break;
		case 5 : // Submenu difficulty - EASY-EASY
			OLED_clear();
    1068:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("*>Easy<");
    1074:	80 e9       	ldi	r24, 0x90	; 144
    1076:	92 e0       	ldi	r25, 0x02	; 2
    1078:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    107c:	61 e0       	ldi	r22, 0x01	; 1
    107e:	83 e0       	ldi	r24, 0x03	; 3
    1080:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Medium");
    1084:	88 e9       	ldi	r24, 0x98	; 152
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	85 e0       	ldi	r24, 0x05	; 5
    1090:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Hard");
    1094:	81 ea       	ldi	r24, 0xA1	; 161
    1096:	92 e0       	ldi	r25, 0x02	; 2
    1098:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    109c:	61 e0       	ldi	r22, 0x01	; 1
    109e:	87 e0       	ldi	r24, 0x07	; 7
    10a0:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Back");
    10a4:	88 ea       	ldi	r24, 0xA8	; 168
    10a6:	92 e0       	ldi	r25, 0x02	; 2
    10a8:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    10ac:	83 e9       	ldi	r24, 0x93	; 147
    10ae:	9f ef       	ldi	r25, 0xFF	; 255
    10b0:	a2 e0       	ldi	r26, 0x02	; 2
    10b2:	81 50       	subi	r24, 0x01	; 1
    10b4:	90 40       	sbci	r25, 0x00	; 0
    10b6:	a0 40       	sbci	r26, 0x00	; 0
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <init_menu+0x69e>
    10ba:	00 c0       	rjmp	.+0      	; 0x10bc <init_menu+0x6a8>
    10bc:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 6;
				}
				else if (joy_pos.dir == 1){
					menynummer = 8;
    10be:	68 94       	set
    10c0:	ee 24       	eor	r14, r14
    10c2:	e3 f8       	bld	r14, 3
    10c4:	f1 2c       	mov	r15, r1
			_delay_ms(200);
			while(menynummer == 5){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 6;
    10c6:	06 e0       	ldi	r16, 0x06	; 6
    10c8:	10 e0       	ldi	r17, 0x00	; 0
    10ca:	1d c0       	rjmp	.+58     	; 0x1106 <init_menu+0x6f2>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 5){
				joy_pos = JOY_getDirection();
    10cc:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    10d0:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    10d4:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    10d8:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    10dc:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    10e0:	ee ed       	ldi	r30, 0xDE	; 222
    10e2:	ff ee       	ldi	r31, 0xEF	; 239
    10e4:	31 97       	sbiw	r30, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <init_menu+0x6d0>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    10e8:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    10ec:	82 30       	cpi	r24, 0x02	; 2
    10ee:	29 f4       	brne	.+10     	; 0x10fa <init_menu+0x6e6>
					menynummer = 6;
    10f0:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    10f4:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    10f8:	06 c0       	rjmp	.+12     	; 0x1106 <init_menu+0x6f2>
				}
				else if (joy_pos.dir == 1){
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	21 f4       	brne	.+8      	; 0x1106 <init_menu+0x6f2>
					menynummer = 8;
    10fe:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    1102:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 5){
    1106:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    110a:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    110e:	05 97       	sbiw	r24, 0x05	; 5
    1110:	e9 f2       	breq	.-70     	; 0x10cc <init_menu+0x6b8>
    1112:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <init_menu+0x18a4>
					menynummer = 8;
				}
			}
			break;
		case 6 : // Submeny difficulty - EASY-MEDIUM
			OLED_clear();
    1116:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    111a:	61 e0       	ldi	r22, 0x01	; 1
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(" >Easy<");
    1122:	8f ea       	ldi	r24, 0xAF	; 175
    1124:	92 e0       	ldi	r25, 0x02	; 2
    1126:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Medium");
    1132:	87 eb       	ldi	r24, 0xB7	; 183
    1134:	92 e0       	ldi	r25, 0x02	; 2
    1136:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	85 e0       	ldi	r24, 0x05	; 5
    113e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Hard");
    1142:	81 ea       	ldi	r24, 0xA1	; 161
    1144:	92 e0       	ldi	r25, 0x02	; 2
    1146:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	87 e0       	ldi	r24, 0x07	; 7
    114e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Back");
    1152:	88 ea       	ldi	r24, 0xA8	; 168
    1154:	92 e0       	ldi	r25, 0x02	; 2
    1156:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    115a:	f3 e9       	ldi	r31, 0x93	; 147
    115c:	2f ef       	ldi	r18, 0xFF	; 255
    115e:	32 e0       	ldi	r19, 0x02	; 2
    1160:	f1 50       	subi	r31, 0x01	; 1
    1162:	20 40       	sbci	r18, 0x00	; 0
    1164:	30 40       	sbci	r19, 0x00	; 0
    1166:	e1 f7       	brne	.-8      	; 0x1160 <init_menu+0x74c>
    1168:	00 c0       	rjmp	.+0      	; 0x116a <init_menu+0x756>
    116a:	00 00       	nop
				}
				else if (joy_pos.dir == 1){
					menynummer = 5;
				}
				else if (joy_button(1) == 0){
					vanskelighetsgrad = 2;
    116c:	68 94       	set
    116e:	bb 24       	eor	r11, r11
    1170:	b1 f8       	bld	r11, 1
					menynummer = 10;
    1172:	0f 2e       	mov	r0, r31
    1174:	fa e0       	ldi	r31, 0x0A	; 10
    1176:	cf 2e       	mov	r12, r31
    1178:	d1 2c       	mov	r13, r1
    117a:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 7;
				}
				else if (joy_pos.dir == 1){
					menynummer = 5;
    117c:	05 e0       	ldi	r16, 0x05	; 5
    117e:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
			while(menynummer == 6){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 7;
    1180:	0f 2e       	mov	r0, r31
    1182:	f7 e0       	ldi	r31, 0x07	; 7
    1184:	ef 2e       	mov	r14, r31
    1186:	f1 2c       	mov	r15, r1
    1188:	f0 2d       	mov	r31, r0
    118a:	2a c0       	rjmp	.+84     	; 0x11e0 <init_menu+0x7cc>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 6){
				joy_pos = JOY_getDirection();
    118c:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    1190:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    1194:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    1198:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    119c:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    11a0:	8e ed       	ldi	r24, 0xDE	; 222
    11a2:	9f ee       	ldi	r25, 0xEF	; 239
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <init_menu+0x790>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    11a8:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	29 f4       	brne	.+10     	; 0x11ba <init_menu+0x7a6>
					menynummer = 7;
    11b0:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    11b4:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
    11b8:	13 c0       	rjmp	.+38     	; 0x11e0 <init_menu+0x7cc>
				}
				else if (joy_pos.dir == 1){
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	29 f4       	brne	.+10     	; 0x11c8 <init_menu+0x7b4>
					menynummer = 5;
    11be:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    11c2:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    11c6:	0c c0       	rjmp	.+24     	; 0x11e0 <init_menu+0x7cc>
				}
				else if (joy_button(1) == 0){
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    11d0:	89 2b       	or	r24, r25
    11d2:	31 f4       	brne	.+12     	; 0x11e0 <init_menu+0x7cc>
					vanskelighetsgrad = 2;
    11d4:	b0 92 24 01 	sts	0x0124, r11	; 0x800124 <vanskelighetsgrad>
					menynummer = 10;
    11d8:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <menynummer+0x1>
    11dc:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 6){
    11e0:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    11e4:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    11e8:	06 97       	sbiw	r24, 0x06	; 6
    11ea:	81 f2       	breq	.-96     	; 0x118c <init_menu+0x778>
    11ec:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <init_menu+0x18a4>
					menynummer = 10;
				}
			}
			break;
		case 7 : // Submeny difficulty - EASY-HARD
			OLED_clear();
    11f0:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    11f4:	61 e0       	ldi	r22, 0x01	; 1
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(" >Easy<");
    11fc:	8f ea       	ldi	r24, 0xAF	; 175
    11fe:	92 e0       	ldi	r25, 0x02	; 2
    1200:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Medium");
    120c:	88 e9       	ldi	r24, 0x98	; 152
    120e:	92 e0       	ldi	r25, 0x02	; 2
    1210:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	85 e0       	ldi	r24, 0x05	; 5
    1218:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Hard");
    121c:	80 ec       	ldi	r24, 0xC0	; 192
    121e:	92 e0       	ldi	r25, 0x02	; 2
    1220:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	87 e0       	ldi	r24, 0x07	; 7
    1228:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Back");
    122c:	88 ea       	ldi	r24, 0xA8	; 168
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    1234:	93 e9       	ldi	r25, 0x93	; 147
    1236:	af ef       	ldi	r26, 0xFF	; 255
    1238:	b2 e0       	ldi	r27, 0x02	; 2
    123a:	91 50       	subi	r25, 0x01	; 1
    123c:	a0 40       	sbci	r26, 0x00	; 0
    123e:	b0 40       	sbci	r27, 0x00	; 0
    1240:	e1 f7       	brne	.-8      	; 0x123a <init_menu+0x826>
    1242:	00 c0       	rjmp	.+0      	; 0x1244 <init_menu+0x830>
    1244:	00 00       	nop
				}
				else if (joy_pos.dir == 1){
					menynummer = 6;
				}
				else if (joy_button(1) == 0){
					vanskelighetsgrad = 3;
    1246:	0f 2e       	mov	r0, r31
    1248:	f3 e0       	ldi	r31, 0x03	; 3
    124a:	bf 2e       	mov	r11, r31
    124c:	f0 2d       	mov	r31, r0
					menynummer = 15;
    124e:	0f 2e       	mov	r0, r31
    1250:	ff e0       	ldi	r31, 0x0F	; 15
    1252:	cf 2e       	mov	r12, r31
    1254:	d1 2c       	mov	r13, r1
    1256:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 8;
				}
				else if (joy_pos.dir == 1){
					menynummer = 6;
    1258:	06 e0       	ldi	r16, 0x06	; 6
    125a:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
			while(menynummer == 7){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 8;
    125c:	68 94       	set
    125e:	ee 24       	eor	r14, r14
    1260:	e3 f8       	bld	r14, 3
    1262:	f1 2c       	mov	r15, r1
    1264:	2a c0       	rjmp	.+84     	; 0x12ba <init_menu+0x8a6>
			OLED_print("* Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 7){
				joy_pos = JOY_getDirection();
    1266:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    126a:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    126e:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    1272:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    1276:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    127a:	ee ed       	ldi	r30, 0xDE	; 222
    127c:	ff ee       	ldi	r31, 0xEF	; 239
    127e:	31 97       	sbiw	r30, 0x01	; 1
    1280:	f1 f7       	brne	.-4      	; 0x127e <init_menu+0x86a>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    1282:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    1286:	82 30       	cpi	r24, 0x02	; 2
    1288:	29 f4       	brne	.+10     	; 0x1294 <init_menu+0x880>
					menynummer = 8;
    128a:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    128e:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
    1292:	13 c0       	rjmp	.+38     	; 0x12ba <init_menu+0x8a6>
				}
				else if (joy_pos.dir == 1){
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	29 f4       	brne	.+10     	; 0x12a2 <init_menu+0x88e>
					menynummer = 6;
    1298:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    129c:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    12a0:	0c c0       	rjmp	.+24     	; 0x12ba <init_menu+0x8a6>
				}
				else if (joy_button(1) == 0){
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    12aa:	89 2b       	or	r24, r25
    12ac:	31 f4       	brne	.+12     	; 0x12ba <init_menu+0x8a6>
					vanskelighetsgrad = 3;
    12ae:	b0 92 24 01 	sts	0x0124, r11	; 0x800124 <vanskelighetsgrad>
					menynummer = 15;
    12b2:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <menynummer+0x1>
    12b6:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <menynummer>
			OLED_pos(5, 1);
			OLED_print("* Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 7){
    12ba:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    12be:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    12c2:	07 97       	sbiw	r24, 0x07	; 7
    12c4:	81 f2       	breq	.-96     	; 0x1266 <init_menu+0x852>
    12c6:	f8 c7       	rjmp	.+4080   	; 0x22b8 <init_menu+0x18a4>
					menynummer = 15;
				}
			}
			break;
		case 8 : // Submeny difficulty - EASY-RETURN
			OLED_clear();
    12c8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    12cc:	61 e0       	ldi	r22, 0x01	; 1
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(" >Easy<");
    12d4:	8f ea       	ldi	r24, 0xAF	; 175
    12d6:	92 e0       	ldi	r25, 0x02	; 2
    12d8:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    12dc:	61 e0       	ldi	r22, 0x01	; 1
    12de:	83 e0       	ldi	r24, 0x03	; 3
    12e0:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Medium");
    12e4:	88 e9       	ldi	r24, 0x98	; 152
    12e6:	92 e0       	ldi	r25, 0x02	; 2
    12e8:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	85 e0       	ldi	r24, 0x05	; 5
    12f0:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Hard");
    12f4:	81 ea       	ldi	r24, 0xA1	; 161
    12f6:	92 e0       	ldi	r25, 0x02	; 2
    12f8:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	87 e0       	ldi	r24, 0x07	; 7
    1300:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Back");
    1304:	87 ec       	ldi	r24, 0xC7	; 199
    1306:	92 e0       	ldi	r25, 0x02	; 2
    1308:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    130c:	f3 e9       	ldi	r31, 0x93	; 147
    130e:	2f ef       	ldi	r18, 0xFF	; 255
    1310:	32 e0       	ldi	r19, 0x02	; 2
    1312:	f1 50       	subi	r31, 0x01	; 1
    1314:	20 40       	sbci	r18, 0x00	; 0
    1316:	30 40       	sbci	r19, 0x00	; 0
    1318:	e1 f7       	brne	.-8      	; 0x1312 <init_menu+0x8fe>
    131a:	00 c0       	rjmp	.+0      	; 0x131c <init_menu+0x908>
    131c:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 5;
				}
				else if (joy_pos.dir == 1){
					menynummer = 7;
    131e:	07 e0       	ldi	r16, 0x07	; 7
    1320:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
			while(menynummer == 8){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 5;
    1322:	0f 2e       	mov	r0, r31
    1324:	f5 e0       	ldi	r31, 0x05	; 5
    1326:	ef 2e       	mov	r14, r31
    1328:	f1 2c       	mov	r15, r1
    132a:	f0 2d       	mov	r31, r0
    132c:	2a c0       	rjmp	.+84     	; 0x1382 <init_menu+0x96e>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 8){
				joy_pos = JOY_getDirection();
    132e:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    1332:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    1336:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    133a:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    133e:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    1342:	8e ed       	ldi	r24, 0xDE	; 222
    1344:	9f ee       	ldi	r25, 0xEF	; 239
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <init_menu+0x932>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    134a:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	29 f4       	brne	.+10     	; 0x135c <init_menu+0x948>
					menynummer = 5;
    1352:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    1356:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
    135a:	13 c0       	rjmp	.+38     	; 0x1382 <init_menu+0x96e>
				}
				else if (joy_pos.dir == 1){
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	29 f4       	brne	.+10     	; 0x136a <init_menu+0x956>
					menynummer = 7;
    1360:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    1364:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    1368:	0c c0       	rjmp	.+24     	; 0x1382 <init_menu+0x96e>
				}
				else if (joy_button(1) == 0){
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    1372:	89 2b       	or	r24, r25
    1374:	31 f4       	brne	.+12     	; 0x1382 <init_menu+0x96e>
					menynummer = 1;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    137e:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 8){
    1382:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    1386:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    138a:	08 97       	sbiw	r24, 0x08	; 8
    138c:	81 f2       	breq	.-96     	; 0x132e <init_menu+0x91a>
    138e:	94 c7       	rjmp	.+3880   	; 0x22b8 <init_menu+0x18a4>
					menynummer = 1;
				}
			}
			break;
		case 9 : // Submeny difficulty - MEDIUM-EASY
			OLED_clear();
    1390:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Easy");
    139c:	8e ec       	ldi	r24, 0xCE	; 206
    139e:	92 e0       	ldi	r25, 0x02	; 2
    13a0:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    13a4:	61 e0       	ldi	r22, 0x01	; 1
    13a6:	83 e0       	ldi	r24, 0x03	; 3
    13a8:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(" >Medium<");
    13ac:	85 ed       	ldi	r24, 0xD5	; 213
    13ae:	92 e0       	ldi	r25, 0x02	; 2
    13b0:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	85 e0       	ldi	r24, 0x05	; 5
    13b8:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Hard");
    13bc:	81 ea       	ldi	r24, 0xA1	; 161
    13be:	92 e0       	ldi	r25, 0x02	; 2
    13c0:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	87 e0       	ldi	r24, 0x07	; 7
    13c8:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Back");
    13cc:	88 ea       	ldi	r24, 0xA8	; 168
    13ce:	92 e0       	ldi	r25, 0x02	; 2
    13d0:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    13d4:	93 e9       	ldi	r25, 0x93	; 147
    13d6:	af ef       	ldi	r26, 0xFF	; 255
    13d8:	b2 e0       	ldi	r27, 0x02	; 2
    13da:	91 50       	subi	r25, 0x01	; 1
    13dc:	a0 40       	sbci	r26, 0x00	; 0
    13de:	b0 40       	sbci	r27, 0x00	; 0
    13e0:	e1 f7       	brne	.-8      	; 0x13da <init_menu+0x9c6>
    13e2:	00 c0       	rjmp	.+0      	; 0x13e4 <init_menu+0x9d0>
    13e4:	00 00       	nop
				}
				else if (joy_pos.dir == 1){
					menynummer = 12;
				}
				else if (joy_button(1) == 0){
					menynummer = 5;
    13e6:	0f 2e       	mov	r0, r31
    13e8:	f5 e0       	ldi	r31, 0x05	; 5
    13ea:	cf 2e       	mov	r12, r31
    13ec:	d1 2c       	mov	r13, r1
    13ee:	f0 2d       	mov	r31, r0
					vanskelighetsgrad = 1;
    13f0:	bb 24       	eor	r11, r11
    13f2:	b3 94       	inc	r11
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 10;
				}
				else if (joy_pos.dir == 1){
					menynummer = 12;
    13f4:	0c e0       	ldi	r16, 0x0C	; 12
    13f6:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
			while(menynummer == 9){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 10;
    13f8:	0f 2e       	mov	r0, r31
    13fa:	fa e0       	ldi	r31, 0x0A	; 10
    13fc:	ef 2e       	mov	r14, r31
    13fe:	f1 2c       	mov	r15, r1
    1400:	f0 2d       	mov	r31, r0
    1402:	2a c0       	rjmp	.+84     	; 0x1458 <init_menu+0xa44>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 9){
				joy_pos = JOY_getDirection();
    1404:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    1408:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    140c:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    1410:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    1414:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    1418:	ee ed       	ldi	r30, 0xDE	; 222
    141a:	ff ee       	ldi	r31, 0xEF	; 239
    141c:	31 97       	sbiw	r30, 0x01	; 1
    141e:	f1 f7       	brne	.-4      	; 0x141c <init_menu+0xa08>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    1420:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	29 f4       	brne	.+10     	; 0x1432 <init_menu+0xa1e>
					menynummer = 10;
    1428:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    142c:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
    1430:	13 c0       	rjmp	.+38     	; 0x1458 <init_menu+0xa44>
				}
				else if (joy_pos.dir == 1){
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	29 f4       	brne	.+10     	; 0x1440 <init_menu+0xa2c>
					menynummer = 12;
    1436:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    143a:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    143e:	0c c0       	rjmp	.+24     	; 0x1458 <init_menu+0xa44>
				}
				else if (joy_button(1) == 0){
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    1448:	89 2b       	or	r24, r25
    144a:	31 f4       	brne	.+12     	; 0x1458 <init_menu+0xa44>
					menynummer = 5;
    144c:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <menynummer+0x1>
    1450:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <menynummer>
					vanskelighetsgrad = 1;
    1454:	b0 92 24 01 	sts	0x0124, r11	; 0x800124 <vanskelighetsgrad>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 9){
    1458:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    145c:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    1460:	09 97       	sbiw	r24, 0x09	; 9
    1462:	81 f2       	breq	.-96     	; 0x1404 <init_menu+0x9f0>
    1464:	29 c7       	rjmp	.+3666   	; 0x22b8 <init_menu+0x18a4>
					vanskelighetsgrad = 1;
				}
			}
			break;
		case 10 : // Submeny difficulty - MEDIUM-MEDIUM
			OLED_clear();
    1466:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    146a:	61 e0       	ldi	r22, 0x01	; 1
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Easy");
    1472:	8f ed       	ldi	r24, 0xDF	; 223
    1474:	92 e0       	ldi	r25, 0x02	; 2
    1476:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    147a:	61 e0       	ldi	r22, 0x01	; 1
    147c:	83 e0       	ldi	r24, 0x03	; 3
    147e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("*>Medium<");
    1482:	86 ee       	ldi	r24, 0xE6	; 230
    1484:	92 e0       	ldi	r25, 0x02	; 2
    1486:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	85 e0       	ldi	r24, 0x05	; 5
    148e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Hard");
    1492:	81 ea       	ldi	r24, 0xA1	; 161
    1494:	92 e0       	ldi	r25, 0x02	; 2
    1496:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    149a:	61 e0       	ldi	r22, 0x01	; 1
    149c:	87 e0       	ldi	r24, 0x07	; 7
    149e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Back");
    14a2:	88 ea       	ldi	r24, 0xA8	; 168
    14a4:	92 e0       	ldi	r25, 0x02	; 2
    14a6:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    14aa:	f3 e9       	ldi	r31, 0x93	; 147
    14ac:	2f ef       	ldi	r18, 0xFF	; 255
    14ae:	32 e0       	ldi	r19, 0x02	; 2
    14b0:	f1 50       	subi	r31, 0x01	; 1
    14b2:	20 40       	sbci	r18, 0x00	; 0
    14b4:	30 40       	sbci	r19, 0x00	; 0
    14b6:	e1 f7       	brne	.-8      	; 0x14b0 <init_menu+0xa9c>
    14b8:	00 c0       	rjmp	.+0      	; 0x14ba <init_menu+0xaa6>
    14ba:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 11;
				}
				else if (joy_pos.dir == 1){
					menynummer = 9;
    14bc:	0f 2e       	mov	r0, r31
    14be:	f9 e0       	ldi	r31, 0x09	; 9
    14c0:	ef 2e       	mov	r14, r31
    14c2:	f1 2c       	mov	r15, r1
    14c4:	f0 2d       	mov	r31, r0
			_delay_ms(200);
			while(menynummer == 10){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 11;
    14c6:	0b e0       	ldi	r16, 0x0B	; 11
    14c8:	10 e0       	ldi	r17, 0x00	; 0
    14ca:	1d c0       	rjmp	.+58     	; 0x1506 <init_menu+0xaf2>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 10){
				joy_pos = JOY_getDirection();
    14cc:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    14d0:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    14d4:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    14d8:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    14dc:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    14e0:	8e ed       	ldi	r24, 0xDE	; 222
    14e2:	9f ee       	ldi	r25, 0xEF	; 239
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <init_menu+0xad0>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    14e8:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	29 f4       	brne	.+10     	; 0x14fa <init_menu+0xae6>
					menynummer = 11;
    14f0:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    14f4:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    14f8:	06 c0       	rjmp	.+12     	; 0x1506 <init_menu+0xaf2>
				}
				else if (joy_pos.dir == 1){
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	21 f4       	brne	.+8      	; 0x1506 <init_menu+0xaf2>
					menynummer = 9;
    14fe:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    1502:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 10){
    1506:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    150a:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    150e:	0a 97       	sbiw	r24, 0x0a	; 10
    1510:	e9 f2       	breq	.-70     	; 0x14cc <init_menu+0xab8>
    1512:	d2 c6       	rjmp	.+3492   	; 0x22b8 <init_menu+0x18a4>
					menynummer = 9;
				}
			}
			break;
		case 11 : // Submeny difficulty - MEDIUM-HARD
			OLED_clear();
    1514:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Easy");
    1520:	8f ed       	ldi	r24, 0xDF	; 223
    1522:	92 e0       	ldi	r25, 0x02	; 2
    1524:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    1528:	61 e0       	ldi	r22, 0x01	; 1
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(" >Medium<");
    1530:	85 ed       	ldi	r24, 0xD5	; 213
    1532:	92 e0       	ldi	r25, 0x02	; 2
    1534:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    1538:	61 e0       	ldi	r22, 0x01	; 1
    153a:	85 e0       	ldi	r24, 0x05	; 5
    153c:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Hard");
    1540:	80 ec       	ldi	r24, 0xC0	; 192
    1542:	92 e0       	ldi	r25, 0x02	; 2
    1544:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    1548:	61 e0       	ldi	r22, 0x01	; 1
    154a:	87 e0       	ldi	r24, 0x07	; 7
    154c:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Back");
    1550:	88 ea       	ldi	r24, 0xA8	; 168
    1552:	92 e0       	ldi	r25, 0x02	; 2
    1554:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    1558:	93 e9       	ldi	r25, 0x93	; 147
    155a:	af ef       	ldi	r26, 0xFF	; 255
    155c:	b2 e0       	ldi	r27, 0x02	; 2
    155e:	91 50       	subi	r25, 0x01	; 1
    1560:	a0 40       	sbci	r26, 0x00	; 0
    1562:	b0 40       	sbci	r27, 0x00	; 0
    1564:	e1 f7       	brne	.-8      	; 0x155e <init_menu+0xb4a>
    1566:	00 c0       	rjmp	.+0      	; 0x1568 <init_menu+0xb54>
    1568:	00 00       	nop
				}
				else if (joy_pos.dir == 1){
					menynummer = 10;
				}
				else if (joy_button(1) == 0){
					menynummer = 15;
    156a:	0f 2e       	mov	r0, r31
    156c:	ff e0       	ldi	r31, 0x0F	; 15
    156e:	cf 2e       	mov	r12, r31
    1570:	d1 2c       	mov	r13, r1
    1572:	f0 2d       	mov	r31, r0
					vanskelighetsgrad = 3;
    1574:	0f 2e       	mov	r0, r31
    1576:	f3 e0       	ldi	r31, 0x03	; 3
    1578:	bf 2e       	mov	r11, r31
    157a:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 12;
				}
				else if (joy_pos.dir == 1){
					menynummer = 10;
    157c:	0a e0       	ldi	r16, 0x0A	; 10
    157e:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
			while(menynummer == 11){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 12;
    1580:	0f 2e       	mov	r0, r31
    1582:	fc e0       	ldi	r31, 0x0C	; 12
    1584:	ef 2e       	mov	r14, r31
    1586:	f1 2c       	mov	r15, r1
    1588:	f0 2d       	mov	r31, r0
    158a:	2a c0       	rjmp	.+84     	; 0x15e0 <init_menu+0xbcc>
			OLED_print("* Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 11){
				joy_pos = JOY_getDirection();
    158c:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    1590:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    1594:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    1598:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    159c:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    15a0:	ee ed       	ldi	r30, 0xDE	; 222
    15a2:	ff ee       	ldi	r31, 0xEF	; 239
    15a4:	31 97       	sbiw	r30, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <init_menu+0xb90>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    15a8:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	29 f4       	brne	.+10     	; 0x15ba <init_menu+0xba6>
					menynummer = 12;
    15b0:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    15b4:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
    15b8:	13 c0       	rjmp	.+38     	; 0x15e0 <init_menu+0xbcc>
				}
				else if (joy_pos.dir == 1){
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	29 f4       	brne	.+10     	; 0x15c8 <init_menu+0xbb4>
					menynummer = 10;
    15be:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    15c2:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    15c6:	0c c0       	rjmp	.+24     	; 0x15e0 <init_menu+0xbcc>
				}
				else if (joy_button(1) == 0){
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    15d0:	89 2b       	or	r24, r25
    15d2:	31 f4       	brne	.+12     	; 0x15e0 <init_menu+0xbcc>
					menynummer = 15;
    15d4:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <menynummer+0x1>
    15d8:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <menynummer>
					vanskelighetsgrad = 3;
    15dc:	b0 92 24 01 	sts	0x0124, r11	; 0x800124 <vanskelighetsgrad>
			OLED_pos(5, 1);
			OLED_print("* Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 11){
    15e0:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    15e4:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    15e8:	0b 97       	sbiw	r24, 0x0b	; 11
    15ea:	81 f2       	breq	.-96     	; 0x158c <init_menu+0xb78>
    15ec:	65 c6       	rjmp	.+3274   	; 0x22b8 <init_menu+0x18a4>
					vanskelighetsgrad = 3;
				}
			}
			break;
		case 12 : // Submeny difficulty - MEDIUM-RETURN
			OLED_clear();
    15ee:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Easy");
    15fa:	8f ed       	ldi	r24, 0xDF	; 223
    15fc:	92 e0       	ldi	r25, 0x02	; 2
    15fe:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(" >Medium<");
    160a:	85 ed       	ldi	r24, 0xD5	; 213
    160c:	92 e0       	ldi	r25, 0x02	; 2
    160e:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    1612:	61 e0       	ldi	r22, 0x01	; 1
    1614:	85 e0       	ldi	r24, 0x05	; 5
    1616:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Hard");
    161a:	81 ea       	ldi	r24, 0xA1	; 161
    161c:	92 e0       	ldi	r25, 0x02	; 2
    161e:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    1622:	61 e0       	ldi	r22, 0x01	; 1
    1624:	87 e0       	ldi	r24, 0x07	; 7
    1626:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Back");
    162a:	87 ec       	ldi	r24, 0xC7	; 199
    162c:	92 e0       	ldi	r25, 0x02	; 2
    162e:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    1632:	f3 e9       	ldi	r31, 0x93	; 147
    1634:	2f ef       	ldi	r18, 0xFF	; 255
    1636:	32 e0       	ldi	r19, 0x02	; 2
    1638:	f1 50       	subi	r31, 0x01	; 1
    163a:	20 40       	sbci	r18, 0x00	; 0
    163c:	30 40       	sbci	r19, 0x00	; 0
    163e:	e1 f7       	brne	.-8      	; 0x1638 <init_menu+0xc24>
    1640:	00 c0       	rjmp	.+0      	; 0x1642 <init_menu+0xc2e>
    1642:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 9;
				}
				else if (joy_pos.dir == 1){
					menynummer = 11;
    1644:	0b e0       	ldi	r16, 0x0B	; 11
    1646:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
			while(menynummer == 12){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 9;
    1648:	0f 2e       	mov	r0, r31
    164a:	f9 e0       	ldi	r31, 0x09	; 9
    164c:	ef 2e       	mov	r14, r31
    164e:	f1 2c       	mov	r15, r1
    1650:	f0 2d       	mov	r31, r0
    1652:	2a c0       	rjmp	.+84     	; 0x16a8 <init_menu+0xc94>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 12){
				joy_pos = JOY_getDirection();
    1654:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    1658:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    165c:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    1660:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    1664:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    1668:	8e ed       	ldi	r24, 0xDE	; 222
    166a:	9f ee       	ldi	r25, 0xEF	; 239
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <init_menu+0xc58>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    1670:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    1674:	82 30       	cpi	r24, 0x02	; 2
    1676:	29 f4       	brne	.+10     	; 0x1682 <init_menu+0xc6e>
					menynummer = 9;
    1678:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    167c:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
    1680:	13 c0       	rjmp	.+38     	; 0x16a8 <init_menu+0xc94>
				}
				else if (joy_pos.dir == 1){
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	29 f4       	brne	.+10     	; 0x1690 <init_menu+0xc7c>
					menynummer = 11;
    1686:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    168a:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    168e:	0c c0       	rjmp	.+24     	; 0x16a8 <init_menu+0xc94>
				}
				else if (joy_button(1) == 0){
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    1698:	89 2b       	or	r24, r25
    169a:	31 f4       	brne	.+12     	; 0x16a8 <init_menu+0xc94>
					menynummer = 1;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    16a4:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 12){
    16a8:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    16ac:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    16b0:	0c 97       	sbiw	r24, 0x0c	; 12
    16b2:	81 f2       	breq	.-96     	; 0x1654 <init_menu+0xc40>
    16b4:	01 c6       	rjmp	.+3074   	; 0x22b8 <init_menu+0x18a4>
					menynummer = 1;
				}
			}
			break;
		case 13 : // Submeny difficulty - HARD-EASY
			OLED_clear();
    16b6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    16ba:	61 e0       	ldi	r22, 0x01	; 1
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Easy");
    16c2:	8e ec       	ldi	r24, 0xCE	; 206
    16c4:	92 e0       	ldi	r25, 0x02	; 2
    16c6:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Medium");
    16d2:	88 e9       	ldi	r24, 0x98	; 152
    16d4:	92 e0       	ldi	r25, 0x02	; 2
    16d6:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	85 e0       	ldi	r24, 0x05	; 5
    16de:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(" >Hard<");
    16e2:	80 ef       	ldi	r24, 0xF0	; 240
    16e4:	92 e0       	ldi	r25, 0x02	; 2
    16e6:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	87 e0       	ldi	r24, 0x07	; 7
    16ee:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Back");
    16f2:	88 ea       	ldi	r24, 0xA8	; 168
    16f4:	92 e0       	ldi	r25, 0x02	; 2
    16f6:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    16fa:	93 e9       	ldi	r25, 0x93	; 147
    16fc:	af ef       	ldi	r26, 0xFF	; 255
    16fe:	b2 e0       	ldi	r27, 0x02	; 2
    1700:	91 50       	subi	r25, 0x01	; 1
    1702:	a0 40       	sbci	r26, 0x00	; 0
    1704:	b0 40       	sbci	r27, 0x00	; 0
    1706:	e1 f7       	brne	.-8      	; 0x1700 <init_menu+0xcec>
    1708:	00 c0       	rjmp	.+0      	; 0x170a <init_menu+0xcf6>
    170a:	00 00       	nop
				}
				else if (joy_pos.dir == 1){
					menynummer = 16;
				}
				else if (joy_button(1) == 0){
					menynummer = 5;
    170c:	0f 2e       	mov	r0, r31
    170e:	f5 e0       	ldi	r31, 0x05	; 5
    1710:	cf 2e       	mov	r12, r31
    1712:	d1 2c       	mov	r13, r1
    1714:	f0 2d       	mov	r31, r0
					vanskelighetsgrad = 1;
    1716:	bb 24       	eor	r11, r11
    1718:	b3 94       	inc	r11
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 14;
				}
				else if (joy_pos.dir == 1){
					menynummer = 16;
    171a:	00 e1       	ldi	r16, 0x10	; 16
    171c:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
			while(menynummer == 13){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 14;
    171e:	0f 2e       	mov	r0, r31
    1720:	fe e0       	ldi	r31, 0x0E	; 14
    1722:	ef 2e       	mov	r14, r31
    1724:	f1 2c       	mov	r15, r1
    1726:	f0 2d       	mov	r31, r0
    1728:	2a c0       	rjmp	.+84     	; 0x177e <init_menu+0xd6a>
			OLED_print(" >Hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 13){
				joy_pos = JOY_getDirection();
    172a:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    172e:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    1732:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    1736:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    173a:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    173e:	ee ed       	ldi	r30, 0xDE	; 222
    1740:	ff ee       	ldi	r31, 0xEF	; 239
    1742:	31 97       	sbiw	r30, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <init_menu+0xd2e>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    1746:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    174a:	82 30       	cpi	r24, 0x02	; 2
    174c:	29 f4       	brne	.+10     	; 0x1758 <init_menu+0xd44>
					menynummer = 14;
    174e:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    1752:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
    1756:	13 c0       	rjmp	.+38     	; 0x177e <init_menu+0xd6a>
				}
				else if (joy_pos.dir == 1){
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	29 f4       	brne	.+10     	; 0x1766 <init_menu+0xd52>
					menynummer = 16;
    175c:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    1760:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    1764:	0c c0       	rjmp	.+24     	; 0x177e <init_menu+0xd6a>
				}
				else if (joy_button(1) == 0){
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    176e:	89 2b       	or	r24, r25
    1770:	31 f4       	brne	.+12     	; 0x177e <init_menu+0xd6a>
					menynummer = 5;
    1772:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <menynummer+0x1>
    1776:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <menynummer>
					vanskelighetsgrad = 1;
    177a:	b0 92 24 01 	sts	0x0124, r11	; 0x800124 <vanskelighetsgrad>
			OLED_pos(5, 1);
			OLED_print(" >Hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 13){
    177e:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    1782:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    1786:	0d 97       	sbiw	r24, 0x0d	; 13
    1788:	81 f2       	breq	.-96     	; 0x172a <init_menu+0xd16>
    178a:	96 c5       	rjmp	.+2860   	; 0x22b8 <init_menu+0x18a4>
					vanskelighetsgrad = 1;
				}
			}
			break;
		case 14 : // Submeny difficulty - HARD-MEDIUM
			OLED_clear();
    178c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Easy");
    1798:	8f ed       	ldi	r24, 0xDF	; 223
    179a:	92 e0       	ldi	r25, 0x02	; 2
    179c:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    17a0:	61 e0       	ldi	r22, 0x01	; 1
    17a2:	83 e0       	ldi	r24, 0x03	; 3
    17a4:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Medium");
    17a8:	87 eb       	ldi	r24, 0xB7	; 183
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	85 e0       	ldi	r24, 0x05	; 5
    17b4:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(" >Hard<");
    17b8:	80 ef       	ldi	r24, 0xF0	; 240
    17ba:	92 e0       	ldi	r25, 0x02	; 2
    17bc:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	87 e0       	ldi	r24, 0x07	; 7
    17c4:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Back");
    17c8:	88 ea       	ldi	r24, 0xA8	; 168
    17ca:	92 e0       	ldi	r25, 0x02	; 2
    17cc:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    17d0:	f3 e9       	ldi	r31, 0x93	; 147
    17d2:	2f ef       	ldi	r18, 0xFF	; 255
    17d4:	32 e0       	ldi	r19, 0x02	; 2
    17d6:	f1 50       	subi	r31, 0x01	; 1
    17d8:	20 40       	sbci	r18, 0x00	; 0
    17da:	30 40       	sbci	r19, 0x00	; 0
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <init_menu+0xdc2>
    17de:	00 c0       	rjmp	.+0      	; 0x17e0 <init_menu+0xdcc>
    17e0:	00 00       	nop
				}
				else if (joy_pos.dir == 1){
					menynummer = 13;
				}
				else if (joy_button(1) == 0){
					menynummer = 10;
    17e2:	0f 2e       	mov	r0, r31
    17e4:	fa e0       	ldi	r31, 0x0A	; 10
    17e6:	cf 2e       	mov	r12, r31
    17e8:	d1 2c       	mov	r13, r1
    17ea:	f0 2d       	mov	r31, r0
					vanskelighetsgrad = 2;
    17ec:	68 94       	set
    17ee:	bb 24       	eor	r11, r11
    17f0:	b1 f8       	bld	r11, 1
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 15;
				}
				else if (joy_pos.dir == 1){
					menynummer = 13;
    17f2:	0d e0       	ldi	r16, 0x0D	; 13
    17f4:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
			while(menynummer == 14){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 15;
    17f6:	0f 2e       	mov	r0, r31
    17f8:	ff e0       	ldi	r31, 0x0F	; 15
    17fa:	ef 2e       	mov	r14, r31
    17fc:	f1 2c       	mov	r15, r1
    17fe:	f0 2d       	mov	r31, r0
    1800:	2a c0       	rjmp	.+84     	; 0x1856 <init_menu+0xe42>
			OLED_print(" >Hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 14){
				joy_pos = JOY_getDirection();
    1802:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    1806:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    180a:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    180e:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    1812:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    1816:	8e ed       	ldi	r24, 0xDE	; 222
    1818:	9f ee       	ldi	r25, 0xEF	; 239
    181a:	01 97       	sbiw	r24, 0x01	; 1
    181c:	f1 f7       	brne	.-4      	; 0x181a <init_menu+0xe06>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    181e:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    1822:	82 30       	cpi	r24, 0x02	; 2
    1824:	29 f4       	brne	.+10     	; 0x1830 <init_menu+0xe1c>
					menynummer = 15;
    1826:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    182a:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
    182e:	13 c0       	rjmp	.+38     	; 0x1856 <init_menu+0xe42>
				}
				else if (joy_pos.dir == 1){
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	29 f4       	brne	.+10     	; 0x183e <init_menu+0xe2a>
					menynummer = 13;
    1834:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    1838:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    183c:	0c c0       	rjmp	.+24     	; 0x1856 <init_menu+0xe42>
				}
				else if (joy_button(1) == 0){
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    1846:	89 2b       	or	r24, r25
    1848:	31 f4       	brne	.+12     	; 0x1856 <init_menu+0xe42>
					menynummer = 10;
    184a:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <menynummer+0x1>
    184e:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <menynummer>
					vanskelighetsgrad = 2;
    1852:	b0 92 24 01 	sts	0x0124, r11	; 0x800124 <vanskelighetsgrad>
			OLED_pos(5, 1);
			OLED_print(" >Hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 14){
    1856:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    185a:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    185e:	0e 97       	sbiw	r24, 0x0e	; 14
    1860:	81 f2       	breq	.-96     	; 0x1802 <init_menu+0xdee>
    1862:	2a c5       	rjmp	.+2644   	; 0x22b8 <init_menu+0x18a4>
					vanskelighetsgrad = 2;
				}
			}
			break;
		case 15 : // Submeny difficulty - HARD-HARD
			OLED_clear();
    1864:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    1868:	61 e0       	ldi	r22, 0x01	; 1
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Easy");
    1870:	8f ed       	ldi	r24, 0xDF	; 223
    1872:	92 e0       	ldi	r25, 0x02	; 2
    1874:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Medium");
    1880:	88 e9       	ldi	r24, 0x98	; 152
    1882:	92 e0       	ldi	r25, 0x02	; 2
    1884:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	85 e0       	ldi	r24, 0x05	; 5
    188c:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("*>Hard<");
    1890:	88 ef       	ldi	r24, 0xF8	; 248
    1892:	92 e0       	ldi	r25, 0x02	; 2
    1894:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    1898:	61 e0       	ldi	r22, 0x01	; 1
    189a:	87 e0       	ldi	r24, 0x07	; 7
    189c:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Back");
    18a0:	88 ea       	ldi	r24, 0xA8	; 168
    18a2:	92 e0       	ldi	r25, 0x02	; 2
    18a4:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    18a8:	93 e9       	ldi	r25, 0x93	; 147
    18aa:	af ef       	ldi	r26, 0xFF	; 255
    18ac:	b2 e0       	ldi	r27, 0x02	; 2
    18ae:	91 50       	subi	r25, 0x01	; 1
    18b0:	a0 40       	sbci	r26, 0x00	; 0
    18b2:	b0 40       	sbci	r27, 0x00	; 0
    18b4:	e1 f7       	brne	.-8      	; 0x18ae <init_menu+0xe9a>
    18b6:	00 c0       	rjmp	.+0      	; 0x18b8 <init_menu+0xea4>
    18b8:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 16;
				}
				else if (joy_pos.dir == 1){
					menynummer = 14;
    18ba:	0f 2e       	mov	r0, r31
    18bc:	fe e0       	ldi	r31, 0x0E	; 14
    18be:	ef 2e       	mov	r14, r31
    18c0:	f1 2c       	mov	r15, r1
    18c2:	f0 2d       	mov	r31, r0
			_delay_ms(200);
			while(menynummer == 15){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 16;
    18c4:	00 e1       	ldi	r16, 0x10	; 16
    18c6:	10 e0       	ldi	r17, 0x00	; 0
    18c8:	1d c0       	rjmp	.+58     	; 0x1904 <init_menu+0xef0>
			OLED_print("*>Hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 15){
				joy_pos = JOY_getDirection();
    18ca:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    18ce:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    18d2:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    18d6:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    18da:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    18de:	ee ed       	ldi	r30, 0xDE	; 222
    18e0:	ff ee       	ldi	r31, 0xEF	; 239
    18e2:	31 97       	sbiw	r30, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <init_menu+0xece>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    18e6:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	29 f4       	brne	.+10     	; 0x18f8 <init_menu+0xee4>
					menynummer = 16;
    18ee:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    18f2:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    18f6:	06 c0       	rjmp	.+12     	; 0x1904 <init_menu+0xef0>
				}
				else if (joy_pos.dir == 1){
    18f8:	81 30       	cpi	r24, 0x01	; 1
    18fa:	21 f4       	brne	.+8      	; 0x1904 <init_menu+0xef0>
					menynummer = 14;
    18fc:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    1900:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
			OLED_pos(5, 1);
			OLED_print("*>Hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 15){
    1904:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    1908:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    190c:	0f 97       	sbiw	r24, 0x0f	; 15
    190e:	e9 f2       	breq	.-70     	; 0x18ca <init_menu+0xeb6>
    1910:	d3 c4       	rjmp	.+2470   	; 0x22b8 <init_menu+0x18a4>
					menynummer = 14;
				}
			}
			break;
		case 16 : // Submeny difficulty - HARD-RETURN
			OLED_clear();
    1912:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(1, 1);
    1916:	61 e0       	ldi	r22, 0x01	; 1
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Easy");
    191e:	8f ed       	ldi	r24, 0xDF	; 223
    1920:	92 e0       	ldi	r25, 0x02	; 2
    1922:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 1);
    1926:	61 e0       	ldi	r22, 0x01	; 1
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  Medium");
    192e:	88 e9       	ldi	r24, 0x98	; 152
    1930:	92 e0       	ldi	r25, 0x02	; 2
    1932:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	85 e0       	ldi	r24, 0x05	; 5
    193a:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(" >Hard<");
    193e:	80 ef       	ldi	r24, 0xF0	; 240
    1940:	92 e0       	ldi	r25, 0x02	; 2
    1942:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(7, 1);
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	87 e0       	ldi	r24, 0x07	; 7
    194a:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("* Back");
    194e:	87 ec       	ldi	r24, 0xC7	; 199
    1950:	92 e0       	ldi	r25, 0x02	; 2
    1952:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    1956:	f3 e9       	ldi	r31, 0x93	; 147
    1958:	2f ef       	ldi	r18, 0xFF	; 255
    195a:	32 e0       	ldi	r19, 0x02	; 2
    195c:	f1 50       	subi	r31, 0x01	; 1
    195e:	20 40       	sbci	r18, 0x00	; 0
    1960:	30 40       	sbci	r19, 0x00	; 0
    1962:	e1 f7       	brne	.-8      	; 0x195c <init_menu+0xf48>
    1964:	00 c0       	rjmp	.+0      	; 0x1966 <init_menu+0xf52>
    1966:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 13;
				}
				else if (joy_pos.dir == 1){
					menynummer = 15;
    1968:	0f e0       	ldi	r16, 0x0F	; 15
    196a:	10 e0       	ldi	r17, 0x00	; 0
			_delay_ms(200);
			while(menynummer == 16){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 2){
					menynummer = 13;
    196c:	0f 2e       	mov	r0, r31
    196e:	fd e0       	ldi	r31, 0x0D	; 13
    1970:	ef 2e       	mov	r14, r31
    1972:	f1 2c       	mov	r15, r1
    1974:	f0 2d       	mov	r31, r0
    1976:	2a c0       	rjmp	.+84     	; 0x19cc <init_menu+0xfb8>
			OLED_print(" >Hard<");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 16){
				joy_pos = JOY_getDirection();
    1978:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    197c:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    1980:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    1984:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    1988:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    198c:	8e ed       	ldi	r24, 0xDE	; 222
    198e:	9f ee       	ldi	r25, 0xEF	; 239
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <init_menu+0xf7c>
				_delay_ms(50);
				if (joy_pos.dir == 2){
    1994:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <joy_pos+0x2>
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	29 f4       	brne	.+10     	; 0x19a6 <init_menu+0xf92>
					menynummer = 13;
    199c:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    19a0:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
    19a4:	13 c0       	rjmp	.+38     	; 0x19cc <init_menu+0xfb8>
				}
				else if (joy_pos.dir == 1){
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	29 f4       	brne	.+10     	; 0x19b4 <init_menu+0xfa0>
					menynummer = 15;
    19aa:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    19ae:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    19b2:	0c c0       	rjmp	.+24     	; 0x19cc <init_menu+0xfb8>
				}
				else if (joy_button(1) == 0){
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    19bc:	89 2b       	or	r24, r25
    19be:	31 f4       	brne	.+12     	; 0x19cc <init_menu+0xfb8>
					menynummer = 1;
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    19c8:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
			OLED_pos(5, 1);
			OLED_print(" >Hard<");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 16){
    19cc:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    19d0:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    19d4:	40 97       	sbiw	r24, 0x10	; 16
    19d6:	81 f2       	breq	.-96     	; 0x1978 <init_menu+0xf64>
    19d8:	6f c4       	rjmp	.+2270   	; 0x22b8 <init_menu+0x18a4>
					menynummer = 1;
				}
			}
			break;		
		case 23 : // HIGHSCORES - Return
			OLED_clear();
    19da:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(2, 3);
    19de:	63 e0       	ldi	r22, 0x03	; 3
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    19e6:	ac e1       	ldi	r26, 0x1C	; 28
    19e8:	b1 e0       	ldi	r27, 0x01	; 1
    19ea:	04 e2       	ldi	r16, 0x24	; 36
    19ec:	11 e0       	ldi	r17, 0x01	; 1
    19ee:	ba 83       	std	Y+2, r27	; 0x02
    19f0:	a9 83       	std	Y+1, r26	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename1[i]);
    19f2:	e9 81       	ldd	r30, Y+1	; 0x01
    19f4:	fa 81       	ldd	r31, Y+2	; 0x02
    19f6:	81 91       	ld	r24, Z+
    19f8:	91 91       	ld	r25, Z+
    19fa:	fa 83       	std	Y+2, r31	; 0x02
    19fc:	e9 83       	std	Y+1, r30	; 0x01
    19fe:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			}
			break;		
		case 23 : // HIGHSCORES - Return
			OLED_clear();
			OLED_pos(2, 3);
			for (int i = 0; i < 4; i++){
    1a02:	29 81       	ldd	r18, Y+1	; 0x01
    1a04:	3a 81       	ldd	r19, Y+2	; 0x02
    1a06:	02 17       	cp	r16, r18
    1a08:	13 07       	cpc	r17, r19
    1a0a:	99 f7       	brne	.-26     	; 0x19f2 <init_menu+0xfde>
				OLED_print(highscorename1[i]);
			}
			OLED_pos(2,9);
    1a0c:	69 e0       	ldi	r22, 0x09	; 9
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    1a14:	4a e0       	ldi	r20, 0x0A	; 10
    1a16:	66 e4       	ldi	r22, 0x46	; 70
    1a18:	74 e0       	ldi	r23, 0x04	; 4
    1a1a:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <highscorescore1>
    1a1e:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <highscorescore1+0x1>
    1a22:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__itoa_ncheck>
			OLED_print(itoa(highscorescore1, buffer, 10));
    1a26:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 3);
    1a2a:	63 e0       	ldi	r22, 0x03	; 3
    1a2c:	83 e0       	ldi	r24, 0x03	; 3
    1a2e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    1a32:	84 e1       	ldi	r24, 0x14	; 20
    1a34:	91 e0       	ldi	r25, 0x01	; 1
    1a36:	0c e1       	ldi	r16, 0x1C	; 28
    1a38:	11 e0       	ldi	r17, 0x01	; 1
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename2[i]);
    1a3e:	a9 81       	ldd	r26, Y+1	; 0x01
    1a40:	ba 81       	ldd	r27, Y+2	; 0x02
    1a42:	8d 91       	ld	r24, X+
    1a44:	9d 91       	ld	r25, X+
    1a46:	ba 83       	std	Y+2, r27	; 0x02
    1a48:	a9 83       	std	Y+1, r26	; 0x01
    1a4a:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
				OLED_print(highscorename1[i]);
			}
			OLED_pos(2,9);
			OLED_print(itoa(highscorescore1, buffer, 10));
			OLED_pos(3, 3);
			for (int i = 0; i < 4; i++){
    1a4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a50:	fa 81       	ldd	r31, Y+2	; 0x02
    1a52:	e0 17       	cp	r30, r16
    1a54:	f1 07       	cpc	r31, r17
    1a56:	99 f7       	brne	.-26     	; 0x1a3e <init_menu+0x102a>
				OLED_print(highscorename2[i]);
			}
			OLED_pos(3,9);
    1a58:	69 e0       	ldi	r22, 0x09	; 9
    1a5a:	83 e0       	ldi	r24, 0x03	; 3
    1a5c:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    1a60:	4a e0       	ldi	r20, 0x0A	; 10
    1a62:	66 e4       	ldi	r22, 0x46	; 70
    1a64:	74 e0       	ldi	r23, 0x04	; 4
    1a66:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <highscorescore2>
    1a6a:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <highscorescore2+0x1>
    1a6e:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__itoa_ncheck>
			OLED_print(itoa(highscorescore2, buffer, 10));
    1a72:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(4, 3);
    1a76:	63 e0       	ldi	r22, 0x03	; 3
    1a78:	84 e0       	ldi	r24, 0x04	; 4
    1a7a:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    1a7e:	2c e0       	ldi	r18, 0x0C	; 12
    1a80:	31 e0       	ldi	r19, 0x01	; 1
    1a82:	04 e1       	ldi	r16, 0x14	; 20
    1a84:	11 e0       	ldi	r17, 0x01	; 1
    1a86:	3a 83       	std	Y+2, r19	; 0x02
    1a88:	29 83       	std	Y+1, r18	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename3[i]);
    1a8a:	a9 81       	ldd	r26, Y+1	; 0x01
    1a8c:	ba 81       	ldd	r27, Y+2	; 0x02
    1a8e:	8d 91       	ld	r24, X+
    1a90:	9d 91       	ld	r25, X+
    1a92:	ba 83       	std	Y+2, r27	; 0x02
    1a94:	a9 83       	std	Y+1, r26	; 0x01
    1a96:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
				OLED_print(highscorename2[i]);
			}
			OLED_pos(3,9);
			OLED_print(itoa(highscorescore2, buffer, 10));
			OLED_pos(4, 3);
			for (int i = 0; i < 4; i++){
    1a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9e:	0e 17       	cp	r16, r30
    1aa0:	1f 07       	cpc	r17, r31
    1aa2:	99 f7       	brne	.-26     	; 0x1a8a <init_menu+0x1076>
				OLED_print(highscorename3[i]);
			}
			OLED_pos(4,9);
    1aa4:	69 e0       	ldi	r22, 0x09	; 9
    1aa6:	84 e0       	ldi	r24, 0x04	; 4
    1aa8:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    1aac:	4a e0       	ldi	r20, 0x0A	; 10
    1aae:	66 e4       	ldi	r22, 0x46	; 70
    1ab0:	74 e0       	ldi	r23, 0x04	; 4
    1ab2:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <highscorescore3>
    1ab6:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <highscorescore3+0x1>
    1aba:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__itoa_ncheck>
			OLED_print(itoa(highscorescore3, buffer, 10));
    1abe:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(6,1);
    1ac2:	61 e0       	ldi	r22, 0x01	; 1
    1ac4:	86 e0       	ldi	r24, 0x06	; 6
    1ac6:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("*Back    Reset");
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	93 e0       	ldi	r25, 0x03	; 3
    1ace:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    1ad2:	f3 e9       	ldi	r31, 0x93	; 147
    1ad4:	2f ef       	ldi	r18, 0xFF	; 255
    1ad6:	32 e0       	ldi	r19, 0x02	; 2
    1ad8:	f1 50       	subi	r31, 0x01	; 1
    1ada:	20 40       	sbci	r18, 0x00	; 0
    1adc:	30 40       	sbci	r19, 0x00	; 0
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <init_menu+0x10c4>
    1ae0:	00 c0       	rjmp	.+0      	; 0x1ae2 <init_menu+0x10ce>
    1ae2:	00 00       	nop
    1ae4:	33 c0       	rjmp	.+102    	; 0x1b4c <init_menu+0x1138>
			_delay_ms(200);
			while(menynummer == 23){
				joy_pos = JOY_getDirection();
    1ae6:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    1aea:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    1aee:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    1af2:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    1af6:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    1afa:	8e ea       	ldi	r24, 0xAE	; 174
    1afc:	9f e3       	ldi	r25, 0x3F	; 63
    1afe:	a2 e0       	ldi	r26, 0x02	; 2
    1b00:	81 50       	subi	r24, 0x01	; 1
    1b02:	90 40       	sbci	r25, 0x00	; 0
    1b04:	a0 40       	sbci	r26, 0x00	; 0
    1b06:	e1 f7       	brne	.-8      	; 0x1b00 <init_menu+0x10ec>
    1b08:	00 c0       	rjmp	.+0      	; 0x1b0a <init_menu+0x10f6>
    1b0a:	00 00       	nop
				_delay_ms(150);
				if (joy_pos.sidedir == 1){
    1b0c:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <joy_pos+0x3>
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	39 f4       	brne	.+14     	; 0x1b22 <init_menu+0x110e>
					menynummer = 24;
    1b14:	88 e1       	ldi	r24, 0x18	; 24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    1b1c:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
					break;
    1b20:	cb c3       	rjmp	.+1942   	; 0x22b8 <init_menu+0x18a4>
				}
				else if (joy_pos.sidedir == 2){
    1b22:	82 30       	cpi	r24, 0x02	; 2
    1b24:	39 f4       	brne	.+14     	; 0x1b34 <init_menu+0x1120>
					menynummer = 24;
    1b26:	88 e1       	ldi	r24, 0x18	; 24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    1b2e:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
					break;
    1b32:	c2 c3       	rjmp	.+1924   	; 0x22b8 <init_menu+0x18a4>
				}
				else if (joy_button(1) == 0){
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    1b3c:	89 2b       	or	r24, r25
    1b3e:	31 f4       	brne	.+12     	; 0x1b4c <init_menu+0x1138>
					menynummer = 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    1b48:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
			OLED_pos(4,9);
			OLED_print(itoa(highscorescore3, buffer, 10));
			OLED_pos(6,1);
			OLED_print("*Back    Reset");
			_delay_ms(200);
			while(menynummer == 23){
    1b4c:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    1b50:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    1b54:	47 97       	sbiw	r24, 0x17	; 23
    1b56:	39 f2       	breq	.-114    	; 0x1ae6 <init_menu+0x10d2>
    1b58:	af c3       	rjmp	.+1886   	; 0x22b8 <init_menu+0x18a4>
					menynummer = 1;
				}
			}
			break;
		case 24 : // HIGHSCORES - Reset
			OLED_clear();
    1b5a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(2, 3);
    1b5e:	63 e0       	ldi	r22, 0x03	; 3
    1b60:	82 e0       	ldi	r24, 0x02	; 2
    1b62:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    1b66:	ec e1       	ldi	r30, 0x1C	; 28
    1b68:	f1 e0       	ldi	r31, 0x01	; 1
    1b6a:	04 e2       	ldi	r16, 0x24	; 36
    1b6c:	11 e0       	ldi	r17, 0x01	; 1
    1b6e:	fa 83       	std	Y+2, r31	; 0x02
    1b70:	e9 83       	std	Y+1, r30	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename1[i]);
    1b72:	a9 81       	ldd	r26, Y+1	; 0x01
    1b74:	ba 81       	ldd	r27, Y+2	; 0x02
    1b76:	8d 91       	ld	r24, X+
    1b78:	9d 91       	ld	r25, X+
    1b7a:	ba 83       	std	Y+2, r27	; 0x02
    1b7c:	a9 83       	std	Y+1, r26	; 0x01
    1b7e:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			}
			break;
		case 24 : // HIGHSCORES - Reset
			OLED_clear();
			OLED_pos(2, 3);
			for (int i = 0; i < 4; i++){
    1b82:	e9 81       	ldd	r30, Y+1	; 0x01
    1b84:	fa 81       	ldd	r31, Y+2	; 0x02
    1b86:	e0 17       	cp	r30, r16
    1b88:	f1 07       	cpc	r31, r17
    1b8a:	99 f7       	brne	.-26     	; 0x1b72 <init_menu+0x115e>
				OLED_print(highscorename1[i]);
			}
			OLED_pos(2,9);
    1b8c:	69 e0       	ldi	r22, 0x09	; 9
    1b8e:	82 e0       	ldi	r24, 0x02	; 2
    1b90:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    1b94:	4a e0       	ldi	r20, 0x0A	; 10
    1b96:	66 e4       	ldi	r22, 0x46	; 70
    1b98:	74 e0       	ldi	r23, 0x04	; 4
    1b9a:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <highscorescore1>
    1b9e:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <highscorescore1+0x1>
    1ba2:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__itoa_ncheck>
			OLED_print(itoa(highscorescore1, buffer, 10));
    1ba6:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(3, 3);
    1baa:	63 e0       	ldi	r22, 0x03	; 3
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    1bb2:	24 e1       	ldi	r18, 0x14	; 20
    1bb4:	31 e0       	ldi	r19, 0x01	; 1
    1bb6:	0c e1       	ldi	r16, 0x1C	; 28
    1bb8:	11 e0       	ldi	r17, 0x01	; 1
    1bba:	3a 83       	std	Y+2, r19	; 0x02
    1bbc:	29 83       	std	Y+1, r18	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename2[i]);
    1bbe:	a9 81       	ldd	r26, Y+1	; 0x01
    1bc0:	ba 81       	ldd	r27, Y+2	; 0x02
    1bc2:	8d 91       	ld	r24, X+
    1bc4:	9d 91       	ld	r25, X+
    1bc6:	ba 83       	std	Y+2, r27	; 0x02
    1bc8:	a9 83       	std	Y+1, r26	; 0x01
    1bca:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
				OLED_print(highscorename1[i]);
			}
			OLED_pos(2,9);
			OLED_print(itoa(highscorescore1, buffer, 10));
			OLED_pos(3, 3);
			for (int i = 0; i < 4; i++){
    1bce:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd2:	0e 17       	cp	r16, r30
    1bd4:	1f 07       	cpc	r17, r31
    1bd6:	99 f7       	brne	.-26     	; 0x1bbe <init_menu+0x11aa>
				OLED_print(highscorename2[i]);
			}
			OLED_pos(3,9);
    1bd8:	69 e0       	ldi	r22, 0x09	; 9
    1bda:	83 e0       	ldi	r24, 0x03	; 3
    1bdc:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    1be0:	4a e0       	ldi	r20, 0x0A	; 10
    1be2:	66 e4       	ldi	r22, 0x46	; 70
    1be4:	74 e0       	ldi	r23, 0x04	; 4
    1be6:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <highscorescore2>
    1bea:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <highscorescore2+0x1>
    1bee:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__itoa_ncheck>
			OLED_print(itoa(highscorescore2, buffer, 10));
    1bf2:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(4, 3);
    1bf6:	63 e0       	ldi	r22, 0x03	; 3
    1bf8:	84 e0       	ldi	r24, 0x04	; 4
    1bfa:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    1bfe:	2c e0       	ldi	r18, 0x0C	; 12
    1c00:	31 e0       	ldi	r19, 0x01	; 1
    1c02:	04 e1       	ldi	r16, 0x14	; 20
    1c04:	11 e0       	ldi	r17, 0x01	; 1
    1c06:	3a 83       	std	Y+2, r19	; 0x02
    1c08:	29 83       	std	Y+1, r18	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename3[i]);
    1c0a:	a9 81       	ldd	r26, Y+1	; 0x01
    1c0c:	ba 81       	ldd	r27, Y+2	; 0x02
    1c0e:	8d 91       	ld	r24, X+
    1c10:	9d 91       	ld	r25, X+
    1c12:	ba 83       	std	Y+2, r27	; 0x02
    1c14:	a9 83       	std	Y+1, r26	; 0x01
    1c16:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
				OLED_print(highscorename2[i]);
			}
			OLED_pos(3,9);
			OLED_print(itoa(highscorescore2, buffer, 10));
			OLED_pos(4, 3);
			for (int i = 0; i < 4; i++){
    1c1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1e:	0e 17       	cp	r16, r30
    1c20:	1f 07       	cpc	r17, r31
    1c22:	99 f7       	brne	.-26     	; 0x1c0a <init_menu+0x11f6>
				OLED_print(highscorename3[i]);
			}
			OLED_pos(4,9);
    1c24:	69 e0       	ldi	r22, 0x09	; 9
    1c26:	84 e0       	ldi	r24, 0x04	; 4
    1c28:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    1c2c:	4a e0       	ldi	r20, 0x0A	; 10
    1c2e:	66 e4       	ldi	r22, 0x46	; 70
    1c30:	74 e0       	ldi	r23, 0x04	; 4
    1c32:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <highscorescore3>
    1c36:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <highscorescore3+0x1>
    1c3a:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__itoa_ncheck>
			OLED_print(itoa(highscorescore3, buffer, 10));
    1c3e:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(6,1);
    1c42:	61 e0       	ldi	r22, 0x01	; 1
    1c44:	86 e0       	ldi	r24, 0x06	; 6
    1c46:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(" Back   *Reset");
    1c4a:	8f e0       	ldi	r24, 0x0F	; 15
    1c4c:	93 e0       	ldi	r25, 0x03	; 3
    1c4e:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    1c52:	f3 e9       	ldi	r31, 0x93	; 147
    1c54:	2f ef       	ldi	r18, 0xFF	; 255
    1c56:	32 e0       	ldi	r19, 0x02	; 2
    1c58:	f1 50       	subi	r31, 0x01	; 1
    1c5a:	20 40       	sbci	r18, 0x00	; 0
    1c5c:	30 40       	sbci	r19, 0x00	; 0
    1c5e:	e1 f7       	brne	.-8      	; 0x1c58 <init_menu+0x1244>
    1c60:	00 c0       	rjmp	.+0      	; 0x1c62 <init_menu+0x124e>
    1c62:	00 00       	nop
				else if (joy_pos.sidedir == 2){
					menynummer = 23;
					break;
				}
				else if (joy_button(1) == 0){
					menynummer = 25;
    1c64:	09 e1       	ldi	r16, 0x19	; 25
    1c66:	10 e0       	ldi	r17, 0x00	; 0
    1c68:	31 c0       	rjmp	.+98     	; 0x1ccc <init_menu+0x12b8>
			OLED_print(itoa(highscorescore3, buffer, 10));
			OLED_pos(6,1);
			OLED_print(" Back   *Reset");
			_delay_ms(200);
			while(menynummer == 24){
				joy_pos = JOY_getDirection();
    1c6a:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    1c6e:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    1c72:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    1c76:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    1c7a:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    1c7e:	8e ea       	ldi	r24, 0xAE	; 174
    1c80:	9f e3       	ldi	r25, 0x3F	; 63
    1c82:	a2 e0       	ldi	r26, 0x02	; 2
    1c84:	81 50       	subi	r24, 0x01	; 1
    1c86:	90 40       	sbci	r25, 0x00	; 0
    1c88:	a0 40       	sbci	r26, 0x00	; 0
    1c8a:	e1 f7       	brne	.-8      	; 0x1c84 <init_menu+0x1270>
    1c8c:	00 c0       	rjmp	.+0      	; 0x1c8e <init_menu+0x127a>
    1c8e:	00 00       	nop
				_delay_ms(150);
				if (joy_pos.sidedir == 1){
    1c90:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <joy_pos+0x3>
    1c94:	81 30       	cpi	r24, 0x01	; 1
    1c96:	39 f4       	brne	.+14     	; 0x1ca6 <init_menu+0x1292>
					menynummer = 23;
    1c98:	87 e1       	ldi	r24, 0x17	; 23
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    1ca0:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
					break;
    1ca4:	09 c3       	rjmp	.+1554   	; 0x22b8 <init_menu+0x18a4>
				}
				else if (joy_pos.sidedir == 2){
    1ca6:	82 30       	cpi	r24, 0x02	; 2
    1ca8:	39 f4       	brne	.+14     	; 0x1cb8 <init_menu+0x12a4>
					menynummer = 23;
    1caa:	87 e1       	ldi	r24, 0x17	; 23
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    1cb2:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
					break;
    1cb6:	00 c3       	rjmp	.+1536   	; 0x22b8 <init_menu+0x18a4>
				}
				else if (joy_button(1) == 0){
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    1cc0:	89 2b       	or	r24, r25
    1cc2:	21 f4       	brne	.+8      	; 0x1ccc <init_menu+0x12b8>
					menynummer = 25;
    1cc4:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    1cc8:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
			OLED_pos(4,9);
			OLED_print(itoa(highscorescore3, buffer, 10));
			OLED_pos(6,1);
			OLED_print(" Back   *Reset");
			_delay_ms(200);
			while(menynummer == 24){
    1ccc:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    1cd0:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    1cd4:	48 97       	sbiw	r24, 0x18	; 24
    1cd6:	49 f2       	breq	.-110    	; 0x1c6a <init_menu+0x1256>
    1cd8:	ef c2       	rjmp	.+1502   	; 0x22b8 <init_menu+0x18a4>
					menynummer = 25;
				}
			}
			break;
		case 25 : // Clear highscores - Are you sure? No
			OLED_clear();
    1cda:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(3,1);
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	83 e0       	ldi	r24, 0x03	; 3
    1ce2:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("Are you sure?");
    1ce6:	8e e1       	ldi	r24, 0x1E	; 30
    1ce8:	93 e0       	ldi	r25, 0x03	; 3
    1cea:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    1cee:	61 e0       	ldi	r22, 0x01	; 1
    1cf0:	85 e0       	ldi	r24, 0x05	; 5
    1cf2:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(" *No    Yes");
    1cf6:	8c e2       	ldi	r24, 0x2C	; 44
    1cf8:	93 e0       	ldi	r25, 0x03	; 3
    1cfa:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    1cfe:	b3 e9       	ldi	r27, 0x93	; 147
    1d00:	ef ef       	ldi	r30, 0xFF	; 255
    1d02:	f2 e0       	ldi	r31, 0x02	; 2
    1d04:	b1 50       	subi	r27, 0x01	; 1
    1d06:	e0 40       	sbci	r30, 0x00	; 0
    1d08:	f0 40       	sbci	r31, 0x00	; 0
    1d0a:	e1 f7       	brne	.-8      	; 0x1d04 <init_menu+0x12f0>
    1d0c:	00 c0       	rjmp	.+0      	; 0x1d0e <init_menu+0x12fa>
    1d0e:	00 00       	nop
				}
				else if (joy_pos.sidedir == 2){
					menynummer = 26;
				}
				else if (joy_button(1) == 0){
					menynummer = 23;
    1d10:	0f 2e       	mov	r0, r31
    1d12:	f7 e1       	ldi	r31, 0x17	; 23
    1d14:	ef 2e       	mov	r14, r31
    1d16:	f1 2c       	mov	r15, r1
    1d18:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.sidedir == 1){
					menynummer = 26;
				}
				else if (joy_pos.sidedir == 2){
					menynummer = 26;
    1d1a:	0a e1       	ldi	r16, 0x1A	; 26
    1d1c:	10 e0       	ldi	r17, 0x00	; 0
    1d1e:	28 c0       	rjmp	.+80     	; 0x1d70 <init_menu+0x135c>
			OLED_print("Are you sure?");
			OLED_pos(5, 1);
			OLED_print(" *No    Yes");
			_delay_ms(200);
			while(menynummer == 25){
				joy_pos = JOY_getDirection();
    1d20:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    1d24:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    1d28:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    1d2c:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    1d30:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    1d34:	8e ed       	ldi	r24, 0xDE	; 222
    1d36:	9f ee       	ldi	r25, 0xEF	; 239
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <init_menu+0x1324>
				_delay_ms(50);
				if (joy_pos.sidedir == 1){
    1d3c:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <joy_pos+0x3>
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	29 f4       	brne	.+10     	; 0x1d4e <init_menu+0x133a>
					menynummer = 26;
    1d44:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    1d48:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    1d4c:	11 c0       	rjmp	.+34     	; 0x1d70 <init_menu+0x135c>
				}
				else if (joy_pos.sidedir == 2){
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	29 f4       	brne	.+10     	; 0x1d5c <init_menu+0x1348>
					menynummer = 26;
    1d52:	10 93 16 04 	sts	0x0416, r17	; 0x800416 <menynummer+0x1>
    1d56:	00 93 15 04 	sts	0x0415, r16	; 0x800415 <menynummer>
    1d5a:	0a c0       	rjmp	.+20     	; 0x1d70 <init_menu+0x135c>
				}
				else if (joy_button(1) == 0){
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    1d64:	89 2b       	or	r24, r25
    1d66:	21 f4       	brne	.+8      	; 0x1d70 <init_menu+0x135c>
					menynummer = 23;
    1d68:	f0 92 16 04 	sts	0x0416, r15	; 0x800416 <menynummer+0x1>
    1d6c:	e0 92 15 04 	sts	0x0415, r14	; 0x800415 <menynummer>
			OLED_pos(3,1);
			OLED_print("Are you sure?");
			OLED_pos(5, 1);
			OLED_print(" *No    Yes");
			_delay_ms(200);
			while(menynummer == 25){
    1d70:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    1d74:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    1d78:	49 97       	sbiw	r24, 0x19	; 25
    1d7a:	91 f2       	breq	.-92     	; 0x1d20 <init_menu+0x130c>
    1d7c:	9d c2       	rjmp	.+1338   	; 0x22b8 <init_menu+0x18a4>
					menynummer = 23;
				}
			}
			break;
		case 26 : // Clear highscores - Are you sure? Yes
			OLED_clear();
    1d7e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(3,1);
    1d82:	61 e0       	ldi	r22, 0x01	; 1
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("Are you sure?");
    1d8a:	8e e1       	ldi	r24, 0x1E	; 30
    1d8c:	93 e0       	ldi	r25, 0x03	; 3
    1d8e:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5, 1);
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	85 e0       	ldi	r24, 0x05	; 5
    1d96:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("  No   *Yes");
    1d9a:	88 e3       	ldi	r24, 0x38	; 56
    1d9c:	93 e0       	ldi	r25, 0x03	; 3
    1d9e:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    1da2:	93 e9       	ldi	r25, 0x93	; 147
    1da4:	af ef       	ldi	r26, 0xFF	; 255
    1da6:	b2 e0       	ldi	r27, 0x02	; 2
    1da8:	91 50       	subi	r25, 0x01	; 1
    1daa:	a0 40       	sbci	r26, 0x00	; 0
    1dac:	b0 40       	sbci	r27, 0x00	; 0
    1dae:	e1 f7       	brne	.-8      	; 0x1da8 <init_menu+0x1394>
    1db0:	00 c0       	rjmp	.+0      	; 0x1db2 <init_menu+0x139e>
    1db2:	00 00       	nop
			_delay_ms(200);
			while(menynummer == 26){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.sidedir == 1){
    1db4:	0e e3       	ldi	r16, 0x3E	; 62
    1db6:	14 e0       	ldi	r17, 0x04	; 4
    1db8:	0f 2e       	mov	r0, r31
    1dba:	f4 e2       	ldi	r31, 0x24	; 36
    1dbc:	ef 2e       	mov	r14, r31
    1dbe:	f1 e0       	ldi	r31, 0x01	; 1
    1dc0:	ff 2e       	mov	r15, r31
    1dc2:	f0 2d       	mov	r31, r0
					menynummer = 25;
				}
				else if (joy_button(1) == 0){
					menynummer = 1;
					for (int i = 0; i < 4; i++){
						highscorename1[i] = ".";
    1dc4:	0f 2e       	mov	r0, r31
    1dc6:	f3 ec       	ldi	r31, 0xC3	; 195
    1dc8:	af 2e       	mov	r10, r31
    1dca:	f3 e0       	ldi	r31, 0x03	; 3
    1dcc:	bf 2e       	mov	r11, r31
    1dce:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.sidedir == 1){
					menynummer = 25;
				}
				else if (joy_pos.sidedir == 2){
					menynummer = 25;
    1dd0:	0f 2e       	mov	r0, r31
    1dd2:	f9 e1       	ldi	r31, 0x19	; 25
    1dd4:	cf 2e       	mov	r12, r31
    1dd6:	d1 2c       	mov	r13, r1
    1dd8:	f0 2d       	mov	r31, r0
    1dda:	4a c0       	rjmp	.+148    	; 0x1e70 <init_menu+0x145c>
			OLED_print("Are you sure?");
			OLED_pos(5, 1);
			OLED_print("  No   *Yes");
			_delay_ms(200);
			while(menynummer == 26){
				joy_pos = JOY_getDirection();
    1ddc:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    1de0:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    1de4:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    1de8:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    1dec:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
    1df0:	ee ed       	ldi	r30, 0xDE	; 222
    1df2:	ff ee       	ldi	r31, 0xEF	; 239
    1df4:	31 97       	sbiw	r30, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <init_menu+0x13e0>
				_delay_ms(50);
				if (joy_pos.sidedir == 1){
    1df8:	d8 01       	movw	r26, r16
    1dfa:	13 96       	adiw	r26, 0x03	; 3
    1dfc:	8c 91       	ld	r24, X
    1dfe:	81 30       	cpi	r24, 0x01	; 1
    1e00:	29 f4       	brne	.+10     	; 0x1e0c <init_menu+0x13f8>
					menynummer = 25;
    1e02:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <menynummer+0x1>
    1e06:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <menynummer>
    1e0a:	32 c0       	rjmp	.+100    	; 0x1e70 <init_menu+0x145c>
				}
				else if (joy_pos.sidedir == 2){
    1e0c:	82 30       	cpi	r24, 0x02	; 2
    1e0e:	29 f4       	brne	.+10     	; 0x1e1a <init_menu+0x1406>
					menynummer = 25;
    1e10:	d0 92 16 04 	sts	0x0416, r13	; 0x800416 <menynummer+0x1>
    1e14:	c0 92 15 04 	sts	0x0415, r12	; 0x800415 <menynummer>
    1e18:	2b c0       	rjmp	.+86     	; 0x1e70 <init_menu+0x145c>
				}
				else if (joy_button(1) == 0){
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    1e22:	89 2b       	or	r24, r25
    1e24:	29 f5       	brne	.+74     	; 0x1e70 <init_menu+0x145c>
					menynummer = 1;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    1e2e:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
    1e32:	ec e1       	ldi	r30, 0x1C	; 28
    1e34:	f1 e0       	ldi	r31, 0x01	; 1
    1e36:	84 e1       	ldi	r24, 0x14	; 20
    1e38:	91 e0       	ldi	r25, 0x01	; 1
    1e3a:	4c e0       	ldi	r20, 0x0C	; 12
    1e3c:	51 e0       	ldi	r21, 0x01	; 1
					for (int i = 0; i < 4; i++){
						highscorename1[i] = ".";
    1e3e:	a1 92       	st	Z+, r10
    1e40:	b1 92       	st	Z+, r11
						highscorename2[i] = ".";
    1e42:	dc 01       	movw	r26, r24
    1e44:	ad 92       	st	X+, r10
    1e46:	bd 92       	st	X+, r11
    1e48:	cd 01       	movw	r24, r26
						highscorename3[i] = ".";
    1e4a:	da 01       	movw	r26, r20
    1e4c:	ad 92       	st	X+, r10
    1e4e:	bd 92       	st	X+, r11
    1e50:	ad 01       	movw	r20, r26
				else if (joy_pos.sidedir == 2){
					menynummer = 25;
				}
				else if (joy_button(1) == 0){
					menynummer = 1;
					for (int i = 0; i < 4; i++){
    1e52:	ee 16       	cp	r14, r30
    1e54:	ff 06       	cpc	r15, r31
    1e56:	99 f7       	brne	.-26     	; 0x1e3e <init_menu+0x142a>
						highscorename1[i] = ".";
						highscorename2[i] = ".";
						highscorename3[i] = ".";
					}
					highscorescore1 = 0;
    1e58:	10 92 1c 04 	sts	0x041C, r1	; 0x80041c <highscorescore1+0x1>
    1e5c:	10 92 1b 04 	sts	0x041B, r1	; 0x80041b <highscorescore1>
					highscorescore2 = 0;
    1e60:	10 92 1a 04 	sts	0x041A, r1	; 0x80041a <highscorescore2+0x1>
    1e64:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <highscorescore2>
					highscorescore3 = 0;
    1e68:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <highscorescore3+0x1>
    1e6c:	10 92 17 04 	sts	0x0417, r1	; 0x800417 <highscorescore3>
			OLED_pos(3,1);
			OLED_print("Are you sure?");
			OLED_pos(5, 1);
			OLED_print("  No   *Yes");
			_delay_ms(200);
			while(menynummer == 26){
    1e70:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    1e74:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    1e78:	4a 97       	sbiw	r24, 0x1a	; 26
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <init_menu+0x146a>
    1e7c:	af cf       	rjmp	.-162    	; 0x1ddc <init_menu+0x13c8>
    1e7e:	1c c2       	rjmp	.+1080   	; 0x22b8 <init_menu+0x18a4>
					highscorescore3 = 0;
				}
			}
			break;
		case 27 :	// Highscore sorting logic. Called when player finishes the game and jumps to case 1 ("Main menu - Start game") when it is done sorting
			OLED_clear();
    1e80:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			if (score >= highscorescore1){
    1e84:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <score>
    1e88:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <score+0x1>
    1e8c:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <highscorescore1>
    1e90:	30 91 1c 04 	lds	r19, 0x041C	; 0x80041c <highscorescore1+0x1>
    1e94:	82 17       	cp	r24, r18
    1e96:	93 07       	cpc	r25, r19
    1e98:	dc f1       	brlt	.+118    	; 0x1f10 <init_menu+0x14fc>
				char** endstr = OLED_nameprompt();
    1e9a:	0e 94 d6 12 	call	0x25ac	; 0x25ac <OLED_nameprompt>
    1e9e:	0c e0       	ldi	r16, 0x0C	; 12
    1ea0:	11 e0       	ldi	r17, 0x01	; 1
    1ea2:	a4 e1       	ldi	r26, 0x14	; 20
    1ea4:	b1 e0       	ldi	r27, 0x01	; 1
    1ea6:	ec e1       	ldi	r30, 0x1C	; 28
    1ea8:	f1 e0       	ldi	r31, 0x01	; 1
    1eaa:	44 e1       	ldi	r20, 0x14	; 20
    1eac:	51 e0       	ldi	r21, 0x01	; 1
    1eae:	bf 01       	movw	r22, r30
				for (int i = 0; i < 4; i++){							// If score >= highest score, move everything down 1 rank and replace highest score with the achieved score
					highscorename3[i] = highscorename2[i];
    1eb0:	2d 91       	ld	r18, X+
    1eb2:	3c 91       	ld	r19, X
    1eb4:	11 97       	sbiw	r26, 0x01	; 1
    1eb6:	f8 01       	movw	r30, r16
    1eb8:	21 93       	st	Z+, r18
    1eba:	31 93       	st	Z+, r19
    1ebc:	8f 01       	movw	r16, r30
					highscorename2[i] = highscorename1[i];
    1ebe:	fb 01       	movw	r30, r22
    1ec0:	20 81       	ld	r18, Z
    1ec2:	31 81       	ldd	r19, Z+1	; 0x01
    1ec4:	2d 93       	st	X+, r18
    1ec6:	3d 93       	st	X+, r19
					highscorename1[i] = endstr[i];
    1ec8:	fc 01       	movw	r30, r24
    1eca:	21 91       	ld	r18, Z+
    1ecc:	31 91       	ld	r19, Z+
    1ece:	cf 01       	movw	r24, r30
    1ed0:	fb 01       	movw	r30, r22
    1ed2:	21 93       	st	Z+, r18
    1ed4:	31 93       	st	Z+, r19
    1ed6:	bf 01       	movw	r22, r30
			break;
		case 27 :	// Highscore sorting logic. Called when player finishes the game and jumps to case 1 ("Main menu - Start game") when it is done sorting
			OLED_clear();
			if (score >= highscorescore1){
				char** endstr = OLED_nameprompt();
				for (int i = 0; i < 4; i++){							// If score >= highest score, move everything down 1 rank and replace highest score with the achieved score
    1ed8:	04 17       	cp	r16, r20
    1eda:	15 07       	cpc	r17, r21
    1edc:	49 f7       	brne	.-46     	; 0x1eb0 <init_menu+0x149c>
					highscorename3[i] = highscorename2[i];
					highscorename2[i] = highscorename1[i];
					highscorename1[i] = endstr[i];
					}
				highscorescore3 = highscorescore2;
    1ede:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <highscorescore2>
    1ee2:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <highscorescore2+0x1>
    1ee6:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <highscorescore3+0x1>
    1eea:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <highscorescore3>
				highscorescore2 = highscorescore1;
    1eee:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <highscorescore1>
    1ef2:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <highscorescore1+0x1>
    1ef6:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <highscorescore2+0x1>
    1efa:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <highscorescore2>
				highscorescore1 = score;
    1efe:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <score>
    1f02:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <score+0x1>
    1f06:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <highscorescore1+0x1>
    1f0a:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <highscorescore1>
    1f0e:	5b c0       	rjmp	.+182    	; 0x1fc6 <init_menu+0x15b2>
			}
			else if (score >= highscorescore2){							// Same as previous, but with the second highest score
    1f10:	20 91 19 04 	lds	r18, 0x0419	; 0x800419 <highscorescore2>
    1f14:	30 91 1a 04 	lds	r19, 0x041A	; 0x80041a <highscorescore2+0x1>
    1f18:	82 17       	cp	r24, r18
    1f1a:	93 07       	cpc	r25, r19
    1f1c:	74 f1       	brlt	.+92     	; 0x1f7a <init_menu+0x1566>
				char** endstr = OLED_nameprompt();
    1f1e:	0e 94 d6 12 	call	0x25ac	; 0x25ac <OLED_nameprompt>
    1f22:	2e e0       	ldi	r18, 0x0E	; 14
    1f24:	31 e0       	ldi	r19, 0x01	; 1
    1f26:	3a 83       	std	Y+2, r19	; 0x02
    1f28:	29 83       	std	Y+1, r18	; 0x01
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	12 96       	adiw	r26, 0x02	; 2
    1f2e:	e6 e1       	ldi	r30, 0x16	; 22
    1f30:	f1 e0       	ldi	r31, 0x01	; 1
    1f32:	08 96       	adiw	r24, 0x08	; 8
    1f34:	b9 01       	movw	r22, r18
    1f36:	af 01       	movw	r20, r30
				for (int i = 1; i < 4; i++){
					highscorename3[i] = highscorename2[i];
    1f38:	fa 01       	movw	r30, r20
    1f3a:	20 81       	ld	r18, Z
    1f3c:	31 81       	ldd	r19, Z+1	; 0x01
    1f3e:	fb 01       	movw	r30, r22
    1f40:	21 93       	st	Z+, r18
    1f42:	31 93       	st	Z+, r19
    1f44:	bf 01       	movw	r22, r30
					highscorename2[i] = endstr[i];
    1f46:	2d 91       	ld	r18, X+
    1f48:	3d 91       	ld	r19, X+
    1f4a:	fa 01       	movw	r30, r20
    1f4c:	21 93       	st	Z+, r18
    1f4e:	31 93       	st	Z+, r19
    1f50:	af 01       	movw	r20, r30
				highscorescore2 = highscorescore1;
				highscorescore1 = score;
			}
			else if (score >= highscorescore2){							// Same as previous, but with the second highest score
				char** endstr = OLED_nameprompt();
				for (int i = 1; i < 4; i++){
    1f52:	a8 17       	cp	r26, r24
    1f54:	b9 07       	cpc	r27, r25
    1f56:	81 f7       	brne	.-32     	; 0x1f38 <init_menu+0x1524>
					highscorename3[i] = highscorename2[i];
					highscorename2[i] = endstr[i];
				}
				highscorescore3 = highscorescore2;
    1f58:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <highscorescore2>
    1f5c:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <highscorescore2+0x1>
    1f60:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <highscorescore3+0x1>
    1f64:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <highscorescore3>
				highscorescore2 = score;
    1f68:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <score>
    1f6c:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <score+0x1>
    1f70:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <highscorescore2+0x1>
    1f74:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <highscorescore2>
    1f78:	26 c0       	rjmp	.+76     	; 0x1fc6 <init_menu+0x15b2>
			}
			else if (score >= highscorescore3){							// Same as previous, but with the third highest score
    1f7a:	20 91 17 04 	lds	r18, 0x0417	; 0x800417 <highscorescore3>
    1f7e:	30 91 18 04 	lds	r19, 0x0418	; 0x800418 <highscorescore3+0x1>
    1f82:	82 17       	cp	r24, r18
    1f84:	93 07       	cpc	r25, r19
    1f86:	fc f0       	brlt	.+62     	; 0x1fc6 <init_menu+0x15b2>
				char** endstr = OLED_nameprompt();
    1f88:	0e 94 d6 12 	call	0x25ac	; 0x25ac <OLED_nameprompt>
    1f8c:	dc 01       	movw	r26, r24
				for (int i = 1; i < 4; i++){
					highscorename3[i] = endstr[i];
    1f8e:	12 96       	adiw	r26, 0x02	; 2
    1f90:	8d 91       	ld	r24, X+
    1f92:	9c 91       	ld	r25, X
    1f94:	13 97       	sbiw	r26, 0x03	; 3
    1f96:	ec e0       	ldi	r30, 0x0C	; 12
    1f98:	f1 e0       	ldi	r31, 0x01	; 1
    1f9a:	93 83       	std	Z+3, r25	; 0x03
    1f9c:	82 83       	std	Z+2, r24	; 0x02
    1f9e:	14 96       	adiw	r26, 0x04	; 4
    1fa0:	8d 91       	ld	r24, X+
    1fa2:	9c 91       	ld	r25, X
    1fa4:	15 97       	sbiw	r26, 0x05	; 5
    1fa6:	95 83       	std	Z+5, r25	; 0x05
    1fa8:	84 83       	std	Z+4, r24	; 0x04
    1faa:	16 96       	adiw	r26, 0x06	; 6
    1fac:	8d 91       	ld	r24, X+
    1fae:	9c 91       	ld	r25, X
    1fb0:	17 97       	sbiw	r26, 0x07	; 7
    1fb2:	97 83       	std	Z+7, r25	; 0x07
    1fb4:	86 83       	std	Z+6, r24	; 0x06
				}
				highscorescore3 = score;
    1fb6:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <score>
    1fba:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <score+0x1>
    1fbe:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <highscorescore3+0x1>
    1fc2:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <highscorescore3>
			}
			menynummer = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    1fce:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
			break;
    1fd2:	72 c1       	rjmp	.+740    	; 0x22b8 <init_menu+0x18a4>
		case 28 :	// Mini-Pong. Ping-pong game played on the OLED-screen.
			OLED_clear();
    1fd4:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			float v = 2;																// Position of slider
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a0 e0       	ldi	r26, 0x00	; 0
    1fde:	b0 e4       	ldi	r27, 0x40	; 64
    1fe0:	8d 83       	std	Y+5, r24	; 0x05
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	af 83       	std	Y+7, r26	; 0x07
    1fe6:	b8 87       	std	Y+8, r27	; 0x08
			y = 2;																		// Position of ball on screen (y-axis)
			x = 1;																		// Position of ball on screen (x-axis)
			z = 1;																		// Inverter
			w = 1;																		// Inverter
			counter = 0;																// Score counter
    1fe8:	00 e0       	ldi	r16, 0x00	; 0
    1fea:	10 e0       	ldi	r17, 0x00	; 0
			break;
		case 28 :	// Mini-Pong. Ping-pong game played on the OLED-screen.
			OLED_clear();
			float v = 2;																// Position of slider
			y = 2;																		// Position of ball on screen (y-axis)
			x = 1;																		// Position of ball on screen (x-axis)
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	a0 e8       	ldi	r26, 0x80	; 128
    1ff2:	bf e3       	ldi	r27, 0x3F	; 63
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	9a 83       	std	Y+2, r25	; 0x02
    1ff8:	ab 83       	std	Y+3, r26	; 0x03
    1ffa:	bc 83       	std	Y+4, r27	; 0x04
			z = 1;																		// Inverter
			w = 1;																		// Inverter
    1ffc:	4c 01       	movw	r8, r24
    1ffe:	5d 01       	movw	r10, r26
		case 28 :	// Mini-Pong. Ping-pong game played on the OLED-screen.
			OLED_clear();
			float v = 2;																// Position of slider
			y = 2;																		// Position of ball on screen (y-axis)
			x = 1;																		// Position of ball on screen (x-axis)
			z = 1;																		// Inverter
    2000:	2c 01       	movw	r4, r24
    2002:	3d 01       	movw	r6, r26
			menynummer = 1;
			break;
		case 28 :	// Mini-Pong. Ping-pong game played on the OLED-screen.
			OLED_clear();
			float v = 2;																// Position of slider
			y = 2;																		// Position of ball on screen (y-axis)
    2004:	c1 2c       	mov	r12, r1
    2006:	d1 2c       	mov	r13, r1
    2008:	76 01       	movw	r14, r12
    200a:	68 94       	set
    200c:	f6 f8       	bld	r15, 6
			x = 1;																		// Position of ball on screen (x-axis)
			z = 1;																		// Inverter
			w = 1;																		// Inverter
			counter = 0;																// Score counter
			while (menynummer == 28){
    200e:	4d c1       	rjmp	.+666    	; 0x22aa <init_menu+0x1896>
				OLED_clear();
    2010:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
				OLED_pos(7,v-2);														// Placement and print of the slider
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	50 e4       	ldi	r21, 0x40	; 64
    201c:	6d 81       	ldd	r22, Y+5	; 0x05
    201e:	7e 81       	ldd	r23, Y+6	; 0x06
    2020:	8f 81       	ldd	r24, Y+7	; 0x07
    2022:	98 85       	ldd	r25, Y+8	; 0x08
    2024:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__subsf3>
    2028:	69 87       	std	Y+9, r22	; 0x09
    202a:	7a 87       	std	Y+10, r23	; 0x0a
    202c:	8b 87       	std	Y+11, r24	; 0x0b
    202e:	9c 87       	std	Y+12, r25	; 0x0c
    2030:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__fixunssfsi>
    2034:	87 e0       	ldi	r24, 0x07	; 7
    2036:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
				OLED_print("]_`");
    203a:	85 e1       	ldi	r24, 0x15	; 21
    203c:	92 e0       	ldi	r25, 0x02	; 2
    203e:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
				OLED_pos(y,x);															// Placement and print of the ball
    2042:	69 81       	ldd	r22, Y+1	; 0x01
    2044:	7a 81       	ldd	r23, Y+2	; 0x02
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__fixunssfsi>
    204e:	36 2e       	mov	r3, r22
    2050:	c7 01       	movw	r24, r14
    2052:	b6 01       	movw	r22, r12
    2054:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <__fixunssfsi>
    2058:	86 2f       	mov	r24, r22
    205a:	63 2d       	mov	r22, r3
    205c:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
				OLED_print("~");
    2060:	82 e7       	ldi	r24, 0x72	; 114
    2062:	93 e0       	ldi	r25, 0x03	; 3
    2064:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
				OLED_pos(8,7);
    2068:	67 e0       	ldi	r22, 0x07	; 7
    206a:	88 e0       	ldi	r24, 0x08	; 8
    206c:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
				if ((y == 6)&&((round(x) == v)||(round(x) == v-1)||round(x) == v-2)){	// If the ball hits the slider, add 1 to the score.
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 ec       	ldi	r20, 0xC0	; 192
    2076:	50 e4       	ldi	r21, 0x40	; 64
    2078:	c7 01       	movw	r24, r14
    207a:	b6 01       	movw	r22, r12
    207c:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
    2080:	81 11       	cpse	r24, r1
    2082:	36 c0       	rjmp	.+108    	; 0x20f0 <init_menu+0x16dc>
    2084:	69 81       	ldd	r22, Y+1	; 0x01
    2086:	7a 81       	ldd	r23, Y+2	; 0x02
    2088:	8b 81       	ldd	r24, Y+3	; 0x03
    208a:	9c 81       	ldd	r25, Y+4	; 0x04
    208c:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <round>
    2090:	6d 87       	std	Y+13, r22	; 0x0d
    2092:	7e 87       	std	Y+14, r23	; 0x0e
    2094:	8f 87       	std	Y+15, r24	; 0x0f
    2096:	98 8b       	std	Y+16, r25	; 0x10
    2098:	9b 01       	movw	r18, r22
    209a:	ac 01       	movw	r20, r24
    209c:	6d 81       	ldd	r22, Y+5	; 0x05
    209e:	7e 81       	ldd	r23, Y+6	; 0x06
    20a0:	8f 81       	ldd	r24, Y+7	; 0x07
    20a2:	98 85       	ldd	r25, Y+8	; 0x08
    20a4:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
    20a8:	88 23       	and	r24, r24
    20aa:	01 f1       	breq	.+64     	; 0x20ec <init_menu+0x16d8>
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e8       	ldi	r20, 0x80	; 128
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	6d 81       	ldd	r22, Y+5	; 0x05
    20b6:	7e 81       	ldd	r23, Y+6	; 0x06
    20b8:	8f 81       	ldd	r24, Y+7	; 0x07
    20ba:	98 85       	ldd	r25, Y+8	; 0x08
    20bc:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__subsf3>
    20c0:	9b 01       	movw	r18, r22
    20c2:	ac 01       	movw	r20, r24
    20c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    20c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    20c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ca:	98 89       	ldd	r25, Y+16	; 0x10
    20cc:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
    20d0:	88 23       	and	r24, r24
    20d2:	61 f0       	breq	.+24     	; 0x20ec <init_menu+0x16d8>
    20d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    20d6:	3e 85       	ldd	r19, Y+14	; 0x0e
    20d8:	4f 85       	ldd	r20, Y+15	; 0x0f
    20da:	58 89       	ldd	r21, Y+16	; 0x10
    20dc:	69 85       	ldd	r22, Y+9	; 0x09
    20de:	7a 85       	ldd	r23, Y+10	; 0x0a
    20e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    20e4:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
    20e8:	81 11       	cpse	r24, r1
    20ea:	06 c0       	rjmp	.+12     	; 0x20f8 <init_menu+0x16e4>
					counter = counter + 1;
    20ec:	0f 5f       	subi	r16, 0xFF	; 255
    20ee:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				else if (y == 6){														// If the ball is on the bottom of the screen, but miss the slider, reset score
					counter = 0;
				}
				if (counter < 10){														// Cosmetic, add "00" in front of the score if it is a single digit number
    20f0:	0a 30       	cpi	r16, 0x0A	; 10
    20f2:	11 05       	cpc	r17, r1
    20f4:	44 f4       	brge	.+16     	; 0x2106 <init_menu+0x16f2>
    20f6:	02 c0       	rjmp	.+4      	; 0x20fc <init_menu+0x16e8>
				OLED_pos(8,7);
				if ((y == 6)&&((round(x) == v)||(round(x) == v-1)||round(x) == v-2)){	// If the ball hits the slider, add 1 to the score.
					counter = counter + 1;
				}
				else if (y == 6){														// If the ball is on the bottom of the screen, but miss the slider, reset score
					counter = 0;
    20f8:	00 e0       	ldi	r16, 0x00	; 0
    20fa:	10 e0       	ldi	r17, 0x00	; 0
				}
				if (counter < 10){														// Cosmetic, add "00" in front of the score if it is a single digit number
					OLED_print("00");
    20fc:	89 e1       	ldi	r24, 0x19	; 25
    20fe:	92 e0       	ldi	r25, 0x02	; 2
    2100:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    2104:	07 c0       	rjmp	.+14     	; 0x2114 <init_menu+0x1700>
				}
				else if (counter < 100){												// Cosmetic, add "0" in front of the score if it is a double digit number
    2106:	04 36       	cpi	r16, 0x64	; 100
    2108:	11 05       	cpc	r17, r1
    210a:	24 f4       	brge	.+8      	; 0x2114 <init_menu+0x1700>
					OLED_print("0");
    210c:	8a e1       	ldi	r24, 0x1A	; 26
    210e:	92 e0       	ldi	r25, 0x02	; 2
    2110:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    2114:	4a e0       	ldi	r20, 0x0A	; 10
    2116:	66 e4       	ldi	r22, 0x46	; 70
    2118:	74 e0       	ldi	r23, 0x04	; 4
    211a:	c8 01       	movw	r24, r16
    211c:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <__itoa_ncheck>
				}
				OLED_print(itoa(counter, buffer, 10));									// Print counter. itoa() converts from number to string (10 sets the decimal number system)
    2120:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
				
				x = x + z*0.25;															// Speed of ball in x-axis, z is a positive or negative number, depending on ball direction
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	40 e8       	ldi	r20, 0x80	; 128
    212a:	5e e3       	ldi	r21, 0x3E	; 62
    212c:	c3 01       	movw	r24, r6
    212e:	b2 01       	movw	r22, r4
    2130:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__mulsf3>
    2134:	9b 01       	movw	r18, r22
    2136:	ac 01       	movw	r20, r24
    2138:	69 81       	ldd	r22, Y+1	; 0x01
    213a:	7a 81       	ldd	r23, Y+2	; 0x02
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__addsf3>
    2144:	69 83       	std	Y+1, r22	; 0x01
    2146:	7a 83       	std	Y+2, r23	; 0x02
    2148:	8b 83       	std	Y+3, r24	; 0x03
    214a:	9c 83       	std	Y+4, r25	; 0x04
				y = y + w*0.5;															// Speed of ball in y-axis, w is a positive or negative number, depending on ball direction
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	c5 01       	movw	r24, r10
    2156:	b4 01       	movw	r22, r8
    2158:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <__mulsf3>
    215c:	9b 01       	movw	r18, r22
    215e:	ac 01       	movw	r20, r24
    2160:	c7 01       	movw	r24, r14
    2162:	b6 01       	movw	r22, r12
    2164:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__addsf3>
    2168:	6b 01       	movw	r12, r22
    216a:	7c 01       	movw	r14, r24
				
				if (y == 6){w = w*-1;}													// If the ball hits the bottom or top side of the screen, invert our speed-increment (*-1)
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 ec       	ldi	r20, 0xC0	; 192
    2172:	50 e4       	ldi	r21, 0x40	; 64
    2174:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
    2178:	81 11       	cpse	r24, r1
    217a:	05 c0       	rjmp	.+10     	; 0x2186 <init_menu+0x1772>
    217c:	b7 fa       	bst	r11, 7
    217e:	b0 94       	com	r11
    2180:	b7 f8       	bld	r11, 7
    2182:	b0 94       	com	r11
    2184:	0e c0       	rjmp	.+28     	; 0x21a2 <init_menu+0x178e>
				if (y == 2){w = w*-1;}													
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	50 e4       	ldi	r21, 0x40	; 64
    218e:	c7 01       	movw	r24, r14
    2190:	b6 01       	movw	r22, r12
    2192:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
    2196:	81 11       	cpse	r24, r1
    2198:	04 c0       	rjmp	.+8      	; 0x21a2 <init_menu+0x178e>
    219a:	b7 fa       	bst	r11, 7
    219c:	b0 94       	com	r11
    219e:	b7 f8       	bld	r11, 7
    21a0:	b0 94       	com	r11
				if (x == 15){z = z*-1;}													// If the ball hits one of the sides of the screen, invert our speed increment (*-1)
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e7       	ldi	r20, 0x70	; 112
    21a8:	51 e4       	ldi	r21, 0x41	; 65
    21aa:	69 81       	ldd	r22, Y+1	; 0x01
    21ac:	7a 81       	ldd	r23, Y+2	; 0x02
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
    21b6:	81 11       	cpse	r24, r1
    21b8:	05 c0       	rjmp	.+10     	; 0x21c4 <init_menu+0x17b0>
    21ba:	77 fa       	bst	r7, 7
    21bc:	70 94       	com	r7
    21be:	77 f8       	bld	r7, 7
    21c0:	70 94       	com	r7
    21c2:	0f c0       	rjmp	.+30     	; 0x21e2 <init_menu+0x17ce>
				if (x == 0){z = z*-1;}
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	a9 01       	movw	r20, r18
    21ca:	69 81       	ldd	r22, Y+1	; 0x01
    21cc:	7a 81       	ldd	r23, Y+2	; 0x02
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
    21d6:	81 11       	cpse	r24, r1
    21d8:	04 c0       	rjmp	.+8      	; 0x21e2 <init_menu+0x17ce>
    21da:	77 fa       	bst	r7, 7
    21dc:	70 94       	com	r7
    21de:	77 f8       	bld	r7, 7
    21e0:	70 94       	com	r7
				joy_pos = JOY_getDirection();
    21e2:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    21e6:	60 93 3e 04 	sts	0x043E, r22	; 0x80043e <joy_pos>
    21ea:	70 93 3f 04 	sts	0x043F, r23	; 0x80043f <joy_pos+0x1>
    21ee:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <joy_pos+0x2>
    21f2:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <joy_pos+0x3>
				int timer = 250/vanskelighetsgrad;
				my_delay_ms(timer);														// Game speed
    21f6:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <vanskelighetsgrad>
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	8a ef       	ldi	r24, 0xFA	; 250
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <__divmodhi4>
    2204:	cb 01       	movw	r24, r22
    2206:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <my_delay_ms>
				if (joy_pos.sidedir == 1){												// Moving the joystick to the right moves the slider to the left
    220a:	80 91 41 04 	lds	r24, 0x0441	; 0x800441 <joy_pos+0x3>
    220e:	81 30       	cpi	r24, 0x01	; 1
    2210:	f9 f4       	brne	.+62     	; 0x2250 <init_menu+0x183c>
					v = v + 1;
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	6d 81       	ldd	r22, Y+5	; 0x05
    221c:	7e 81       	ldd	r23, Y+6	; 0x06
    221e:	8f 81       	ldd	r24, Y+7	; 0x07
    2220:	98 85       	ldd	r25, Y+8	; 0x08
    2222:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__addsf3>
    2226:	6d 83       	std	Y+5, r22	; 0x05
    2228:	7e 83       	std	Y+6, r23	; 0x06
    222a:	8f 83       	std	Y+7, r24	; 0x07
    222c:	98 87       	std	Y+8, r25	; 0x08
					if (v > 15){														// Make sure joystick doesent move out of the screen
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e7       	ldi	r20, 0x70	; 112
    2234:	51 e4       	ldi	r21, 0x41	; 65
    2236:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__gesf2>
    223a:	18 16       	cp	r1, r24
    223c:	b4 f5       	brge	.+108    	; 0x22aa <init_menu+0x1896>
						v = 15;
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 e7       	ldi	r26, 0x70	; 112
    2244:	b1 e4       	ldi	r27, 0x41	; 65
    2246:	8d 83       	std	Y+5, r24	; 0x05
    2248:	9e 83       	std	Y+6, r25	; 0x06
    224a:	af 83       	std	Y+7, r26	; 0x07
    224c:	b8 87       	std	Y+8, r27	; 0x08
    224e:	2d c0       	rjmp	.+90     	; 0x22aa <init_menu+0x1896>
					}				}
				else if (joy_pos.sidedir == 2){
    2250:	82 30       	cpi	r24, 0x02	; 2
    2252:	f9 f4       	brne	.+62     	; 0x2292 <init_menu+0x187e>
					v = v - 1;
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	6d 81       	ldd	r22, Y+5	; 0x05
    225e:	7e 81       	ldd	r23, Y+6	; 0x06
    2260:	8f 81       	ldd	r24, Y+7	; 0x07
    2262:	98 85       	ldd	r25, Y+8	; 0x08
    2264:	0e 94 93 15 	call	0x2b26	; 0x2b26 <__subsf3>
    2268:	6d 83       	std	Y+5, r22	; 0x05
    226a:	7e 83       	std	Y+6, r23	; 0x06
    226c:	8f 83       	std	Y+7, r24	; 0x07
    226e:	98 87       	std	Y+8, r25	; 0x08
					if (v < 1){
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__cmpsf2>
    227c:	88 23       	and	r24, r24
    227e:	ac f4       	brge	.+42     	; 0x22aa <init_menu+0x1896>
						v = 1;
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a0 e8       	ldi	r26, 0x80	; 128
    2286:	bf e3       	ldi	r27, 0x3F	; 63
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	af 83       	std	Y+7, r26	; 0x07
    228e:	b8 87       	std	Y+8, r27	; 0x08
    2290:	0c c0       	rjmp	.+24     	; 0x22aa <init_menu+0x1896>
					}
				}
				else if (joy_button(1) == 0){											// If button is pressed, exit game and return to main menu
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    229a:	89 2b       	or	r24, r25
    229c:	31 f4       	brne	.+12     	; 0x22aa <init_menu+0x1896>
					menynummer = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    22a6:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
			y = 2;																		// Position of ball on screen (y-axis)
			x = 1;																		// Position of ball on screen (x-axis)
			z = 1;																		// Inverter
			w = 1;																		// Inverter
			counter = 0;																// Score counter
			while (menynummer == 28){
    22aa:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <menynummer>
    22ae:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <menynummer+0x1>
    22b2:	4c 97       	sbiw	r24, 0x1c	; 28
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <init_menu+0x18a4>
    22b6:	ac ce       	rjmp	.-680    	; 0x2010 <init_menu+0x15fc>
				}
			}
			break;
	}
return gamestep;
    22b8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <gamestep>
    22bc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <gamestep+0x1>
    22c0:	60 96       	adiw	r28, 0x10	; 16
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	de bf       	out	0x3e, r29	; 62
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	cd bf       	out	0x3d, r28	; 61
    22cc:	df 91       	pop	r29
    22ce:	cf 91       	pop	r28
    22d0:	1f 91       	pop	r17
    22d2:	0f 91       	pop	r16
    22d4:	ff 90       	pop	r15
    22d6:	ef 90       	pop	r14
    22d8:	df 90       	pop	r13
    22da:	cf 90       	pop	r12
    22dc:	bf 90       	pop	r11
    22de:	af 90       	pop	r10
    22e0:	9f 90       	pop	r9
    22e2:	8f 90       	pop	r8
    22e4:	7f 90       	pop	r7
    22e6:	6f 90       	pop	r6
    22e8:	5f 90       	pop	r5
    22ea:	4f 90       	pop	r4
    22ec:	3f 90       	pop	r3
    22ee:	2f 90       	pop	r2
    22f0:	08 95       	ret

000022f2 <OLED_home>:
}

//function that returns the OLED to its start-state
int OLED_home(void) {
	//Reset the page and column
	page = 0;
    22f2:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <page>
	col = 0;
    22f6:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <col>
	*OLED_cmd =0xD3; 	
    22fa:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    22fe:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2302:	83 ed       	ldi	r24, 0xD3	; 211
    2304:	80 83       	st	Z, r24
	*OLED_cmd = 0b11001000;
    2306:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    230a:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    230e:	88 ec       	ldi	r24, 0xC8	; 200
    2310:	80 83       	st	Z, r24
	//Set the cursor to the start of the screen
	*OLED_cmd = 0x21;
    2312:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2316:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    231a:	81 e2       	ldi	r24, 0x21	; 33
    231c:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
    231e:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2322:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2326:	10 82       	st	Z, r1
	*OLED_cmd = 0x7f;
    2328:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    232c:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2330:	8f e7       	ldi	r24, 0x7F	; 127
    2332:	80 83       	st	Z, r24
		
	*OLED_cmd = 0x22;
    2334:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2338:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    233c:	82 e2       	ldi	r24, 0x22	; 34
    233e:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
    2340:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2344:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2348:	10 82       	st	Z, r1
	*OLED_cmd = 0x7;
    234a:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    234e:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2352:	87 e0       	ldi	r24, 0x07	; 7
    2354:	80 83       	st	Z, r24
		
 	return 0;
 }
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	08 95       	ret

0000235c <OLED_goto_line>:
 
//function that lets us go to the specified line on the OLED 
int OLED_goto_line(uint8_t line) {
    235c:	cf 93       	push	r28
    235e:	c8 2f       	mov	r28, r24
	OLED_home();
    2360:	0e 94 79 11 	call	0x22f2	; 0x22f2 <OLED_home>
	
	//Check if it's a valid page
	if (line < 8) {
    2364:	c8 30       	cpi	r28, 0x08	; 8
    2366:	98 f4       	brcc	.+38     	; 0x238e <OLED_goto_line+0x32>
		//Save the page we are moving to
		page = line;
    2368:	c0 93 3d 04 	sts	0x043D, r28	; 0x80043d <page>
		//Set lower column address
		*OLED_cmd = 0x00;
    236c:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2370:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2374:	10 82       	st	Z, r1
		//Set higher column address
		*OLED_cmd = 0x10;
    2376:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    237a:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    237e:	80 e1       	ldi	r24, 0x10	; 16
    2380:	80 83       	st	Z, r24
		//Set page address
		*OLED_cmd = 0xB0 | line;
    2382:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2386:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    238a:	c0 6b       	ori	r28, 0xB0	; 176
    238c:	c0 83       	st	Z, r28
	}
 
 	return 0;
 }
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <OLED_pos>:

//function that lets us define a specific position on the OLED
int OLED_pos(uint8_t line, uint8_t column) {
    2396:	cf 93       	push	r28
    2398:	c6 2f       	mov	r28, r22
	OLED_goto_line(line);
    239a:	0e 94 ae 11 	call	0x235c	; 0x235c <OLED_goto_line>
	
	//Check if it's a valid column according to the font
	if (column < (128/FONTWIDTH)) {
    239e:	c0 31       	cpi	r28, 0x10	; 16
    23a0:	98 f4       	brcc	.+38     	; 0x23c8 <OLED_pos+0x32>
		//Save the column we are moving to
		col = column*FONTWIDTH;
    23a2:	8c 2f       	mov	r24, r28
    23a4:	88 0f       	add	r24, r24
    23a6:	88 0f       	add	r24, r24
    23a8:	88 0f       	add	r24, r24
    23aa:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <col>
		//Set lower column start address
		//*OLED_cmd = 0x00 + (column*(FONTWIDTH)<<4);
		//Set higher column start address
		*OLED_cmd = 0X0F & col;
    23ae:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    23b2:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    23b6:	8f 70       	andi	r24, 0x0F	; 15
    23b8:	80 83       	st	Z, r24
		*OLED_cmd = 0x10 | (column*(FONTWIDTH)>>4);
    23ba:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    23be:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    23c2:	c0 62       	ori	r28, 0x20	; 32
    23c4:	c6 95       	lsr	r28
    23c6:	c0 83       	st	Z, r28
	}
	
	return 0;
}
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	cf 91       	pop	r28
    23ce:	08 95       	ret

000023d0 <OLED_clear_line>:


//function that clears a line
int OLED_clear_line(uint8_t line) {
	OLED_goto_line(line);
    23d0:	0e 94 ae 11 	call	0x235c	; 0x235c <OLED_goto_line>
    23d4:	80 e8       	ldi	r24, 0x80	; 128
    23d6:	90 e0       	ldi	r25, 0x00	; 0
	
	//Clear the page
	for (int i = 0; i < 128; i++) {
		*OLED_data=0x00;
    23d8:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_data>
    23dc:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_data+0x1>
    23e0:	10 82       	st	Z, r1
    23e2:	01 97       	sbiw	r24, 0x01	; 1
//function that clears a line
int OLED_clear_line(uint8_t line) {
	OLED_goto_line(line);
	
	//Clear the page
	for (int i = 0; i < 128; i++) {
    23e4:	c9 f7       	brne	.-14     	; 0x23d8 <OLED_clear_line+0x8>
		*OLED_data=0x00;
	}
	
	OLED_home();
    23e6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <OLED_home>
	
	return 0;
}
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	08 95       	ret

000023f0 <OLED_clear>:

//function that clears everything that is on the OLED
int OLED_clear(void) {
    23f0:	cf 93       	push	r28
    23f2:	c0 e0       	ldi	r28, 0x00	; 0
	//Clear every page
	for (int k = 0; k < 8; k++) {
		OLED_clear_line(k);
    23f4:	8c 2f       	mov	r24, r28
    23f6:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <OLED_clear_line>
    23fa:	cf 5f       	subi	r28, 0xFF	; 255
}

//function that clears everything that is on the OLED
int OLED_clear(void) {
	//Clear every page
	for (int k = 0; k < 8; k++) {
    23fc:	c8 30       	cpi	r28, 0x08	; 8
    23fe:	d1 f7       	brne	.-12     	; 0x23f4 <OLED_clear+0x4>
		OLED_clear_line(k);
	}
	
	return 0;
}
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	cf 91       	pop	r28
    2406:	08 95       	ret

00002408 <OLED_init>:
extern menynummer;

//function to set up the OLED
int OLED_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
    2408:	85 b7       	in	r24, 0x35	; 53
    240a:	80 68       	ori	r24, 0x80	; 128
    240c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    240e:	80 b7       	in	r24, 0x30	; 48
    2410:	80 62       	ori	r24, 0x20	; 32
    2412:	80 bf       	out	0x30, r24	; 48

	//Setup the OLED display
	
	//display off
	*OLED_cmd = 0xAE;
    2414:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2418:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    241c:	8e ea       	ldi	r24, 0xAE	; 174
    241e:	80 83       	st	Z, r24
	//segment remap
	*OLED_cmd = 0xA1;
    2420:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2424:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2428:	81 ea       	ldi	r24, 0xA1	; 161
    242a:	80 83       	st	Z, r24
	
	//common pads hardware: alternative
	*OLED_cmd = 0xDA;
    242c:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2430:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2434:	8a ed       	ldi	r24, 0xDA	; 218
    2436:	80 83       	st	Z, r24
	*OLED_cmd = 0x12;
    2438:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    243c:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2440:	82 e1       	ldi	r24, 0x12	; 18
    2442:	80 83       	st	Z, r24
	
	//common output scan direction:com63~com0
	*OLED_cmd = 0xC8;
    2444:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2448:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    244c:	88 ec       	ldi	r24, 0xC8	; 200
    244e:	80 83       	st	Z, r24

	//multiplex ration mode:63
	*OLED_cmd = 0xA8;
    2450:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2454:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2458:	88 ea       	ldi	r24, 0xA8	; 168
    245a:	80 83       	st	Z, r24
	*OLED_cmd = 0x3F;
    245c:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2460:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2464:	8f e3       	ldi	r24, 0x3F	; 63
    2466:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_cmd = 0xD5;
    2468:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    246c:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2470:	85 ed       	ldi	r24, 0xD5	; 213
    2472:	80 83       	st	Z, r24
	*OLED_cmd = 0x80;
    2474:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2478:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    247c:	80 e8       	ldi	r24, 0x80	; 128
    247e:	80 83       	st	Z, r24

	//contrast control
	*OLED_cmd = 0x81;
    2480:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2484:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2488:	81 e8       	ldi	r24, 0x81	; 129
    248a:	80 83       	st	Z, r24
	*OLED_cmd = 0x50;
    248c:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2490:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2494:	80 e5       	ldi	r24, 0x50	; 80
    2496:	80 83       	st	Z, r24

	//set pre-charge period
	*OLED_cmd = 0xD9;
    2498:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    249c:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    24a0:	89 ed       	ldi	r24, 0xD9	; 217
    24a2:	80 83       	st	Z, r24
	*OLED_cmd = 0x21;
    24a4:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    24a8:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    24ac:	81 e2       	ldi	r24, 0x21	; 33
    24ae:	80 83       	st	Z, r24

	//set Memory Addressing Mode
	*OLED_cmd = 0x20;
    24b0:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    24b4:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    24b8:	80 e2       	ldi	r24, 0x20	; 32
    24ba:	80 83       	st	Z, r24
	*OLED_cmd = 0x02;
    24bc:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    24c0:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    24c4:	82 e0       	ldi	r24, 0x02	; 2
    24c6:	80 83       	st	Z, r24

	//VCOM deselect level mode
	*OLED_cmd = 0xDB;
    24c8:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    24cc:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    24d0:	8b ed       	ldi	r24, 0xDB	; 219
    24d2:	80 83       	st	Z, r24
	*OLED_cmd = 0x30;
    24d4:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    24d8:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    24dc:	80 e3       	ldi	r24, 0x30	; 48
    24de:	80 83       	st	Z, r24

	//master configuration
	*OLED_cmd = 0xAD;
    24e0:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    24e4:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    24e8:	8d ea       	ldi	r24, 0xAD	; 173
    24ea:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
    24ec:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    24f0:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    24f4:	10 82       	st	Z, r1

	//out follows RAM content
	*OLED_cmd = 0xA4;
    24f6:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    24fa:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    24fe:	84 ea       	ldi	r24, 0xA4	; 164
    2500:	80 83       	st	Z, r24

	//set normal display
	*OLED_cmd = 0xA6;
    2502:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2506:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    250a:	86 ea       	ldi	r24, 0xA6	; 166
    250c:	80 83       	st	Z, r24
	//display on
	*OLED_cmd = 0xAF;
    250e:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2512:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2516:	8f ea       	ldi	r24, 0xAF	; 175
    2518:	80 83       	st	Z, r24
	
	//Set page start address
	*OLED_cmd = 0xB0;
    251a:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    251e:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2522:	80 eb       	ldi	r24, 0xB0	; 176
    2524:	80 83       	st	Z, r24
	//Set lower column start address
	*OLED_cmd = 0x00;
    2526:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    252a:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    252e:	10 82       	st	Z, r1
	//Set higher column start address
	*OLED_cmd = 0x10;
    2530:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <OLED_cmd>
    2534:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <OLED_cmd+0x1>
    2538:	80 e1       	ldi	r24, 0x10	; 16
    253a:	80 83       	st	Z, r24
	
	//Clear the display
	OLED_clear();
    253c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
	OLED_home();
    2540:	0e 94 79 11 	call	0x22f2	; 0x22f2 <OLED_home>

	return 0;
}
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	08 95       	ret

0000254a <OLED_print_char>:
	
	return 0;
}

// function that lets us print characters defined by the defined
int OLED_print_char(char c) {
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	f9 01       	movw	r30, r18
    2550:	ee 0f       	add	r30, r30
    2552:	ff 1f       	adc	r31, r31
    2554:	ee 0f       	add	r30, r30
    2556:	ff 1f       	adc	r31, r31
    2558:	ee 0f       	add	r30, r30
    255a:	ff 1f       	adc	r31, r31
    255c:	e6 55       	subi	r30, 0x56	; 86
    255e:	f0 40       	sbci	r31, 0x00	; 0
    2560:	22 0f       	add	r18, r18
    2562:	33 1f       	adc	r19, r19
    2564:	22 0f       	add	r18, r18
    2566:	33 1f       	adc	r19, r19
    2568:	22 0f       	add	r18, r18
    256a:	33 1f       	adc	r19, r19
    256c:	2e 54       	subi	r18, 0x4E	; 78
    256e:	30 40       	sbci	r19, 0x00	; 0
	//Write the complete character
	for (int i = 0; i < FONTWIDTH; i++) {
		*OLED_data = pgm_read_byte(&font[c-' '][i]);
    2570:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <OLED_data>
    2574:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <OLED_data+0x1>
    2578:	94 91       	lpm	r25, Z
    257a:	9c 93       	st	X, r25
    257c:	31 96       	adiw	r30, 0x01	; 1
}

// function that lets us print characters defined by the defined
int OLED_print_char(char c) {
	//Write the complete character
	for (int i = 0; i < FONTWIDTH; i++) {
    257e:	e2 17       	cp	r30, r18
    2580:	f3 07       	cpc	r31, r19
    2582:	b1 f7       	brne	.-20     	; 0x2570 <OLED_print_char+0x26>
		*OLED_data = pgm_read_byte(&font[c-' '][i]);
	}
	
	return 0;
}
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	08 95       	ret

0000258a <OLED_print>:


//writes a complete string, with the use of the print char function
int OLED_print(char *data) {
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	ec 01       	movw	r28, r24
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
    2590:	88 81       	ld	r24, Y
    2592:	88 23       	and	r24, r24
    2594:	31 f0       	breq	.+12     	; 0x25a2 <OLED_print+0x18>
    2596:	21 96       	adiw	r28, 0x01	; 1
		OLED_print_char(data[i]);
    2598:	0e 94 a5 12 	call	0x254a	; 0x254a <OLED_print_char>
//writes a complete string, with the use of the print char function
int OLED_print(char *data) {
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
    259c:	89 91       	ld	r24, Y+
    259e:	81 11       	cpse	r24, r1
    25a0:	fb cf       	rjmp	.-10     	; 0x2598 <OLED_print+0xe>
		OLED_print_char(data[i]);
		i++;
	}
	
	return 0;
}
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	08 95       	ret

000025ac <OLED_nameprompt>:

int OLED_nameprompt(void){			// Prompt the user for their name (four letters) after reaching a score larger then third highest score
    25ac:	6f 92       	push	r6
    25ae:	7f 92       	push	r7
    25b0:	8f 92       	push	r8
    25b2:	9f 92       	push	r9
    25b4:	af 92       	push	r10
    25b6:	bf 92       	push	r11
    25b8:	cf 92       	push	r12
    25ba:	df 92       	push	r13
    25bc:	ef 92       	push	r14
    25be:	ff 92       	push	r15
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	ea 97       	sbiw	r28, 0x3a	; 58
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
	OLED_clear();
    25d8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
	OLED_pos(2,1);
    25dc:	61 e0       	ldi	r22, 0x01	; 1
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
	OLED_print("New Highscore!");
    25e4:	84 e4       	ldi	r24, 0x44	; 68
    25e6:	93 e0       	ldi	r25, 0x03	; 3
    25e8:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
	OLED_pos(3,3);
    25ec:	63 e0       	ldi	r22, 0x03	; 3
    25ee:	83 e0       	ldi	r24, 0x03	; 3
    25f0:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
	OLED_print("Type name:");
    25f4:	83 e5       	ldi	r24, 0x53	; 83
    25f6:	93 e0       	ldi	r25, 0x03	; 3
    25f8:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
	OLED_pos(6,6);
    25fc:	66 e0       	ldi	r22, 0x06	; 6
    25fe:	86 e0       	ldi	r24, 0x06	; 6
    2600:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
	OLED_print("^^^^");
    2604:	8e e5       	ldi	r24, 0x5E	; 94
    2606:	93 e0       	ldi	r25, 0x03	; 3
    2608:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
	char* characterstring[25] = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"};
    260c:	82 e3       	ldi	r24, 0x32	; 50
    260e:	e9 e2       	ldi	r30, 0x29	; 41
    2610:	f1 e0       	ldi	r31, 0x01	; 1
    2612:	de 01       	movw	r26, r28
    2614:	11 96       	adiw	r26, 0x01	; 1
    2616:	01 90       	ld	r0, Z+
    2618:	0d 92       	st	X+, r0
    261a:	8a 95       	dec	r24
    261c:	e1 f7       	brne	.-8      	; 0x2616 <OLED_nameprompt+0x6a>
	char* endstr[4] = {".", ".", ".", "."};
    261e:	88 e0       	ldi	r24, 0x08	; 8
    2620:	eb e5       	ldi	r30, 0x5B	; 91
    2622:	f1 e0       	ldi	r31, 0x01	; 1
    2624:	de 01       	movw	r26, r28
    2626:	d3 96       	adiw	r26, 0x33	; 51
    2628:	01 90       	ld	r0, Z+
    262a:	0d 92       	st	X+, r0
    262c:	8a 95       	dec	r24
    262e:	e1 f7       	brne	.-8      	; 0x2628 <OLED_nameprompt+0x7c>
    2630:	4e 01       	movw	r8, r28
    2632:	23 e3       	ldi	r18, 0x33	; 51
    2634:	82 0e       	add	r8, r18
    2636:	91 1c       	adc	r9, r1
    2638:	64 01       	movw	r12, r8
    263a:	0f 2e       	mov	r0, r31
    263c:	f6 e0       	ldi	r31, 0x06	; 6
    263e:	6f 2e       	mov	r6, r31
    2640:	f0 2d       	mov	r31, r0
	int positions[4];
	int stopflag = 0;
	joy_position joy_pos;
	slider_position slider_pos;
	for (int i = 0; i < 4; i++){					// Repeat four times, once for each character in the name
    2642:	a1 2c       	mov	r10, r1
    2644:	b1 2c       	mov	r11, r1
    2646:	84 c0       	rjmp	.+264    	; 0x2750 <OLED_nameprompt+0x1a4>
		for (int j = 0; j < 30;){					// Search "characterstring" by moving the joystick up and down, incrementing the position in the string and printing 
			OLED_clear_line(5);						// the corresponding letter on the screen
    2648:	85 e0       	ldi	r24, 0x05	; 5
    264a:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <OLED_clear_line>
			for (int k = 0; k < i; k++){			// Print the previously chosen letters in front of the current letter we are choosing 
    264e:	1a 14       	cp	r1, r10
    2650:	1b 04       	cpc	r1, r11
    2652:	9c f4       	brge	.+38     	; 0x267a <OLED_nameprompt+0xce>
    2654:	84 01       	movw	r16, r8
    2656:	0f 2e       	mov	r0, r31
    2658:	f6 e0       	ldi	r31, 0x06	; 6
    265a:	7f 2e       	mov	r7, r31
    265c:	f0 2d       	mov	r31, r0
				OLED_pos(5,6+k);
    265e:	67 2d       	mov	r22, r7
    2660:	85 e0       	ldi	r24, 0x05	; 5
    2662:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
				OLED_print(endstr[k]);
    2666:	f8 01       	movw	r30, r16
    2668:	81 91       	ld	r24, Z+
    266a:	91 91       	ld	r25, Z+
    266c:	8f 01       	movw	r16, r30
    266e:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    2672:	73 94       	inc	r7
	joy_position joy_pos;
	slider_position slider_pos;
	for (int i = 0; i < 4; i++){					// Repeat four times, once for each character in the name
		for (int j = 0; j < 30;){					// Search "characterstring" by moving the joystick up and down, incrementing the position in the string and printing 
			OLED_clear_line(5);						// the corresponding letter on the screen
			for (int k = 0; k < i; k++){			// Print the previously chosen letters in front of the current letter we are choosing 
    2674:	0c 15       	cp	r16, r12
    2676:	1d 05       	cpc	r17, r13
    2678:	91 f7       	brne	.-28     	; 0x265e <OLED_nameprompt+0xb2>
				OLED_pos(5,6+k);
				OLED_print(endstr[k]);
			}
			OLED_pos(5,6+i);
    267a:	66 2d       	mov	r22, r6
    267c:	85 e0       	ldi	r24, 0x05	; 5
    267e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print(characterstring[j]);
    2682:	f7 01       	movw	r30, r14
    2684:	ee 0f       	add	r30, r30
    2686:	ff 1f       	adc	r31, r31
    2688:	21 e0       	ldi	r18, 0x01	; 1
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	2c 0f       	add	r18, r28
    268e:	3d 1f       	adc	r19, r29
    2690:	e2 0f       	add	r30, r18
    2692:	f3 1f       	adc	r31, r19
    2694:	80 81       	ld	r24, Z
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			joy_pos = JOY_getDirection();
    269c:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
    26a0:	3f ed       	ldi	r19, 0xDF	; 223
    26a2:	42 e2       	ldi	r20, 0x22	; 34
    26a4:	e2 e0       	ldi	r30, 0x02	; 2
    26a6:	31 50       	subi	r19, 0x01	; 1
    26a8:	40 40       	sbci	r20, 0x00	; 0
    26aa:	e0 40       	sbci	r30, 0x00	; 0
    26ac:	e1 f7       	brne	.-8      	; 0x26a6 <OLED_nameprompt+0xfa>
    26ae:	00 c0       	rjmp	.+0      	; 0x26b0 <OLED_nameprompt+0x104>
    26b0:	00 00       	nop
			_delay_ms(700);
			if (joy_pos.dir == 1){					// Increment array when moving the joystick up
    26b2:	81 30       	cpi	r24, 0x01	; 1
    26b4:	21 f4       	brne	.+8      	; 0x26be <OLED_nameprompt+0x112>
				j = j + 1;
    26b6:	ff ef       	ldi	r31, 0xFF	; 255
    26b8:	ef 1a       	sub	r14, r31
    26ba:	ff 0a       	sbc	r15, r31
    26bc:	05 c0       	rjmp	.+10     	; 0x26c8 <OLED_nameprompt+0x11c>
			}
			else if (joy_pos.dir == 2){				// Decrement array when moving the joystick down 
    26be:	82 30       	cpi	r24, 0x02	; 2
    26c0:	19 f4       	brne	.+6      	; 0x26c8 <OLED_nameprompt+0x11c>
				j = j - 1;
    26c2:	21 e0       	ldi	r18, 0x01	; 1
    26c4:	e2 1a       	sub	r14, r18
    26c6:	f1 08       	sbc	r15, r1
			}
			if (j > 25){							// Make the array cyclic. Moving further then the last letter we return to the first letter.
    26c8:	3a e1       	ldi	r19, 0x1A	; 26
    26ca:	e3 16       	cp	r14, r19
    26cc:	f1 04       	cpc	r15, r1
    26ce:	0c f0       	brlt	.+2      	; 0x26d2 <OLED_nameprompt+0x126>
    26d0:	65 c0       	rjmp	.+202    	; 0x279c <OLED_nameprompt+0x1f0>
				j = 0;
			}
			else if (j < 0){						// Moving lower then the first letter we move to the last letter in the array. 
    26d2:	ff 20       	and	r15, r15
    26d4:	0c f4       	brge	.+2      	; 0x26d8 <OLED_nameprompt+0x12c>
    26d6:	65 c0       	rjmp	.+202    	; 0x27a2 <OLED_nameprompt+0x1f6>
				j = 25;
			}
			else if (joy_pos.sidedir == 1){			// "Select" character by moving our joystick to the right, breaking the for-loop and move to choosing the next character
    26d8:	91 30       	cpi	r25, 0x01	; 1
    26da:	71 f4       	brne	.+28     	; 0x26f8 <OLED_nameprompt+0x14c>
				positions[i] = j;
				endstr[i] = characterstring[positions[i]];
    26dc:	ee 0c       	add	r14, r14
    26de:	ff 1c       	adc	r15, r15
    26e0:	e1 e0       	ldi	r30, 0x01	; 1
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	ec 0f       	add	r30, r28
    26e6:	fd 1f       	adc	r31, r29
    26e8:	ee 0d       	add	r30, r14
    26ea:	ff 1d       	adc	r31, r15
    26ec:	80 81       	ld	r24, Z
    26ee:	91 81       	ldd	r25, Z+1	; 0x01
    26f0:	f6 01       	movw	r30, r12
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
				break;
    26f6:	22 c0       	rjmp	.+68     	; 0x273c <OLED_nameprompt+0x190>
			}
			else if (joy_button(1) == 0){			// Exit the function when done selecting name by pressing the button. 
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    2700:	89 2b       	or	r24, r25
    2702:	b9 f4       	brne	.+46     	; 0x2732 <OLED_nameprompt+0x186>
				stopflag = 1;
				positions[i] = j;
				endstr[i] = characterstring[positions[i]];
    2704:	aa 0c       	add	r10, r10
    2706:	bb 1c       	adc	r11, r11
    2708:	a1 e0       	ldi	r26, 0x01	; 1
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	ac 0f       	add	r26, r28
    270e:	bd 1f       	adc	r27, r29
    2710:	aa 0d       	add	r26, r10
    2712:	bb 1d       	adc	r27, r11
    2714:	ee 0c       	add	r14, r14
    2716:	ff 1c       	adc	r15, r15
    2718:	e1 e0       	ldi	r30, 0x01	; 1
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	ec 0f       	add	r30, r28
    271e:	fd 1f       	adc	r31, r29
    2720:	ee 0d       	add	r30, r14
    2722:	ff 1d       	adc	r31, r15
    2724:	80 81       	ld	r24, Z
    2726:	91 81       	ldd	r25, Z+1	; 0x01
    2728:	d3 96       	adiw	r26, 0x33	; 51
    272a:	9c 93       	st	X, r25
    272c:	8e 93       	st	-X, r24
    272e:	d2 97       	sbiw	r26, 0x32	; 50
    2730:	12 c0       	rjmp	.+36     	; 0x2756 <OLED_nameprompt+0x1aa>
	int positions[4];
	int stopflag = 0;
	joy_position joy_pos;
	slider_position slider_pos;
	for (int i = 0; i < 4; i++){					// Repeat four times, once for each character in the name
		for (int j = 0; j < 30;){					// Search "characterstring" by moving the joystick up and down, incrementing the position in the string and printing 
    2732:	fe e1       	ldi	r31, 0x1E	; 30
    2734:	ef 16       	cp	r14, r31
    2736:	f1 04       	cpc	r15, r1
    2738:	0c f4       	brge	.+2      	; 0x273c <OLED_nameprompt+0x190>
    273a:	86 cf       	rjmp	.-244    	; 0x2648 <OLED_nameprompt+0x9c>
	char* endstr[4] = {".", ".", ".", "."};
	int positions[4];
	int stopflag = 0;
	joy_position joy_pos;
	slider_position slider_pos;
	for (int i = 0; i < 4; i++){					// Repeat four times, once for each character in the name
    273c:	2f ef       	ldi	r18, 0xFF	; 255
    273e:	a2 1a       	sub	r10, r18
    2740:	b2 0a       	sbc	r11, r18
    2742:	32 e0       	ldi	r19, 0x02	; 2
    2744:	c3 0e       	add	r12, r19
    2746:	d1 1c       	adc	r13, r1
    2748:	63 94       	inc	r6
    274a:	4a e0       	ldi	r20, 0x0A	; 10
    274c:	64 16       	cp	r6, r20
    274e:	19 f0       	breq	.+6      	; 0x2756 <OLED_nameprompt+0x1aa>
	}
	
	return 0;
}

int OLED_nameprompt(void){			// Prompt the user for their name (four letters) after reaching a score larger then third highest score
    2750:	e1 2c       	mov	r14, r1
    2752:	f1 2c       	mov	r15, r1
    2754:	79 cf       	rjmp	.-270    	; 0x2648 <OLED_nameprompt+0x9c>
		}
		if (stopflag == 1){
			break;
		}
	}
	OLED_clear();
    2756:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
	OLED_pos(3,2);
    275a:	62 e0       	ldi	r22, 0x02	; 2
    275c:	83 e0       	ldi	r24, 0x03	; 3
    275e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
	OLED_print("Well played,");
    2762:	83 e6       	ldi	r24, 0x63	; 99
    2764:	93 e0       	ldi	r25, 0x03	; 3
    2766:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
	OLED_pos(6,4);
    276a:	64 e0       	ldi	r22, 0x04	; 4
    276c:	86 e0       	ldi	r24, 0x06	; 6
    276e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
	OLED_print("~");
    2772:	82 e7       	ldi	r24, 0x72	; 114
    2774:	93 e0       	ldi	r25, 0x03	; 3
    2776:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
	OLED_pos(6,6);
    277a:	66 e0       	ldi	r22, 0x06	; 6
    277c:	86 e0       	ldi	r24, 0x06	; 6
    277e:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
    2782:	8e 01       	movw	r16, r28
    2784:	05 5c       	subi	r16, 0xC5	; 197
    2786:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 4; i++){
		OLED_print(endstr[i]);
    2788:	f4 01       	movw	r30, r8
    278a:	81 91       	ld	r24, Z+
    278c:	91 91       	ld	r25, Z+
    278e:	4f 01       	movw	r8, r30
    2790:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
	OLED_pos(3,2);
	OLED_print("Well played,");
	OLED_pos(6,4);
	OLED_print("~");
	OLED_pos(6,6);
	for (int i = 0; i < 4; i++){
    2794:	08 15       	cp	r16, r8
    2796:	19 05       	cpc	r17, r9
    2798:	b9 f7       	brne	.-18     	; 0x2788 <OLED_nameprompt+0x1dc>
    279a:	09 c0       	rjmp	.+18     	; 0x27ae <OLED_nameprompt+0x202>
			}
			else if (joy_pos.dir == 2){				// Decrement array when moving the joystick down 
				j = j - 1;
			}
			if (j > 25){							// Make the array cyclic. Moving further then the last letter we return to the first letter.
				j = 0;
    279c:	e1 2c       	mov	r14, r1
    279e:	f1 2c       	mov	r15, r1
    27a0:	53 cf       	rjmp	.-346    	; 0x2648 <OLED_nameprompt+0x9c>
			}
			else if (j < 0){						// Moving lower then the first letter we move to the last letter in the array. 
				j = 25;
    27a2:	0f 2e       	mov	r0, r31
    27a4:	f9 e1       	ldi	r31, 0x19	; 25
    27a6:	ef 2e       	mov	r14, r31
    27a8:	f1 2c       	mov	r15, r1
    27aa:	f0 2d       	mov	r31, r0
    27ac:	4d cf       	rjmp	.-358    	; 0x2648 <OLED_nameprompt+0x9c>
	OLED_print("~");
	OLED_pos(6,6);
	for (int i = 0; i < 4; i++){
		OLED_print(endstr[i]);
	}
	OLED_pos(6,10);
    27ae:	6a e0       	ldi	r22, 0x0A	; 10
    27b0:	86 e0       	ldi	r24, 0x06	; 6
    27b2:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
	OLED_print("! ~");
    27b6:	80 e7       	ldi	r24, 0x70	; 112
    27b8:	93 e0       	ldi	r25, 0x03	; 3
    27ba:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    27be:	ff e7       	ldi	r31, 0x7F	; 127
    27c0:	2f e4       	ldi	r18, 0x4F	; 79
    27c2:	32 e1       	ldi	r19, 0x12	; 18
    27c4:	f1 50       	subi	r31, 0x01	; 1
    27c6:	20 40       	sbci	r18, 0x00	; 0
    27c8:	30 40       	sbci	r19, 0x00	; 0
    27ca:	e1 f7       	brne	.-8      	; 0x27c4 <OLED_nameprompt+0x218>
    27cc:	00 c0       	rjmp	.+0      	; 0x27ce <OLED_nameprompt+0x222>
    27ce:	00 00       	nop
	_delay_ms(6000);
	char** string = endstr;
	return string;
}
    27d0:	ce 01       	movw	r24, r28
    27d2:	c3 96       	adiw	r24, 0x33	; 51
    27d4:	ea 96       	adiw	r28, 0x3a	; 58
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	ff 90       	pop	r15
    27ea:	ef 90       	pop	r14
    27ec:	df 90       	pop	r13
    27ee:	cf 90       	pop	r12
    27f0:	bf 90       	pop	r11
    27f2:	af 90       	pop	r10
    27f4:	9f 90       	pop	r9
    27f6:	8f 90       	pop	r8
    27f8:	7f 90       	pop	r7
    27fa:	6f 90       	pop	r6
    27fc:	08 95       	ret

000027fe <OLED_game>:

int OLED_game(int diff){	// Main function for the game
    27fe:	6f 92       	push	r6
    2800:	7f 92       	push	r7
    2802:	9f 92       	push	r9
    2804:	af 92       	push	r10
    2806:	bf 92       	push	r11
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	2b 97       	sbiw	r28, 0x0b	; 11
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
			OLED_pos(5,3);
			OLED_print("continue!");
		}
		_delay_ms(400);
		if (joy_button(1) == 0){
			can_msg_send.data[2] = joy_button(1);
    2828:	0f e1       	ldi	r16, 0x1F	; 31
    282a:	14 e0       	ldi	r17, 0x04	; 4
			CAN_message_send(&can_msg_send);
			gamestep = 2;
    282c:	68 94       	set
    282e:	ee 24       	eor	r14, r14
    2830:	e1 f8       	bld	r14, 1
    2832:	f1 2c       	mov	r15, r1
	extern int score;
	int counter;
	joy_position position;
	slider_position slider_pos;

	while(gamestep == 1){      //Waiting for player to shoot the first time to initiate the game or to continue the game after loosing a health point
    2834:	69 c0       	rjmp	.+210    	; 0x2908 <OLED_game+0x10a>
		position = JOY_getDirection();
    2836:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
		OLED_clear();
    283a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
		OLED_pos(4,1);
    283e:	61 e0       	ldi	r22, 0x01	; 1
    2840:	84 e0       	ldi	r24, 0x04	; 4
    2842:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
		if (hp == 3){
    2846:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hp>
    284a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <hp+0x1>
    284e:	83 30       	cpi	r24, 0x03	; 3
    2850:	91 05       	cpc	r25, r1
    2852:	49 f4       	brne	.+18     	; 0x2866 <OLED_game+0x68>
			OLED_print("Shoot to start!");
    2854:	84 ea       	ldi	r24, 0xA4	; 164
    2856:	93 e0       	ldi	r25, 0x03	; 3
    2858:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			counter = 0;
			score = 0;
    285c:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <score+0x1>
    2860:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <score>
    2864:	35 c0       	rjmp	.+106    	; 0x28d0 <OLED_game+0xd2>
			hp_lost = 0;
		}
		else if (hp == 0){
    2866:	89 2b       	or	r24, r25
    2868:	d9 f4       	brne	.+54     	; 0x28a0 <OLED_game+0xa2>
			gamestep = 0; 
    286a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <gamestep+0x1>
    286e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <gamestep>
			menuactive = 1; 
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <highscorename3>
    287a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <menuactive>
			menynummer = 27; 
    287e:	8b e1       	ldi	r24, 0x1B	; 27
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <menynummer+0x1>
    2886:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <menynummer>
		}
	}
	while(gamestep == 2){	// Game started. Score-counting active. Will break when a health point is lost, returning to gamestep 1
		slider_pos = JOY_getSliderPosition();
		position = JOY_getDirection();
		can_msg_send.data[0] = position.x;
    288a:	0f e1       	ldi	r16, 0x1F	; 31
    288c:	14 e0       	ldi	r17, 0x04	; 4
  		hp_lost = can_msg_receive.data[5];
		if (!test_bit(PINB,PINB0)){
			hp_lost=1;
		}
		_delay_ms(150);
		printf("hp_lost: %d \n \r", hp_lost);
    288e:	0f 2e       	mov	r0, r31
    2890:	f8 ed       	ldi	r31, 0xD8	; 216
    2892:	af 2e       	mov	r10, r31
    2894:	f3 e0       	ldi	r31, 0x03	; 3
    2896:	bf 2e       	mov	r11, r31
    2898:	f0 2d       	mov	r31, r0
		}
	}
	while(gamestep == 2){	// Game started. Score-counting active. Will break when a health point is lost, returning to gamestep 1
		slider_pos = JOY_getSliderPosition();
		position = JOY_getDirection();
		can_msg_send.data[0] = position.x;
    289a:	90 2e       	mov	r9, r16
    289c:	c1 2e       	mov	r12, r17
    289e:	c6 c0       	rjmp	.+396    	; 0x2a2c <OLED_game+0x22e>
			menuactive = 1; 
			menynummer = 27; 
			break;
		}
		else{
			OLED_pos(3,0);
    28a0:	60 e0       	ldi	r22, 0x00	; 0
    28a2:	83 e0       	ldi	r24, 0x03	; 3
    28a4:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("You lost health.");
    28a8:	84 eb       	ldi	r24, 0xB4	; 180
    28aa:	93 e0       	ldi	r25, 0x03	; 3
    28ac:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(4,3);
    28b0:	63 e0       	ldi	r22, 0x03	; 3
    28b2:	84 e0       	ldi	r24, 0x04	; 4
    28b4:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("Shoot to");
    28b8:	85 ec       	ldi	r24, 0xC5	; 197
    28ba:	93 e0       	ldi	r25, 0x03	; 3
    28bc:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_pos(5,3);
    28c0:	63 e0       	ldi	r22, 0x03	; 3
    28c2:	85 e0       	ldi	r24, 0x05	; 5
    28c4:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("continue!");
    28c8:	8e ec       	ldi	r24, 0xCE	; 206
    28ca:	93 e0       	ldi	r25, 0x03	; 3
    28cc:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    28d0:	2f e7       	ldi	r18, 0x7F	; 127
    28d2:	88 e3       	ldi	r24, 0x38	; 56
    28d4:	91 e0       	ldi	r25, 0x01	; 1
    28d6:	21 50       	subi	r18, 0x01	; 1
    28d8:	80 40       	sbci	r24, 0x00	; 0
    28da:	90 40       	sbci	r25, 0x00	; 0
    28dc:	e1 f7       	brne	.-8      	; 0x28d6 <OLED_game+0xd8>
    28de:	00 c0       	rjmp	.+0      	; 0x28e0 <OLED_game+0xe2>
    28e0:	00 00       	nop
		}
		_delay_ms(400);
		if (joy_button(1) == 0){
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    28ea:	89 2b       	or	r24, r25
    28ec:	69 f4       	brne	.+26     	; 0x2908 <OLED_game+0x10a>
			can_msg_send.data[2] = joy_button(1);
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    28f6:	f8 01       	movw	r30, r16
    28f8:	85 83       	std	Z+5, r24	; 0x05
			CAN_message_send(&can_msg_send);
    28fa:	c8 01       	movw	r24, r16
    28fc:	0e 94 46 02 	call	0x48c	; 0x48c <CAN_message_send>
			gamestep = 2;
    2900:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <gamestep+0x1>
    2904:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <gamestep>
	extern int score;
	int counter;
	joy_position position;
	slider_position slider_pos;

	while(gamestep == 1){      //Waiting for player to shoot the first time to initiate the game or to continue the game after loosing a health point
    2908:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <gamestep>
    290c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <gamestep+0x1>
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	09 f4       	brne	.+2      	; 0x2916 <OLED_game+0x118>
    2914:	90 cf       	rjmp	.-224    	; 0x2836 <OLED_game+0x38>
    2916:	b9 cf       	rjmp	.-142    	; 0x288a <OLED_game+0x8c>
			CAN_message_send(&can_msg_send);
			gamestep = 2;
		}
	}
	while(gamestep == 2){	// Game started. Score-counting active. Will break when a health point is lost, returning to gamestep 1
		slider_pos = JOY_getSliderPosition();
    2918:	0e 94 da 03 	call	0x7b4	; 0x7b4 <JOY_getSliderPosition>
    291c:	d8 2e       	mov	r13, r24
		position = JOY_getDirection();
    291e:	0e 94 be 03 	call	0x77c	; 0x77c <JOY_getDirection>
		can_msg_send.data[0] = position.x;
    2922:	f8 01       	movw	r30, r16
    2924:	63 83       	std	Z+3, r22	; 0x03
		can_msg_send.data[1] = slider_pos.left;
    2926:	d4 82       	std	Z+4, r13	; 0x04
		can_msg_send.data[2] = joy_button(1);
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 3d 03 	call	0x67a	; 0x67a <joy_button>
    2930:	f8 01       	movw	r30, r16
    2932:	85 83       	std	Z+5, r24	; 0x05
		CAN_message_send(&can_msg_send);
    2934:	89 2d       	mov	r24, r9
    2936:	9c 2d       	mov	r25, r12
    2938:	0e 94 46 02 	call	0x48c	; 0x48c <CAN_message_send>
  		can_msg_receive = CAN_data_receive();
    293c:	ce 01       	movw	r24, r28
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	0e 94 99 02 	call	0x532	; 0x532 <CAN_data_receive>
    2944:	8b e0       	ldi	r24, 0x0B	; 11
    2946:	fe 01       	movw	r30, r28
    2948:	31 96       	adiw	r30, 0x01	; 1
    294a:	ac e2       	ldi	r26, 0x2C	; 44
    294c:	b4 e0       	ldi	r27, 0x04	; 4
    294e:	01 90       	ld	r0, Z+
    2950:	0d 92       	st	X+, r0
    2952:	8a 95       	dec	r24
    2954:	e1 f7       	brne	.-8      	; 0x294e <OLED_game+0x150>
  		hp_lost = can_msg_receive.data[5];
		if (!test_bit(PINB,PINB0)){
    2956:	b0 9b       	sbis	0x16, 0	; 22
    2958:	7a c0       	rjmp	.+244    	; 0x2a4e <OLED_game+0x250>
		can_msg_send.data[0] = position.x;
		can_msg_send.data[1] = slider_pos.left;
		can_msg_send.data[2] = joy_button(1);
		CAN_message_send(&can_msg_send);
  		can_msg_receive = CAN_data_receive();
  		hp_lost = can_msg_receive.data[5];
    295a:	80 91 34 04 	lds	r24, 0x0434	; 0x800434 <can_msg_receive+0x8>
    295e:	68 2e       	mov	r6, r24
    2960:	71 2c       	mov	r7, r1
    2962:	eb e7       	ldi	r30, 0x7B	; 123
    2964:	f2 e9       	ldi	r31, 0x92	; 146
    2966:	31 97       	sbiw	r30, 0x01	; 1
    2968:	f1 f7       	brne	.-4      	; 0x2966 <OLED_game+0x168>
    296a:	00 c0       	rjmp	.+0      	; 0x296c <OLED_game+0x16e>
    296c:	00 00       	nop
		if (!test_bit(PINB,PINB0)){
			hp_lost=1;
		}
		_delay_ms(150);
		printf("hp_lost: %d \n \r", hp_lost);
    296e:	1f 92       	push	r1
    2970:	8f 93       	push	r24
    2972:	bf 92       	push	r11
    2974:	af 92       	push	r10
    2976:	0e 94 11 18 	call	0x3022	; 0x3022 <printf>
		if (hp_lost == 1){
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	6a 94       	dec	r6
    2984:	67 28       	or	r6, r7
    2986:	81 f4       	brne	.+32     	; 0x29a8 <OLED_game+0x1aa>
			hp_lost = 0;
			hp = hp - 1;
    2988:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hp>
    298c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <hp+0x1>
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <hp+0x1>
    2996:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <hp>
			gamestep = 1;
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <gamestep+0x1>
    29a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <gamestep>
			break;
    29a6:	4e c0       	rjmp	.+156    	; 0x2a44 <OLED_game+0x246>
    29a8:	21 e0       	ldi	r18, 0x01	; 1
    29aa:	e2 1a       	sub	r14, r18
    29ac:	f1 08       	sbc	r15, r1
		}
		counter = counter + 1;
		if (counter == 10){
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <OLED_game+0x1b4>
    29b0:	42 c0       	rjmp	.+132    	; 0x2a36 <OLED_game+0x238>
			OLED_clear();
    29b2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <OLED_clear>
			OLED_pos(3,2);
    29b6:	62 e0       	ldi	r22, 0x02	; 2
    29b8:	83 e0       	ldi	r24, 0x03	; 3
    29ba:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			if (hp == 3){
    29be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <hp>
    29c2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <hp+0x1>
    29c6:	83 30       	cpi	r24, 0x03	; 3
    29c8:	91 05       	cpc	r25, r1
    29ca:	29 f4       	brne	.+10     	; 0x29d6 <OLED_game+0x1d8>
				OLED_print("Health: }}} ");
    29cc:	88 ee       	ldi	r24, 0xE8	; 232
    29ce:	93 e0       	ldi	r25, 0x03	; 3
    29d0:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    29d4:	0e c0       	rjmp	.+28     	; 0x29f2 <OLED_game+0x1f4>
			}
			else if(hp == 2){
    29d6:	82 30       	cpi	r24, 0x02	; 2
    29d8:	91 05       	cpc	r25, r1
    29da:	29 f4       	brne	.+10     	; 0x29e6 <OLED_game+0x1e8>
				OLED_print("Health: }} ");
    29dc:	85 ef       	ldi	r24, 0xF5	; 245
    29de:	93 e0       	ldi	r25, 0x03	; 3
    29e0:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
    29e4:	06 c0       	rjmp	.+12     	; 0x29f2 <OLED_game+0x1f4>
			}
			else if(hp == 1){
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	21 f4       	brne	.+8      	; 0x29f2 <OLED_game+0x1f4>
				OLED_print("Health: } ");
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	94 e0       	ldi	r25, 0x04	; 4
    29ee:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			}
			OLED_pos(5,3);
    29f2:	63 e0       	ldi	r22, 0x03	; 3
    29f4:	85 e0       	ldi	r24, 0x05	; 5
    29f6:	0e 94 cb 11 	call	0x2396	; 0x2396 <OLED_pos>
			OLED_print("Score: ");
    29fa:	8c e0       	ldi	r24, 0x0C	; 12
    29fc:	94 e0       	ldi	r25, 0x04	; 4
    29fe:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			OLED_print(itoa(score, buffer, 10));
    2a02:	4a e0       	ldi	r20, 0x0A	; 10
    2a04:	50 e0       	ldi	r21, 0x00	; 0
    2a06:	66 e4       	ldi	r22, 0x46	; 70
    2a08:	74 e0       	ldi	r23, 0x04	; 4
    2a0a:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <score>
    2a0e:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <score+0x1>
    2a12:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <itoa>
    2a16:	0e 94 c5 12 	call	0x258a	; 0x258a <OLED_print>
			score = score + 1;
    2a1a:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <score>
    2a1e:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <score+0x1>
    2a22:	01 96       	adiw	r24, 0x01	; 1
    2a24:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <score+0x1>
    2a28:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <score>
	_delay_ms(6000);
	char** string = endstr;
	return string;
}

int OLED_game(int diff){	// Main function for the game
    2a2c:	0f 2e       	mov	r0, r31
    2a2e:	fa e0       	ldi	r31, 0x0A	; 10
    2a30:	ef 2e       	mov	r14, r31
    2a32:	f1 2c       	mov	r15, r1
    2a34:	f0 2d       	mov	r31, r0
			can_msg_send.data[2] = joy_button(1);
			CAN_message_send(&can_msg_send);
			gamestep = 2;
		}
	}
	while(gamestep == 2){	// Game started. Score-counting active. Will break when a health point is lost, returning to gamestep 1
    2a36:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <gamestep>
    2a3a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <gamestep+0x1>
    2a3e:	02 97       	sbiw	r24, 0x02	; 2
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <OLED_game+0x246>
    2a42:	6a cf       	rjmp	.-300    	; 0x2918 <OLED_game+0x11a>
			OLED_print(itoa(score, buffer, 10));
			score = score + 1;
			counter = 0;
		}
	}
return score;
    2a44:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <score>
    2a48:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <score+0x1>
    2a4c:	14 c0       	rjmp	.+40     	; 0x2a76 <OLED_game+0x278>
    2a4e:	8b e7       	ldi	r24, 0x7B	; 123
    2a50:	92 e9       	ldi	r25, 0x92	; 146
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <OLED_game+0x254>
    2a56:	00 c0       	rjmp	.+0      	; 0x2a58 <OLED_game+0x25a>
    2a58:	00 00       	nop
  		hp_lost = can_msg_receive.data[5];
		if (!test_bit(PINB,PINB0)){
			hp_lost=1;
		}
		_delay_ms(150);
		printf("hp_lost: %d \n \r", hp_lost);
    2a5a:	1f 92       	push	r1
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	8f 93       	push	r24
    2a60:	88 ed       	ldi	r24, 0xD8	; 216
    2a62:	93 e0       	ldi	r25, 0x03	; 3
    2a64:	9f 93       	push	r25
    2a66:	8f 93       	push	r24
    2a68:	0e 94 11 18 	call	0x3022	; 0x3022 <printf>
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	89 cf       	rjmp	.-238    	; 0x2988 <OLED_game+0x18a>
			score = score + 1;
			counter = 0;
		}
	}
return score;
}
    2a76:	2b 96       	adiw	r28, 0x0b	; 11
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	1f 91       	pop	r17
    2a88:	0f 91       	pop	r16
    2a8a:	ff 90       	pop	r15
    2a8c:	ef 90       	pop	r14
    2a8e:	df 90       	pop	r13
    2a90:	cf 90       	pop	r12
    2a92:	bf 90       	pop	r11
    2a94:	af 90       	pop	r10
    2a96:	9f 90       	pop	r9
    2a98:	7f 90       	pop	r7
    2a9a:	6f 90       	pop	r6
    2a9c:	08 95       	ret

00002a9e <my_delay_ms>:

void my_delay_ms(int n) {			// For increasing game difficulty by changing the break inbetween frames.
	while(n--) {
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	41 f0       	breq	.+16     	; 0x2ab2 <my_delay_ms+0x14>
    2aa2:	e9 ef       	ldi	r30, 0xF9	; 249
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	31 97       	sbiw	r30, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <my_delay_ms+0x8>
    2aaa:	00 c0       	rjmp	.+0      	; 0x2aac <my_delay_ms+0xe>
    2aac:	00 00       	nop
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	c1 f7       	brne	.-16     	; 0x2aa2 <my_delay_ms+0x4>
    2ab2:	08 95       	ret

00002ab4 <SPI_init>:
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
	
	return SPDR;
}
    2ab4:	87 b3       	in	r24, 0x17	; 23
    2ab6:	80 6b       	ori	r24, 0xB0	; 176
    2ab8:	87 bb       	out	0x17, r24	; 23
    2aba:	be 98       	cbi	0x17, 6	; 23
    2abc:	81 e5       	ldi	r24, 0x51	; 81
    2abe:	8d b9       	out	0x0d, r24	; 13
    2ac0:	08 95       	ret

00002ac2 <SPI_send>:
    2ac2:	8f b9       	out	0x0f, r24	; 15
    2ac4:	85 ef       	ldi	r24, 0xF5	; 245
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <SPI_send+0x6>
    2acc:	00 c0       	rjmp	.+0      	; 0x2ace <SPI_send+0xc>
    2ace:	8f b1       	in	r24, 0x0f	; 15
    2ad0:	08 95       	ret

00002ad2 <SPI_set_ss>:

// Defines chip-select, is done manually
void SPI_set_ss( int select )
{
	//use Port B4 as SS
	if (select == 1){
    2ad2:	81 30       	cpi	r24, 0x01	; 1
    2ad4:	91 05       	cpc	r25, r1
    2ad6:	11 f4       	brne	.+4      	; 0x2adc <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
    2ad8:	c4 9a       	sbi	0x18, 4	; 24
    2ada:	08 95       	ret
	}
	else if (select == 0){
    2adc:	89 2b       	or	r24, r25
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
    2ae0:	c4 98       	cbi	0x18, 4	; 24
    2ae2:	08 95       	ret

00002ae4 <SRAM_init>:
*/

//function to set up SRAM
int SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
    2ae4:	85 b7       	in	r24, 0x35	; 53
    2ae6:	80 68       	ori	r24, 0x80	; 128
    2ae8:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    2aea:	80 b7       	in	r24, 0x30	; 48
    2aec:	80 62       	ori	r24, 0x20	; 32
    2aee:	80 bf       	out	0x30, r24	; 48
	
	return 0;
}
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	08 95       	ret

00002af6 <UART_TX>:

//function that makes sending data over UART easier
int UART_TX(char data, FILE * _in){
	(void)(_in);
	
	while( !(UCSR0A & (1 << UDRE0)) );
    2af6:	5d 9b       	sbis	0x0b, 5	; 11
    2af8:	fe cf       	rjmp	.-4      	; 0x2af6 <UART_TX>
	
	// send data
	UDR0 = data;
    2afa:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	08 95       	ret

00002b02 <UART_RX>:

//function for sending data over UART
int UART_RX(FILE * _in ){
	(void)(_in);
	while( !(UCSR0A & (1 << RXC0)) );
    2b02:	5f 9b       	sbis	0x0b, 7	; 11
    2b04:	fe cf       	rjmp	.-4      	; 0x2b02 <UART_RX>
	
	// Data recieved
	return UDR0;
    2b06:	8c b1       	in	r24, 0x0c	; 12
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	08 95       	ret

00002b0c <UART_Init>:

//function that sets up the UART and serial communication parameters
void UART_Init(unsigned int ubrr)
{
	// Baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
    2b0c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
    2b0e:	89 b9       	out	0x09, r24	; 9
	
	// Enable Rx and Tx
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) ;
    2b10:	88 e1       	ldi	r24, 0x18	; 24
    2b12:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
    2b14:	8e e8       	ldi	r24, 0x8E	; 142
    2b16:	80 bd       	out	0x20, r24	; 32
	fdevopen(UART_TX, UART_RX);
    2b18:	61 e8       	ldi	r22, 0x81	; 129
    2b1a:	75 e1       	ldi	r23, 0x15	; 21
    2b1c:	8b e7       	ldi	r24, 0x7B	; 123
    2b1e:	95 e1       	ldi	r25, 0x15	; 21
    2b20:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <fdevopen>
    2b24:	08 95       	ret

00002b26 <__subsf3>:
    2b26:	50 58       	subi	r21, 0x80	; 128

00002b28 <__addsf3>:
    2b28:	bb 27       	eor	r27, r27
    2b2a:	aa 27       	eor	r26, r26
    2b2c:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <__addsf3x>
    2b30:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__fp_round>
    2b34:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__fp_pscA>
    2b38:	38 f0       	brcs	.+14     	; 0x2b48 <__addsf3+0x20>
    2b3a:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__fp_pscB>
    2b3e:	20 f0       	brcs	.+8      	; 0x2b48 <__addsf3+0x20>
    2b40:	39 f4       	brne	.+14     	; 0x2b50 <__addsf3+0x28>
    2b42:	9f 3f       	cpi	r25, 0xFF	; 255
    2b44:	19 f4       	brne	.+6      	; 0x2b4c <__addsf3+0x24>
    2b46:	26 f4       	brtc	.+8      	; 0x2b50 <__addsf3+0x28>
    2b48:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__fp_nan>
    2b4c:	0e f4       	brtc	.+2      	; 0x2b50 <__addsf3+0x28>
    2b4e:	e0 95       	com	r30
    2b50:	e7 fb       	bst	r30, 7
    2b52:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__fp_inf>

00002b56 <__addsf3x>:
    2b56:	e9 2f       	mov	r30, r25
    2b58:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__fp_split3>
    2b5c:	58 f3       	brcs	.-42     	; 0x2b34 <__addsf3+0xc>
    2b5e:	ba 17       	cp	r27, r26
    2b60:	62 07       	cpc	r22, r18
    2b62:	73 07       	cpc	r23, r19
    2b64:	84 07       	cpc	r24, r20
    2b66:	95 07       	cpc	r25, r21
    2b68:	20 f0       	brcs	.+8      	; 0x2b72 <__addsf3x+0x1c>
    2b6a:	79 f4       	brne	.+30     	; 0x2b8a <__addsf3x+0x34>
    2b6c:	a6 f5       	brtc	.+104    	; 0x2bd6 <__addsf3x+0x80>
    2b6e:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__fp_zero>
    2b72:	0e f4       	brtc	.+2      	; 0x2b76 <__addsf3x+0x20>
    2b74:	e0 95       	com	r30
    2b76:	0b 2e       	mov	r0, r27
    2b78:	ba 2f       	mov	r27, r26
    2b7a:	a0 2d       	mov	r26, r0
    2b7c:	0b 01       	movw	r0, r22
    2b7e:	b9 01       	movw	r22, r18
    2b80:	90 01       	movw	r18, r0
    2b82:	0c 01       	movw	r0, r24
    2b84:	ca 01       	movw	r24, r20
    2b86:	a0 01       	movw	r20, r0
    2b88:	11 24       	eor	r1, r1
    2b8a:	ff 27       	eor	r31, r31
    2b8c:	59 1b       	sub	r21, r25
    2b8e:	99 f0       	breq	.+38     	; 0x2bb6 <__addsf3x+0x60>
    2b90:	59 3f       	cpi	r21, 0xF9	; 249
    2b92:	50 f4       	brcc	.+20     	; 0x2ba8 <__addsf3x+0x52>
    2b94:	50 3e       	cpi	r21, 0xE0	; 224
    2b96:	68 f1       	brcs	.+90     	; 0x2bf2 <__addsf3x+0x9c>
    2b98:	1a 16       	cp	r1, r26
    2b9a:	f0 40       	sbci	r31, 0x00	; 0
    2b9c:	a2 2f       	mov	r26, r18
    2b9e:	23 2f       	mov	r18, r19
    2ba0:	34 2f       	mov	r19, r20
    2ba2:	44 27       	eor	r20, r20
    2ba4:	58 5f       	subi	r21, 0xF8	; 248
    2ba6:	f3 cf       	rjmp	.-26     	; 0x2b8e <__addsf3x+0x38>
    2ba8:	46 95       	lsr	r20
    2baa:	37 95       	ror	r19
    2bac:	27 95       	ror	r18
    2bae:	a7 95       	ror	r26
    2bb0:	f0 40       	sbci	r31, 0x00	; 0
    2bb2:	53 95       	inc	r21
    2bb4:	c9 f7       	brne	.-14     	; 0x2ba8 <__addsf3x+0x52>
    2bb6:	7e f4       	brtc	.+30     	; 0x2bd6 <__addsf3x+0x80>
    2bb8:	1f 16       	cp	r1, r31
    2bba:	ba 0b       	sbc	r27, r26
    2bbc:	62 0b       	sbc	r22, r18
    2bbe:	73 0b       	sbc	r23, r19
    2bc0:	84 0b       	sbc	r24, r20
    2bc2:	ba f0       	brmi	.+46     	; 0x2bf2 <__addsf3x+0x9c>
    2bc4:	91 50       	subi	r25, 0x01	; 1
    2bc6:	a1 f0       	breq	.+40     	; 0x2bf0 <__addsf3x+0x9a>
    2bc8:	ff 0f       	add	r31, r31
    2bca:	bb 1f       	adc	r27, r27
    2bcc:	66 1f       	adc	r22, r22
    2bce:	77 1f       	adc	r23, r23
    2bd0:	88 1f       	adc	r24, r24
    2bd2:	c2 f7       	brpl	.-16     	; 0x2bc4 <__addsf3x+0x6e>
    2bd4:	0e c0       	rjmp	.+28     	; 0x2bf2 <__addsf3x+0x9c>
    2bd6:	ba 0f       	add	r27, r26
    2bd8:	62 1f       	adc	r22, r18
    2bda:	73 1f       	adc	r23, r19
    2bdc:	84 1f       	adc	r24, r20
    2bde:	48 f4       	brcc	.+18     	; 0x2bf2 <__addsf3x+0x9c>
    2be0:	87 95       	ror	r24
    2be2:	77 95       	ror	r23
    2be4:	67 95       	ror	r22
    2be6:	b7 95       	ror	r27
    2be8:	f7 95       	ror	r31
    2bea:	9e 3f       	cpi	r25, 0xFE	; 254
    2bec:	08 f0       	brcs	.+2      	; 0x2bf0 <__addsf3x+0x9a>
    2bee:	b0 cf       	rjmp	.-160    	; 0x2b50 <__addsf3+0x28>
    2bf0:	93 95       	inc	r25
    2bf2:	88 0f       	add	r24, r24
    2bf4:	08 f0       	brcs	.+2      	; 0x2bf8 <__addsf3x+0xa2>
    2bf6:	99 27       	eor	r25, r25
    2bf8:	ee 0f       	add	r30, r30
    2bfa:	97 95       	ror	r25
    2bfc:	87 95       	ror	r24
    2bfe:	08 95       	ret

00002c00 <__cmpsf2>:
    2c00:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__fp_cmp>
    2c04:	08 f4       	brcc	.+2      	; 0x2c08 <__cmpsf2+0x8>
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	08 95       	ret

00002c0a <__fixunssfsi>:
    2c0a:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__fp_splitA>
    2c0e:	88 f0       	brcs	.+34     	; 0x2c32 <__fixunssfsi+0x28>
    2c10:	9f 57       	subi	r25, 0x7F	; 127
    2c12:	98 f0       	brcs	.+38     	; 0x2c3a <__fixunssfsi+0x30>
    2c14:	b9 2f       	mov	r27, r25
    2c16:	99 27       	eor	r25, r25
    2c18:	b7 51       	subi	r27, 0x17	; 23
    2c1a:	b0 f0       	brcs	.+44     	; 0x2c48 <__fixunssfsi+0x3e>
    2c1c:	e1 f0       	breq	.+56     	; 0x2c56 <__fixunssfsi+0x4c>
    2c1e:	66 0f       	add	r22, r22
    2c20:	77 1f       	adc	r23, r23
    2c22:	88 1f       	adc	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	1a f0       	brmi	.+6      	; 0x2c2e <__fixunssfsi+0x24>
    2c28:	ba 95       	dec	r27
    2c2a:	c9 f7       	brne	.-14     	; 0x2c1e <__fixunssfsi+0x14>
    2c2c:	14 c0       	rjmp	.+40     	; 0x2c56 <__fixunssfsi+0x4c>
    2c2e:	b1 30       	cpi	r27, 0x01	; 1
    2c30:	91 f0       	breq	.+36     	; 0x2c56 <__fixunssfsi+0x4c>
    2c32:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <__fp_zero>
    2c36:	b1 e0       	ldi	r27, 0x01	; 1
    2c38:	08 95       	ret
    2c3a:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__fp_zero>
    2c3e:	67 2f       	mov	r22, r23
    2c40:	78 2f       	mov	r23, r24
    2c42:	88 27       	eor	r24, r24
    2c44:	b8 5f       	subi	r27, 0xF8	; 248
    2c46:	39 f0       	breq	.+14     	; 0x2c56 <__fixunssfsi+0x4c>
    2c48:	b9 3f       	cpi	r27, 0xF9	; 249
    2c4a:	cc f3       	brlt	.-14     	; 0x2c3e <__fixunssfsi+0x34>
    2c4c:	86 95       	lsr	r24
    2c4e:	77 95       	ror	r23
    2c50:	67 95       	ror	r22
    2c52:	b3 95       	inc	r27
    2c54:	d9 f7       	brne	.-10     	; 0x2c4c <__fixunssfsi+0x42>
    2c56:	3e f4       	brtc	.+14     	; 0x2c66 <__fixunssfsi+0x5c>
    2c58:	90 95       	com	r25
    2c5a:	80 95       	com	r24
    2c5c:	70 95       	com	r23
    2c5e:	61 95       	neg	r22
    2c60:	7f 4f       	sbci	r23, 0xFF	; 255
    2c62:	8f 4f       	sbci	r24, 0xFF	; 255
    2c64:	9f 4f       	sbci	r25, 0xFF	; 255
    2c66:	08 95       	ret

00002c68 <__fp_cmp>:
    2c68:	99 0f       	add	r25, r25
    2c6a:	00 08       	sbc	r0, r0
    2c6c:	55 0f       	add	r21, r21
    2c6e:	aa 0b       	sbc	r26, r26
    2c70:	e0 e8       	ldi	r30, 0x80	; 128
    2c72:	fe ef       	ldi	r31, 0xFE	; 254
    2c74:	16 16       	cp	r1, r22
    2c76:	17 06       	cpc	r1, r23
    2c78:	e8 07       	cpc	r30, r24
    2c7a:	f9 07       	cpc	r31, r25
    2c7c:	c0 f0       	brcs	.+48     	; 0x2cae <__fp_cmp+0x46>
    2c7e:	12 16       	cp	r1, r18
    2c80:	13 06       	cpc	r1, r19
    2c82:	e4 07       	cpc	r30, r20
    2c84:	f5 07       	cpc	r31, r21
    2c86:	98 f0       	brcs	.+38     	; 0x2cae <__fp_cmp+0x46>
    2c88:	62 1b       	sub	r22, r18
    2c8a:	73 0b       	sbc	r23, r19
    2c8c:	84 0b       	sbc	r24, r20
    2c8e:	95 0b       	sbc	r25, r21
    2c90:	39 f4       	brne	.+14     	; 0x2ca0 <__fp_cmp+0x38>
    2c92:	0a 26       	eor	r0, r26
    2c94:	61 f0       	breq	.+24     	; 0x2cae <__fp_cmp+0x46>
    2c96:	23 2b       	or	r18, r19
    2c98:	24 2b       	or	r18, r20
    2c9a:	25 2b       	or	r18, r21
    2c9c:	21 f4       	brne	.+8      	; 0x2ca6 <__fp_cmp+0x3e>
    2c9e:	08 95       	ret
    2ca0:	0a 26       	eor	r0, r26
    2ca2:	09 f4       	brne	.+2      	; 0x2ca6 <__fp_cmp+0x3e>
    2ca4:	a1 40       	sbci	r26, 0x01	; 1
    2ca6:	a6 95       	lsr	r26
    2ca8:	8f ef       	ldi	r24, 0xFF	; 255
    2caa:	81 1d       	adc	r24, r1
    2cac:	81 1d       	adc	r24, r1
    2cae:	08 95       	ret

00002cb0 <__fp_inf>:
    2cb0:	97 f9       	bld	r25, 7
    2cb2:	9f 67       	ori	r25, 0x7F	; 127
    2cb4:	80 e8       	ldi	r24, 0x80	; 128
    2cb6:	70 e0       	ldi	r23, 0x00	; 0
    2cb8:	60 e0       	ldi	r22, 0x00	; 0
    2cba:	08 95       	ret

00002cbc <__fp_nan>:
    2cbc:	9f ef       	ldi	r25, 0xFF	; 255
    2cbe:	80 ec       	ldi	r24, 0xC0	; 192
    2cc0:	08 95       	ret

00002cc2 <__fp_pscA>:
    2cc2:	00 24       	eor	r0, r0
    2cc4:	0a 94       	dec	r0
    2cc6:	16 16       	cp	r1, r22
    2cc8:	17 06       	cpc	r1, r23
    2cca:	18 06       	cpc	r1, r24
    2ccc:	09 06       	cpc	r0, r25
    2cce:	08 95       	ret

00002cd0 <__fp_pscB>:
    2cd0:	00 24       	eor	r0, r0
    2cd2:	0a 94       	dec	r0
    2cd4:	12 16       	cp	r1, r18
    2cd6:	13 06       	cpc	r1, r19
    2cd8:	14 06       	cpc	r1, r20
    2cda:	05 06       	cpc	r0, r21
    2cdc:	08 95       	ret

00002cde <__fp_round>:
    2cde:	09 2e       	mov	r0, r25
    2ce0:	03 94       	inc	r0
    2ce2:	00 0c       	add	r0, r0
    2ce4:	11 f4       	brne	.+4      	; 0x2cea <__fp_round+0xc>
    2ce6:	88 23       	and	r24, r24
    2ce8:	52 f0       	brmi	.+20     	; 0x2cfe <__fp_round+0x20>
    2cea:	bb 0f       	add	r27, r27
    2cec:	40 f4       	brcc	.+16     	; 0x2cfe <__fp_round+0x20>
    2cee:	bf 2b       	or	r27, r31
    2cf0:	11 f4       	brne	.+4      	; 0x2cf6 <__fp_round+0x18>
    2cf2:	60 ff       	sbrs	r22, 0
    2cf4:	04 c0       	rjmp	.+8      	; 0x2cfe <__fp_round+0x20>
    2cf6:	6f 5f       	subi	r22, 0xFF	; 255
    2cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cfa:	8f 4f       	sbci	r24, 0xFF	; 255
    2cfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cfe:	08 95       	ret

00002d00 <__fp_split3>:
    2d00:	57 fd       	sbrc	r21, 7
    2d02:	90 58       	subi	r25, 0x80	; 128
    2d04:	44 0f       	add	r20, r20
    2d06:	55 1f       	adc	r21, r21
    2d08:	59 f0       	breq	.+22     	; 0x2d20 <__fp_splitA+0x10>
    2d0a:	5f 3f       	cpi	r21, 0xFF	; 255
    2d0c:	71 f0       	breq	.+28     	; 0x2d2a <__fp_splitA+0x1a>
    2d0e:	47 95       	ror	r20

00002d10 <__fp_splitA>:
    2d10:	88 0f       	add	r24, r24
    2d12:	97 fb       	bst	r25, 7
    2d14:	99 1f       	adc	r25, r25
    2d16:	61 f0       	breq	.+24     	; 0x2d30 <__fp_splitA+0x20>
    2d18:	9f 3f       	cpi	r25, 0xFF	; 255
    2d1a:	79 f0       	breq	.+30     	; 0x2d3a <__fp_splitA+0x2a>
    2d1c:	87 95       	ror	r24
    2d1e:	08 95       	ret
    2d20:	12 16       	cp	r1, r18
    2d22:	13 06       	cpc	r1, r19
    2d24:	14 06       	cpc	r1, r20
    2d26:	55 1f       	adc	r21, r21
    2d28:	f2 cf       	rjmp	.-28     	; 0x2d0e <__fp_split3+0xe>
    2d2a:	46 95       	lsr	r20
    2d2c:	f1 df       	rcall	.-30     	; 0x2d10 <__fp_splitA>
    2d2e:	08 c0       	rjmp	.+16     	; 0x2d40 <__fp_splitA+0x30>
    2d30:	16 16       	cp	r1, r22
    2d32:	17 06       	cpc	r1, r23
    2d34:	18 06       	cpc	r1, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	f1 cf       	rjmp	.-30     	; 0x2d1c <__fp_splitA+0xc>
    2d3a:	86 95       	lsr	r24
    2d3c:	71 05       	cpc	r23, r1
    2d3e:	61 05       	cpc	r22, r1
    2d40:	08 94       	sec
    2d42:	08 95       	ret

00002d44 <__fp_zero>:
    2d44:	e8 94       	clt

00002d46 <__fp_szero>:
    2d46:	bb 27       	eor	r27, r27
    2d48:	66 27       	eor	r22, r22
    2d4a:	77 27       	eor	r23, r23
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	97 f9       	bld	r25, 7
    2d50:	08 95       	ret

00002d52 <__gesf2>:
    2d52:	0e 94 34 16 	call	0x2c68	; 0x2c68 <__fp_cmp>
    2d56:	08 f4       	brcc	.+2      	; 0x2d5a <__gesf2+0x8>
    2d58:	8f ef       	ldi	r24, 0xFF	; 255
    2d5a:	08 95       	ret

00002d5c <__mulsf3>:
    2d5c:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__mulsf3x>
    2d60:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <__fp_round>
    2d64:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__fp_pscA>
    2d68:	38 f0       	brcs	.+14     	; 0x2d78 <__mulsf3+0x1c>
    2d6a:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__fp_pscB>
    2d6e:	20 f0       	brcs	.+8      	; 0x2d78 <__mulsf3+0x1c>
    2d70:	95 23       	and	r25, r21
    2d72:	11 f0       	breq	.+4      	; 0x2d78 <__mulsf3+0x1c>
    2d74:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__fp_inf>
    2d78:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <__fp_nan>
    2d7c:	11 24       	eor	r1, r1
    2d7e:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__fp_szero>

00002d82 <__mulsf3x>:
    2d82:	0e 94 80 16 	call	0x2d00	; 0x2d00 <__fp_split3>
    2d86:	70 f3       	brcs	.-36     	; 0x2d64 <__mulsf3+0x8>

00002d88 <__mulsf3_pse>:
    2d88:	95 9f       	mul	r25, r21
    2d8a:	c1 f3       	breq	.-16     	; 0x2d7c <__mulsf3+0x20>
    2d8c:	95 0f       	add	r25, r21
    2d8e:	50 e0       	ldi	r21, 0x00	; 0
    2d90:	55 1f       	adc	r21, r21
    2d92:	62 9f       	mul	r22, r18
    2d94:	f0 01       	movw	r30, r0
    2d96:	72 9f       	mul	r23, r18
    2d98:	bb 27       	eor	r27, r27
    2d9a:	f0 0d       	add	r31, r0
    2d9c:	b1 1d       	adc	r27, r1
    2d9e:	63 9f       	mul	r22, r19
    2da0:	aa 27       	eor	r26, r26
    2da2:	f0 0d       	add	r31, r0
    2da4:	b1 1d       	adc	r27, r1
    2da6:	aa 1f       	adc	r26, r26
    2da8:	64 9f       	mul	r22, r20
    2daa:	66 27       	eor	r22, r22
    2dac:	b0 0d       	add	r27, r0
    2dae:	a1 1d       	adc	r26, r1
    2db0:	66 1f       	adc	r22, r22
    2db2:	82 9f       	mul	r24, r18
    2db4:	22 27       	eor	r18, r18
    2db6:	b0 0d       	add	r27, r0
    2db8:	a1 1d       	adc	r26, r1
    2dba:	62 1f       	adc	r22, r18
    2dbc:	73 9f       	mul	r23, r19
    2dbe:	b0 0d       	add	r27, r0
    2dc0:	a1 1d       	adc	r26, r1
    2dc2:	62 1f       	adc	r22, r18
    2dc4:	83 9f       	mul	r24, r19
    2dc6:	a0 0d       	add	r26, r0
    2dc8:	61 1d       	adc	r22, r1
    2dca:	22 1f       	adc	r18, r18
    2dcc:	74 9f       	mul	r23, r20
    2dce:	33 27       	eor	r19, r19
    2dd0:	a0 0d       	add	r26, r0
    2dd2:	61 1d       	adc	r22, r1
    2dd4:	23 1f       	adc	r18, r19
    2dd6:	84 9f       	mul	r24, r20
    2dd8:	60 0d       	add	r22, r0
    2dda:	21 1d       	adc	r18, r1
    2ddc:	82 2f       	mov	r24, r18
    2dde:	76 2f       	mov	r23, r22
    2de0:	6a 2f       	mov	r22, r26
    2de2:	11 24       	eor	r1, r1
    2de4:	9f 57       	subi	r25, 0x7F	; 127
    2de6:	50 40       	sbci	r21, 0x00	; 0
    2de8:	9a f0       	brmi	.+38     	; 0x2e10 <__mulsf3_pse+0x88>
    2dea:	f1 f0       	breq	.+60     	; 0x2e28 <__mulsf3_pse+0xa0>
    2dec:	88 23       	and	r24, r24
    2dee:	4a f0       	brmi	.+18     	; 0x2e02 <__mulsf3_pse+0x7a>
    2df0:	ee 0f       	add	r30, r30
    2df2:	ff 1f       	adc	r31, r31
    2df4:	bb 1f       	adc	r27, r27
    2df6:	66 1f       	adc	r22, r22
    2df8:	77 1f       	adc	r23, r23
    2dfa:	88 1f       	adc	r24, r24
    2dfc:	91 50       	subi	r25, 0x01	; 1
    2dfe:	50 40       	sbci	r21, 0x00	; 0
    2e00:	a9 f7       	brne	.-22     	; 0x2dec <__mulsf3_pse+0x64>
    2e02:	9e 3f       	cpi	r25, 0xFE	; 254
    2e04:	51 05       	cpc	r21, r1
    2e06:	80 f0       	brcs	.+32     	; 0x2e28 <__mulsf3_pse+0xa0>
    2e08:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__fp_inf>
    2e0c:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__fp_szero>
    2e10:	5f 3f       	cpi	r21, 0xFF	; 255
    2e12:	e4 f3       	brlt	.-8      	; 0x2e0c <__mulsf3_pse+0x84>
    2e14:	98 3e       	cpi	r25, 0xE8	; 232
    2e16:	d4 f3       	brlt	.-12     	; 0x2e0c <__mulsf3_pse+0x84>
    2e18:	86 95       	lsr	r24
    2e1a:	77 95       	ror	r23
    2e1c:	67 95       	ror	r22
    2e1e:	b7 95       	ror	r27
    2e20:	f7 95       	ror	r31
    2e22:	e7 95       	ror	r30
    2e24:	9f 5f       	subi	r25, 0xFF	; 255
    2e26:	c1 f7       	brne	.-16     	; 0x2e18 <__mulsf3_pse+0x90>
    2e28:	fe 2b       	or	r31, r30
    2e2a:	88 0f       	add	r24, r24
    2e2c:	91 1d       	adc	r25, r1
    2e2e:	96 95       	lsr	r25
    2e30:	87 95       	ror	r24
    2e32:	97 f9       	bld	r25, 7
    2e34:	08 95       	ret

00002e36 <round>:
    2e36:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__fp_splitA>
    2e3a:	e8 f0       	brcs	.+58     	; 0x2e76 <round+0x40>
    2e3c:	9e 37       	cpi	r25, 0x7E	; 126
    2e3e:	e8 f0       	brcs	.+58     	; 0x2e7a <round+0x44>
    2e40:	96 39       	cpi	r25, 0x96	; 150
    2e42:	b8 f4       	brcc	.+46     	; 0x2e72 <round+0x3c>
    2e44:	9e 38       	cpi	r25, 0x8E	; 142
    2e46:	48 f4       	brcc	.+18     	; 0x2e5a <round+0x24>
    2e48:	67 2f       	mov	r22, r23
    2e4a:	78 2f       	mov	r23, r24
    2e4c:	88 27       	eor	r24, r24
    2e4e:	98 5f       	subi	r25, 0xF8	; 248
    2e50:	f9 cf       	rjmp	.-14     	; 0x2e44 <round+0xe>
    2e52:	86 95       	lsr	r24
    2e54:	77 95       	ror	r23
    2e56:	67 95       	ror	r22
    2e58:	93 95       	inc	r25
    2e5a:	95 39       	cpi	r25, 0x95	; 149
    2e5c:	d0 f3       	brcs	.-12     	; 0x2e52 <round+0x1c>
    2e5e:	b6 2f       	mov	r27, r22
    2e60:	b1 70       	andi	r27, 0x01	; 1
    2e62:	6b 0f       	add	r22, r27
    2e64:	71 1d       	adc	r23, r1
    2e66:	81 1d       	adc	r24, r1
    2e68:	20 f4       	brcc	.+8      	; 0x2e72 <round+0x3c>
    2e6a:	87 95       	ror	r24
    2e6c:	77 95       	ror	r23
    2e6e:	67 95       	ror	r22
    2e70:	93 95       	inc	r25
    2e72:	0c 94 3f 17 	jmp	0x2e7e	; 0x2e7e <__fp_mintl>
    2e76:	0c 94 5a 17 	jmp	0x2eb4	; 0x2eb4 <__fp_mpack>
    2e7a:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__fp_szero>

00002e7e <__fp_mintl>:
    2e7e:	88 23       	and	r24, r24
    2e80:	71 f4       	brne	.+28     	; 0x2e9e <__fp_mintl+0x20>
    2e82:	77 23       	and	r23, r23
    2e84:	21 f0       	breq	.+8      	; 0x2e8e <__fp_mintl+0x10>
    2e86:	98 50       	subi	r25, 0x08	; 8
    2e88:	87 2b       	or	r24, r23
    2e8a:	76 2f       	mov	r23, r22
    2e8c:	07 c0       	rjmp	.+14     	; 0x2e9c <__fp_mintl+0x1e>
    2e8e:	66 23       	and	r22, r22
    2e90:	11 f4       	brne	.+4      	; 0x2e96 <__fp_mintl+0x18>
    2e92:	99 27       	eor	r25, r25
    2e94:	0d c0       	rjmp	.+26     	; 0x2eb0 <__fp_mintl+0x32>
    2e96:	90 51       	subi	r25, 0x10	; 16
    2e98:	86 2b       	or	r24, r22
    2e9a:	70 e0       	ldi	r23, 0x00	; 0
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	2a f0       	brmi	.+10     	; 0x2eaa <__fp_mintl+0x2c>
    2ea0:	9a 95       	dec	r25
    2ea2:	66 0f       	add	r22, r22
    2ea4:	77 1f       	adc	r23, r23
    2ea6:	88 1f       	adc	r24, r24
    2ea8:	da f7       	brpl	.-10     	; 0x2ea0 <__fp_mintl+0x22>
    2eaa:	88 0f       	add	r24, r24
    2eac:	96 95       	lsr	r25
    2eae:	87 95       	ror	r24
    2eb0:	97 f9       	bld	r25, 7
    2eb2:	08 95       	ret

00002eb4 <__fp_mpack>:
    2eb4:	9f 3f       	cpi	r25, 0xFF	; 255
    2eb6:	31 f0       	breq	.+12     	; 0x2ec4 <__fp_mpack_finite+0xc>

00002eb8 <__fp_mpack_finite>:
    2eb8:	91 50       	subi	r25, 0x01	; 1
    2eba:	20 f4       	brcc	.+8      	; 0x2ec4 <__fp_mpack_finite+0xc>
    2ebc:	87 95       	ror	r24
    2ebe:	77 95       	ror	r23
    2ec0:	67 95       	ror	r22
    2ec2:	b7 95       	ror	r27
    2ec4:	88 0f       	add	r24, r24
    2ec6:	91 1d       	adc	r25, r1
    2ec8:	96 95       	lsr	r25
    2eca:	87 95       	ror	r24
    2ecc:	97 f9       	bld	r25, 7
    2ece:	08 95       	ret

00002ed0 <__divmodhi4>:
    2ed0:	97 fb       	bst	r25, 7
    2ed2:	07 2e       	mov	r0, r23
    2ed4:	16 f4       	brtc	.+4      	; 0x2eda <__divmodhi4+0xa>
    2ed6:	00 94       	com	r0
    2ed8:	07 d0       	rcall	.+14     	; 0x2ee8 <__divmodhi4_neg1>
    2eda:	77 fd       	sbrc	r23, 7
    2edc:	09 d0       	rcall	.+18     	; 0x2ef0 <__divmodhi4_neg2>
    2ede:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__udivmodhi4>
    2ee2:	07 fc       	sbrc	r0, 7
    2ee4:	05 d0       	rcall	.+10     	; 0x2ef0 <__divmodhi4_neg2>
    2ee6:	3e f4       	brtc	.+14     	; 0x2ef6 <__divmodhi4_exit>

00002ee8 <__divmodhi4_neg1>:
    2ee8:	90 95       	com	r25
    2eea:	81 95       	neg	r24
    2eec:	9f 4f       	sbci	r25, 0xFF	; 255
    2eee:	08 95       	ret

00002ef0 <__divmodhi4_neg2>:
    2ef0:	70 95       	com	r23
    2ef2:	61 95       	neg	r22
    2ef4:	7f 4f       	sbci	r23, 0xFF	; 255

00002ef6 <__divmodhi4_exit>:
    2ef6:	08 95       	ret

00002ef8 <__tablejump2__>:
    2ef8:	ee 0f       	add	r30, r30
    2efa:	ff 1f       	adc	r31, r31
    2efc:	05 90       	lpm	r0, Z+
    2efe:	f4 91       	lpm	r31, Z
    2f00:	e0 2d       	mov	r30, r0
    2f02:	09 94       	ijmp

00002f04 <__udivmodhi4>:
    2f04:	aa 1b       	sub	r26, r26
    2f06:	bb 1b       	sub	r27, r27
    2f08:	51 e1       	ldi	r21, 0x11	; 17
    2f0a:	07 c0       	rjmp	.+14     	; 0x2f1a <__udivmodhi4_ep>

00002f0c <__udivmodhi4_loop>:
    2f0c:	aa 1f       	adc	r26, r26
    2f0e:	bb 1f       	adc	r27, r27
    2f10:	a6 17       	cp	r26, r22
    2f12:	b7 07       	cpc	r27, r23
    2f14:	10 f0       	brcs	.+4      	; 0x2f1a <__udivmodhi4_ep>
    2f16:	a6 1b       	sub	r26, r22
    2f18:	b7 0b       	sbc	r27, r23

00002f1a <__udivmodhi4_ep>:
    2f1a:	88 1f       	adc	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	5a 95       	dec	r21
    2f20:	a9 f7       	brne	.-22     	; 0x2f0c <__udivmodhi4_loop>
    2f22:	80 95       	com	r24
    2f24:	90 95       	com	r25
    2f26:	bc 01       	movw	r22, r24
    2f28:	cd 01       	movw	r24, r26
    2f2a:	08 95       	ret

00002f2c <itoa>:
    2f2c:	45 32       	cpi	r20, 0x25	; 37
    2f2e:	51 05       	cpc	r21, r1
    2f30:	20 f4       	brcc	.+8      	; 0x2f3a <itoa+0xe>
    2f32:	42 30       	cpi	r20, 0x02	; 2
    2f34:	10 f0       	brcs	.+4      	; 0x2f3a <itoa+0xe>
    2f36:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__itoa_ncheck>
    2f3a:	fb 01       	movw	r30, r22
    2f3c:	10 82       	st	Z, r1
    2f3e:	cb 01       	movw	r24, r22
    2f40:	08 95       	ret

00002f42 <__itoa_ncheck>:
    2f42:	bb 27       	eor	r27, r27
    2f44:	4a 30       	cpi	r20, 0x0A	; 10
    2f46:	31 f4       	brne	.+12     	; 0x2f54 <__itoa_ncheck+0x12>
    2f48:	99 23       	and	r25, r25
    2f4a:	22 f4       	brpl	.+8      	; 0x2f54 <__itoa_ncheck+0x12>
    2f4c:	bd e2       	ldi	r27, 0x2D	; 45
    2f4e:	90 95       	com	r25
    2f50:	81 95       	neg	r24
    2f52:	9f 4f       	sbci	r25, 0xFF	; 255
    2f54:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__utoa_common>

00002f58 <__utoa_ncheck>:
    2f58:	bb 27       	eor	r27, r27

00002f5a <__utoa_common>:
    2f5a:	fb 01       	movw	r30, r22
    2f5c:	55 27       	eor	r21, r21
    2f5e:	aa 27       	eor	r26, r26
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	aa 1f       	adc	r26, r26
    2f66:	a4 17       	cp	r26, r20
    2f68:	10 f0       	brcs	.+4      	; 0x2f6e <__utoa_common+0x14>
    2f6a:	a4 1b       	sub	r26, r20
    2f6c:	83 95       	inc	r24
    2f6e:	50 51       	subi	r21, 0x10	; 16
    2f70:	b9 f7       	brne	.-18     	; 0x2f60 <__utoa_common+0x6>
    2f72:	a0 5d       	subi	r26, 0xD0	; 208
    2f74:	aa 33       	cpi	r26, 0x3A	; 58
    2f76:	08 f0       	brcs	.+2      	; 0x2f7a <__utoa_common+0x20>
    2f78:	a9 5d       	subi	r26, 0xD9	; 217
    2f7a:	a1 93       	st	Z+, r26
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	79 f7       	brne	.-34     	; 0x2f5e <__utoa_common+0x4>
    2f80:	b1 11       	cpse	r27, r1
    2f82:	b1 93       	st	Z+, r27
    2f84:	11 92       	st	Z+, r1
    2f86:	cb 01       	movw	r24, r22
    2f88:	0c 94 62 1b 	jmp	0x36c4	; 0x36c4 <strrev>

00002f8c <fdevopen>:
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	00 97       	sbiw	r24, 0x00	; 0
    2f96:	31 f4       	brne	.+12     	; 0x2fa4 <fdevopen+0x18>
    2f98:	61 15       	cp	r22, r1
    2f9a:	71 05       	cpc	r23, r1
    2f9c:	19 f4       	brne	.+6      	; 0x2fa4 <fdevopen+0x18>
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	3a c0       	rjmp	.+116    	; 0x3018 <fdevopen+0x8c>
    2fa4:	8b 01       	movw	r16, r22
    2fa6:	ec 01       	movw	r28, r24
    2fa8:	6e e0       	ldi	r22, 0x0E	; 14
    2faa:	70 e0       	ldi	r23, 0x00	; 0
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 08 1a 	call	0x3410	; 0x3410 <calloc>
    2fb4:	fc 01       	movw	r30, r24
    2fb6:	89 2b       	or	r24, r25
    2fb8:	91 f3       	breq	.-28     	; 0x2f9e <fdevopen+0x12>
    2fba:	80 e8       	ldi	r24, 0x80	; 128
    2fbc:	83 83       	std	Z+3, r24	; 0x03
    2fbe:	01 15       	cp	r16, r1
    2fc0:	11 05       	cpc	r17, r1
    2fc2:	71 f0       	breq	.+28     	; 0x2fe0 <fdevopen+0x54>
    2fc4:	13 87       	std	Z+11, r17	; 0x0b
    2fc6:	02 87       	std	Z+10, r16	; 0x0a
    2fc8:	81 e8       	ldi	r24, 0x81	; 129
    2fca:	83 83       	std	Z+3, r24	; 0x03
    2fcc:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <__iob>
    2fd0:	90 91 57 04 	lds	r25, 0x0457	; 0x800457 <__iob+0x1>
    2fd4:	89 2b       	or	r24, r25
    2fd6:	21 f4       	brne	.+8      	; 0x2fe0 <fdevopen+0x54>
    2fd8:	f0 93 57 04 	sts	0x0457, r31	; 0x800457 <__iob+0x1>
    2fdc:	e0 93 56 04 	sts	0x0456, r30	; 0x800456 <__iob>
    2fe0:	20 97       	sbiw	r28, 0x00	; 0
    2fe2:	c9 f0       	breq	.+50     	; 0x3016 <fdevopen+0x8a>
    2fe4:	d1 87       	std	Z+9, r29	; 0x09
    2fe6:	c0 87       	std	Z+8, r28	; 0x08
    2fe8:	83 81       	ldd	r24, Z+3	; 0x03
    2fea:	82 60       	ori	r24, 0x02	; 2
    2fec:	83 83       	std	Z+3, r24	; 0x03
    2fee:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <__iob+0x2>
    2ff2:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <__iob+0x3>
    2ff6:	89 2b       	or	r24, r25
    2ff8:	71 f4       	brne	.+28     	; 0x3016 <fdevopen+0x8a>
    2ffa:	f0 93 59 04 	sts	0x0459, r31	; 0x800459 <__iob+0x3>
    2ffe:	e0 93 58 04 	sts	0x0458, r30	; 0x800458 <__iob+0x2>
    3002:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <__iob+0x4>
    3006:	90 91 5b 04 	lds	r25, 0x045B	; 0x80045b <__iob+0x5>
    300a:	89 2b       	or	r24, r25
    300c:	21 f4       	brne	.+8      	; 0x3016 <fdevopen+0x8a>
    300e:	f0 93 5b 04 	sts	0x045B, r31	; 0x80045b <__iob+0x5>
    3012:	e0 93 5a 04 	sts	0x045A, r30	; 0x80045a <__iob+0x4>
    3016:	cf 01       	movw	r24, r30
    3018:	df 91       	pop	r29
    301a:	cf 91       	pop	r28
    301c:	1f 91       	pop	r17
    301e:	0f 91       	pop	r16
    3020:	08 95       	ret

00003022 <printf>:
    3022:	a0 e0       	ldi	r26, 0x00	; 0
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	e7 e1       	ldi	r30, 0x17	; 23
    3028:	f8 e1       	ldi	r31, 0x18	; 24
    302a:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <__prologue_saves__+0x20>
    302e:	ae 01       	movw	r20, r28
    3030:	4b 5f       	subi	r20, 0xFB	; 251
    3032:	5f 4f       	sbci	r21, 0xFF	; 255
    3034:	fa 01       	movw	r30, r20
    3036:	61 91       	ld	r22, Z+
    3038:	71 91       	ld	r23, Z+
    303a:	af 01       	movw	r20, r30
    303c:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <__iob+0x2>
    3040:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <__iob+0x3>
    3044:	0e 94 27 18 	call	0x304e	; 0x304e <vfprintf>
    3048:	e2 e0       	ldi	r30, 0x02	; 2
    304a:	0c 94 38 1c 	jmp	0x3870	; 0x3870 <__epilogue_restores__+0x20>

0000304e <vfprintf>:
    304e:	ab e0       	ldi	r26, 0x0B	; 11
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	ed e2       	ldi	r30, 0x2D	; 45
    3054:	f8 e1       	ldi	r31, 0x18	; 24
    3056:	0c 94 0c 1c 	jmp	0x3818	; 0x3818 <__prologue_saves__>
    305a:	6c 01       	movw	r12, r24
    305c:	7b 01       	movw	r14, r22
    305e:	8a 01       	movw	r16, r20
    3060:	fc 01       	movw	r30, r24
    3062:	17 82       	std	Z+7, r1	; 0x07
    3064:	16 82       	std	Z+6, r1	; 0x06
    3066:	83 81       	ldd	r24, Z+3	; 0x03
    3068:	81 ff       	sbrs	r24, 1
    306a:	cc c1       	rjmp	.+920    	; 0x3404 <vfprintf+0x3b6>
    306c:	ce 01       	movw	r24, r28
    306e:	01 96       	adiw	r24, 0x01	; 1
    3070:	3c 01       	movw	r6, r24
    3072:	f6 01       	movw	r30, r12
    3074:	93 81       	ldd	r25, Z+3	; 0x03
    3076:	f7 01       	movw	r30, r14
    3078:	93 fd       	sbrc	r25, 3
    307a:	85 91       	lpm	r24, Z+
    307c:	93 ff       	sbrs	r25, 3
    307e:	81 91       	ld	r24, Z+
    3080:	7f 01       	movw	r14, r30
    3082:	88 23       	and	r24, r24
    3084:	09 f4       	brne	.+2      	; 0x3088 <vfprintf+0x3a>
    3086:	ba c1       	rjmp	.+884    	; 0x33fc <vfprintf+0x3ae>
    3088:	85 32       	cpi	r24, 0x25	; 37
    308a:	39 f4       	brne	.+14     	; 0x309a <vfprintf+0x4c>
    308c:	93 fd       	sbrc	r25, 3
    308e:	85 91       	lpm	r24, Z+
    3090:	93 ff       	sbrs	r25, 3
    3092:	81 91       	ld	r24, Z+
    3094:	7f 01       	movw	r14, r30
    3096:	85 32       	cpi	r24, 0x25	; 37
    3098:	29 f4       	brne	.+10     	; 0x30a4 <vfprintf+0x56>
    309a:	b6 01       	movw	r22, r12
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <fputc>
    30a2:	e7 cf       	rjmp	.-50     	; 0x3072 <vfprintf+0x24>
    30a4:	91 2c       	mov	r9, r1
    30a6:	21 2c       	mov	r2, r1
    30a8:	31 2c       	mov	r3, r1
    30aa:	ff e1       	ldi	r31, 0x1F	; 31
    30ac:	f3 15       	cp	r31, r3
    30ae:	d8 f0       	brcs	.+54     	; 0x30e6 <vfprintf+0x98>
    30b0:	8b 32       	cpi	r24, 0x2B	; 43
    30b2:	79 f0       	breq	.+30     	; 0x30d2 <vfprintf+0x84>
    30b4:	38 f4       	brcc	.+14     	; 0x30c4 <vfprintf+0x76>
    30b6:	80 32       	cpi	r24, 0x20	; 32
    30b8:	79 f0       	breq	.+30     	; 0x30d8 <vfprintf+0x8a>
    30ba:	83 32       	cpi	r24, 0x23	; 35
    30bc:	a1 f4       	brne	.+40     	; 0x30e6 <vfprintf+0x98>
    30be:	23 2d       	mov	r18, r3
    30c0:	20 61       	ori	r18, 0x10	; 16
    30c2:	1d c0       	rjmp	.+58     	; 0x30fe <vfprintf+0xb0>
    30c4:	8d 32       	cpi	r24, 0x2D	; 45
    30c6:	61 f0       	breq	.+24     	; 0x30e0 <vfprintf+0x92>
    30c8:	80 33       	cpi	r24, 0x30	; 48
    30ca:	69 f4       	brne	.+26     	; 0x30e6 <vfprintf+0x98>
    30cc:	23 2d       	mov	r18, r3
    30ce:	21 60       	ori	r18, 0x01	; 1
    30d0:	16 c0       	rjmp	.+44     	; 0x30fe <vfprintf+0xb0>
    30d2:	83 2d       	mov	r24, r3
    30d4:	82 60       	ori	r24, 0x02	; 2
    30d6:	38 2e       	mov	r3, r24
    30d8:	e3 2d       	mov	r30, r3
    30da:	e4 60       	ori	r30, 0x04	; 4
    30dc:	3e 2e       	mov	r3, r30
    30de:	2a c0       	rjmp	.+84     	; 0x3134 <vfprintf+0xe6>
    30e0:	f3 2d       	mov	r31, r3
    30e2:	f8 60       	ori	r31, 0x08	; 8
    30e4:	1d c0       	rjmp	.+58     	; 0x3120 <vfprintf+0xd2>
    30e6:	37 fc       	sbrc	r3, 7
    30e8:	2d c0       	rjmp	.+90     	; 0x3144 <vfprintf+0xf6>
    30ea:	20 ed       	ldi	r18, 0xD0	; 208
    30ec:	28 0f       	add	r18, r24
    30ee:	2a 30       	cpi	r18, 0x0A	; 10
    30f0:	40 f0       	brcs	.+16     	; 0x3102 <vfprintf+0xb4>
    30f2:	8e 32       	cpi	r24, 0x2E	; 46
    30f4:	b9 f4       	brne	.+46     	; 0x3124 <vfprintf+0xd6>
    30f6:	36 fc       	sbrc	r3, 6
    30f8:	81 c1       	rjmp	.+770    	; 0x33fc <vfprintf+0x3ae>
    30fa:	23 2d       	mov	r18, r3
    30fc:	20 64       	ori	r18, 0x40	; 64
    30fe:	32 2e       	mov	r3, r18
    3100:	19 c0       	rjmp	.+50     	; 0x3134 <vfprintf+0xe6>
    3102:	36 fe       	sbrs	r3, 6
    3104:	06 c0       	rjmp	.+12     	; 0x3112 <vfprintf+0xc4>
    3106:	8a e0       	ldi	r24, 0x0A	; 10
    3108:	98 9e       	mul	r9, r24
    310a:	20 0d       	add	r18, r0
    310c:	11 24       	eor	r1, r1
    310e:	92 2e       	mov	r9, r18
    3110:	11 c0       	rjmp	.+34     	; 0x3134 <vfprintf+0xe6>
    3112:	ea e0       	ldi	r30, 0x0A	; 10
    3114:	2e 9e       	mul	r2, r30
    3116:	20 0d       	add	r18, r0
    3118:	11 24       	eor	r1, r1
    311a:	22 2e       	mov	r2, r18
    311c:	f3 2d       	mov	r31, r3
    311e:	f0 62       	ori	r31, 0x20	; 32
    3120:	3f 2e       	mov	r3, r31
    3122:	08 c0       	rjmp	.+16     	; 0x3134 <vfprintf+0xe6>
    3124:	8c 36       	cpi	r24, 0x6C	; 108
    3126:	21 f4       	brne	.+8      	; 0x3130 <vfprintf+0xe2>
    3128:	83 2d       	mov	r24, r3
    312a:	80 68       	ori	r24, 0x80	; 128
    312c:	38 2e       	mov	r3, r24
    312e:	02 c0       	rjmp	.+4      	; 0x3134 <vfprintf+0xe6>
    3130:	88 36       	cpi	r24, 0x68	; 104
    3132:	41 f4       	brne	.+16     	; 0x3144 <vfprintf+0xf6>
    3134:	f7 01       	movw	r30, r14
    3136:	93 fd       	sbrc	r25, 3
    3138:	85 91       	lpm	r24, Z+
    313a:	93 ff       	sbrs	r25, 3
    313c:	81 91       	ld	r24, Z+
    313e:	7f 01       	movw	r14, r30
    3140:	81 11       	cpse	r24, r1
    3142:	b3 cf       	rjmp	.-154    	; 0x30aa <vfprintf+0x5c>
    3144:	98 2f       	mov	r25, r24
    3146:	9f 7d       	andi	r25, 0xDF	; 223
    3148:	95 54       	subi	r25, 0x45	; 69
    314a:	93 30       	cpi	r25, 0x03	; 3
    314c:	28 f4       	brcc	.+10     	; 0x3158 <vfprintf+0x10a>
    314e:	0c 5f       	subi	r16, 0xFC	; 252
    3150:	1f 4f       	sbci	r17, 0xFF	; 255
    3152:	9f e3       	ldi	r25, 0x3F	; 63
    3154:	99 83       	std	Y+1, r25	; 0x01
    3156:	0d c0       	rjmp	.+26     	; 0x3172 <vfprintf+0x124>
    3158:	83 36       	cpi	r24, 0x63	; 99
    315a:	31 f0       	breq	.+12     	; 0x3168 <vfprintf+0x11a>
    315c:	83 37       	cpi	r24, 0x73	; 115
    315e:	71 f0       	breq	.+28     	; 0x317c <vfprintf+0x12e>
    3160:	83 35       	cpi	r24, 0x53	; 83
    3162:	09 f0       	breq	.+2      	; 0x3166 <vfprintf+0x118>
    3164:	59 c0       	rjmp	.+178    	; 0x3218 <vfprintf+0x1ca>
    3166:	21 c0       	rjmp	.+66     	; 0x31aa <vfprintf+0x15c>
    3168:	f8 01       	movw	r30, r16
    316a:	80 81       	ld	r24, Z
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	0e 5f       	subi	r16, 0xFE	; 254
    3170:	1f 4f       	sbci	r17, 0xFF	; 255
    3172:	88 24       	eor	r8, r8
    3174:	83 94       	inc	r8
    3176:	91 2c       	mov	r9, r1
    3178:	53 01       	movw	r10, r6
    317a:	13 c0       	rjmp	.+38     	; 0x31a2 <vfprintf+0x154>
    317c:	28 01       	movw	r4, r16
    317e:	f2 e0       	ldi	r31, 0x02	; 2
    3180:	4f 0e       	add	r4, r31
    3182:	51 1c       	adc	r5, r1
    3184:	f8 01       	movw	r30, r16
    3186:	a0 80       	ld	r10, Z
    3188:	b1 80       	ldd	r11, Z+1	; 0x01
    318a:	36 fe       	sbrs	r3, 6
    318c:	03 c0       	rjmp	.+6      	; 0x3194 <vfprintf+0x146>
    318e:	69 2d       	mov	r22, r9
    3190:	70 e0       	ldi	r23, 0x00	; 0
    3192:	02 c0       	rjmp	.+4      	; 0x3198 <vfprintf+0x14a>
    3194:	6f ef       	ldi	r22, 0xFF	; 255
    3196:	7f ef       	ldi	r23, 0xFF	; 255
    3198:	c5 01       	movw	r24, r10
    319a:	0e 94 57 1b 	call	0x36ae	; 0x36ae <strnlen>
    319e:	4c 01       	movw	r8, r24
    31a0:	82 01       	movw	r16, r4
    31a2:	f3 2d       	mov	r31, r3
    31a4:	ff 77       	andi	r31, 0x7F	; 127
    31a6:	3f 2e       	mov	r3, r31
    31a8:	16 c0       	rjmp	.+44     	; 0x31d6 <vfprintf+0x188>
    31aa:	28 01       	movw	r4, r16
    31ac:	22 e0       	ldi	r18, 0x02	; 2
    31ae:	42 0e       	add	r4, r18
    31b0:	51 1c       	adc	r5, r1
    31b2:	f8 01       	movw	r30, r16
    31b4:	a0 80       	ld	r10, Z
    31b6:	b1 80       	ldd	r11, Z+1	; 0x01
    31b8:	36 fe       	sbrs	r3, 6
    31ba:	03 c0       	rjmp	.+6      	; 0x31c2 <vfprintf+0x174>
    31bc:	69 2d       	mov	r22, r9
    31be:	70 e0       	ldi	r23, 0x00	; 0
    31c0:	02 c0       	rjmp	.+4      	; 0x31c6 <vfprintf+0x178>
    31c2:	6f ef       	ldi	r22, 0xFF	; 255
    31c4:	7f ef       	ldi	r23, 0xFF	; 255
    31c6:	c5 01       	movw	r24, r10
    31c8:	0e 94 45 1b 	call	0x368a	; 0x368a <strnlen_P>
    31cc:	4c 01       	movw	r8, r24
    31ce:	f3 2d       	mov	r31, r3
    31d0:	f0 68       	ori	r31, 0x80	; 128
    31d2:	3f 2e       	mov	r3, r31
    31d4:	82 01       	movw	r16, r4
    31d6:	33 fc       	sbrc	r3, 3
    31d8:	1b c0       	rjmp	.+54     	; 0x3210 <vfprintf+0x1c2>
    31da:	82 2d       	mov	r24, r2
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	88 16       	cp	r8, r24
    31e0:	99 06       	cpc	r9, r25
    31e2:	b0 f4       	brcc	.+44     	; 0x3210 <vfprintf+0x1c2>
    31e4:	b6 01       	movw	r22, r12
    31e6:	80 e2       	ldi	r24, 0x20	; 32
    31e8:	90 e0       	ldi	r25, 0x00	; 0
    31ea:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <fputc>
    31ee:	2a 94       	dec	r2
    31f0:	f4 cf       	rjmp	.-24     	; 0x31da <vfprintf+0x18c>
    31f2:	f5 01       	movw	r30, r10
    31f4:	37 fc       	sbrc	r3, 7
    31f6:	85 91       	lpm	r24, Z+
    31f8:	37 fe       	sbrs	r3, 7
    31fa:	81 91       	ld	r24, Z+
    31fc:	5f 01       	movw	r10, r30
    31fe:	b6 01       	movw	r22, r12
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <fputc>
    3206:	21 10       	cpse	r2, r1
    3208:	2a 94       	dec	r2
    320a:	21 e0       	ldi	r18, 0x01	; 1
    320c:	82 1a       	sub	r8, r18
    320e:	91 08       	sbc	r9, r1
    3210:	81 14       	cp	r8, r1
    3212:	91 04       	cpc	r9, r1
    3214:	71 f7       	brne	.-36     	; 0x31f2 <vfprintf+0x1a4>
    3216:	e8 c0       	rjmp	.+464    	; 0x33e8 <vfprintf+0x39a>
    3218:	84 36       	cpi	r24, 0x64	; 100
    321a:	11 f0       	breq	.+4      	; 0x3220 <vfprintf+0x1d2>
    321c:	89 36       	cpi	r24, 0x69	; 105
    321e:	41 f5       	brne	.+80     	; 0x3270 <vfprintf+0x222>
    3220:	f8 01       	movw	r30, r16
    3222:	37 fe       	sbrs	r3, 7
    3224:	07 c0       	rjmp	.+14     	; 0x3234 <vfprintf+0x1e6>
    3226:	60 81       	ld	r22, Z
    3228:	71 81       	ldd	r23, Z+1	; 0x01
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	0c 5f       	subi	r16, 0xFC	; 252
    3230:	1f 4f       	sbci	r17, 0xFF	; 255
    3232:	08 c0       	rjmp	.+16     	; 0x3244 <vfprintf+0x1f6>
    3234:	60 81       	ld	r22, Z
    3236:	71 81       	ldd	r23, Z+1	; 0x01
    3238:	07 2e       	mov	r0, r23
    323a:	00 0c       	add	r0, r0
    323c:	88 0b       	sbc	r24, r24
    323e:	99 0b       	sbc	r25, r25
    3240:	0e 5f       	subi	r16, 0xFE	; 254
    3242:	1f 4f       	sbci	r17, 0xFF	; 255
    3244:	f3 2d       	mov	r31, r3
    3246:	ff 76       	andi	r31, 0x6F	; 111
    3248:	3f 2e       	mov	r3, r31
    324a:	97 ff       	sbrs	r25, 7
    324c:	09 c0       	rjmp	.+18     	; 0x3260 <vfprintf+0x212>
    324e:	90 95       	com	r25
    3250:	80 95       	com	r24
    3252:	70 95       	com	r23
    3254:	61 95       	neg	r22
    3256:	7f 4f       	sbci	r23, 0xFF	; 255
    3258:	8f 4f       	sbci	r24, 0xFF	; 255
    325a:	9f 4f       	sbci	r25, 0xFF	; 255
    325c:	f0 68       	ori	r31, 0x80	; 128
    325e:	3f 2e       	mov	r3, r31
    3260:	2a e0       	ldi	r18, 0x0A	; 10
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	a3 01       	movw	r20, r6
    3266:	0e 94 ae 1b 	call	0x375c	; 0x375c <__ultoa_invert>
    326a:	88 2e       	mov	r8, r24
    326c:	86 18       	sub	r8, r6
    326e:	45 c0       	rjmp	.+138    	; 0x32fa <vfprintf+0x2ac>
    3270:	85 37       	cpi	r24, 0x75	; 117
    3272:	31 f4       	brne	.+12     	; 0x3280 <vfprintf+0x232>
    3274:	23 2d       	mov	r18, r3
    3276:	2f 7e       	andi	r18, 0xEF	; 239
    3278:	b2 2e       	mov	r11, r18
    327a:	2a e0       	ldi	r18, 0x0A	; 10
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	25 c0       	rjmp	.+74     	; 0x32ca <vfprintf+0x27c>
    3280:	93 2d       	mov	r25, r3
    3282:	99 7f       	andi	r25, 0xF9	; 249
    3284:	b9 2e       	mov	r11, r25
    3286:	8f 36       	cpi	r24, 0x6F	; 111
    3288:	c1 f0       	breq	.+48     	; 0x32ba <vfprintf+0x26c>
    328a:	18 f4       	brcc	.+6      	; 0x3292 <vfprintf+0x244>
    328c:	88 35       	cpi	r24, 0x58	; 88
    328e:	79 f0       	breq	.+30     	; 0x32ae <vfprintf+0x260>
    3290:	b5 c0       	rjmp	.+362    	; 0x33fc <vfprintf+0x3ae>
    3292:	80 37       	cpi	r24, 0x70	; 112
    3294:	19 f0       	breq	.+6      	; 0x329c <vfprintf+0x24e>
    3296:	88 37       	cpi	r24, 0x78	; 120
    3298:	21 f0       	breq	.+8      	; 0x32a2 <vfprintf+0x254>
    329a:	b0 c0       	rjmp	.+352    	; 0x33fc <vfprintf+0x3ae>
    329c:	e9 2f       	mov	r30, r25
    329e:	e0 61       	ori	r30, 0x10	; 16
    32a0:	be 2e       	mov	r11, r30
    32a2:	b4 fe       	sbrs	r11, 4
    32a4:	0d c0       	rjmp	.+26     	; 0x32c0 <vfprintf+0x272>
    32a6:	fb 2d       	mov	r31, r11
    32a8:	f4 60       	ori	r31, 0x04	; 4
    32aa:	bf 2e       	mov	r11, r31
    32ac:	09 c0       	rjmp	.+18     	; 0x32c0 <vfprintf+0x272>
    32ae:	34 fe       	sbrs	r3, 4
    32b0:	0a c0       	rjmp	.+20     	; 0x32c6 <vfprintf+0x278>
    32b2:	29 2f       	mov	r18, r25
    32b4:	26 60       	ori	r18, 0x06	; 6
    32b6:	b2 2e       	mov	r11, r18
    32b8:	06 c0       	rjmp	.+12     	; 0x32c6 <vfprintf+0x278>
    32ba:	28 e0       	ldi	r18, 0x08	; 8
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	05 c0       	rjmp	.+10     	; 0x32ca <vfprintf+0x27c>
    32c0:	20 e1       	ldi	r18, 0x10	; 16
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <vfprintf+0x27c>
    32c6:	20 e1       	ldi	r18, 0x10	; 16
    32c8:	32 e0       	ldi	r19, 0x02	; 2
    32ca:	f8 01       	movw	r30, r16
    32cc:	b7 fe       	sbrs	r11, 7
    32ce:	07 c0       	rjmp	.+14     	; 0x32de <vfprintf+0x290>
    32d0:	60 81       	ld	r22, Z
    32d2:	71 81       	ldd	r23, Z+1	; 0x01
    32d4:	82 81       	ldd	r24, Z+2	; 0x02
    32d6:	93 81       	ldd	r25, Z+3	; 0x03
    32d8:	0c 5f       	subi	r16, 0xFC	; 252
    32da:	1f 4f       	sbci	r17, 0xFF	; 255
    32dc:	06 c0       	rjmp	.+12     	; 0x32ea <vfprintf+0x29c>
    32de:	60 81       	ld	r22, Z
    32e0:	71 81       	ldd	r23, Z+1	; 0x01
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	0e 5f       	subi	r16, 0xFE	; 254
    32e8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ea:	a3 01       	movw	r20, r6
    32ec:	0e 94 ae 1b 	call	0x375c	; 0x375c <__ultoa_invert>
    32f0:	88 2e       	mov	r8, r24
    32f2:	86 18       	sub	r8, r6
    32f4:	fb 2d       	mov	r31, r11
    32f6:	ff 77       	andi	r31, 0x7F	; 127
    32f8:	3f 2e       	mov	r3, r31
    32fa:	36 fe       	sbrs	r3, 6
    32fc:	0d c0       	rjmp	.+26     	; 0x3318 <vfprintf+0x2ca>
    32fe:	23 2d       	mov	r18, r3
    3300:	2e 7f       	andi	r18, 0xFE	; 254
    3302:	a2 2e       	mov	r10, r18
    3304:	89 14       	cp	r8, r9
    3306:	58 f4       	brcc	.+22     	; 0x331e <vfprintf+0x2d0>
    3308:	34 fe       	sbrs	r3, 4
    330a:	0b c0       	rjmp	.+22     	; 0x3322 <vfprintf+0x2d4>
    330c:	32 fc       	sbrc	r3, 2
    330e:	09 c0       	rjmp	.+18     	; 0x3322 <vfprintf+0x2d4>
    3310:	83 2d       	mov	r24, r3
    3312:	8e 7e       	andi	r24, 0xEE	; 238
    3314:	a8 2e       	mov	r10, r24
    3316:	05 c0       	rjmp	.+10     	; 0x3322 <vfprintf+0x2d4>
    3318:	b8 2c       	mov	r11, r8
    331a:	a3 2c       	mov	r10, r3
    331c:	03 c0       	rjmp	.+6      	; 0x3324 <vfprintf+0x2d6>
    331e:	b8 2c       	mov	r11, r8
    3320:	01 c0       	rjmp	.+2      	; 0x3324 <vfprintf+0x2d6>
    3322:	b9 2c       	mov	r11, r9
    3324:	a4 fe       	sbrs	r10, 4
    3326:	0f c0       	rjmp	.+30     	; 0x3346 <vfprintf+0x2f8>
    3328:	fe 01       	movw	r30, r28
    332a:	e8 0d       	add	r30, r8
    332c:	f1 1d       	adc	r31, r1
    332e:	80 81       	ld	r24, Z
    3330:	80 33       	cpi	r24, 0x30	; 48
    3332:	21 f4       	brne	.+8      	; 0x333c <vfprintf+0x2ee>
    3334:	9a 2d       	mov	r25, r10
    3336:	99 7e       	andi	r25, 0xE9	; 233
    3338:	a9 2e       	mov	r10, r25
    333a:	09 c0       	rjmp	.+18     	; 0x334e <vfprintf+0x300>
    333c:	a2 fe       	sbrs	r10, 2
    333e:	06 c0       	rjmp	.+12     	; 0x334c <vfprintf+0x2fe>
    3340:	b3 94       	inc	r11
    3342:	b3 94       	inc	r11
    3344:	04 c0       	rjmp	.+8      	; 0x334e <vfprintf+0x300>
    3346:	8a 2d       	mov	r24, r10
    3348:	86 78       	andi	r24, 0x86	; 134
    334a:	09 f0       	breq	.+2      	; 0x334e <vfprintf+0x300>
    334c:	b3 94       	inc	r11
    334e:	a3 fc       	sbrc	r10, 3
    3350:	11 c0       	rjmp	.+34     	; 0x3374 <vfprintf+0x326>
    3352:	a0 fe       	sbrs	r10, 0
    3354:	06 c0       	rjmp	.+12     	; 0x3362 <vfprintf+0x314>
    3356:	b2 14       	cp	r11, r2
    3358:	88 f4       	brcc	.+34     	; 0x337c <vfprintf+0x32e>
    335a:	28 0c       	add	r2, r8
    335c:	92 2c       	mov	r9, r2
    335e:	9b 18       	sub	r9, r11
    3360:	0e c0       	rjmp	.+28     	; 0x337e <vfprintf+0x330>
    3362:	b2 14       	cp	r11, r2
    3364:	60 f4       	brcc	.+24     	; 0x337e <vfprintf+0x330>
    3366:	b6 01       	movw	r22, r12
    3368:	80 e2       	ldi	r24, 0x20	; 32
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <fputc>
    3370:	b3 94       	inc	r11
    3372:	f7 cf       	rjmp	.-18     	; 0x3362 <vfprintf+0x314>
    3374:	b2 14       	cp	r11, r2
    3376:	18 f4       	brcc	.+6      	; 0x337e <vfprintf+0x330>
    3378:	2b 18       	sub	r2, r11
    337a:	02 c0       	rjmp	.+4      	; 0x3380 <vfprintf+0x332>
    337c:	98 2c       	mov	r9, r8
    337e:	21 2c       	mov	r2, r1
    3380:	a4 fe       	sbrs	r10, 4
    3382:	10 c0       	rjmp	.+32     	; 0x33a4 <vfprintf+0x356>
    3384:	b6 01       	movw	r22, r12
    3386:	80 e3       	ldi	r24, 0x30	; 48
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <fputc>
    338e:	a2 fe       	sbrs	r10, 2
    3390:	17 c0       	rjmp	.+46     	; 0x33c0 <vfprintf+0x372>
    3392:	a1 fc       	sbrc	r10, 1
    3394:	03 c0       	rjmp	.+6      	; 0x339c <vfprintf+0x34e>
    3396:	88 e7       	ldi	r24, 0x78	; 120
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <vfprintf+0x352>
    339c:	88 e5       	ldi	r24, 0x58	; 88
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	b6 01       	movw	r22, r12
    33a2:	0c c0       	rjmp	.+24     	; 0x33bc <vfprintf+0x36e>
    33a4:	8a 2d       	mov	r24, r10
    33a6:	86 78       	andi	r24, 0x86	; 134
    33a8:	59 f0       	breq	.+22     	; 0x33c0 <vfprintf+0x372>
    33aa:	a1 fe       	sbrs	r10, 1
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <vfprintf+0x364>
    33ae:	8b e2       	ldi	r24, 0x2B	; 43
    33b0:	01 c0       	rjmp	.+2      	; 0x33b4 <vfprintf+0x366>
    33b2:	80 e2       	ldi	r24, 0x20	; 32
    33b4:	a7 fc       	sbrc	r10, 7
    33b6:	8d e2       	ldi	r24, 0x2D	; 45
    33b8:	b6 01       	movw	r22, r12
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <fputc>
    33c0:	89 14       	cp	r8, r9
    33c2:	38 f4       	brcc	.+14     	; 0x33d2 <vfprintf+0x384>
    33c4:	b6 01       	movw	r22, r12
    33c6:	80 e3       	ldi	r24, 0x30	; 48
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <fputc>
    33ce:	9a 94       	dec	r9
    33d0:	f7 cf       	rjmp	.-18     	; 0x33c0 <vfprintf+0x372>
    33d2:	8a 94       	dec	r8
    33d4:	f3 01       	movw	r30, r6
    33d6:	e8 0d       	add	r30, r8
    33d8:	f1 1d       	adc	r31, r1
    33da:	80 81       	ld	r24, Z
    33dc:	b6 01       	movw	r22, r12
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <fputc>
    33e4:	81 10       	cpse	r8, r1
    33e6:	f5 cf       	rjmp	.-22     	; 0x33d2 <vfprintf+0x384>
    33e8:	22 20       	and	r2, r2
    33ea:	09 f4       	brne	.+2      	; 0x33ee <vfprintf+0x3a0>
    33ec:	42 ce       	rjmp	.-892    	; 0x3072 <vfprintf+0x24>
    33ee:	b6 01       	movw	r22, r12
    33f0:	80 e2       	ldi	r24, 0x20	; 32
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <fputc>
    33f8:	2a 94       	dec	r2
    33fa:	f6 cf       	rjmp	.-20     	; 0x33e8 <vfprintf+0x39a>
    33fc:	f6 01       	movw	r30, r12
    33fe:	86 81       	ldd	r24, Z+6	; 0x06
    3400:	97 81       	ldd	r25, Z+7	; 0x07
    3402:	02 c0       	rjmp	.+4      	; 0x3408 <vfprintf+0x3ba>
    3404:	8f ef       	ldi	r24, 0xFF	; 255
    3406:	9f ef       	ldi	r25, 0xFF	; 255
    3408:	2b 96       	adiw	r28, 0x0b	; 11
    340a:	e2 e1       	ldi	r30, 0x12	; 18
    340c:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__epilogue_restores__>

00003410 <calloc>:
    3410:	0f 93       	push	r16
    3412:	1f 93       	push	r17
    3414:	cf 93       	push	r28
    3416:	df 93       	push	r29
    3418:	86 9f       	mul	r24, r22
    341a:	80 01       	movw	r16, r0
    341c:	87 9f       	mul	r24, r23
    341e:	10 0d       	add	r17, r0
    3420:	96 9f       	mul	r25, r22
    3422:	10 0d       	add	r17, r0
    3424:	11 24       	eor	r1, r1
    3426:	c8 01       	movw	r24, r16
    3428:	0e 94 24 1a 	call	0x3448	; 0x3448 <malloc>
    342c:	ec 01       	movw	r28, r24
    342e:	00 97       	sbiw	r24, 0x00	; 0
    3430:	29 f0       	breq	.+10     	; 0x343c <calloc+0x2c>
    3432:	a8 01       	movw	r20, r16
    3434:	60 e0       	ldi	r22, 0x00	; 0
    3436:	70 e0       	ldi	r23, 0x00	; 0
    3438:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <memset>
    343c:	ce 01       	movw	r24, r28
    343e:	df 91       	pop	r29
    3440:	cf 91       	pop	r28
    3442:	1f 91       	pop	r17
    3444:	0f 91       	pop	r16
    3446:	08 95       	ret

00003448 <malloc>:
    3448:	0f 93       	push	r16
    344a:	1f 93       	push	r17
    344c:	cf 93       	push	r28
    344e:	df 93       	push	r29
    3450:	82 30       	cpi	r24, 0x02	; 2
    3452:	91 05       	cpc	r25, r1
    3454:	10 f4       	brcc	.+4      	; 0x345a <malloc+0x12>
    3456:	82 e0       	ldi	r24, 0x02	; 2
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <__flp>
    345e:	f0 91 5f 04 	lds	r31, 0x045F	; 0x80045f <__flp+0x1>
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	a0 e0       	ldi	r26, 0x00	; 0
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	30 97       	sbiw	r30, 0x00	; 0
    346c:	19 f1       	breq	.+70     	; 0x34b4 <malloc+0x6c>
    346e:	40 81       	ld	r20, Z
    3470:	51 81       	ldd	r21, Z+1	; 0x01
    3472:	02 81       	ldd	r16, Z+2	; 0x02
    3474:	13 81       	ldd	r17, Z+3	; 0x03
    3476:	48 17       	cp	r20, r24
    3478:	59 07       	cpc	r21, r25
    347a:	c8 f0       	brcs	.+50     	; 0x34ae <malloc+0x66>
    347c:	84 17       	cp	r24, r20
    347e:	95 07       	cpc	r25, r21
    3480:	69 f4       	brne	.+26     	; 0x349c <malloc+0x54>
    3482:	10 97       	sbiw	r26, 0x00	; 0
    3484:	31 f0       	breq	.+12     	; 0x3492 <malloc+0x4a>
    3486:	12 96       	adiw	r26, 0x02	; 2
    3488:	0c 93       	st	X, r16
    348a:	12 97       	sbiw	r26, 0x02	; 2
    348c:	13 96       	adiw	r26, 0x03	; 3
    348e:	1c 93       	st	X, r17
    3490:	27 c0       	rjmp	.+78     	; 0x34e0 <malloc+0x98>
    3492:	00 93 5e 04 	sts	0x045E, r16	; 0x80045e <__flp>
    3496:	10 93 5f 04 	sts	0x045F, r17	; 0x80045f <__flp+0x1>
    349a:	22 c0       	rjmp	.+68     	; 0x34e0 <malloc+0x98>
    349c:	21 15       	cp	r18, r1
    349e:	31 05       	cpc	r19, r1
    34a0:	19 f0       	breq	.+6      	; 0x34a8 <malloc+0x60>
    34a2:	42 17       	cp	r20, r18
    34a4:	53 07       	cpc	r21, r19
    34a6:	18 f4       	brcc	.+6      	; 0x34ae <malloc+0x66>
    34a8:	9a 01       	movw	r18, r20
    34aa:	bd 01       	movw	r22, r26
    34ac:	ef 01       	movw	r28, r30
    34ae:	df 01       	movw	r26, r30
    34b0:	f8 01       	movw	r30, r16
    34b2:	db cf       	rjmp	.-74     	; 0x346a <malloc+0x22>
    34b4:	21 15       	cp	r18, r1
    34b6:	31 05       	cpc	r19, r1
    34b8:	f9 f0       	breq	.+62     	; 0x34f8 <malloc+0xb0>
    34ba:	28 1b       	sub	r18, r24
    34bc:	39 0b       	sbc	r19, r25
    34be:	24 30       	cpi	r18, 0x04	; 4
    34c0:	31 05       	cpc	r19, r1
    34c2:	80 f4       	brcc	.+32     	; 0x34e4 <malloc+0x9c>
    34c4:	8a 81       	ldd	r24, Y+2	; 0x02
    34c6:	9b 81       	ldd	r25, Y+3	; 0x03
    34c8:	61 15       	cp	r22, r1
    34ca:	71 05       	cpc	r23, r1
    34cc:	21 f0       	breq	.+8      	; 0x34d6 <malloc+0x8e>
    34ce:	fb 01       	movw	r30, r22
    34d0:	93 83       	std	Z+3, r25	; 0x03
    34d2:	82 83       	std	Z+2, r24	; 0x02
    34d4:	04 c0       	rjmp	.+8      	; 0x34de <malloc+0x96>
    34d6:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <__flp+0x1>
    34da:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <__flp>
    34de:	fe 01       	movw	r30, r28
    34e0:	32 96       	adiw	r30, 0x02	; 2
    34e2:	44 c0       	rjmp	.+136    	; 0x356c <malloc+0x124>
    34e4:	fe 01       	movw	r30, r28
    34e6:	e2 0f       	add	r30, r18
    34e8:	f3 1f       	adc	r31, r19
    34ea:	81 93       	st	Z+, r24
    34ec:	91 93       	st	Z+, r25
    34ee:	22 50       	subi	r18, 0x02	; 2
    34f0:	31 09       	sbc	r19, r1
    34f2:	39 83       	std	Y+1, r19	; 0x01
    34f4:	28 83       	st	Y, r18
    34f6:	3a c0       	rjmp	.+116    	; 0x356c <malloc+0x124>
    34f8:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <__brkval>
    34fc:	30 91 5d 04 	lds	r19, 0x045D	; 0x80045d <__brkval+0x1>
    3500:	23 2b       	or	r18, r19
    3502:	41 f4       	brne	.+16     	; 0x3514 <malloc+0xcc>
    3504:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3508:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    350c:	30 93 5d 04 	sts	0x045D, r19	; 0x80045d <__brkval+0x1>
    3510:	20 93 5c 04 	sts	0x045C, r18	; 0x80045c <__brkval>
    3514:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3518:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    351c:	21 15       	cp	r18, r1
    351e:	31 05       	cpc	r19, r1
    3520:	41 f4       	brne	.+16     	; 0x3532 <malloc+0xea>
    3522:	2d b7       	in	r18, 0x3d	; 61
    3524:	3e b7       	in	r19, 0x3e	; 62
    3526:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    352a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    352e:	24 1b       	sub	r18, r20
    3530:	35 0b       	sbc	r19, r21
    3532:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <__brkval>
    3536:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <__brkval+0x1>
    353a:	e2 17       	cp	r30, r18
    353c:	f3 07       	cpc	r31, r19
    353e:	a0 f4       	brcc	.+40     	; 0x3568 <malloc+0x120>
    3540:	2e 1b       	sub	r18, r30
    3542:	3f 0b       	sbc	r19, r31
    3544:	28 17       	cp	r18, r24
    3546:	39 07       	cpc	r19, r25
    3548:	78 f0       	brcs	.+30     	; 0x3568 <malloc+0x120>
    354a:	ac 01       	movw	r20, r24
    354c:	4e 5f       	subi	r20, 0xFE	; 254
    354e:	5f 4f       	sbci	r21, 0xFF	; 255
    3550:	24 17       	cp	r18, r20
    3552:	35 07       	cpc	r19, r21
    3554:	48 f0       	brcs	.+18     	; 0x3568 <malloc+0x120>
    3556:	4e 0f       	add	r20, r30
    3558:	5f 1f       	adc	r21, r31
    355a:	50 93 5d 04 	sts	0x045D, r21	; 0x80045d <__brkval+0x1>
    355e:	40 93 5c 04 	sts	0x045C, r20	; 0x80045c <__brkval>
    3562:	81 93       	st	Z+, r24
    3564:	91 93       	st	Z+, r25
    3566:	02 c0       	rjmp	.+4      	; 0x356c <malloc+0x124>
    3568:	e0 e0       	ldi	r30, 0x00	; 0
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	cf 01       	movw	r24, r30
    356e:	df 91       	pop	r29
    3570:	cf 91       	pop	r28
    3572:	1f 91       	pop	r17
    3574:	0f 91       	pop	r16
    3576:	08 95       	ret

00003578 <free>:
    3578:	cf 93       	push	r28
    357a:	df 93       	push	r29
    357c:	00 97       	sbiw	r24, 0x00	; 0
    357e:	09 f4       	brne	.+2      	; 0x3582 <free+0xa>
    3580:	81 c0       	rjmp	.+258    	; 0x3684 <free+0x10c>
    3582:	fc 01       	movw	r30, r24
    3584:	32 97       	sbiw	r30, 0x02	; 2
    3586:	13 82       	std	Z+3, r1	; 0x03
    3588:	12 82       	std	Z+2, r1	; 0x02
    358a:	a0 91 5e 04 	lds	r26, 0x045E	; 0x80045e <__flp>
    358e:	b0 91 5f 04 	lds	r27, 0x045F	; 0x80045f <__flp+0x1>
    3592:	10 97       	sbiw	r26, 0x00	; 0
    3594:	81 f4       	brne	.+32     	; 0x35b6 <free+0x3e>
    3596:	20 81       	ld	r18, Z
    3598:	31 81       	ldd	r19, Z+1	; 0x01
    359a:	82 0f       	add	r24, r18
    359c:	93 1f       	adc	r25, r19
    359e:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <__brkval>
    35a2:	30 91 5d 04 	lds	r19, 0x045D	; 0x80045d <__brkval+0x1>
    35a6:	28 17       	cp	r18, r24
    35a8:	39 07       	cpc	r19, r25
    35aa:	51 f5       	brne	.+84     	; 0x3600 <free+0x88>
    35ac:	f0 93 5d 04 	sts	0x045D, r31	; 0x80045d <__brkval+0x1>
    35b0:	e0 93 5c 04 	sts	0x045C, r30	; 0x80045c <__brkval>
    35b4:	67 c0       	rjmp	.+206    	; 0x3684 <free+0x10c>
    35b6:	ed 01       	movw	r28, r26
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	ce 17       	cp	r28, r30
    35be:	df 07       	cpc	r29, r31
    35c0:	40 f4       	brcc	.+16     	; 0x35d2 <free+0x5a>
    35c2:	4a 81       	ldd	r20, Y+2	; 0x02
    35c4:	5b 81       	ldd	r21, Y+3	; 0x03
    35c6:	9e 01       	movw	r18, r28
    35c8:	41 15       	cp	r20, r1
    35ca:	51 05       	cpc	r21, r1
    35cc:	f1 f0       	breq	.+60     	; 0x360a <free+0x92>
    35ce:	ea 01       	movw	r28, r20
    35d0:	f5 cf       	rjmp	.-22     	; 0x35bc <free+0x44>
    35d2:	d3 83       	std	Z+3, r29	; 0x03
    35d4:	c2 83       	std	Z+2, r28	; 0x02
    35d6:	40 81       	ld	r20, Z
    35d8:	51 81       	ldd	r21, Z+1	; 0x01
    35da:	84 0f       	add	r24, r20
    35dc:	95 1f       	adc	r25, r21
    35de:	c8 17       	cp	r28, r24
    35e0:	d9 07       	cpc	r29, r25
    35e2:	59 f4       	brne	.+22     	; 0x35fa <free+0x82>
    35e4:	88 81       	ld	r24, Y
    35e6:	99 81       	ldd	r25, Y+1	; 0x01
    35e8:	84 0f       	add	r24, r20
    35ea:	95 1f       	adc	r25, r21
    35ec:	02 96       	adiw	r24, 0x02	; 2
    35ee:	91 83       	std	Z+1, r25	; 0x01
    35f0:	80 83       	st	Z, r24
    35f2:	8a 81       	ldd	r24, Y+2	; 0x02
    35f4:	9b 81       	ldd	r25, Y+3	; 0x03
    35f6:	93 83       	std	Z+3, r25	; 0x03
    35f8:	82 83       	std	Z+2, r24	; 0x02
    35fa:	21 15       	cp	r18, r1
    35fc:	31 05       	cpc	r19, r1
    35fe:	29 f4       	brne	.+10     	; 0x360a <free+0x92>
    3600:	f0 93 5f 04 	sts	0x045F, r31	; 0x80045f <__flp+0x1>
    3604:	e0 93 5e 04 	sts	0x045E, r30	; 0x80045e <__flp>
    3608:	3d c0       	rjmp	.+122    	; 0x3684 <free+0x10c>
    360a:	e9 01       	movw	r28, r18
    360c:	fb 83       	std	Y+3, r31	; 0x03
    360e:	ea 83       	std	Y+2, r30	; 0x02
    3610:	49 91       	ld	r20, Y+
    3612:	59 91       	ld	r21, Y+
    3614:	c4 0f       	add	r28, r20
    3616:	d5 1f       	adc	r29, r21
    3618:	ec 17       	cp	r30, r28
    361a:	fd 07       	cpc	r31, r29
    361c:	61 f4       	brne	.+24     	; 0x3636 <free+0xbe>
    361e:	80 81       	ld	r24, Z
    3620:	91 81       	ldd	r25, Z+1	; 0x01
    3622:	84 0f       	add	r24, r20
    3624:	95 1f       	adc	r25, r21
    3626:	02 96       	adiw	r24, 0x02	; 2
    3628:	e9 01       	movw	r28, r18
    362a:	99 83       	std	Y+1, r25	; 0x01
    362c:	88 83       	st	Y, r24
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	9b 83       	std	Y+3, r25	; 0x03
    3634:	8a 83       	std	Y+2, r24	; 0x02
    3636:	e0 e0       	ldi	r30, 0x00	; 0
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	12 96       	adiw	r26, 0x02	; 2
    363c:	8d 91       	ld	r24, X+
    363e:	9c 91       	ld	r25, X
    3640:	13 97       	sbiw	r26, 0x03	; 3
    3642:	00 97       	sbiw	r24, 0x00	; 0
    3644:	19 f0       	breq	.+6      	; 0x364c <free+0xd4>
    3646:	fd 01       	movw	r30, r26
    3648:	dc 01       	movw	r26, r24
    364a:	f7 cf       	rjmp	.-18     	; 0x363a <free+0xc2>
    364c:	8d 91       	ld	r24, X+
    364e:	9c 91       	ld	r25, X
    3650:	11 97       	sbiw	r26, 0x01	; 1
    3652:	9d 01       	movw	r18, r26
    3654:	2e 5f       	subi	r18, 0xFE	; 254
    3656:	3f 4f       	sbci	r19, 0xFF	; 255
    3658:	82 0f       	add	r24, r18
    365a:	93 1f       	adc	r25, r19
    365c:	20 91 5c 04 	lds	r18, 0x045C	; 0x80045c <__brkval>
    3660:	30 91 5d 04 	lds	r19, 0x045D	; 0x80045d <__brkval+0x1>
    3664:	28 17       	cp	r18, r24
    3666:	39 07       	cpc	r19, r25
    3668:	69 f4       	brne	.+26     	; 0x3684 <free+0x10c>
    366a:	30 97       	sbiw	r30, 0x00	; 0
    366c:	29 f4       	brne	.+10     	; 0x3678 <free+0x100>
    366e:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <__flp+0x1>
    3672:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <__flp>
    3676:	02 c0       	rjmp	.+4      	; 0x367c <free+0x104>
    3678:	13 82       	std	Z+3, r1	; 0x03
    367a:	12 82       	std	Z+2, r1	; 0x02
    367c:	b0 93 5d 04 	sts	0x045D, r27	; 0x80045d <__brkval+0x1>
    3680:	a0 93 5c 04 	sts	0x045C, r26	; 0x80045c <__brkval>
    3684:	df 91       	pop	r29
    3686:	cf 91       	pop	r28
    3688:	08 95       	ret

0000368a <strnlen_P>:
    368a:	fc 01       	movw	r30, r24
    368c:	05 90       	lpm	r0, Z+
    368e:	61 50       	subi	r22, 0x01	; 1
    3690:	70 40       	sbci	r23, 0x00	; 0
    3692:	01 10       	cpse	r0, r1
    3694:	d8 f7       	brcc	.-10     	; 0x368c <strnlen_P+0x2>
    3696:	80 95       	com	r24
    3698:	90 95       	com	r25
    369a:	8e 0f       	add	r24, r30
    369c:	9f 1f       	adc	r25, r31
    369e:	08 95       	ret

000036a0 <memset>:
    36a0:	dc 01       	movw	r26, r24
    36a2:	01 c0       	rjmp	.+2      	; 0x36a6 <memset+0x6>
    36a4:	6d 93       	st	X+, r22
    36a6:	41 50       	subi	r20, 0x01	; 1
    36a8:	50 40       	sbci	r21, 0x00	; 0
    36aa:	e0 f7       	brcc	.-8      	; 0x36a4 <memset+0x4>
    36ac:	08 95       	ret

000036ae <strnlen>:
    36ae:	fc 01       	movw	r30, r24
    36b0:	61 50       	subi	r22, 0x01	; 1
    36b2:	70 40       	sbci	r23, 0x00	; 0
    36b4:	01 90       	ld	r0, Z+
    36b6:	01 10       	cpse	r0, r1
    36b8:	d8 f7       	brcc	.-10     	; 0x36b0 <strnlen+0x2>
    36ba:	80 95       	com	r24
    36bc:	90 95       	com	r25
    36be:	8e 0f       	add	r24, r30
    36c0:	9f 1f       	adc	r25, r31
    36c2:	08 95       	ret

000036c4 <strrev>:
    36c4:	dc 01       	movw	r26, r24
    36c6:	fc 01       	movw	r30, r24
    36c8:	67 2f       	mov	r22, r23
    36ca:	71 91       	ld	r23, Z+
    36cc:	77 23       	and	r23, r23
    36ce:	e1 f7       	brne	.-8      	; 0x36c8 <strrev+0x4>
    36d0:	32 97       	sbiw	r30, 0x02	; 2
    36d2:	04 c0       	rjmp	.+8      	; 0x36dc <strrev+0x18>
    36d4:	7c 91       	ld	r23, X
    36d6:	6d 93       	st	X+, r22
    36d8:	70 83       	st	Z, r23
    36da:	62 91       	ld	r22, -Z
    36dc:	ae 17       	cp	r26, r30
    36de:	bf 07       	cpc	r27, r31
    36e0:	c8 f3       	brcs	.-14     	; 0x36d4 <strrev+0x10>
    36e2:	08 95       	ret

000036e4 <fputc>:
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	cf 93       	push	r28
    36ea:	df 93       	push	r29
    36ec:	fb 01       	movw	r30, r22
    36ee:	23 81       	ldd	r18, Z+3	; 0x03
    36f0:	21 fd       	sbrc	r18, 1
    36f2:	03 c0       	rjmp	.+6      	; 0x36fa <fputc+0x16>
    36f4:	8f ef       	ldi	r24, 0xFF	; 255
    36f6:	9f ef       	ldi	r25, 0xFF	; 255
    36f8:	2c c0       	rjmp	.+88     	; 0x3752 <fputc+0x6e>
    36fa:	22 ff       	sbrs	r18, 2
    36fc:	16 c0       	rjmp	.+44     	; 0x372a <fputc+0x46>
    36fe:	46 81       	ldd	r20, Z+6	; 0x06
    3700:	57 81       	ldd	r21, Z+7	; 0x07
    3702:	24 81       	ldd	r18, Z+4	; 0x04
    3704:	35 81       	ldd	r19, Z+5	; 0x05
    3706:	42 17       	cp	r20, r18
    3708:	53 07       	cpc	r21, r19
    370a:	44 f4       	brge	.+16     	; 0x371c <fputc+0x38>
    370c:	a0 81       	ld	r26, Z
    370e:	b1 81       	ldd	r27, Z+1	; 0x01
    3710:	9d 01       	movw	r18, r26
    3712:	2f 5f       	subi	r18, 0xFF	; 255
    3714:	3f 4f       	sbci	r19, 0xFF	; 255
    3716:	31 83       	std	Z+1, r19	; 0x01
    3718:	20 83       	st	Z, r18
    371a:	8c 93       	st	X, r24
    371c:	26 81       	ldd	r18, Z+6	; 0x06
    371e:	37 81       	ldd	r19, Z+7	; 0x07
    3720:	2f 5f       	subi	r18, 0xFF	; 255
    3722:	3f 4f       	sbci	r19, 0xFF	; 255
    3724:	37 83       	std	Z+7, r19	; 0x07
    3726:	26 83       	std	Z+6, r18	; 0x06
    3728:	14 c0       	rjmp	.+40     	; 0x3752 <fputc+0x6e>
    372a:	8b 01       	movw	r16, r22
    372c:	ec 01       	movw	r28, r24
    372e:	fb 01       	movw	r30, r22
    3730:	00 84       	ldd	r0, Z+8	; 0x08
    3732:	f1 85       	ldd	r31, Z+9	; 0x09
    3734:	e0 2d       	mov	r30, r0
    3736:	09 95       	icall
    3738:	89 2b       	or	r24, r25
    373a:	e1 f6       	brne	.-72     	; 0x36f4 <fputc+0x10>
    373c:	d8 01       	movw	r26, r16
    373e:	16 96       	adiw	r26, 0x06	; 6
    3740:	8d 91       	ld	r24, X+
    3742:	9c 91       	ld	r25, X
    3744:	17 97       	sbiw	r26, 0x07	; 7
    3746:	01 96       	adiw	r24, 0x01	; 1
    3748:	17 96       	adiw	r26, 0x07	; 7
    374a:	9c 93       	st	X, r25
    374c:	8e 93       	st	-X, r24
    374e:	16 97       	sbiw	r26, 0x06	; 6
    3750:	ce 01       	movw	r24, r28
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	1f 91       	pop	r17
    3758:	0f 91       	pop	r16
    375a:	08 95       	ret

0000375c <__ultoa_invert>:
    375c:	fa 01       	movw	r30, r20
    375e:	aa 27       	eor	r26, r26
    3760:	28 30       	cpi	r18, 0x08	; 8
    3762:	51 f1       	breq	.+84     	; 0x37b8 <__ultoa_invert+0x5c>
    3764:	20 31       	cpi	r18, 0x10	; 16
    3766:	81 f1       	breq	.+96     	; 0x37c8 <__ultoa_invert+0x6c>
    3768:	e8 94       	clt
    376a:	6f 93       	push	r22
    376c:	6e 7f       	andi	r22, 0xFE	; 254
    376e:	6e 5f       	subi	r22, 0xFE	; 254
    3770:	7f 4f       	sbci	r23, 0xFF	; 255
    3772:	8f 4f       	sbci	r24, 0xFF	; 255
    3774:	9f 4f       	sbci	r25, 0xFF	; 255
    3776:	af 4f       	sbci	r26, 0xFF	; 255
    3778:	b1 e0       	ldi	r27, 0x01	; 1
    377a:	3e d0       	rcall	.+124    	; 0x37f8 <__ultoa_invert+0x9c>
    377c:	b4 e0       	ldi	r27, 0x04	; 4
    377e:	3c d0       	rcall	.+120    	; 0x37f8 <__ultoa_invert+0x9c>
    3780:	67 0f       	add	r22, r23
    3782:	78 1f       	adc	r23, r24
    3784:	89 1f       	adc	r24, r25
    3786:	9a 1f       	adc	r25, r26
    3788:	a1 1d       	adc	r26, r1
    378a:	68 0f       	add	r22, r24
    378c:	79 1f       	adc	r23, r25
    378e:	8a 1f       	adc	r24, r26
    3790:	91 1d       	adc	r25, r1
    3792:	a1 1d       	adc	r26, r1
    3794:	6a 0f       	add	r22, r26
    3796:	71 1d       	adc	r23, r1
    3798:	81 1d       	adc	r24, r1
    379a:	91 1d       	adc	r25, r1
    379c:	a1 1d       	adc	r26, r1
    379e:	20 d0       	rcall	.+64     	; 0x37e0 <__ultoa_invert+0x84>
    37a0:	09 f4       	brne	.+2      	; 0x37a4 <__ultoa_invert+0x48>
    37a2:	68 94       	set
    37a4:	3f 91       	pop	r19
    37a6:	2a e0       	ldi	r18, 0x0A	; 10
    37a8:	26 9f       	mul	r18, r22
    37aa:	11 24       	eor	r1, r1
    37ac:	30 19       	sub	r19, r0
    37ae:	30 5d       	subi	r19, 0xD0	; 208
    37b0:	31 93       	st	Z+, r19
    37b2:	de f6       	brtc	.-74     	; 0x376a <__ultoa_invert+0xe>
    37b4:	cf 01       	movw	r24, r30
    37b6:	08 95       	ret
    37b8:	46 2f       	mov	r20, r22
    37ba:	47 70       	andi	r20, 0x07	; 7
    37bc:	40 5d       	subi	r20, 0xD0	; 208
    37be:	41 93       	st	Z+, r20
    37c0:	b3 e0       	ldi	r27, 0x03	; 3
    37c2:	0f d0       	rcall	.+30     	; 0x37e2 <__ultoa_invert+0x86>
    37c4:	c9 f7       	brne	.-14     	; 0x37b8 <__ultoa_invert+0x5c>
    37c6:	f6 cf       	rjmp	.-20     	; 0x37b4 <__ultoa_invert+0x58>
    37c8:	46 2f       	mov	r20, r22
    37ca:	4f 70       	andi	r20, 0x0F	; 15
    37cc:	40 5d       	subi	r20, 0xD0	; 208
    37ce:	4a 33       	cpi	r20, 0x3A	; 58
    37d0:	18 f0       	brcs	.+6      	; 0x37d8 <__ultoa_invert+0x7c>
    37d2:	49 5d       	subi	r20, 0xD9	; 217
    37d4:	31 fd       	sbrc	r19, 1
    37d6:	40 52       	subi	r20, 0x20	; 32
    37d8:	41 93       	st	Z+, r20
    37da:	02 d0       	rcall	.+4      	; 0x37e0 <__ultoa_invert+0x84>
    37dc:	a9 f7       	brne	.-22     	; 0x37c8 <__ultoa_invert+0x6c>
    37de:	ea cf       	rjmp	.-44     	; 0x37b4 <__ultoa_invert+0x58>
    37e0:	b4 e0       	ldi	r27, 0x04	; 4
    37e2:	a6 95       	lsr	r26
    37e4:	97 95       	ror	r25
    37e6:	87 95       	ror	r24
    37e8:	77 95       	ror	r23
    37ea:	67 95       	ror	r22
    37ec:	ba 95       	dec	r27
    37ee:	c9 f7       	brne	.-14     	; 0x37e2 <__ultoa_invert+0x86>
    37f0:	00 97       	sbiw	r24, 0x00	; 0
    37f2:	61 05       	cpc	r22, r1
    37f4:	71 05       	cpc	r23, r1
    37f6:	08 95       	ret
    37f8:	9b 01       	movw	r18, r22
    37fa:	ac 01       	movw	r20, r24
    37fc:	0a 2e       	mov	r0, r26
    37fe:	06 94       	lsr	r0
    3800:	57 95       	ror	r21
    3802:	47 95       	ror	r20
    3804:	37 95       	ror	r19
    3806:	27 95       	ror	r18
    3808:	ba 95       	dec	r27
    380a:	c9 f7       	brne	.-14     	; 0x37fe <__ultoa_invert+0xa2>
    380c:	62 0f       	add	r22, r18
    380e:	73 1f       	adc	r23, r19
    3810:	84 1f       	adc	r24, r20
    3812:	95 1f       	adc	r25, r21
    3814:	a0 1d       	adc	r26, r0
    3816:	08 95       	ret

00003818 <__prologue_saves__>:
    3818:	2f 92       	push	r2
    381a:	3f 92       	push	r3
    381c:	4f 92       	push	r4
    381e:	5f 92       	push	r5
    3820:	6f 92       	push	r6
    3822:	7f 92       	push	r7
    3824:	8f 92       	push	r8
    3826:	9f 92       	push	r9
    3828:	af 92       	push	r10
    382a:	bf 92       	push	r11
    382c:	cf 92       	push	r12
    382e:	df 92       	push	r13
    3830:	ef 92       	push	r14
    3832:	ff 92       	push	r15
    3834:	0f 93       	push	r16
    3836:	1f 93       	push	r17
    3838:	cf 93       	push	r28
    383a:	df 93       	push	r29
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	ca 1b       	sub	r28, r26
    3842:	db 0b       	sbc	r29, r27
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	f8 94       	cli
    3848:	de bf       	out	0x3e, r29	; 62
    384a:	0f be       	out	0x3f, r0	; 63
    384c:	cd bf       	out	0x3d, r28	; 61
    384e:	09 94       	ijmp

00003850 <__epilogue_restores__>:
    3850:	2a 88       	ldd	r2, Y+18	; 0x12
    3852:	39 88       	ldd	r3, Y+17	; 0x11
    3854:	48 88       	ldd	r4, Y+16	; 0x10
    3856:	5f 84       	ldd	r5, Y+15	; 0x0f
    3858:	6e 84       	ldd	r6, Y+14	; 0x0e
    385a:	7d 84       	ldd	r7, Y+13	; 0x0d
    385c:	8c 84       	ldd	r8, Y+12	; 0x0c
    385e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3860:	aa 84       	ldd	r10, Y+10	; 0x0a
    3862:	b9 84       	ldd	r11, Y+9	; 0x09
    3864:	c8 84       	ldd	r12, Y+8	; 0x08
    3866:	df 80       	ldd	r13, Y+7	; 0x07
    3868:	ee 80       	ldd	r14, Y+6	; 0x06
    386a:	fd 80       	ldd	r15, Y+5	; 0x05
    386c:	0c 81       	ldd	r16, Y+4	; 0x04
    386e:	1b 81       	ldd	r17, Y+3	; 0x03
    3870:	aa 81       	ldd	r26, Y+2	; 0x02
    3872:	b9 81       	ldd	r27, Y+1	; 0x01
    3874:	ce 0f       	add	r28, r30
    3876:	d1 1d       	adc	r29, r1
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	f8 94       	cli
    387c:	de bf       	out	0x3e, r29	; 62
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	cd bf       	out	0x3d, r28	; 61
    3882:	ed 01       	movw	r28, r26
    3884:	08 95       	ret

00003886 <_exit>:
    3886:	f8 94       	cli

00003888 <__stop_program>:
    3888:	ff cf       	rjmp	.-2      	; 0x3888 <__stop_program>
