
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  0000156e  00001602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000156e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080020a  0080020a  0000170c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020f9  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001161  00000000  00000000  00003abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000122e  00000000  00000000  00004c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000504  00000000  00000000  00005e4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000775  00000000  00000000  00006350  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001068  00000000  00000000  00006ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00007b2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_pos+0x32>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ee e6       	ldi	r30, 0x6E	; 110
     37c:	f5 e1       	ldi	r31, 0x15	; 21
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 30       	cpi	r26, 0x0A	; 10
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	aa e0       	ldi	r26, 0x0A	; 10
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ad 31       	cpi	r26, 0x1D	; 29
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 01 04 	call	0x802	; 0x802 <main>
     39e:	0c 94 b5 0a 	jmp	0x156a	; 0x156a <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include "setup.h"
#include <util/delay.h>

int ADC_init(void) {
	//Enable the external memory interface/4 bits address, page 26-35 in Atmega162 data sheet
	MCUCR |= (1<<SRE);
     3a6:	85 b7       	in	r24, 0x35	; 53
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     3ac:	80 b7       	in	r24, 0x30	; 48
     3ae:	80 62       	ori	r24, 0x20	; 32
     3b0:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input, INT0, PD2
	DDRB &= ~(1<<PIND2);
     3b2:	ba 98       	cbi	0x17, 2	; 23
	
	return 0;
}
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	08 95       	ret

000003ba <ADC_read>:
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC, used as chip select
	volatile char *adc = (char *) 0x1400;
	
	//checks if the channel is valid, we can only use channel 1-4.
	if(channel > 3) {return 0;}
     3ba:	84 30       	cpi	r24, 0x04	; 4
     3bc:	48 f4       	brcc	.+18     	; 0x3d0 <ADC_read+0x16>
	
	//Choose channel in ADC, lets us chose what device we want to read
	*adc = 0x04 | channel;
     3be:	84 60       	ori	r24, 0x04	; 4
     3c0:	e0 e0       	ldi	r30, 0x00	; 0
     3c2:	f4 e1       	ldi	r31, 0x14	; 20
     3c4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c6:	84 ea       	ldi	r24, 0xA4	; 164
     3c8:	8a 95       	dec	r24
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <ADC_read+0xe>

	//delay to let the adc finish its conversion
	_delay_us(100);
	return *adc;
     3cc:	80 81       	ld	r24, Z
     3ce:	08 95       	ret
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC, used as chip select
	volatile char *adc = (char *) 0x1400;
	
	//checks if the channel is valid, we can only use channel 1-4.
	if(channel > 3) {return 0;}
     3d0:	80 e0       	ldi	r24, 0x00	; 0
	*adc = 0x04 | channel;

	//delay to let the adc finish its conversion
	_delay_us(100);
	return *adc;
     3d2:	08 95       	ret

000003d4 <CAN_init>:
uint8_t rx_flag = 0;

//function to initiate can, and set it in the right mode
int CAN_init(void) {
	//Enter config mode
	MCP_init();
     3d4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCP_init>
	
	//Turn masks/filters off, rollover disabled
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, 0b01101000);
     3d8:	48 e6       	ldi	r20, 0x68	; 104
     3da:	60 e6       	ldi	r22, 0x60	; 96
     3dc:	80 e6       	ldi	r24, 0x60	; 96
     3de:	0e 94 18 05 	call	0xa30	; 0xa30 <MCP_bit_modify>
	//Enable interrupt when message is received
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0x01);
     3e2:	41 e0       	ldi	r20, 0x01	; 1
     3e4:	63 e0       	ldi	r22, 0x03	; 3
     3e6:	8b e2       	ldi	r24, 0x2B	; 43
     3e8:	0e 94 18 05 	call	0xa30	; 0xa30 <MCP_bit_modify>
	
	//Enable normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	60 ee       	ldi	r22, 0xE0	; 224
     3f0:	8f e0       	ldi	r24, 0x0F	; 15
     3f2:	0e 94 18 05 	call	0xa30	; 0xa30 <MCP_bit_modify>
	
	//check if can is in normal mode, for debugging
	uint8_t value = MCP_read(MCP_CANSTAT);
     3f6:	8e e0       	ldi	r24, 0x0E	; 14
     3f8:	0e 94 c4 04 	call	0x988	; 0x988 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     3fc:	80 7e       	andi	r24, 0xE0	; 224
     3fe:	59 f0       	breq	.+22     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
		printf("ERROR..ERROR...LOOPBACK NOT WORKING");
     400:	8a e0       	ldi	r24, 0x0A	; 10
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	9f 93       	push	r25
     406:	8f 93       	push	r24
     408:	0e 94 9a 06 	call	0xd34	; 0xd34 <printf>
		return 1;
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	08 95       	ret
	}
	
	

	return 0;
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	90 e0       	ldi	r25, 0x00	; 0
}
     41a:	08 95       	ret

0000041c <CAN_error>:
}


//Function that checks for error
int CAN_error(void) {
	uint8_t error = MCP_read(MCP_TXB0CTRL);
     41c:	80 e3       	ldi	r24, 0x30	; 48
     41e:	0e 94 c4 04 	call	0x988	; 0x988 <MCP_read>
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
     422:	84 fd       	sbrc	r24, 4
     424:	05 c0       	rjmp	.+10     	; 0x430 <CAN_error+0x14>
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
     426:	85 fd       	sbrc	r24, 5
     428:	06 c0       	rjmp	.+12     	; 0x436 <CAN_error+0x1a>
	
	return 0;
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	08 95       	ret
//Function that checks for error
int CAN_error(void) {
	uint8_t error = MCP_read(MCP_TXB0CTRL);
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	9f ef       	ldi	r25, 0xFF	; 255
     434:	08 95       	ret
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
     436:	8e ef       	ldi	r24, 0xFE	; 254
     438:	9f ef       	ldi	r25, 0xFF	; 255
	
	return 0;
}
     43a:	08 95       	ret

0000043c <CAN_transmit_complete>:


int CAN_transmit_complete(void) {
	//Check if TX buffer is not pending transmission (TXREQ = 0)
	if (test_bit(MCP_read(MCP_TXB0CTRL), 3)) {
     43c:	80 e3       	ldi	r24, 0x30	; 48
     43e:	0e 94 c4 04 	call	0x988	; 0x988 <MCP_read>
     442:	86 95       	lsr	r24
     444:	86 95       	lsr	r24
     446:	86 95       	lsr	r24
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	89 27       	eor	r24, r25
		return 0;
		} else {
		return 1;
	}
}
     44c:	81 70       	andi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	08 95       	ret

00000452 <CAN_message_send>:
	return 0;
}


//Function to send CAN messages, sets, id, length and puts data into data 1-8
int CAN_message_send(can_msg* message) {
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	8c 01       	movw	r16, r24
	uint8_t i;
	
	//Check if there is no pending transmission
	if (CAN_transmit_complete()) {
     45a:	0e 94 1e 02 	call	0x43c	; 0x43c <CAN_transmit_complete>
     45e:	89 2b       	or	r24, r25
     460:	09 f4       	brne	.+2      	; 0x464 <CAN_message_send+0x12>
     462:	3f c0       	rjmp	.+126    	; 0x4e2 <CAN_message_send+0x90>
		
		//Set the message id (use standard identifier)
		MCP_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
     464:	f8 01       	movw	r30, r16
     466:	60 81       	ld	r22, Z
     468:	71 81       	ldd	r23, Z+1	; 0x01
     46a:	76 95       	lsr	r23
     46c:	67 95       	ror	r22
     46e:	76 95       	lsr	r23
     470:	67 95       	ror	r22
     472:	76 95       	lsr	r23
     474:	67 95       	ror	r22
     476:	81 e3       	ldi	r24, 0x31	; 49
     478:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <MCP_write>
		MCP_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
     47c:	f8 01       	movw	r30, r16
     47e:	60 81       	ld	r22, Z
     480:	71 81       	ldd	r23, Z+1	; 0x01
     482:	66 0f       	add	r22, r22
     484:	77 1f       	adc	r23, r23
     486:	62 95       	swap	r22
     488:	72 95       	swap	r23
     48a:	70 7f       	andi	r23, 0xF0	; 240
     48c:	76 27       	eor	r23, r22
     48e:	60 7f       	andi	r22, 0xF0	; 240
     490:	76 27       	eor	r23, r22
     492:	82 e3       	ldi	r24, 0x32	; 50
     494:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <MCP_write>
		MCP_write(MCP_TXB0EID8, 0);
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	83 e4       	ldi	r24, 0x43	; 67
     49c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <MCP_write>
		MCP_write(MCP_TXB0EID0, 0);
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	84 e4       	ldi	r24, 0x44	; 68
     4a4:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <MCP_write>
		
		//Set data length
		MCP_write(MCP_TXB0DLC, message->length);
     4a8:	f8 01       	movw	r30, r16
     4aa:	62 81       	ldd	r22, Z+2	; 0x02
     4ac:	85 e3       	ldi	r24, 0x35	; 53
     4ae:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <MCP_write>

		//Set data bytes (max. 8 bytes, 0-7)
		for (i = 0; i < message->length; i++) {
     4b2:	f8 01       	movw	r30, r16
     4b4:	82 81       	ldd	r24, Z+2	; 0x02
     4b6:	88 23       	and	r24, r24
     4b8:	71 f0       	breq	.+28     	; 0x4d6 <CAN_message_send+0x84>
     4ba:	c0 e0       	ldi	r28, 0x00	; 0
			MCP_write(MCP_TXB0D0 + i, message->data[i]);
     4bc:	f8 01       	movw	r30, r16
     4be:	ec 0f       	add	r30, r28
     4c0:	f1 1d       	adc	r31, r1
     4c2:	63 81       	ldd	r22, Z+3	; 0x03
     4c4:	86 e3       	ldi	r24, 0x36	; 54
     4c6:	8c 0f       	add	r24, r28
     4c8:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <MCP_write>
		
		//Set data length
		MCP_write(MCP_TXB0DLC, message->length);

		//Set data bytes (max. 8 bytes, 0-7)
		for (i = 0; i < message->length; i++) {
     4cc:	cf 5f       	subi	r28, 0xFF	; 255
     4ce:	f8 01       	movw	r30, r16
     4d0:	82 81       	ldd	r24, Z+2	; 0x02
     4d2:	c8 17       	cp	r28, r24
     4d4:	98 f3       	brcs	.-26     	; 0x4bc <CAN_message_send+0x6a>
			MCP_write(MCP_TXB0D0 + i, message->data[i]);
		}
		
		//Request to send via TX0
		MCP_request_to_send(MCP_RTS_TX0);
     4d6:	81 e8       	ldi	r24, 0x81	; 129
     4d8:	0e 94 09 05 	call	0xa12	; 0xa12 <MCP_request_to_send>
		if (CAN_error() < 0) {
			return -1;
		}
	}
	
	return 0;
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <CAN_message_send+0x9e>
		
		//Request to send via TX0
		MCP_request_to_send(MCP_RTS_TX0);
		//return error if it does not work
		} else {
		if (CAN_error() < 0) {
     4e2:	0e 94 0e 02 	call	0x41c	; 0x41c <CAN_error>
     4e6:	99 0f       	add	r25, r25
     4e8:	99 0b       	sbc	r25, r25
     4ea:	89 2f       	mov	r24, r25
     4ec:	99 0f       	add	r25, r25
     4ee:	99 0b       	sbc	r25, r25
			return -1;
		}
	}
	
	return 0;
}
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	08 95       	ret

000004f8 <CAN_data_receive>:
}



//function that makes it possible to receive can messages
can_msg CAN_data_receive(void) {
     4f8:	9f 92       	push	r9
     4fa:	af 92       	push	r10
     4fc:	bf 92       	push	r11
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	2b 97       	sbiw	r28, 0x0b	; 11
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	5c 01       	movw	r10, r24
	uint8_t i;
	can_msg message = {0};
     520:	fe 01       	movw	r30, r28
     522:	31 96       	adiw	r30, 0x01	; 1
     524:	8b e0       	ldi	r24, 0x0B	; 11
     526:	df 01       	movw	r26, r30
     528:	1d 92       	st	X+, r1
     52a:	8a 95       	dec	r24
     52c:	e9 f7       	brne	.-6      	; 0x528 <__stack+0x29>
	
	//Check if RX buffer has a message
	if (rx_flag == 1) {
     52e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	71 f5       	brne	.+92     	; 0x592 <__stack+0x93>
		
		//Get message id
		message.id  = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
     536:	81 e6       	ldi	r24, 0x61	; 97
     538:	0e 94 c4 04 	call	0x988	; 0x988 <MCP_read>
     53c:	c8 2e       	mov	r12, r24
     53e:	82 e6       	ldi	r24, 0x62	; 98
     540:	0e 94 c4 04 	call	0x988	; 0x988 <MCP_read>
     544:	82 95       	swap	r24
     546:	86 95       	lsr	r24
     548:	87 70       	andi	r24, 0x07	; 7
     54a:	d1 2c       	mov	r13, r1
     54c:	cc 0c       	add	r12, r12
     54e:	dd 1c       	adc	r13, r13
     550:	cc 0c       	add	r12, r12
     552:	dd 1c       	adc	r13, r13
     554:	cc 0c       	add	r12, r12
     556:	dd 1c       	adc	r13, r13
     558:	c8 2a       	or	r12, r24
		
		//Get message length
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
     55a:	85 e6       	ldi	r24, 0x65	; 101
     55c:	0e 94 c4 04 	call	0x988	; 0x988 <MCP_read>
     560:	08 2f       	mov	r16, r24
     562:	0f 70       	andi	r16, 0x0F	; 15
		
		//Get message data
		for(i = 0; i < message.length; i++) {
     564:	99 f0       	breq	.+38     	; 0x58c <__stack+0x8d>
     566:	7e 01       	movw	r14, r28
     568:	b4 e0       	ldi	r27, 0x04	; 4
     56a:	eb 0e       	add	r14, r27
     56c:	f1 1c       	adc	r15, r1
     56e:	0f 2e       	mov	r0, r31
     570:	f6 e6       	ldi	r31, 0x66	; 102
     572:	9f 2e       	mov	r9, r31
     574:	f0 2d       	mov	r31, r0
     576:	90 0e       	add	r9, r16
     578:	16 e6       	ldi	r17, 0x66	; 102
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
     57a:	81 2f       	mov	r24, r17
     57c:	0e 94 c4 04 	call	0x988	; 0x988 <MCP_read>
     580:	f7 01       	movw	r30, r14
     582:	81 93       	st	Z+, r24
     584:	7f 01       	movw	r14, r30
     586:	1f 5f       	subi	r17, 0xFF	; 255
		
		//Get message length
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
		
		//Get message data
		for(i = 0; i < message.length; i++) {
     588:	19 11       	cpse	r17, r9
     58a:	f7 cf       	rjmp	.-18     	; 0x57a <__stack+0x7b>
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Clear interrupt flag
		rx_flag = 0;
     58c:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__data_end>
     590:	03 c0       	rjmp	.+6      	; 0x598 <__stack+0x99>


//function that makes it possible to receive can messages
can_msg CAN_data_receive(void) {
	uint8_t i;
	can_msg message = {0};
     592:	00 e0       	ldi	r16, 0x00	; 0
     594:	c1 2c       	mov	r12, r1
     596:	d1 2c       	mov	r13, r1
		//Clear interrupt flag
		rx_flag = 0;
	}
		
	
	return message;
     598:	da 82       	std	Y+2, r13	; 0x02
     59a:	c9 82       	std	Y+1, r12	; 0x01
     59c:	0b 83       	std	Y+3, r16	; 0x03
     59e:	8b e0       	ldi	r24, 0x0B	; 11
     5a0:	fe 01       	movw	r30, r28
     5a2:	31 96       	adiw	r30, 0x01	; 1
     5a4:	d5 01       	movw	r26, r10
     5a6:	01 90       	ld	r0, Z+
     5a8:	0d 92       	st	X+, r0
     5aa:	8a 95       	dec	r24
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <__stack+0xa7>
}
     5ae:	c5 01       	movw	r24, r10
     5b0:	2b 96       	adiw	r28, 0x0b	; 11
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	9f 90       	pop	r9
     5d2:	08 95       	ret

000005d4 <__vector_1>:

//Interrupt for CAN
ISR(INT0_vect) {
     5d4:	1f 92       	push	r1
     5d6:	0f 92       	push	r0
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	0f 92       	push	r0
     5dc:	11 24       	eor	r1, r1
     5de:	2f 93       	push	r18
     5e0:	3f 93       	push	r19
     5e2:	4f 93       	push	r20
     5e4:	5f 93       	push	r21
     5e6:	6f 93       	push	r22
     5e8:	7f 93       	push	r23
     5ea:	8f 93       	push	r24
     5ec:	9f 93       	push	r25
     5ee:	af 93       	push	r26
     5f0:	bf 93       	push	r27
     5f2:	ef 93       	push	r30
     5f4:	ff 93       	push	r31
	MCP_bit_modify(MCP_CANINTF, MCP_RXF0SIDL, MCP_RXF0SIDH);
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	8c e2       	ldi	r24, 0x2C	; 44
     5fc:	0e 94 18 05 	call	0xa30	; 0xa30 <MCP_bit_modify>
	rx_flag = 1;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
}
     606:	ff 91       	pop	r31
     608:	ef 91       	pop	r30
     60a:	bf 91       	pop	r27
     60c:	af 91       	pop	r26
     60e:	9f 91       	pop	r25
     610:	8f 91       	pop	r24
     612:	7f 91       	pop	r23
     614:	6f 91       	pop	r22
     616:	5f 91       	pop	r21
     618:	4f 91       	pop	r20
     61a:	3f 91       	pop	r19
     61c:	2f 91       	pop	r18
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <JOY_calibrate>:
			break;
		default:
				break;
	}
	return 0;
}
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_read>
     62e:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <mid_x>
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_read>
     638:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <mid_y>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	08 95       	ret

00000642 <joy_init>:
     642:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
     646:	87 b3       	in	r24, 0x17	; 23
     648:	88 7f       	andi	r24, 0xF8	; 248
     64a:	87 bb       	out	0x17, r24	; 23
     64c:	88 b3       	in	r24, 0x18	; 24
     64e:	87 60       	ori	r24, 0x07	; 7
     650:	88 bb       	out	0x18, r24	; 24
     652:	0e 94 14 03 	call	0x628	; 0x628 <JOY_calibrate>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	08 95       	ret

0000065c <JOY_getPosition>:

// function that is used to get the position of the joystick
joy_position JOY_getPosition(void) {
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	00 d0       	rcall	.+0      	; 0x664 <JOY_getPosition+0x8>
     664:	00 d0       	rcall	.+0      	; 0x666 <JOY_getPosition+0xa>
     666:	1f 92       	push	r1
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
	joy_position position;
	uint8_t x, y;
	
	//Read position x from channel 0
	x = ADC_read(1);
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_read>
     672:	18 2f       	mov	r17, r24
	//Read position y from channel 1
	y = ADC_read(0);
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_read>
     67a:	e8 2f       	mov	r30, r24
	
	//Calculate position x percentage
	if(x > mid_x) {
     67c:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <mid_x>
     680:	41 17       	cp	r20, r17
     682:	98 f4       	brcc	.+38     	; 0x6aa <JOY_getPosition+0x4e>
		position.x = 100 * (x - mid_x) / (0xFF - mid_x);
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	21 2f       	mov	r18, r17
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	24 1b       	sub	r18, r20
     68c:	35 0b       	sbc	r19, r21
     68e:	64 e6       	ldi	r22, 0x64	; 100
     690:	62 9f       	mul	r22, r18
     692:	c0 01       	movw	r24, r0
     694:	63 9f       	mul	r22, r19
     696:	90 0d       	add	r25, r0
     698:	11 24       	eor	r1, r1
     69a:	6f ef       	ldi	r22, 0xFF	; 255
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	64 1b       	sub	r22, r20
     6a0:	75 0b       	sbc	r23, r21
     6a2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__divmodhi4>
     6a6:	26 2f       	mov	r18, r22
     6a8:	13 c0       	rjmp	.+38     	; 0x6d0 <JOY_getPosition+0x74>
		} else if (x < mid_x) {
     6aa:	14 17       	cp	r17, r20
     6ac:	80 f4       	brcc	.+32     	; 0x6ce <JOY_getPosition+0x72>
		position.x = 100 * (x - mid_x) / (mid_x - 0);
     6ae:	64 2f       	mov	r22, r20
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	21 2f       	mov	r18, r17
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	26 1b       	sub	r18, r22
     6b8:	37 0b       	sbc	r19, r23
     6ba:	44 e6       	ldi	r20, 0x64	; 100
     6bc:	42 9f       	mul	r20, r18
     6be:	c0 01       	movw	r24, r0
     6c0:	43 9f       	mul	r20, r19
     6c2:	90 0d       	add	r25, r0
     6c4:	11 24       	eor	r1, r1
     6c6:	0e 94 27 06 	call	0xc4e	; 0xc4e <__divmodhi4>
     6ca:	26 2f       	mov	r18, r22
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <JOY_getPosition+0x74>
		} else {
		position.x = 0;
     6ce:	20 e0       	ldi	r18, 0x00	; 0
	}
	
	//Calculate position y percentage
	if(y > mid_y) {
     6d0:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <mid_y>
     6d4:	4e 17       	cp	r20, r30
     6d6:	90 f4       	brcc	.+36     	; 0x6fc <JOY_getPosition+0xa0>
		position.y = 100 * (y - mid_y) / (0xFF - mid_y);
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	e4 1b       	sub	r30, r20
     6de:	f5 0b       	sbc	r31, r21
     6e0:	34 e6       	ldi	r19, 0x64	; 100
     6e2:	3e 9f       	mul	r19, r30
     6e4:	c0 01       	movw	r24, r0
     6e6:	3f 9f       	mul	r19, r31
     6e8:	90 0d       	add	r25, r0
     6ea:	11 24       	eor	r1, r1
     6ec:	6f ef       	ldi	r22, 0xFF	; 255
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	64 1b       	sub	r22, r20
     6f2:	75 0b       	sbc	r23, r21
     6f4:	0e 94 27 06 	call	0xc4e	; 0xc4e <__divmodhi4>
     6f8:	36 2f       	mov	r19, r22
     6fa:	13 c0       	rjmp	.+38     	; 0x722 <JOY_getPosition+0xc6>
		} else if (y < mid_y) {
     6fc:	e4 17       	cp	r30, r20
     6fe:	80 f4       	brcc	.+32     	; 0x720 <JOY_getPosition+0xc4>
		position.y = 100 * (y - mid_y) / (mid_y - 0);
     700:	64 2f       	mov	r22, r20
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	4e 2f       	mov	r20, r30
     706:	50 e0       	ldi	r21, 0x00	; 0
     708:	46 1b       	sub	r20, r22
     70a:	57 0b       	sbc	r21, r23
     70c:	34 e6       	ldi	r19, 0x64	; 100
     70e:	34 9f       	mul	r19, r20
     710:	c0 01       	movw	r24, r0
     712:	35 9f       	mul	r19, r21
     714:	90 0d       	add	r25, r0
     716:	11 24       	eor	r1, r1
     718:	0e 94 27 06 	call	0xc4e	; 0xc4e <__divmodhi4>
     71c:	36 2f       	mov	r19, r22
     71e:	01 c0       	rjmp	.+2      	; 0x722 <JOY_getPosition+0xc6>
		} else {
		position.y = 0;
     720:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	return position;
     722:	4b 81       	ldd	r20, Y+3	; 0x03
     724:	5c 81       	ldd	r21, Y+4	; 0x04
     726:	6d 81       	ldd	r22, Y+5	; 0x05
}
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	08 95       	ret

00000740 <JOY_getDirection>:

//function to find the direction of the joystick, for use in the menu, represented both as a string and an interger
joy_position JOY_getDirection(void) {
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	2a 97       	sbiw	r28, 0x0a	; 10
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
	joy_position position;
	
	//Get actual position of joystick
	position = JOY_getPosition();
     754:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_getPosition>
     758:	59 87       	std	Y+9, r21	; 0x09
     75a:	6a 87       	std	Y+10, r22	; 0x0a
     75c:	53 2f       	mov	r21, r19
     75e:	89 85       	ldd	r24, Y+9	; 0x09
     760:	9a 85       	ldd	r25, Y+10	; 0x0a
	
	if(position.x < -45) {
     762:	23 3d       	cpi	r18, 0xD3	; 211
     764:	34 f0       	brlt	.+12     	; 0x772 <JOY_getDirection+0x32>
		position.direction = "LEFT";
		position.numdirection = 2;
		} 
	else if(position.x > 45) {
     766:	2e 32       	cpi	r18, 0x2E	; 46
     768:	3c f0       	brlt	.+14     	; 0x778 <JOY_getDirection+0x38>
		position.direction = "RIGHT";
     76a:	83 e3       	ldi	r24, 0x33	; 51
     76c:	91 e0       	ldi	r25, 0x01	; 1
		position.numdirection = 1;
     76e:	41 e0       	ldi	r20, 0x01	; 1
     770:	03 c0       	rjmp	.+6      	; 0x778 <JOY_getDirection+0x38>
	
	//Get actual position of joystick
	position = JOY_getPosition();
	
	if(position.x < -45) {
		position.direction = "LEFT";
     772:	8e e2       	ldi	r24, 0x2E	; 46
     774:	91 e0       	ldi	r25, 0x01	; 1
		position.numdirection = 2;
     776:	42 e0       	ldi	r20, 0x02	; 2
	else if(position.x > 45) {
		position.direction = "RIGHT";
		position.numdirection = 1;
	}
	
	if(position.y < -45) {
     778:	53 3d       	cpi	r21, 0xD3	; 211
     77a:	34 f0       	brlt	.+12     	; 0x788 <JOY_getDirection+0x48>
		position.direction = "DOWN";
		position.numdirection = 4;
		} 
	else if(position.y > 45) {
     77c:	5e 32       	cpi	r21, 0x2E	; 46
     77e:	3c f0       	brlt	.+14     	; 0x78e <JOY_getDirection+0x4e>
		position.direction = "UP";
     780:	8e e3       	ldi	r24, 0x3E	; 62
     782:	91 e0       	ldi	r25, 0x01	; 1
		position.numdirection = 3;
     784:	43 e0       	ldi	r20, 0x03	; 3
     786:	03 c0       	rjmp	.+6      	; 0x78e <JOY_getDirection+0x4e>
		position.direction = "RIGHT";
		position.numdirection = 1;
	}
	
	if(position.y < -45) {
		position.direction = "DOWN";
     788:	89 e3       	ldi	r24, 0x39	; 57
     78a:	91 e0       	ldi	r25, 0x01	; 1
		position.numdirection = 4;
     78c:	44 e0       	ldi	r20, 0x04	; 4
	else if(position.y > 45) {
		position.direction = "UP";
		position.numdirection = 3;
	}
	
	if((position.x >= -44 && position.x <= 44) && (position.y >= -44 && position.y <= 44)){
     78e:	5c e2       	ldi	r21, 0x2C	; 44
     790:	52 0f       	add	r21, r18
     792:	59 35       	cpi	r21, 0x59	; 89
     794:	38 f4       	brcc	.+14     	; 0x7a4 <JOY_getDirection+0x64>
     796:	5c e2       	ldi	r21, 0x2C	; 44
     798:	53 0f       	add	r21, r19
     79a:	59 35       	cpi	r21, 0x59	; 89
     79c:	18 f4       	brcc	.+6      	; 0x7a4 <JOY_getDirection+0x64>
		position.direction = "NEUTRAL";
     79e:	81 e4       	ldi	r24, 0x41	; 65
     7a0:	91 e0       	ldi	r25, 0x01	; 1
		position.numdirection = 0;
     7a2:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	return position;
     7a4:	9d 83       	std	Y+5, r25	; 0x05
     7a6:	8c 83       	std	Y+4, r24	; 0x04
     7a8:	58 2f       	mov	r21, r24
     7aa:	6d 81       	ldd	r22, Y+5	; 0x05
}
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	2a 96       	adiw	r28, 0x0a	; 10
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <JOY_getSliderPosition>:
//find the slider position, for both sliders
slider_position JOY_getSliderPosition(void) {
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
	slider_position position;
	uint8_t l, r;
	
	//Read left slider from channel 2
	l = ADC_read(2);
     7c8:	82 e0       	ldi	r24, 0x02	; 2
     7ca:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_read>
     7ce:	c8 2f       	mov	r28, r24
	//Read right slider from channel 3
	r = ADC_read(3);
     7d0:	83 e0       	ldi	r24, 0x03	; 3
     7d2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <ADC_read>
     7d6:	d8 2f       	mov	r29, r24
	
	//Calculate position percentage
	position.left = 100 * l / 0xFF;
     7d8:	24 e6       	ldi	r18, 0x64	; 100
     7da:	2c 9f       	mul	r18, r28
     7dc:	c0 01       	movw	r24, r0
     7de:	11 24       	eor	r1, r1
     7e0:	ef ef       	ldi	r30, 0xFF	; 255
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	bf 01       	movw	r22, r30
     7e6:	0e 94 27 06 	call	0xc4e	; 0xc4e <__divmodhi4>
     7ea:	36 2f       	mov	r19, r22
	position.right = 100 * r / 0xFF;
     7ec:	2d 9f       	mul	r18, r29
     7ee:	c0 01       	movw	r24, r0
     7f0:	11 24       	eor	r1, r1
     7f2:	bf 01       	movw	r22, r30
     7f4:	0e 94 27 06 	call	0xc4e	; 0xc4e <__divmodhi4>
     7f8:	96 2f       	mov	r25, r22
	
	return position;
}
     7fa:	83 2f       	mov	r24, r19
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	08 95       	ret

00000802 <main>:
#include "MCP2515.h"
#include "spi.h"
#include "can.h"

int main(void)
{
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	6b 97       	sbiw	r28, 0x1b	; 27
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
	
	cli();
     816:	f8 94       	cli
	
	GICR  |= (1 << INT0);		//Enable INT0
     818:	8b b7       	in	r24, 0x3b	; 59
     81a:	80 64       	ori	r24, 0x40	; 64
     81c:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (0 << ISC01) | (0 << ISC00);	//On falling edge
     81e:	85 b7       	in	r24, 0x35	; 53
     820:	85 bf       	out	0x35, r24	; 53
	
	
	DDRD &= ~(1 << PIND2);		//Set D2(INT0) as input
     822:	8a 98       	cbi	0x11, 2	; 17
	
	can_msg can_msg_send;
	can_msg can_msg_receive;
	
	UART_Init(UBRREG);
     824:	8e e1       	ldi	r24, 0x1E	; 30
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 1a 06 	call	0xc34	; 0xc34 <UART_Init>
	ADC_init();
     82c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	SPI_init();
     830:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <SPI_init>
	MCP_init();
     834:	0e 94 db 04 	call	0x9b6	; 0x9b6 <MCP_init>
	joy_init();
     838:	0e 94 21 03 	call	0x642	; 0x642 <joy_init>
	SRAM_init();
     83c:	0e 94 06 06 	call	0xc0c	; 0xc0c <SRAM_init>
	//OLED_init();
	//init_menu();
	JOY_calibrate();
     840:	0e 94 14 03 	call	0x628	; 0x628 <JOY_calibrate>
	
	if (CAN_init() == 0) {
     844:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <CAN_init>
     848:	89 2b       	or	r24, r25
     84a:	79 f4       	brne	.+30     	; 0x86a <main+0x68>
		printf("CAN BE WORKING\n\r");
     84c:	89 e4       	ldi	r24, 0x49	; 73
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	0e 94 9a 06 	call	0xd34	; 0xd34 <printf>
		can_msg_send.id = 1;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	9a 83       	std	Y+2, r25	; 0x02
     85e:	89 83       	std	Y+1, r24	; 0x01
		can_msg_send.length = 8;
     860:	88 e0       	ldi	r24, 0x08	; 8
     862:	8b 83       	std	Y+3, r24	; 0x03
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	08 c0       	rjmp	.+16     	; 0x87a <main+0x78>
		} else {
		printf("CAN NOT BE WORKING \n\r");
     86a:	8a e5       	ldi	r24, 0x5A	; 90
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	9f 93       	push	r25
     870:	8f 93       	push	r24
     872:	0e 94 9a 06 	call	0xd34	; 0xd34 <printf>
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
	uint8_t i=0;
	
	
	

	if (joy_init() == 0) {
     87a:	0e 94 21 03 	call	0x642	; 0x642 <joy_init>
     87e:	89 2b       	or	r24, r25
     880:	49 f4       	brne	.+18     	; 0x894 <main+0x92>
		printf("----Joystick working----\n\r");
     882:	80 e7       	ldi	r24, 0x70	; 112
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	9f 93       	push	r25
     888:	8f 93       	push	r24
     88a:	0e 94 9a 06 	call	0xd34	; 0xd34 <printf>
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	08 c0       	rjmp	.+16     	; 0x8a4 <main+0xa2>
		} else {
		printf("----Joystick error!!----\n\r");
     894:	8b e8       	ldi	r24, 0x8B	; 139
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	9f 93       	push	r25
     89a:	8f 93       	push	r24
     89c:	0e 94 9a 06 	call	0xd34	; 0xd34 <printf>
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
	}
	OLED_clear();
     8a4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <OLED_clear>
	OLED_pos(1, 5);
     8a8:	65 e0       	ldi	r22, 0x05	; 5
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	0e 94 88 05 	call	0xb10	; 0xb10 <OLED_pos>
	OLED_print("Ping Pong");
     8b0:	86 ea       	ldi	r24, 0xA6	; 166
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print>
	OLED_pos(2, 5);
     8b8:	65 e0       	ldi	r22, 0x05	; 5
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	0e 94 88 05 	call	0xb10	; 0xb10 <OLED_pos>
	OLED_print("Ping Pong");
     8c0:	86 ea       	ldi	r24, 0xA6	; 166
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print>
	OLED_pos(3, 4);
     8c8:	64 e0       	ldi	r22, 0x04	; 4
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 88 05 	call	0xb10	; 0xb10 <OLED_pos>
	OLED_print("Press Button");
     8d0:	80 eb       	ldi	r24, 0xB0	; 176
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print>
	OLED_pos(4, 5);
     8d8:	65 e0       	ldi	r22, 0x05	; 5
     8da:	84 e0       	ldi	r24, 0x04	; 4
     8dc:	0e 94 88 05 	call	0xb10	; 0xb10 <OLED_pos>
	OLED_print("to start");
     8e0:	8d eb       	ldi	r24, 0xBD	; 189
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <OLED_print>
	
	printf("----TING FUNK----\n\r");
     8e8:	86 ec       	ldi	r24, 0xC6	; 198
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	9f 93       	push	r25
     8ee:	8f 93       	push	r24
     8f0:	0e 94 9a 06 	call	0xd34	; 0xd34 <printf>
	
	sei();
     8f4:	78 94       	sei
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
	//printf("Venstre knapp: %d, ", joy_button(1));
	//printf("x: %d ,",joy_pos.x);
	//printf("y: %d ,",joy_pos.y);
	
	
	printf("Slider: %d\n\r",slider_pos.left);
     8fa:	0f 2e       	mov	r0, r31
     8fc:	fa ed       	ldi	r31, 0xDA	; 218
     8fe:	ef 2e       	mov	r14, r31
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	ff 2e       	mov	r15, r31
     904:	f0 2d       	mov	r31, r0
	printf("----TING FUNK----\n\r");
	
	sei();
	
	while(1){
	joy_pos = JOY_getDirection();
     906:	0e 94 a0 03 	call	0x740	; 0x740 <JOY_getDirection>
     90a:	2f 8b       	std	Y+23, r18	; 0x17
	slider_pos = JOY_getSliderPosition();
     90c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <JOY_getSliderPosition>
     910:	18 2f       	mov	r17, r24
	CAN_message_send(&can_msg_send);
     912:	ce 01       	movw	r24, r28
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	0e 94 29 02 	call	0x452	; 0x452 <CAN_message_send>
	//printf("Venstre knapp: %d, ", joy_button(1));
	//printf("x: %d ,",joy_pos.x);
	//printf("y: %d ,",joy_pos.y);
	
	
	printf("Slider: %d\n\r",slider_pos.left);
     91a:	1f 92       	push	r1
     91c:	1f 93       	push	r17
     91e:	ff 92       	push	r15
     920:	ef 92       	push	r14
     922:	0e 94 9a 06 	call	0xd34	; 0xd34 <printf>
	
	can_msg_send.data[0] = joy_pos.x;
     926:	8f 89       	ldd	r24, Y+23	; 0x17
     928:	8c 83       	std	Y+4, r24	; 0x04
	can_msg_send.data[1] = slider_pos.left;
     92a:	1d 83       	std	Y+5, r17	; 0x05
	CAN_message_send(&can_msg_send);
     92c:	ce 01       	movw	r24, r28
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	0e 94 29 02 	call	0x452	; 0x452 <CAN_message_send>
//  			{
//  				i=0;
//  			}
//  			can_msg_send.data[1] = i;
// 	
	can_msg_receive = CAN_data_receive();
     934:	ce 01       	movw	r24, r28
     936:	0c 96       	adiw	r24, 0x0c	; 12
     938:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <CAN_data_receive>
	x=can_msg_receive.data[0];
     93c:	8f 85       	ldd	r24, Y+15	; 0x0f
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <x+0x1>
     944:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <x>
	y=can_msg_receive.data[1];
     948:	88 89       	ldd	r24, Y+16	; 0x10
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <y+0x1>
     950:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <y>
	//printf("y1 er %d \n\r",x);
	//printf("y2 er %d \n\r",y);
 	CAN_message_send(&can_msg_send);
     954:	ce 01       	movw	r24, r28
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	0e 94 29 02 	call	0x452	; 0x452 <CAN_message_send>
	}
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	d0 cf       	rjmp	.-96     	; 0x906 <main+0x104>

00000966 <MCP_reset>:
	SPI_send(MCP_READ_STATUS);
	uint8_t status = SPI_send(0);
	SPI_set_ss(1);
	
	return status;
}
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <SPI_set_ss>
     96e:	80 ec       	ldi	r24, 0xC0	; 192
     970:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
     974:	85 ef       	ldi	r24, 0xF5	; 245
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <MCP_reset+0x12>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <MCP_reset+0x18>
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 fd 05 	call	0xbfa	; 0xbfa <SPI_set_ss>
     986:	08 95       	ret

00000988 <MCP_read>:
     988:	cf 93       	push	r28
     98a:	c8 2f       	mov	r28, r24
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 fd 05 	call	0xbfa	; 0xbfa <SPI_set_ss>
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
     99a:	8c 2f       	mov	r24, r28
     99c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
     9a6:	c8 2f       	mov	r28, r24
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 fd 05 	call	0xbfa	; 0xbfa <SPI_set_ss>
     9b0:	8c 2f       	mov	r24, r28
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <MCP_init>:
     9b6:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <SPI_init>
     9ba:	0e 94 b3 04 	call	0x966	; 0x966 <MCP_reset>
     9be:	8e e0       	ldi	r24, 0x0E	; 14
     9c0:	0e 94 c4 04 	call	0x988	; 0x988 <MCP_read>
     9c4:	80 7e       	andi	r24, 0xE0	; 224
     9c6:	80 38       	cpi	r24, 0x80	; 128
     9c8:	51 f0       	breq	.+20     	; 0x9de <MCP_init+0x28>
     9ca:	87 ee       	ldi	r24, 0xE7	; 231
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	9f 93       	push	r25
     9d0:	8f 93       	push	r24
     9d2:	0e 94 9a 06 	call	0xd34	; 0xd34 <printf>
     9d6:	0f 90       	pop	r0
     9d8:	0f 90       	pop	r0
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	08 95       	ret
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	08 95       	ret

000009e2 <MCP_write>:
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	d8 2f       	mov	r29, r24
     9e8:	c6 2f       	mov	r28, r22
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 fd 05 	call	0xbfa	; 0xbfa <SPI_set_ss>
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
     9f8:	8d 2f       	mov	r24, r29
     9fa:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
     9fe:	8c 2f       	mov	r24, r28
     a00:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 fd 05 	call	0xbfa	; 0xbfa <SPI_set_ss>
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <MCP_request_to_send>:
     a12:	cf 93       	push	r28
     a14:	c8 2f       	mov	r28, r24
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <SPI_set_ss>
     a1e:	8c 2f       	mov	r24, r28
     a20:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 fd 05 	call	0xbfa	; 0xbfa <SPI_set_ss>
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <MCP_bit_modify>:

//function that lets us change the settings of the MCP
void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	18 2f       	mov	r17, r24
     a38:	d6 2f       	mov	r29, r22
     a3a:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 fd 05 	call	0xbfa	; 0xbfa <SPI_set_ss>
	SPI_send(MCP_BITMOD);
     a44:	85 e0       	ldi	r24, 0x05	; 5
     a46:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
	
	SPI_send(address);
     a4a:	81 2f       	mov	r24, r17
     a4c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
	SPI_send(mask);
     a50:	8d 2f       	mov	r24, r29
     a52:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
	SPI_send(data);
     a56:	8c 2f       	mov	r24, r28
     a58:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <SPI_send>
	
	SPI_set_ss(1);
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 fd 05 	call	0xbfa	; 0xbfa <SPI_set_ss>
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	08 95       	ret

00000a6c <OLED_home>:
	//Clear the display
	OLED_clear();
	OLED_home();

	return 0;
}
     a6c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <page>
     a70:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <col>
     a74:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     a78:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     a7c:	83 ed       	ldi	r24, 0xD3	; 211
     a7e:	80 83       	st	Z, r24
     a80:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     a84:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     a88:	88 ec       	ldi	r24, 0xC8	; 200
     a8a:	80 83       	st	Z, r24
     a8c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     a90:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     a94:	81 e2       	ldi	r24, 0x21	; 33
     a96:	80 83       	st	Z, r24
     a98:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     a9c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     aa0:	10 82       	st	Z, r1
     aa2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     aa6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     aaa:	8f e7       	ldi	r24, 0x7F	; 127
     aac:	80 83       	st	Z, r24
     aae:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     ab2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     ab6:	82 e2       	ldi	r24, 0x22	; 34
     ab8:	80 83       	st	Z, r24
     aba:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     abe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     ac2:	10 82       	st	Z, r1
     ac4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     ac8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     acc:	87 e0       	ldi	r24, 0x07	; 7
     ace:	80 83       	st	Z, r24
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	08 95       	ret

00000ad6 <OLED_goto_line>:
     ad6:	cf 93       	push	r28
     ad8:	c8 2f       	mov	r28, r24
     ada:	0e 94 36 05 	call	0xa6c	; 0xa6c <OLED_home>
     ade:	c8 30       	cpi	r28, 0x08	; 8
     ae0:	98 f4       	brcc	.+38     	; 0xb08 <OLED_goto_line+0x32>
     ae2:	c0 93 12 02 	sts	0x0212, r28	; 0x800212 <page>
     ae6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     aea:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     aee:	10 82       	st	Z, r1
     af0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     af4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     af8:	80 e1       	ldi	r24, 0x10	; 16
     afa:	80 83       	st	Z, r24
     afc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b00:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b04:	c0 6b       	ori	r28, 0xB0	; 176
     b06:	c0 83       	st	Z, r28
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <OLED_pos>:
     b10:	cf 93       	push	r28
     b12:	c6 2f       	mov	r28, r22
     b14:	0e 94 6b 05 	call	0xad6	; 0xad6 <OLED_goto_line>
     b18:	c0 31       	cpi	r28, 0x10	; 16
     b1a:	98 f4       	brcc	.+38     	; 0xb42 <OLED_pos+0x32>
     b1c:	8c 2f       	mov	r24, r28
     b1e:	88 0f       	add	r24, r24
     b20:	88 0f       	add	r24, r24
     b22:	88 0f       	add	r24, r24
     b24:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <col>
     b28:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b2c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b30:	8f 70       	andi	r24, 0x0F	; 15
     b32:	80 83       	st	Z, r24
     b34:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b38:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b3c:	c0 62       	ori	r28, 0x20	; 32
     b3e:	c6 95       	lsr	r28
     b40:	c0 83       	st	Z, r28
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <OLED_clear_line>:
     b4a:	0e 94 6b 05 	call	0xad6	; 0xad6 <OLED_goto_line>
     b4e:	80 e8       	ldi	r24, 0x80	; 128
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <OLED_data>
     b56:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <OLED_data+0x1>
     b5a:	10 82       	st	Z, r1
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	c9 f7       	brne	.-14     	; 0xb52 <OLED_clear_line+0x8>
     b60:	0e 94 36 05 	call	0xa6c	; 0xa6c <OLED_home>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	08 95       	ret

00000b6a <OLED_clear>:
     b6a:	cf 93       	push	r28
     b6c:	c0 e0       	ldi	r28, 0x00	; 0
     b6e:	8c 2f       	mov	r24, r28
     b70:	0e 94 a5 05 	call	0xb4a	; 0xb4a <OLED_clear_line>
     b74:	cf 5f       	subi	r28, 0xFF	; 255
     b76:	c8 30       	cpi	r28, 0x08	; 8
     b78:	d1 f7       	brne	.-12     	; 0xb6e <OLED_clear+0x4>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <OLED_print_char>:
	
	return 0;
}

// function that lets us print characters defined by the defined
int OLED_print_char(char c) {
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	fc 01       	movw	r30, r24
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	ee 0f       	add	r30, r30
     b90:	ff 1f       	adc	r31, r31
     b92:	e0 59       	subi	r30, 0x90	; 144
     b94:	f0 40       	sbci	r31, 0x00	; 0
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	88 58       	subi	r24, 0x88	; 136
     ba4:	90 40       	sbci	r25, 0x00	; 0
	//Write the complete character
	for (int i = 0; i < FONTWIDTH; i++) {
		*OLED_data = pgm_read_byte(&font[c-' '][i]);
     ba6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <OLED_data>
     baa:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <OLED_data+0x1>
     bae:	24 91       	lpm	r18, Z
     bb0:	2c 93       	st	X, r18
     bb2:	31 96       	adiw	r30, 0x01	; 1
}

// function that lets us print characters defined by the defined
int OLED_print_char(char c) {
	//Write the complete character
	for (int i = 0; i < FONTWIDTH; i++) {
     bb4:	e8 17       	cp	r30, r24
     bb6:	f9 07       	cpc	r31, r25
     bb8:	b1 f7       	brne	.-20     	; 0xba6 <OLED_print_char+0x24>
		*OLED_data = pgm_read_byte(&font[c-' '][i]);
	}
	
	return 0;
}
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	08 95       	ret

00000bc0 <OLED_print>:
// 	
// 	return 0;
// }

//writes a complete string, with the use of the print char function
int OLED_print(char *data) {
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	ec 01       	movw	r28, r24
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
     bc6:	88 81       	ld	r24, Y
     bc8:	88 23       	and	r24, r24
     bca:	31 f0       	breq	.+12     	; 0xbd8 <OLED_print+0x18>
     bcc:	21 96       	adiw	r28, 0x01	; 1
		OLED_print_char(data[i]);
     bce:	0e 94 c1 05 	call	0xb82	; 0xb82 <OLED_print_char>
//writes a complete string, with the use of the print char function
int OLED_print(char *data) {
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
     bd2:	89 91       	ld	r24, Y+
     bd4:	81 11       	cpse	r24, r1
     bd6:	fb cf       	rjmp	.-10     	; 0xbce <OLED_print+0xe>
		OLED_print_char(data[i]);
		i++;
	}
	
	return 0;
}
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	08 95       	ret

00000be2 <SPI_init>:
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
	
	return SPDR;
}
     be2:	87 b3       	in	r24, 0x17	; 23
     be4:	80 6b       	ori	r24, 0xB0	; 176
     be6:	87 bb       	out	0x17, r24	; 23
     be8:	be 98       	cbi	0x17, 6	; 23
     bea:	81 e5       	ldi	r24, 0x51	; 81
     bec:	8d b9       	out	0x0d, r24	; 13
     bee:	08 95       	ret

00000bf0 <SPI_send>:
     bf0:	8f b9       	out	0x0f, r24	; 15
     bf2:	77 9b       	sbis	0x0e, 7	; 14
     bf4:	fe cf       	rjmp	.-4      	; 0xbf2 <SPI_send+0x2>
     bf6:	8f b1       	in	r24, 0x0f	; 15
     bf8:	08 95       	ret

00000bfa <SPI_set_ss>:

// Defines chip-select, is done manually
void SPI_set_ss( int select )
{
	//use Port B4 as SS
	if (select == 1){
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	91 05       	cpc	r25, r1
     bfe:	11 f4       	brne	.+4      	; 0xc04 <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
     c00:	c4 9a       	sbi	0x18, 4	; 24
     c02:	08 95       	ret
	}
	else if (select == 0){
     c04:	89 2b       	or	r24, r25
     c06:	09 f4       	brne	.+2      	; 0xc0a <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
     c08:	c4 98       	cbi	0x18, 4	; 24
     c0a:	08 95       	ret

00000c0c <SRAM_init>:
*/

//function to set up SRAM
int SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
     c0c:	85 b7       	in	r24, 0x35	; 53
     c0e:	80 68       	ori	r24, 0x80	; 128
     c10:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     c12:	80 b7       	in	r24, 0x30	; 48
     c14:	80 62       	ori	r24, 0x20	; 32
     c16:	80 bf       	out	0x30, r24	; 48
	
	return 0;
}
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	08 95       	ret

00000c1e <UART_TX>:

//function that makes sending data over UART easier
int UART_TX(char data, FILE * _in){
	(void)(_in);
	
	while( !(UCSR0A & (1 << UDRE0)) );
     c1e:	5d 9b       	sbis	0x0b, 5	; 11
     c20:	fe cf       	rjmp	.-4      	; 0xc1e <UART_TX>
	
	// send data
	UDR0 = data;
     c22:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	08 95       	ret

00000c2a <UART_RX>:

//function for sending data over UART
int UART_RX(FILE * _in ){
	(void)(_in);
	while( !(UCSR0A & (1 << RXC0)) );
     c2a:	5f 9b       	sbis	0x0b, 7	; 11
     c2c:	fe cf       	rjmp	.-4      	; 0xc2a <UART_RX>
	
	// Data recieved
	return UDR0;
     c2e:	8c b1       	in	r24, 0x0c	; 12
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	08 95       	ret

00000c34 <UART_Init>:

//function that sets up the UART and serial communication parameters
void UART_Init(unsigned int ubrr)
{
	// Baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     c34:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
     c36:	89 b9       	out	0x09, r24	; 9
	
	// Enable Rx and Tx
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) ;
     c38:	88 e1       	ldi	r24, 0x18	; 24
     c3a:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
     c3c:	8e e8       	ldi	r24, 0x8E	; 142
     c3e:	80 bd       	out	0x20, r24	; 32
	fdevopen(UART_TX, UART_RX);
     c40:	65 e1       	ldi	r22, 0x15	; 21
     c42:	76 e0       	ldi	r23, 0x06	; 6
     c44:	8f e0       	ldi	r24, 0x0F	; 15
     c46:	96 e0       	ldi	r25, 0x06	; 6
     c48:	0e 94 4f 06 	call	0xc9e	; 0xc9e <fdevopen>
     c4c:	08 95       	ret

00000c4e <__divmodhi4>:
     c4e:	97 fb       	bst	r25, 7
     c50:	07 2e       	mov	r0, r23
     c52:	16 f4       	brtc	.+4      	; 0xc58 <__divmodhi4+0xa>
     c54:	00 94       	com	r0
     c56:	07 d0       	rcall	.+14     	; 0xc66 <__divmodhi4_neg1>
     c58:	77 fd       	sbrc	r23, 7
     c5a:	09 d0       	rcall	.+18     	; 0xc6e <__divmodhi4_neg2>
     c5c:	0e 94 3b 06 	call	0xc76	; 0xc76 <__udivmodhi4>
     c60:	07 fc       	sbrc	r0, 7
     c62:	05 d0       	rcall	.+10     	; 0xc6e <__divmodhi4_neg2>
     c64:	3e f4       	brtc	.+14     	; 0xc74 <__divmodhi4_exit>

00000c66 <__divmodhi4_neg1>:
     c66:	90 95       	com	r25
     c68:	81 95       	neg	r24
     c6a:	9f 4f       	sbci	r25, 0xFF	; 255
     c6c:	08 95       	ret

00000c6e <__divmodhi4_neg2>:
     c6e:	70 95       	com	r23
     c70:	61 95       	neg	r22
     c72:	7f 4f       	sbci	r23, 0xFF	; 255

00000c74 <__divmodhi4_exit>:
     c74:	08 95       	ret

00000c76 <__udivmodhi4>:
     c76:	aa 1b       	sub	r26, r26
     c78:	bb 1b       	sub	r27, r27
     c7a:	51 e1       	ldi	r21, 0x11	; 17
     c7c:	07 c0       	rjmp	.+14     	; 0xc8c <__udivmodhi4_ep>

00000c7e <__udivmodhi4_loop>:
     c7e:	aa 1f       	adc	r26, r26
     c80:	bb 1f       	adc	r27, r27
     c82:	a6 17       	cp	r26, r22
     c84:	b7 07       	cpc	r27, r23
     c86:	10 f0       	brcs	.+4      	; 0xc8c <__udivmodhi4_ep>
     c88:	a6 1b       	sub	r26, r22
     c8a:	b7 0b       	sbc	r27, r23

00000c8c <__udivmodhi4_ep>:
     c8c:	88 1f       	adc	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	5a 95       	dec	r21
     c92:	a9 f7       	brne	.-22     	; 0xc7e <__udivmodhi4_loop>
     c94:	80 95       	com	r24
     c96:	90 95       	com	r25
     c98:	bc 01       	movw	r22, r24
     c9a:	cd 01       	movw	r24, r26
     c9c:	08 95       	ret

00000c9e <fdevopen>:
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	31 f4       	brne	.+12     	; 0xcb6 <fdevopen+0x18>
     caa:	61 15       	cp	r22, r1
     cac:	71 05       	cpc	r23, r1
     cae:	19 f4       	brne	.+6      	; 0xcb6 <fdevopen+0x18>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	3a c0       	rjmp	.+116    	; 0xd2a <fdevopen+0x8c>
     cb6:	8b 01       	movw	r16, r22
     cb8:	ec 01       	movw	r28, r24
     cba:	6e e0       	ldi	r22, 0x0E	; 14
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 82 08 	call	0x1104	; 0x1104 <calloc>
     cc6:	fc 01       	movw	r30, r24
     cc8:	89 2b       	or	r24, r25
     cca:	91 f3       	breq	.-28     	; 0xcb0 <fdevopen+0x12>
     ccc:	80 e8       	ldi	r24, 0x80	; 128
     cce:	83 83       	std	Z+3, r24	; 0x03
     cd0:	01 15       	cp	r16, r1
     cd2:	11 05       	cpc	r17, r1
     cd4:	71 f0       	breq	.+28     	; 0xcf2 <fdevopen+0x54>
     cd6:	13 87       	std	Z+11, r17	; 0x0b
     cd8:	02 87       	std	Z+10, r16	; 0x0a
     cda:	81 e8       	ldi	r24, 0x81	; 129
     cdc:	83 83       	std	Z+3, r24	; 0x03
     cde:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <__iob>
     ce2:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <__iob+0x1>
     ce6:	89 2b       	or	r24, r25
     ce8:	21 f4       	brne	.+8      	; 0xcf2 <fdevopen+0x54>
     cea:	f0 93 14 02 	sts	0x0214, r31	; 0x800214 <__iob+0x1>
     cee:	e0 93 13 02 	sts	0x0213, r30	; 0x800213 <__iob>
     cf2:	20 97       	sbiw	r28, 0x00	; 0
     cf4:	c9 f0       	breq	.+50     	; 0xd28 <fdevopen+0x8a>
     cf6:	d1 87       	std	Z+9, r29	; 0x09
     cf8:	c0 87       	std	Z+8, r28	; 0x08
     cfa:	83 81       	ldd	r24, Z+3	; 0x03
     cfc:	82 60       	ori	r24, 0x02	; 2
     cfe:	83 83       	std	Z+3, r24	; 0x03
     d00:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <__iob+0x2>
     d04:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <__iob+0x3>
     d08:	89 2b       	or	r24, r25
     d0a:	71 f4       	brne	.+28     	; 0xd28 <fdevopen+0x8a>
     d0c:	f0 93 16 02 	sts	0x0216, r31	; 0x800216 <__iob+0x3>
     d10:	e0 93 15 02 	sts	0x0215, r30	; 0x800215 <__iob+0x2>
     d14:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <__iob+0x4>
     d18:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <__iob+0x5>
     d1c:	89 2b       	or	r24, r25
     d1e:	21 f4       	brne	.+8      	; 0xd28 <fdevopen+0x8a>
     d20:	f0 93 18 02 	sts	0x0218, r31	; 0x800218 <__iob+0x5>
     d24:	e0 93 17 02 	sts	0x0217, r30	; 0x800217 <__iob+0x4>
     d28:	cf 01       	movw	r24, r30
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	08 95       	ret

00000d34 <printf>:
     d34:	a0 e0       	ldi	r26, 0x00	; 0
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e0 ea       	ldi	r30, 0xA0	; 160
     d3a:	f6 e0       	ldi	r31, 0x06	; 6
     d3c:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__prologue_saves__+0x20>
     d40:	ae 01       	movw	r20, r28
     d42:	4b 5f       	subi	r20, 0xFB	; 251
     d44:	5f 4f       	sbci	r21, 0xFF	; 255
     d46:	fa 01       	movw	r30, r20
     d48:	61 91       	ld	r22, Z+
     d4a:	71 91       	ld	r23, Z+
     d4c:	af 01       	movw	r20, r30
     d4e:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <__iob+0x2>
     d52:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <__iob+0x3>
     d56:	0e 94 b0 06 	call	0xd60	; 0xd60 <vfprintf>
     d5a:	e2 e0       	ldi	r30, 0x02	; 2
     d5c:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__epilogue_restores__+0x20>

00000d60 <vfprintf>:
     d60:	ac e0       	ldi	r26, 0x0C	; 12
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e6 eb       	ldi	r30, 0xB6	; 182
     d66:	f6 e0       	ldi	r31, 0x06	; 6
     d68:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__prologue_saves__>
     d6c:	7c 01       	movw	r14, r24
     d6e:	6b 01       	movw	r12, r22
     d70:	8a 01       	movw	r16, r20
     d72:	fc 01       	movw	r30, r24
     d74:	17 82       	std	Z+7, r1	; 0x07
     d76:	16 82       	std	Z+6, r1	; 0x06
     d78:	83 81       	ldd	r24, Z+3	; 0x03
     d7a:	81 ff       	sbrs	r24, 1
     d7c:	bd c1       	rjmp	.+890    	; 0x10f8 <vfprintf+0x398>
     d7e:	ce 01       	movw	r24, r28
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	4c 01       	movw	r8, r24
     d84:	f7 01       	movw	r30, r14
     d86:	93 81       	ldd	r25, Z+3	; 0x03
     d88:	f6 01       	movw	r30, r12
     d8a:	93 fd       	sbrc	r25, 3
     d8c:	85 91       	lpm	r24, Z+
     d8e:	93 ff       	sbrs	r25, 3
     d90:	81 91       	ld	r24, Z+
     d92:	6f 01       	movw	r12, r30
     d94:	88 23       	and	r24, r24
     d96:	09 f4       	brne	.+2      	; 0xd9a <vfprintf+0x3a>
     d98:	ab c1       	rjmp	.+854    	; 0x10f0 <vfprintf+0x390>
     d9a:	85 32       	cpi	r24, 0x25	; 37
     d9c:	39 f4       	brne	.+14     	; 0xdac <vfprintf+0x4c>
     d9e:	93 fd       	sbrc	r25, 3
     da0:	85 91       	lpm	r24, Z+
     da2:	93 ff       	sbrs	r25, 3
     da4:	81 91       	ld	r24, Z+
     da6:	6f 01       	movw	r12, r30
     da8:	85 32       	cpi	r24, 0x25	; 37
     daa:	29 f4       	brne	.+10     	; 0xdb6 <vfprintf+0x56>
     dac:	b7 01       	movw	r22, r14
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
     db4:	e7 cf       	rjmp	.-50     	; 0xd84 <vfprintf+0x24>
     db6:	51 2c       	mov	r5, r1
     db8:	31 2c       	mov	r3, r1
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	20 32       	cpi	r18, 0x20	; 32
     dbe:	a0 f4       	brcc	.+40     	; 0xde8 <vfprintf+0x88>
     dc0:	8b 32       	cpi	r24, 0x2B	; 43
     dc2:	69 f0       	breq	.+26     	; 0xdde <vfprintf+0x7e>
     dc4:	30 f4       	brcc	.+12     	; 0xdd2 <vfprintf+0x72>
     dc6:	80 32       	cpi	r24, 0x20	; 32
     dc8:	59 f0       	breq	.+22     	; 0xde0 <vfprintf+0x80>
     dca:	83 32       	cpi	r24, 0x23	; 35
     dcc:	69 f4       	brne	.+26     	; 0xde8 <vfprintf+0x88>
     dce:	20 61       	ori	r18, 0x10	; 16
     dd0:	2c c0       	rjmp	.+88     	; 0xe2a <vfprintf+0xca>
     dd2:	8d 32       	cpi	r24, 0x2D	; 45
     dd4:	39 f0       	breq	.+14     	; 0xde4 <vfprintf+0x84>
     dd6:	80 33       	cpi	r24, 0x30	; 48
     dd8:	39 f4       	brne	.+14     	; 0xde8 <vfprintf+0x88>
     dda:	21 60       	ori	r18, 0x01	; 1
     ddc:	26 c0       	rjmp	.+76     	; 0xe2a <vfprintf+0xca>
     dde:	22 60       	ori	r18, 0x02	; 2
     de0:	24 60       	ori	r18, 0x04	; 4
     de2:	23 c0       	rjmp	.+70     	; 0xe2a <vfprintf+0xca>
     de4:	28 60       	ori	r18, 0x08	; 8
     de6:	21 c0       	rjmp	.+66     	; 0xe2a <vfprintf+0xca>
     de8:	27 fd       	sbrc	r18, 7
     dea:	27 c0       	rjmp	.+78     	; 0xe3a <vfprintf+0xda>
     dec:	30 ed       	ldi	r19, 0xD0	; 208
     dee:	38 0f       	add	r19, r24
     df0:	3a 30       	cpi	r19, 0x0A	; 10
     df2:	78 f4       	brcc	.+30     	; 0xe12 <vfprintf+0xb2>
     df4:	26 ff       	sbrs	r18, 6
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <vfprintf+0xa4>
     df8:	fa e0       	ldi	r31, 0x0A	; 10
     dfa:	5f 9e       	mul	r5, r31
     dfc:	30 0d       	add	r19, r0
     dfe:	11 24       	eor	r1, r1
     e00:	53 2e       	mov	r5, r19
     e02:	13 c0       	rjmp	.+38     	; 0xe2a <vfprintf+0xca>
     e04:	8a e0       	ldi	r24, 0x0A	; 10
     e06:	38 9e       	mul	r3, r24
     e08:	30 0d       	add	r19, r0
     e0a:	11 24       	eor	r1, r1
     e0c:	33 2e       	mov	r3, r19
     e0e:	20 62       	ori	r18, 0x20	; 32
     e10:	0c c0       	rjmp	.+24     	; 0xe2a <vfprintf+0xca>
     e12:	8e 32       	cpi	r24, 0x2E	; 46
     e14:	21 f4       	brne	.+8      	; 0xe1e <vfprintf+0xbe>
     e16:	26 fd       	sbrc	r18, 6
     e18:	6b c1       	rjmp	.+726    	; 0x10f0 <vfprintf+0x390>
     e1a:	20 64       	ori	r18, 0x40	; 64
     e1c:	06 c0       	rjmp	.+12     	; 0xe2a <vfprintf+0xca>
     e1e:	8c 36       	cpi	r24, 0x6C	; 108
     e20:	11 f4       	brne	.+4      	; 0xe26 <vfprintf+0xc6>
     e22:	20 68       	ori	r18, 0x80	; 128
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <vfprintf+0xca>
     e26:	88 36       	cpi	r24, 0x68	; 104
     e28:	41 f4       	brne	.+16     	; 0xe3a <vfprintf+0xda>
     e2a:	f6 01       	movw	r30, r12
     e2c:	93 fd       	sbrc	r25, 3
     e2e:	85 91       	lpm	r24, Z+
     e30:	93 ff       	sbrs	r25, 3
     e32:	81 91       	ld	r24, Z+
     e34:	6f 01       	movw	r12, r30
     e36:	81 11       	cpse	r24, r1
     e38:	c1 cf       	rjmp	.-126    	; 0xdbc <vfprintf+0x5c>
     e3a:	98 2f       	mov	r25, r24
     e3c:	9f 7d       	andi	r25, 0xDF	; 223
     e3e:	95 54       	subi	r25, 0x45	; 69
     e40:	93 30       	cpi	r25, 0x03	; 3
     e42:	28 f4       	brcc	.+10     	; 0xe4e <vfprintf+0xee>
     e44:	0c 5f       	subi	r16, 0xFC	; 252
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	ff e3       	ldi	r31, 0x3F	; 63
     e4a:	f9 83       	std	Y+1, r31	; 0x01
     e4c:	0d c0       	rjmp	.+26     	; 0xe68 <vfprintf+0x108>
     e4e:	83 36       	cpi	r24, 0x63	; 99
     e50:	31 f0       	breq	.+12     	; 0xe5e <vfprintf+0xfe>
     e52:	83 37       	cpi	r24, 0x73	; 115
     e54:	71 f0       	breq	.+28     	; 0xe72 <vfprintf+0x112>
     e56:	83 35       	cpi	r24, 0x53	; 83
     e58:	09 f0       	breq	.+2      	; 0xe5c <vfprintf+0xfc>
     e5a:	5b c0       	rjmp	.+182    	; 0xf12 <vfprintf+0x1b2>
     e5c:	22 c0       	rjmp	.+68     	; 0xea2 <vfprintf+0x142>
     e5e:	f8 01       	movw	r30, r16
     e60:	80 81       	ld	r24, Z
     e62:	89 83       	std	Y+1, r24	; 0x01
     e64:	0e 5f       	subi	r16, 0xFE	; 254
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	44 24       	eor	r4, r4
     e6a:	43 94       	inc	r4
     e6c:	51 2c       	mov	r5, r1
     e6e:	54 01       	movw	r10, r8
     e70:	15 c0       	rjmp	.+42     	; 0xe9c <vfprintf+0x13c>
     e72:	38 01       	movw	r6, r16
     e74:	f2 e0       	ldi	r31, 0x02	; 2
     e76:	6f 0e       	add	r6, r31
     e78:	71 1c       	adc	r7, r1
     e7a:	f8 01       	movw	r30, r16
     e7c:	a0 80       	ld	r10, Z
     e7e:	b1 80       	ldd	r11, Z+1	; 0x01
     e80:	26 ff       	sbrs	r18, 6
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <vfprintf+0x12a>
     e84:	65 2d       	mov	r22, r5
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <vfprintf+0x12e>
     e8a:	6f ef       	ldi	r22, 0xFF	; 255
     e8c:	7f ef       	ldi	r23, 0xFF	; 255
     e8e:	c5 01       	movw	r24, r10
     e90:	2c 87       	std	Y+12, r18	; 0x0c
     e92:	0e 94 dd 09 	call	0x13ba	; 0x13ba <strnlen>
     e96:	2c 01       	movw	r4, r24
     e98:	83 01       	movw	r16, r6
     e9a:	2c 85       	ldd	r18, Y+12	; 0x0c
     e9c:	2f 77       	andi	r18, 0x7F	; 127
     e9e:	22 2e       	mov	r2, r18
     ea0:	17 c0       	rjmp	.+46     	; 0xed0 <vfprintf+0x170>
     ea2:	38 01       	movw	r6, r16
     ea4:	f2 e0       	ldi	r31, 0x02	; 2
     ea6:	6f 0e       	add	r6, r31
     ea8:	71 1c       	adc	r7, r1
     eaa:	f8 01       	movw	r30, r16
     eac:	a0 80       	ld	r10, Z
     eae:	b1 80       	ldd	r11, Z+1	; 0x01
     eb0:	26 ff       	sbrs	r18, 6
     eb2:	03 c0       	rjmp	.+6      	; 0xeba <vfprintf+0x15a>
     eb4:	65 2d       	mov	r22, r5
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <vfprintf+0x15e>
     eba:	6f ef       	ldi	r22, 0xFF	; 255
     ebc:	7f ef       	ldi	r23, 0xFF	; 255
     ebe:	c5 01       	movw	r24, r10
     ec0:	2c 87       	std	Y+12, r18	; 0x0c
     ec2:	0e 94 cb 09 	call	0x1396	; 0x1396 <strnlen_P>
     ec6:	2c 01       	movw	r4, r24
     ec8:	2c 85       	ldd	r18, Y+12	; 0x0c
     eca:	20 68       	ori	r18, 0x80	; 128
     ecc:	22 2e       	mov	r2, r18
     ece:	83 01       	movw	r16, r6
     ed0:	23 fc       	sbrc	r2, 3
     ed2:	1b c0       	rjmp	.+54     	; 0xf0a <vfprintf+0x1aa>
     ed4:	83 2d       	mov	r24, r3
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	48 16       	cp	r4, r24
     eda:	59 06       	cpc	r5, r25
     edc:	b0 f4       	brcc	.+44     	; 0xf0a <vfprintf+0x1aa>
     ede:	b7 01       	movw	r22, r14
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
     ee8:	3a 94       	dec	r3
     eea:	f4 cf       	rjmp	.-24     	; 0xed4 <vfprintf+0x174>
     eec:	f5 01       	movw	r30, r10
     eee:	27 fc       	sbrc	r2, 7
     ef0:	85 91       	lpm	r24, Z+
     ef2:	27 fe       	sbrs	r2, 7
     ef4:	81 91       	ld	r24, Z+
     ef6:	5f 01       	movw	r10, r30
     ef8:	b7 01       	movw	r22, r14
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
     f00:	31 10       	cpse	r3, r1
     f02:	3a 94       	dec	r3
     f04:	f1 e0       	ldi	r31, 0x01	; 1
     f06:	4f 1a       	sub	r4, r31
     f08:	51 08       	sbc	r5, r1
     f0a:	41 14       	cp	r4, r1
     f0c:	51 04       	cpc	r5, r1
     f0e:	71 f7       	brne	.-36     	; 0xeec <vfprintf+0x18c>
     f10:	e5 c0       	rjmp	.+458    	; 0x10dc <vfprintf+0x37c>
     f12:	84 36       	cpi	r24, 0x64	; 100
     f14:	11 f0       	breq	.+4      	; 0xf1a <vfprintf+0x1ba>
     f16:	89 36       	cpi	r24, 0x69	; 105
     f18:	39 f5       	brne	.+78     	; 0xf68 <vfprintf+0x208>
     f1a:	f8 01       	movw	r30, r16
     f1c:	27 ff       	sbrs	r18, 7
     f1e:	07 c0       	rjmp	.+14     	; 0xf2e <vfprintf+0x1ce>
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	82 81       	ldd	r24, Z+2	; 0x02
     f26:	93 81       	ldd	r25, Z+3	; 0x03
     f28:	0c 5f       	subi	r16, 0xFC	; 252
     f2a:	1f 4f       	sbci	r17, 0xFF	; 255
     f2c:	08 c0       	rjmp	.+16     	; 0xf3e <vfprintf+0x1de>
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	07 2e       	mov	r0, r23
     f34:	00 0c       	add	r0, r0
     f36:	88 0b       	sbc	r24, r24
     f38:	99 0b       	sbc	r25, r25
     f3a:	0e 5f       	subi	r16, 0xFE	; 254
     f3c:	1f 4f       	sbci	r17, 0xFF	; 255
     f3e:	2f 76       	andi	r18, 0x6F	; 111
     f40:	72 2e       	mov	r7, r18
     f42:	97 ff       	sbrs	r25, 7
     f44:	09 c0       	rjmp	.+18     	; 0xf58 <vfprintf+0x1f8>
     f46:	90 95       	com	r25
     f48:	80 95       	com	r24
     f4a:	70 95       	com	r23
     f4c:	61 95       	neg	r22
     f4e:	7f 4f       	sbci	r23, 0xFF	; 255
     f50:	8f 4f       	sbci	r24, 0xFF	; 255
     f52:	9f 4f       	sbci	r25, 0xFF	; 255
     f54:	20 68       	ori	r18, 0x80	; 128
     f56:	72 2e       	mov	r7, r18
     f58:	2a e0       	ldi	r18, 0x0A	; 10
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	a4 01       	movw	r20, r8
     f5e:	0e 94 20 0a 	call	0x1440	; 0x1440 <__ultoa_invert>
     f62:	a8 2e       	mov	r10, r24
     f64:	a8 18       	sub	r10, r8
     f66:	44 c0       	rjmp	.+136    	; 0xff0 <vfprintf+0x290>
     f68:	85 37       	cpi	r24, 0x75	; 117
     f6a:	29 f4       	brne	.+10     	; 0xf76 <vfprintf+0x216>
     f6c:	2f 7e       	andi	r18, 0xEF	; 239
     f6e:	b2 2e       	mov	r11, r18
     f70:	2a e0       	ldi	r18, 0x0A	; 10
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	25 c0       	rjmp	.+74     	; 0xfc0 <vfprintf+0x260>
     f76:	f2 2f       	mov	r31, r18
     f78:	f9 7f       	andi	r31, 0xF9	; 249
     f7a:	bf 2e       	mov	r11, r31
     f7c:	8f 36       	cpi	r24, 0x6F	; 111
     f7e:	c1 f0       	breq	.+48     	; 0xfb0 <vfprintf+0x250>
     f80:	18 f4       	brcc	.+6      	; 0xf88 <vfprintf+0x228>
     f82:	88 35       	cpi	r24, 0x58	; 88
     f84:	79 f0       	breq	.+30     	; 0xfa4 <vfprintf+0x244>
     f86:	b4 c0       	rjmp	.+360    	; 0x10f0 <vfprintf+0x390>
     f88:	80 37       	cpi	r24, 0x70	; 112
     f8a:	19 f0       	breq	.+6      	; 0xf92 <vfprintf+0x232>
     f8c:	88 37       	cpi	r24, 0x78	; 120
     f8e:	21 f0       	breq	.+8      	; 0xf98 <vfprintf+0x238>
     f90:	af c0       	rjmp	.+350    	; 0x10f0 <vfprintf+0x390>
     f92:	2f 2f       	mov	r18, r31
     f94:	20 61       	ori	r18, 0x10	; 16
     f96:	b2 2e       	mov	r11, r18
     f98:	b4 fe       	sbrs	r11, 4
     f9a:	0d c0       	rjmp	.+26     	; 0xfb6 <vfprintf+0x256>
     f9c:	8b 2d       	mov	r24, r11
     f9e:	84 60       	ori	r24, 0x04	; 4
     fa0:	b8 2e       	mov	r11, r24
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <vfprintf+0x256>
     fa4:	24 ff       	sbrs	r18, 4
     fa6:	0a c0       	rjmp	.+20     	; 0xfbc <vfprintf+0x25c>
     fa8:	9f 2f       	mov	r25, r31
     faa:	96 60       	ori	r25, 0x06	; 6
     fac:	b9 2e       	mov	r11, r25
     fae:	06 c0       	rjmp	.+12     	; 0xfbc <vfprintf+0x25c>
     fb0:	28 e0       	ldi	r18, 0x08	; 8
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	05 c0       	rjmp	.+10     	; 0xfc0 <vfprintf+0x260>
     fb6:	20 e1       	ldi	r18, 0x10	; 16
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <vfprintf+0x260>
     fbc:	20 e1       	ldi	r18, 0x10	; 16
     fbe:	32 e0       	ldi	r19, 0x02	; 2
     fc0:	f8 01       	movw	r30, r16
     fc2:	b7 fe       	sbrs	r11, 7
     fc4:	07 c0       	rjmp	.+14     	; 0xfd4 <vfprintf+0x274>
     fc6:	60 81       	ld	r22, Z
     fc8:	71 81       	ldd	r23, Z+1	; 0x01
     fca:	82 81       	ldd	r24, Z+2	; 0x02
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	0c 5f       	subi	r16, 0xFC	; 252
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <vfprintf+0x280>
     fd4:	60 81       	ld	r22, Z
     fd6:	71 81       	ldd	r23, Z+1	; 0x01
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 5f       	subi	r16, 0xFE	; 254
     fde:	1f 4f       	sbci	r17, 0xFF	; 255
     fe0:	a4 01       	movw	r20, r8
     fe2:	0e 94 20 0a 	call	0x1440	; 0x1440 <__ultoa_invert>
     fe6:	a8 2e       	mov	r10, r24
     fe8:	a8 18       	sub	r10, r8
     fea:	fb 2d       	mov	r31, r11
     fec:	ff 77       	andi	r31, 0x7F	; 127
     fee:	7f 2e       	mov	r7, r31
     ff0:	76 fe       	sbrs	r7, 6
     ff2:	0b c0       	rjmp	.+22     	; 0x100a <vfprintf+0x2aa>
     ff4:	37 2d       	mov	r19, r7
     ff6:	3e 7f       	andi	r19, 0xFE	; 254
     ff8:	a5 14       	cp	r10, r5
     ffa:	50 f4       	brcc	.+20     	; 0x1010 <vfprintf+0x2b0>
     ffc:	74 fe       	sbrs	r7, 4
     ffe:	0a c0       	rjmp	.+20     	; 0x1014 <vfprintf+0x2b4>
    1000:	72 fc       	sbrc	r7, 2
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <vfprintf+0x2b4>
    1004:	37 2d       	mov	r19, r7
    1006:	3e 7e       	andi	r19, 0xEE	; 238
    1008:	05 c0       	rjmp	.+10     	; 0x1014 <vfprintf+0x2b4>
    100a:	ba 2c       	mov	r11, r10
    100c:	37 2d       	mov	r19, r7
    100e:	03 c0       	rjmp	.+6      	; 0x1016 <vfprintf+0x2b6>
    1010:	ba 2c       	mov	r11, r10
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <vfprintf+0x2b6>
    1014:	b5 2c       	mov	r11, r5
    1016:	34 ff       	sbrs	r19, 4
    1018:	0d c0       	rjmp	.+26     	; 0x1034 <vfprintf+0x2d4>
    101a:	fe 01       	movw	r30, r28
    101c:	ea 0d       	add	r30, r10
    101e:	f1 1d       	adc	r31, r1
    1020:	80 81       	ld	r24, Z
    1022:	80 33       	cpi	r24, 0x30	; 48
    1024:	11 f4       	brne	.+4      	; 0x102a <vfprintf+0x2ca>
    1026:	39 7e       	andi	r19, 0xE9	; 233
    1028:	09 c0       	rjmp	.+18     	; 0x103c <vfprintf+0x2dc>
    102a:	32 ff       	sbrs	r19, 2
    102c:	06 c0       	rjmp	.+12     	; 0x103a <vfprintf+0x2da>
    102e:	b3 94       	inc	r11
    1030:	b3 94       	inc	r11
    1032:	04 c0       	rjmp	.+8      	; 0x103c <vfprintf+0x2dc>
    1034:	83 2f       	mov	r24, r19
    1036:	86 78       	andi	r24, 0x86	; 134
    1038:	09 f0       	breq	.+2      	; 0x103c <vfprintf+0x2dc>
    103a:	b3 94       	inc	r11
    103c:	33 fd       	sbrc	r19, 3
    103e:	13 c0       	rjmp	.+38     	; 0x1066 <vfprintf+0x306>
    1040:	30 ff       	sbrs	r19, 0
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <vfprintf+0x2f0>
    1044:	5a 2c       	mov	r5, r10
    1046:	b3 14       	cp	r11, r3
    1048:	18 f4       	brcc	.+6      	; 0x1050 <vfprintf+0x2f0>
    104a:	53 0c       	add	r5, r3
    104c:	5b 18       	sub	r5, r11
    104e:	b3 2c       	mov	r11, r3
    1050:	b3 14       	cp	r11, r3
    1052:	68 f4       	brcc	.+26     	; 0x106e <vfprintf+0x30e>
    1054:	b7 01       	movw	r22, r14
    1056:	80 e2       	ldi	r24, 0x20	; 32
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	3c 87       	std	Y+12, r19	; 0x0c
    105c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    1060:	b3 94       	inc	r11
    1062:	3c 85       	ldd	r19, Y+12	; 0x0c
    1064:	f5 cf       	rjmp	.-22     	; 0x1050 <vfprintf+0x2f0>
    1066:	b3 14       	cp	r11, r3
    1068:	10 f4       	brcc	.+4      	; 0x106e <vfprintf+0x30e>
    106a:	3b 18       	sub	r3, r11
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <vfprintf+0x310>
    106e:	31 2c       	mov	r3, r1
    1070:	34 ff       	sbrs	r19, 4
    1072:	12 c0       	rjmp	.+36     	; 0x1098 <vfprintf+0x338>
    1074:	b7 01       	movw	r22, r14
    1076:	80 e3       	ldi	r24, 0x30	; 48
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	3c 87       	std	Y+12, r19	; 0x0c
    107c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    1080:	3c 85       	ldd	r19, Y+12	; 0x0c
    1082:	32 ff       	sbrs	r19, 2
    1084:	17 c0       	rjmp	.+46     	; 0x10b4 <vfprintf+0x354>
    1086:	31 fd       	sbrc	r19, 1
    1088:	03 c0       	rjmp	.+6      	; 0x1090 <vfprintf+0x330>
    108a:	88 e7       	ldi	r24, 0x78	; 120
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <vfprintf+0x334>
    1090:	88 e5       	ldi	r24, 0x58	; 88
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	b7 01       	movw	r22, r14
    1096:	0c c0       	rjmp	.+24     	; 0x10b0 <vfprintf+0x350>
    1098:	83 2f       	mov	r24, r19
    109a:	86 78       	andi	r24, 0x86	; 134
    109c:	59 f0       	breq	.+22     	; 0x10b4 <vfprintf+0x354>
    109e:	31 ff       	sbrs	r19, 1
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <vfprintf+0x346>
    10a2:	8b e2       	ldi	r24, 0x2B	; 43
    10a4:	01 c0       	rjmp	.+2      	; 0x10a8 <vfprintf+0x348>
    10a6:	80 e2       	ldi	r24, 0x20	; 32
    10a8:	37 fd       	sbrc	r19, 7
    10aa:	8d e2       	ldi	r24, 0x2D	; 45
    10ac:	b7 01       	movw	r22, r14
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    10b4:	a5 14       	cp	r10, r5
    10b6:	38 f4       	brcc	.+14     	; 0x10c6 <vfprintf+0x366>
    10b8:	b7 01       	movw	r22, r14
    10ba:	80 e3       	ldi	r24, 0x30	; 48
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    10c2:	5a 94       	dec	r5
    10c4:	f7 cf       	rjmp	.-18     	; 0x10b4 <vfprintf+0x354>
    10c6:	aa 94       	dec	r10
    10c8:	f4 01       	movw	r30, r8
    10ca:	ea 0d       	add	r30, r10
    10cc:	f1 1d       	adc	r31, r1
    10ce:	80 81       	ld	r24, Z
    10d0:	b7 01       	movw	r22, r14
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    10d8:	a1 10       	cpse	r10, r1
    10da:	f5 cf       	rjmp	.-22     	; 0x10c6 <vfprintf+0x366>
    10dc:	33 20       	and	r3, r3
    10de:	09 f4       	brne	.+2      	; 0x10e2 <vfprintf+0x382>
    10e0:	51 ce       	rjmp	.-862    	; 0xd84 <vfprintf+0x24>
    10e2:	b7 01       	movw	r22, r14
    10e4:	80 e2       	ldi	r24, 0x20	; 32
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <fputc>
    10ec:	3a 94       	dec	r3
    10ee:	f6 cf       	rjmp	.-20     	; 0x10dc <vfprintf+0x37c>
    10f0:	f7 01       	movw	r30, r14
    10f2:	86 81       	ldd	r24, Z+6	; 0x06
    10f4:	97 81       	ldd	r25, Z+7	; 0x07
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <vfprintf+0x39c>
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	9f ef       	ldi	r25, 0xFF	; 255
    10fc:	2c 96       	adiw	r28, 0x0c	; 12
    10fe:	e2 e1       	ldi	r30, 0x12	; 18
    1100:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__epilogue_restores__>

00001104 <calloc>:
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	86 9f       	mul	r24, r22
    110e:	80 01       	movw	r16, r0
    1110:	87 9f       	mul	r24, r23
    1112:	10 0d       	add	r17, r0
    1114:	96 9f       	mul	r25, r22
    1116:	10 0d       	add	r17, r0
    1118:	11 24       	eor	r1, r1
    111a:	c8 01       	movw	r24, r16
    111c:	0e 94 9e 08 	call	0x113c	; 0x113c <malloc>
    1120:	ec 01       	movw	r28, r24
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	29 f0       	breq	.+10     	; 0x1130 <calloc+0x2c>
    1126:	a8 01       	movw	r20, r16
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <memset>
    1130:	ce 01       	movw	r24, r28
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	08 95       	ret

0000113c <malloc>:
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	91 05       	cpc	r25, r1
    1144:	10 f4       	brcc	.+4      	; 0x114a <malloc+0xe>
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	e0 91 1b 02 	lds	r30, 0x021B	; 0x80021b <__flp>
    114e:	f0 91 1c 02 	lds	r31, 0x021C	; 0x80021c <__flp+0x1>
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	c0 e0       	ldi	r28, 0x00	; 0
    1158:	d0 e0       	ldi	r29, 0x00	; 0
    115a:	30 97       	sbiw	r30, 0x00	; 0
    115c:	11 f1       	breq	.+68     	; 0x11a2 <malloc+0x66>
    115e:	40 81       	ld	r20, Z
    1160:	51 81       	ldd	r21, Z+1	; 0x01
    1162:	48 17       	cp	r20, r24
    1164:	59 07       	cpc	r21, r25
    1166:	c0 f0       	brcs	.+48     	; 0x1198 <malloc+0x5c>
    1168:	48 17       	cp	r20, r24
    116a:	59 07       	cpc	r21, r25
    116c:	61 f4       	brne	.+24     	; 0x1186 <malloc+0x4a>
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	20 97       	sbiw	r28, 0x00	; 0
    1174:	19 f0       	breq	.+6      	; 0x117c <malloc+0x40>
    1176:	9b 83       	std	Y+3, r25	; 0x03
    1178:	8a 83       	std	Y+2, r24	; 0x02
    117a:	2b c0       	rjmp	.+86     	; 0x11d2 <malloc+0x96>
    117c:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <__flp+0x1>
    1180:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <__flp>
    1184:	26 c0       	rjmp	.+76     	; 0x11d2 <malloc+0x96>
    1186:	21 15       	cp	r18, r1
    1188:	31 05       	cpc	r19, r1
    118a:	19 f0       	breq	.+6      	; 0x1192 <malloc+0x56>
    118c:	42 17       	cp	r20, r18
    118e:	53 07       	cpc	r21, r19
    1190:	18 f4       	brcc	.+6      	; 0x1198 <malloc+0x5c>
    1192:	9a 01       	movw	r18, r20
    1194:	be 01       	movw	r22, r28
    1196:	df 01       	movw	r26, r30
    1198:	ef 01       	movw	r28, r30
    119a:	02 80       	ldd	r0, Z+2	; 0x02
    119c:	f3 81       	ldd	r31, Z+3	; 0x03
    119e:	e0 2d       	mov	r30, r0
    11a0:	dc cf       	rjmp	.-72     	; 0x115a <malloc+0x1e>
    11a2:	21 15       	cp	r18, r1
    11a4:	31 05       	cpc	r19, r1
    11a6:	09 f1       	breq	.+66     	; 0x11ea <malloc+0xae>
    11a8:	28 1b       	sub	r18, r24
    11aa:	39 0b       	sbc	r19, r25
    11ac:	24 30       	cpi	r18, 0x04	; 4
    11ae:	31 05       	cpc	r19, r1
    11b0:	90 f4       	brcc	.+36     	; 0x11d6 <malloc+0x9a>
    11b2:	12 96       	adiw	r26, 0x02	; 2
    11b4:	8d 91       	ld	r24, X+
    11b6:	9c 91       	ld	r25, X
    11b8:	13 97       	sbiw	r26, 0x03	; 3
    11ba:	61 15       	cp	r22, r1
    11bc:	71 05       	cpc	r23, r1
    11be:	21 f0       	breq	.+8      	; 0x11c8 <malloc+0x8c>
    11c0:	fb 01       	movw	r30, r22
    11c2:	93 83       	std	Z+3, r25	; 0x03
    11c4:	82 83       	std	Z+2, r24	; 0x02
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <malloc+0x94>
    11c8:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <__flp+0x1>
    11cc:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <__flp>
    11d0:	fd 01       	movw	r30, r26
    11d2:	32 96       	adiw	r30, 0x02	; 2
    11d4:	44 c0       	rjmp	.+136    	; 0x125e <malloc+0x122>
    11d6:	fd 01       	movw	r30, r26
    11d8:	e2 0f       	add	r30, r18
    11da:	f3 1f       	adc	r31, r19
    11dc:	81 93       	st	Z+, r24
    11de:	91 93       	st	Z+, r25
    11e0:	22 50       	subi	r18, 0x02	; 2
    11e2:	31 09       	sbc	r19, r1
    11e4:	2d 93       	st	X+, r18
    11e6:	3c 93       	st	X, r19
    11e8:	3a c0       	rjmp	.+116    	; 0x125e <malloc+0x122>
    11ea:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <__brkval>
    11ee:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <__brkval+0x1>
    11f2:	23 2b       	or	r18, r19
    11f4:	41 f4       	brne	.+16     	; 0x1206 <malloc+0xca>
    11f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    11fa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    11fe:	30 93 1a 02 	sts	0x021A, r19	; 0x80021a <__brkval+0x1>
    1202:	20 93 19 02 	sts	0x0219, r18	; 0x800219 <__brkval>
    1206:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    120a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    120e:	21 15       	cp	r18, r1
    1210:	31 05       	cpc	r19, r1
    1212:	41 f4       	brne	.+16     	; 0x1224 <malloc+0xe8>
    1214:	2d b7       	in	r18, 0x3d	; 61
    1216:	3e b7       	in	r19, 0x3e	; 62
    1218:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    121c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1220:	24 1b       	sub	r18, r20
    1222:	35 0b       	sbc	r19, r21
    1224:	e0 91 19 02 	lds	r30, 0x0219	; 0x800219 <__brkval>
    1228:	f0 91 1a 02 	lds	r31, 0x021A	; 0x80021a <__brkval+0x1>
    122c:	e2 17       	cp	r30, r18
    122e:	f3 07       	cpc	r31, r19
    1230:	a0 f4       	brcc	.+40     	; 0x125a <malloc+0x11e>
    1232:	2e 1b       	sub	r18, r30
    1234:	3f 0b       	sbc	r19, r31
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	78 f0       	brcs	.+30     	; 0x125a <malloc+0x11e>
    123c:	ac 01       	movw	r20, r24
    123e:	4e 5f       	subi	r20, 0xFE	; 254
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	24 17       	cp	r18, r20
    1244:	35 07       	cpc	r19, r21
    1246:	48 f0       	brcs	.+18     	; 0x125a <malloc+0x11e>
    1248:	4e 0f       	add	r20, r30
    124a:	5f 1f       	adc	r21, r31
    124c:	50 93 1a 02 	sts	0x021A, r21	; 0x80021a <__brkval+0x1>
    1250:	40 93 19 02 	sts	0x0219, r20	; 0x800219 <__brkval>
    1254:	81 93       	st	Z+, r24
    1256:	91 93       	st	Z+, r25
    1258:	02 c0       	rjmp	.+4      	; 0x125e <malloc+0x122>
    125a:	e0 e0       	ldi	r30, 0x00	; 0
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	cf 01       	movw	r24, r30
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <free>:
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	09 f4       	brne	.+2      	; 0x1274 <free+0xe>
    1272:	8c c0       	rjmp	.+280    	; 0x138c <free+0x126>
    1274:	fc 01       	movw	r30, r24
    1276:	32 97       	sbiw	r30, 0x02	; 2
    1278:	13 82       	std	Z+3, r1	; 0x03
    127a:	12 82       	std	Z+2, r1	; 0x02
    127c:	00 91 1b 02 	lds	r16, 0x021B	; 0x80021b <__flp>
    1280:	10 91 1c 02 	lds	r17, 0x021C	; 0x80021c <__flp+0x1>
    1284:	01 15       	cp	r16, r1
    1286:	11 05       	cpc	r17, r1
    1288:	81 f4       	brne	.+32     	; 0x12aa <free+0x44>
    128a:	20 81       	ld	r18, Z
    128c:	31 81       	ldd	r19, Z+1	; 0x01
    128e:	82 0f       	add	r24, r18
    1290:	93 1f       	adc	r25, r19
    1292:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <__brkval>
    1296:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <__brkval+0x1>
    129a:	28 17       	cp	r18, r24
    129c:	39 07       	cpc	r19, r25
    129e:	79 f5       	brne	.+94     	; 0x12fe <free+0x98>
    12a0:	f0 93 1a 02 	sts	0x021A, r31	; 0x80021a <__brkval+0x1>
    12a4:	e0 93 19 02 	sts	0x0219, r30	; 0x800219 <__brkval>
    12a8:	71 c0       	rjmp	.+226    	; 0x138c <free+0x126>
    12aa:	d8 01       	movw	r26, r16
    12ac:	40 e0       	ldi	r20, 0x00	; 0
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	ae 17       	cp	r26, r30
    12b2:	bf 07       	cpc	r27, r31
    12b4:	50 f4       	brcc	.+20     	; 0x12ca <free+0x64>
    12b6:	12 96       	adiw	r26, 0x02	; 2
    12b8:	2d 91       	ld	r18, X+
    12ba:	3c 91       	ld	r19, X
    12bc:	13 97       	sbiw	r26, 0x03	; 3
    12be:	ad 01       	movw	r20, r26
    12c0:	21 15       	cp	r18, r1
    12c2:	31 05       	cpc	r19, r1
    12c4:	09 f1       	breq	.+66     	; 0x1308 <free+0xa2>
    12c6:	d9 01       	movw	r26, r18
    12c8:	f3 cf       	rjmp	.-26     	; 0x12b0 <free+0x4a>
    12ca:	9d 01       	movw	r18, r26
    12cc:	da 01       	movw	r26, r20
    12ce:	33 83       	std	Z+3, r19	; 0x03
    12d0:	22 83       	std	Z+2, r18	; 0x02
    12d2:	60 81       	ld	r22, Z
    12d4:	71 81       	ldd	r23, Z+1	; 0x01
    12d6:	86 0f       	add	r24, r22
    12d8:	97 1f       	adc	r25, r23
    12da:	82 17       	cp	r24, r18
    12dc:	93 07       	cpc	r25, r19
    12de:	69 f4       	brne	.+26     	; 0x12fa <free+0x94>
    12e0:	ec 01       	movw	r28, r24
    12e2:	28 81       	ld	r18, Y
    12e4:	39 81       	ldd	r19, Y+1	; 0x01
    12e6:	26 0f       	add	r18, r22
    12e8:	37 1f       	adc	r19, r23
    12ea:	2e 5f       	subi	r18, 0xFE	; 254
    12ec:	3f 4f       	sbci	r19, 0xFF	; 255
    12ee:	31 83       	std	Z+1, r19	; 0x01
    12f0:	20 83       	st	Z, r18
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	9b 81       	ldd	r25, Y+3	; 0x03
    12f6:	93 83       	std	Z+3, r25	; 0x03
    12f8:	82 83       	std	Z+2, r24	; 0x02
    12fa:	45 2b       	or	r20, r21
    12fc:	29 f4       	brne	.+10     	; 0x1308 <free+0xa2>
    12fe:	f0 93 1c 02 	sts	0x021C, r31	; 0x80021c <__flp+0x1>
    1302:	e0 93 1b 02 	sts	0x021B, r30	; 0x80021b <__flp>
    1306:	42 c0       	rjmp	.+132    	; 0x138c <free+0x126>
    1308:	13 96       	adiw	r26, 0x03	; 3
    130a:	fc 93       	st	X, r31
    130c:	ee 93       	st	-X, r30
    130e:	12 97       	sbiw	r26, 0x02	; 2
    1310:	ed 01       	movw	r28, r26
    1312:	49 91       	ld	r20, Y+
    1314:	59 91       	ld	r21, Y+
    1316:	9e 01       	movw	r18, r28
    1318:	24 0f       	add	r18, r20
    131a:	35 1f       	adc	r19, r21
    131c:	e2 17       	cp	r30, r18
    131e:	f3 07       	cpc	r31, r19
    1320:	71 f4       	brne	.+28     	; 0x133e <free+0xd8>
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	84 0f       	add	r24, r20
    1328:	95 1f       	adc	r25, r21
    132a:	02 96       	adiw	r24, 0x02	; 2
    132c:	11 96       	adiw	r26, 0x01	; 1
    132e:	9c 93       	st	X, r25
    1330:	8e 93       	st	-X, r24
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	93 81       	ldd	r25, Z+3	; 0x03
    1336:	13 96       	adiw	r26, 0x03	; 3
    1338:	9c 93       	st	X, r25
    133a:	8e 93       	st	-X, r24
    133c:	12 97       	sbiw	r26, 0x02	; 2
    133e:	e0 e0       	ldi	r30, 0x00	; 0
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	d8 01       	movw	r26, r16
    1344:	12 96       	adiw	r26, 0x02	; 2
    1346:	8d 91       	ld	r24, X+
    1348:	9c 91       	ld	r25, X
    134a:	13 97       	sbiw	r26, 0x03	; 3
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	19 f0       	breq	.+6      	; 0x1356 <free+0xf0>
    1350:	f8 01       	movw	r30, r16
    1352:	8c 01       	movw	r16, r24
    1354:	f6 cf       	rjmp	.-20     	; 0x1342 <free+0xdc>
    1356:	8d 91       	ld	r24, X+
    1358:	9c 91       	ld	r25, X
    135a:	98 01       	movw	r18, r16
    135c:	2e 5f       	subi	r18, 0xFE	; 254
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	82 0f       	add	r24, r18
    1362:	93 1f       	adc	r25, r19
    1364:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <__brkval>
    1368:	30 91 1a 02 	lds	r19, 0x021A	; 0x80021a <__brkval+0x1>
    136c:	28 17       	cp	r18, r24
    136e:	39 07       	cpc	r19, r25
    1370:	69 f4       	brne	.+26     	; 0x138c <free+0x126>
    1372:	30 97       	sbiw	r30, 0x00	; 0
    1374:	29 f4       	brne	.+10     	; 0x1380 <free+0x11a>
    1376:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__flp+0x1>
    137a:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__flp>
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <free+0x11e>
    1380:	13 82       	std	Z+3, r1	; 0x03
    1382:	12 82       	std	Z+2, r1	; 0x02
    1384:	10 93 1a 02 	sts	0x021A, r17	; 0x80021a <__brkval+0x1>
    1388:	00 93 19 02 	sts	0x0219, r16	; 0x800219 <__brkval>
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	1f 91       	pop	r17
    1392:	0f 91       	pop	r16
    1394:	08 95       	ret

00001396 <strnlen_P>:
    1396:	fc 01       	movw	r30, r24
    1398:	05 90       	lpm	r0, Z+
    139a:	61 50       	subi	r22, 0x01	; 1
    139c:	70 40       	sbci	r23, 0x00	; 0
    139e:	01 10       	cpse	r0, r1
    13a0:	d8 f7       	brcc	.-10     	; 0x1398 <strnlen_P+0x2>
    13a2:	80 95       	com	r24
    13a4:	90 95       	com	r25
    13a6:	8e 0f       	add	r24, r30
    13a8:	9f 1f       	adc	r25, r31
    13aa:	08 95       	ret

000013ac <memset>:
    13ac:	dc 01       	movw	r26, r24
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <memset+0x6>
    13b0:	6d 93       	st	X+, r22
    13b2:	41 50       	subi	r20, 0x01	; 1
    13b4:	50 40       	sbci	r21, 0x00	; 0
    13b6:	e0 f7       	brcc	.-8      	; 0x13b0 <memset+0x4>
    13b8:	08 95       	ret

000013ba <strnlen>:
    13ba:	fc 01       	movw	r30, r24
    13bc:	61 50       	subi	r22, 0x01	; 1
    13be:	70 40       	sbci	r23, 0x00	; 0
    13c0:	01 90       	ld	r0, Z+
    13c2:	01 10       	cpse	r0, r1
    13c4:	d8 f7       	brcc	.-10     	; 0x13bc <strnlen+0x2>
    13c6:	80 95       	com	r24
    13c8:	90 95       	com	r25
    13ca:	8e 0f       	add	r24, r30
    13cc:	9f 1f       	adc	r25, r31
    13ce:	08 95       	ret

000013d0 <fputc>:
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	fb 01       	movw	r30, r22
    13da:	23 81       	ldd	r18, Z+3	; 0x03
    13dc:	21 fd       	sbrc	r18, 1
    13de:	03 c0       	rjmp	.+6      	; 0x13e6 <fputc+0x16>
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	9f ef       	ldi	r25, 0xFF	; 255
    13e4:	28 c0       	rjmp	.+80     	; 0x1436 <fputc+0x66>
    13e6:	22 ff       	sbrs	r18, 2
    13e8:	16 c0       	rjmp	.+44     	; 0x1416 <fputc+0x46>
    13ea:	46 81       	ldd	r20, Z+6	; 0x06
    13ec:	57 81       	ldd	r21, Z+7	; 0x07
    13ee:	24 81       	ldd	r18, Z+4	; 0x04
    13f0:	35 81       	ldd	r19, Z+5	; 0x05
    13f2:	42 17       	cp	r20, r18
    13f4:	53 07       	cpc	r21, r19
    13f6:	44 f4       	brge	.+16     	; 0x1408 <fputc+0x38>
    13f8:	a0 81       	ld	r26, Z
    13fa:	b1 81       	ldd	r27, Z+1	; 0x01
    13fc:	9d 01       	movw	r18, r26
    13fe:	2f 5f       	subi	r18, 0xFF	; 255
    1400:	3f 4f       	sbci	r19, 0xFF	; 255
    1402:	31 83       	std	Z+1, r19	; 0x01
    1404:	20 83       	st	Z, r18
    1406:	8c 93       	st	X, r24
    1408:	26 81       	ldd	r18, Z+6	; 0x06
    140a:	37 81       	ldd	r19, Z+7	; 0x07
    140c:	2f 5f       	subi	r18, 0xFF	; 255
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	37 83       	std	Z+7, r19	; 0x07
    1412:	26 83       	std	Z+6, r18	; 0x06
    1414:	10 c0       	rjmp	.+32     	; 0x1436 <fputc+0x66>
    1416:	eb 01       	movw	r28, r22
    1418:	09 2f       	mov	r16, r25
    141a:	18 2f       	mov	r17, r24
    141c:	00 84       	ldd	r0, Z+8	; 0x08
    141e:	f1 85       	ldd	r31, Z+9	; 0x09
    1420:	e0 2d       	mov	r30, r0
    1422:	09 95       	icall
    1424:	89 2b       	or	r24, r25
    1426:	e1 f6       	brne	.-72     	; 0x13e0 <fputc+0x10>
    1428:	8e 81       	ldd	r24, Y+6	; 0x06
    142a:	9f 81       	ldd	r25, Y+7	; 0x07
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	9f 83       	std	Y+7, r25	; 0x07
    1430:	8e 83       	std	Y+6, r24	; 0x06
    1432:	81 2f       	mov	r24, r17
    1434:	90 2f       	mov	r25, r16
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	08 95       	ret

00001440 <__ultoa_invert>:
    1440:	fa 01       	movw	r30, r20
    1442:	aa 27       	eor	r26, r26
    1444:	28 30       	cpi	r18, 0x08	; 8
    1446:	51 f1       	breq	.+84     	; 0x149c <__ultoa_invert+0x5c>
    1448:	20 31       	cpi	r18, 0x10	; 16
    144a:	81 f1       	breq	.+96     	; 0x14ac <__ultoa_invert+0x6c>
    144c:	e8 94       	clt
    144e:	6f 93       	push	r22
    1450:	6e 7f       	andi	r22, 0xFE	; 254
    1452:	6e 5f       	subi	r22, 0xFE	; 254
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	8f 4f       	sbci	r24, 0xFF	; 255
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	af 4f       	sbci	r26, 0xFF	; 255
    145c:	b1 e0       	ldi	r27, 0x01	; 1
    145e:	3e d0       	rcall	.+124    	; 0x14dc <__ultoa_invert+0x9c>
    1460:	b4 e0       	ldi	r27, 0x04	; 4
    1462:	3c d0       	rcall	.+120    	; 0x14dc <__ultoa_invert+0x9c>
    1464:	67 0f       	add	r22, r23
    1466:	78 1f       	adc	r23, r24
    1468:	89 1f       	adc	r24, r25
    146a:	9a 1f       	adc	r25, r26
    146c:	a1 1d       	adc	r26, r1
    146e:	68 0f       	add	r22, r24
    1470:	79 1f       	adc	r23, r25
    1472:	8a 1f       	adc	r24, r26
    1474:	91 1d       	adc	r25, r1
    1476:	a1 1d       	adc	r26, r1
    1478:	6a 0f       	add	r22, r26
    147a:	71 1d       	adc	r23, r1
    147c:	81 1d       	adc	r24, r1
    147e:	91 1d       	adc	r25, r1
    1480:	a1 1d       	adc	r26, r1
    1482:	20 d0       	rcall	.+64     	; 0x14c4 <__ultoa_invert+0x84>
    1484:	09 f4       	brne	.+2      	; 0x1488 <__ultoa_invert+0x48>
    1486:	68 94       	set
    1488:	3f 91       	pop	r19
    148a:	2a e0       	ldi	r18, 0x0A	; 10
    148c:	26 9f       	mul	r18, r22
    148e:	11 24       	eor	r1, r1
    1490:	30 19       	sub	r19, r0
    1492:	30 5d       	subi	r19, 0xD0	; 208
    1494:	31 93       	st	Z+, r19
    1496:	de f6       	brtc	.-74     	; 0x144e <__ultoa_invert+0xe>
    1498:	cf 01       	movw	r24, r30
    149a:	08 95       	ret
    149c:	46 2f       	mov	r20, r22
    149e:	47 70       	andi	r20, 0x07	; 7
    14a0:	40 5d       	subi	r20, 0xD0	; 208
    14a2:	41 93       	st	Z+, r20
    14a4:	b3 e0       	ldi	r27, 0x03	; 3
    14a6:	0f d0       	rcall	.+30     	; 0x14c6 <__ultoa_invert+0x86>
    14a8:	c9 f7       	brne	.-14     	; 0x149c <__ultoa_invert+0x5c>
    14aa:	f6 cf       	rjmp	.-20     	; 0x1498 <__ultoa_invert+0x58>
    14ac:	46 2f       	mov	r20, r22
    14ae:	4f 70       	andi	r20, 0x0F	; 15
    14b0:	40 5d       	subi	r20, 0xD0	; 208
    14b2:	4a 33       	cpi	r20, 0x3A	; 58
    14b4:	18 f0       	brcs	.+6      	; 0x14bc <__ultoa_invert+0x7c>
    14b6:	49 5d       	subi	r20, 0xD9	; 217
    14b8:	31 fd       	sbrc	r19, 1
    14ba:	40 52       	subi	r20, 0x20	; 32
    14bc:	41 93       	st	Z+, r20
    14be:	02 d0       	rcall	.+4      	; 0x14c4 <__ultoa_invert+0x84>
    14c0:	a9 f7       	brne	.-22     	; 0x14ac <__ultoa_invert+0x6c>
    14c2:	ea cf       	rjmp	.-44     	; 0x1498 <__ultoa_invert+0x58>
    14c4:	b4 e0       	ldi	r27, 0x04	; 4
    14c6:	a6 95       	lsr	r26
    14c8:	97 95       	ror	r25
    14ca:	87 95       	ror	r24
    14cc:	77 95       	ror	r23
    14ce:	67 95       	ror	r22
    14d0:	ba 95       	dec	r27
    14d2:	c9 f7       	brne	.-14     	; 0x14c6 <__ultoa_invert+0x86>
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	61 05       	cpc	r22, r1
    14d8:	71 05       	cpc	r23, r1
    14da:	08 95       	ret
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	0a 2e       	mov	r0, r26
    14e2:	06 94       	lsr	r0
    14e4:	57 95       	ror	r21
    14e6:	47 95       	ror	r20
    14e8:	37 95       	ror	r19
    14ea:	27 95       	ror	r18
    14ec:	ba 95       	dec	r27
    14ee:	c9 f7       	brne	.-14     	; 0x14e2 <__ultoa_invert+0xa2>
    14f0:	62 0f       	add	r22, r18
    14f2:	73 1f       	adc	r23, r19
    14f4:	84 1f       	adc	r24, r20
    14f6:	95 1f       	adc	r25, r21
    14f8:	a0 1d       	adc	r26, r0
    14fa:	08 95       	ret

000014fc <__prologue_saves__>:
    14fc:	2f 92       	push	r2
    14fe:	3f 92       	push	r3
    1500:	4f 92       	push	r4
    1502:	5f 92       	push	r5
    1504:	6f 92       	push	r6
    1506:	7f 92       	push	r7
    1508:	8f 92       	push	r8
    150a:	9f 92       	push	r9
    150c:	af 92       	push	r10
    150e:	bf 92       	push	r11
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	ca 1b       	sub	r28, r26
    1526:	db 0b       	sbc	r29, r27
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	09 94       	ijmp

00001534 <__epilogue_restores__>:
    1534:	2a 88       	ldd	r2, Y+18	; 0x12
    1536:	39 88       	ldd	r3, Y+17	; 0x11
    1538:	48 88       	ldd	r4, Y+16	; 0x10
    153a:	5f 84       	ldd	r5, Y+15	; 0x0f
    153c:	6e 84       	ldd	r6, Y+14	; 0x0e
    153e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1540:	8c 84       	ldd	r8, Y+12	; 0x0c
    1542:	9b 84       	ldd	r9, Y+11	; 0x0b
    1544:	aa 84       	ldd	r10, Y+10	; 0x0a
    1546:	b9 84       	ldd	r11, Y+9	; 0x09
    1548:	c8 84       	ldd	r12, Y+8	; 0x08
    154a:	df 80       	ldd	r13, Y+7	; 0x07
    154c:	ee 80       	ldd	r14, Y+6	; 0x06
    154e:	fd 80       	ldd	r15, Y+5	; 0x05
    1550:	0c 81       	ldd	r16, Y+4	; 0x04
    1552:	1b 81       	ldd	r17, Y+3	; 0x03
    1554:	aa 81       	ldd	r26, Y+2	; 0x02
    1556:	b9 81       	ldd	r27, Y+1	; 0x01
    1558:	ce 0f       	add	r28, r30
    155a:	d1 1d       	adc	r29, r1
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	ed 01       	movw	r28, r26
    1568:	08 95       	ret

0000156a <_exit>:
    156a:	f8 94       	cli

0000156c <__stop_program>:
    156c:	ff cf       	rjmp	.-2      	; 0x156c <__stop_program>
