
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00000c2e  00000cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800170  00800170  00000d32  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e36  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1c  00000000  00000000  00001cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000753  00000000  00000000  000026de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00002e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b5  00000000  00000000  0000343f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000038f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee e2       	ldi	r30, 0x2E	; 46
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 37       	cpi	r26, 0x70	; 112
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e7       	ldi	r26, 0x70	; 112
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 37       	cpi	r26, 0x7C	; 124
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 0b 01 	call	0x216	; 0x216 <main>
  a6:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
#include "setup.h"
#include <util/delay.h>

int ADC_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	DDRB &= ~(1<<PIND2);
  ba:	ba 98       	cbi	0x17, 2	; 23
	
	return 0;
}
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret

000000c2 <ADC_read>:

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	48 f4       	brcc	.+18     	; 0xd8 <ADC_read+0x16>
	
	//Choose channel in ADC
	*adc = 0x04 | channel;
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	f4 e1       	ldi	r31, 0x14	; 20
  cc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	84 ea       	ldi	r24, 0xA4	; 164
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <ADC_read+0xe>
	
	//Wait for the data to be read (this can be done with an interrupt)
	//while(test_bit(PIND, PIND2));
	_delay_us(100);
	return *adc;
  d4:	80 81       	ld	r24, Z
  d6:	08 95       	ret

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
  d8:	80 e0       	ldi	r24, 0x00	; 0
	
	//Wait for the data to be read (this can be done with an interrupt)
	//while(test_bit(PIND, PIND2));
	_delay_us(100);
	return *adc;
  da:	08 95       	ret

000000dc <JOY_calibrate>:
			break;
		default:
				break;
	}
	return 0;
}
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
  e2:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <mid_x>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
  ec:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <__data_end>
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret

000000f6 <joy_init>:
  f6:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
  fa:	87 b3       	in	r24, 0x17	; 23
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	87 bb       	out	0x17, r24	; 23
 100:	88 b3       	in	r24, 0x18	; 24
 102:	87 60       	ori	r24, 0x07	; 7
 104:	88 bb       	out	0x18, r24	; 24
 106:	0e 94 6e 00 	call	0xdc	; 0xdc <JOY_calibrate>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret

00000110 <JOY_getPosition>:

joy_position JOY_getPosition(void) {
 110:	cf 93       	push	r28
	joy_position position;
	uint8_t x, y;
	
	//Read position x from channel 0
	x = ADC_read(1);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
 118:	c8 2f       	mov	r28, r24
	//Read position y from channel 1
	y = ADC_read(0);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
 120:	e8 2f       	mov	r30, r24
	
	//Calculate position x percentage
	if(x > mid_x) {
 122:	40 91 71 01 	lds	r20, 0x0171	; 0x800171 <mid_x>
 126:	4c 17       	cp	r20, r28
 128:	98 f4       	brcc	.+38     	; 0x150 <JOY_getPosition+0x40>
		position.x = 100 * (x - mid_x) / (0xFF - mid_x);
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	2c 2f       	mov	r18, r28
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	24 1b       	sub	r18, r20
 132:	35 0b       	sbc	r19, r21
 134:	64 e6       	ldi	r22, 0x64	; 100
 136:	62 9f       	mul	r22, r18
 138:	c0 01       	movw	r24, r0
 13a:	63 9f       	mul	r22, r19
 13c:	90 0d       	add	r25, r0
 13e:	11 24       	eor	r1, r1
 140:	6f ef       	ldi	r22, 0xFF	; 255
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	64 1b       	sub	r22, r20
 146:	75 0b       	sbc	r23, r21
 148:	0e 94 87 01 	call	0x30e	; 0x30e <__divmodhi4>
 14c:	f6 2f       	mov	r31, r22
 14e:	13 c0       	rjmp	.+38     	; 0x176 <JOY_getPosition+0x66>
		} else if (x < mid_x) {
 150:	c4 17       	cp	r28, r20
 152:	80 f4       	brcc	.+32     	; 0x174 <JOY_getPosition+0x64>
		position.x = 100 * (x - mid_x) / (mid_x - 0);
 154:	64 2f       	mov	r22, r20
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	2c 2f       	mov	r18, r28
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	26 1b       	sub	r18, r22
 15e:	37 0b       	sbc	r19, r23
 160:	44 e6       	ldi	r20, 0x64	; 100
 162:	42 9f       	mul	r20, r18
 164:	c0 01       	movw	r24, r0
 166:	43 9f       	mul	r20, r19
 168:	90 0d       	add	r25, r0
 16a:	11 24       	eor	r1, r1
 16c:	0e 94 87 01 	call	0x30e	; 0x30e <__divmodhi4>
 170:	f6 2f       	mov	r31, r22
 172:	01 c0       	rjmp	.+2      	; 0x176 <JOY_getPosition+0x66>
		} else {
		position.x = 0;
 174:	f0 e0       	ldi	r31, 0x00	; 0
	}
	
	//Calculate position y percentage
	if(y > mid_y) {
 176:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <__data_end>
 17a:	2e 17       	cp	r18, r30
 17c:	98 f4       	brcc	.+38     	; 0x1a4 <JOY_getPosition+0x94>
		position.y = 100 * (y - mid_y) / (0xFF - mid_y);
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	4e 2f       	mov	r20, r30
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	42 1b       	sub	r20, r18
 186:	53 0b       	sbc	r21, r19
 188:	64 e6       	ldi	r22, 0x64	; 100
 18a:	64 9f       	mul	r22, r20
 18c:	c0 01       	movw	r24, r0
 18e:	65 9f       	mul	r22, r21
 190:	90 0d       	add	r25, r0
 192:	11 24       	eor	r1, r1
 194:	6f ef       	ldi	r22, 0xFF	; 255
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	62 1b       	sub	r22, r18
 19a:	73 0b       	sbc	r23, r19
 19c:	0e 94 87 01 	call	0x30e	; 0x30e <__divmodhi4>
 1a0:	76 2f       	mov	r23, r22
 1a2:	13 c0       	rjmp	.+38     	; 0x1ca <JOY_getPosition+0xba>
		} else if (y < mid_y) {
 1a4:	e2 17       	cp	r30, r18
 1a6:	80 f4       	brcc	.+32     	; 0x1c8 <JOY_getPosition+0xb8>
		position.y = 100 * (y - mid_y) / (mid_y - 0);
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	4e 2f       	mov	r20, r30
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	42 1b       	sub	r20, r18
 1b0:	53 0b       	sbc	r21, r19
 1b2:	64 e6       	ldi	r22, 0x64	; 100
 1b4:	64 9f       	mul	r22, r20
 1b6:	c0 01       	movw	r24, r0
 1b8:	65 9f       	mul	r22, r21
 1ba:	90 0d       	add	r25, r0
 1bc:	11 24       	eor	r1, r1
 1be:	b9 01       	movw	r22, r18
 1c0:	0e 94 87 01 	call	0x30e	; 0x30e <__divmodhi4>
 1c4:	76 2f       	mov	r23, r22
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <JOY_getPosition+0xba>
		} else {
		position.y = 0;
 1c8:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	return position;
}
 1ca:	6f 2f       	mov	r22, r31
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <JOY_getDirection>:

joy_position JOY_getDirection(void) {
	joy_position position;
	
	//Get actual position of joystick
	position = JOY_getPosition();
 1d4:	0e 94 88 00 	call	0x110	; 0x110 <JOY_getPosition>
 1d8:	46 2f       	mov	r20, r22
 1da:	57 2f       	mov	r21, r23
 1dc:	28 2f       	mov	r18, r24
 1de:	39 2f       	mov	r19, r25
	
	if(position.x < -50) {
 1e0:	6e 3c       	cpi	r22, 0xCE	; 206
 1e2:	2c f0       	brlt	.+10     	; 0x1ee <JOY_getDirection+0x1a>
		position.direction = "LEFT";
		} else if(position.x > 50) {
 1e4:	63 33       	cpi	r22, 0x33	; 51
 1e6:	2c f0       	brlt	.+10     	; 0x1f2 <JOY_getDirection+0x1e>
		position.direction = "RIGHT";
 1e8:	2b e0       	ldi	r18, 0x0B	; 11
 1ea:	31 e0       	ldi	r19, 0x01	; 1
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <JOY_getDirection+0x1e>
	
	//Get actual position of joystick
	position = JOY_getPosition();
	
	if(position.x < -50) {
		position.direction = "LEFT";
 1ee:	26 e0       	ldi	r18, 0x06	; 6
 1f0:	31 e0       	ldi	r19, 0x01	; 1
		} else if(position.x > 50) {
		position.direction = "RIGHT";
	}
	
	if(position.y < -50) {
 1f2:	5e 3c       	cpi	r21, 0xCE	; 206
 1f4:	2c f0       	brlt	.+10     	; 0x200 <JOY_getDirection+0x2c>
		position.direction = "DOWN";
		} else if(position.y > 50) {
 1f6:	53 33       	cpi	r21, 0x33	; 51
 1f8:	2c f0       	brlt	.+10     	; 0x204 <JOY_getDirection+0x30>
		position.direction = "UP";
 1fa:	26 e1       	ldi	r18, 0x16	; 22
 1fc:	31 e0       	ldi	r19, 0x01	; 1
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <JOY_getDirection+0x30>
		} else if(position.x > 50) {
		position.direction = "RIGHT";
	}
	
	if(position.y < -50) {
		position.direction = "DOWN";
 200:	21 e1       	ldi	r18, 0x11	; 17
 202:	31 e0       	ldi	r19, 0x01	; 1
		} else if(position.y > 50) {
		position.direction = "UP";
	}
	
	if(position.x == 0 && position.y == 0){
 204:	41 11       	cpse	r20, r1
 206:	04 c0       	rjmp	.+8      	; 0x210 <JOY_getDirection+0x3c>
 208:	51 11       	cpse	r21, r1
 20a:	02 c0       	rjmp	.+4      	; 0x210 <JOY_getDirection+0x3c>
		position.direction = "NEUTRAL";
 20c:	29 e1       	ldi	r18, 0x19	; 25
 20e:	31 e0       	ldi	r19, 0x01	; 1
	}
	
	return position;
}
 210:	82 2f       	mov	r24, r18
 212:	93 2f       	mov	r25, r19
 214:	08 95       	ret

00000216 <main>:


int main(void)
{
	joy_position joy_pos;
	UART_Init(UBRREG);
 216:	8e e1       	ldi	r24, 0x1E	; 30
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <UART_Init>
	ADC_init();
 21e:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	joy_init();
 222:	0e 94 7b 00 	call	0xf6	; 0xf6 <joy_init>
	printf("----TING FUNK----\n\r");
 226:	81 e2       	ldi	r24, 0x21	; 33
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	9f 93       	push	r25
 22c:	8f 93       	push	r24
 22e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <printf>
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
	
	while(1){
	
	joy_pos = JOY_getDirection();
		 
		printf("possisjon er %s \n\r",joy_pos.direction);
 236:	0f 2e       	mov	r0, r31
 238:	f5 e3       	ldi	r31, 0x35	; 53
 23a:	cf 2e       	mov	r12, r31
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	df 2e       	mov	r13, r31
 240:	f0 2d       	mov	r31, r0
		_delay_ms(100);
		
		printf("rettning x er %d \n\r",joy_pos.x);
 242:	0f 2e       	mov	r0, r31
 244:	f8 e4       	ldi	r31, 0x48	; 72
 246:	ef 2e       	mov	r14, r31
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	ff 2e       	mov	r15, r31
 24c:	f0 2d       	mov	r31, r0
		_delay_ms(100);
		
		printf("rettning y er %d \n\r",joy_pos.y);
 24e:	0c e5       	ldi	r16, 0x5C	; 92
 250:	11 e0       	ldi	r17, 0x01	; 1
	printf("----TING FUNK----\n\r");
	//SRAM_test();
	
	while(1){
	
	joy_pos = JOY_getDirection();
 252:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <JOY_getDirection>
 256:	d6 2f       	mov	r29, r22
 258:	c7 2f       	mov	r28, r23
		 
		printf("possisjon er %s \n\r",joy_pos.direction);
 25a:	9f 93       	push	r25
 25c:	8f 93       	push	r24
 25e:	df 92       	push	r13
 260:	cf 92       	push	r12
 262:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	29 ec       	ldi	r18, 0xC9	; 201
 268:	8f e7       	ldi	r24, 0x7F	; 127
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x56>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x60>
 276:	00 00       	nop
		_delay_ms(100);
		
		printf("rettning x er %d \n\r",joy_pos.x);
 278:	8d 2f       	mov	r24, r29
 27a:	0d 2e       	mov	r0, r29
 27c:	00 0c       	add	r0, r0
 27e:	99 0b       	sbc	r25, r25
 280:	9f 93       	push	r25
 282:	df 93       	push	r29
 284:	ff 92       	push	r15
 286:	ef 92       	push	r14
 288:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <printf>
 28c:	29 ec       	ldi	r18, 0xC9	; 201
 28e:	8f e7       	ldi	r24, 0x7F	; 127
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	21 50       	subi	r18, 0x01	; 1
 294:	80 40       	sbci	r24, 0x00	; 0
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x7c>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <main+0x86>
 29c:	00 00       	nop
 29e:	8d b7       	in	r24, 0x3d	; 61
 2a0:	9e b7       	in	r25, 0x3e	; 62
 2a2:	08 96       	adiw	r24, 0x08	; 8
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	9e bf       	out	0x3e, r25	; 62
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	8d bf       	out	0x3d, r24	; 61
		_delay_ms(100);
		
		printf("rettning y er %d \n\r",joy_pos.y);
 2ae:	8c 2f       	mov	r24, r28
 2b0:	0c 2e       	mov	r0, r28
 2b2:	00 0c       	add	r0, r0
 2b4:	99 0b       	sbc	r25, r25
 2b6:	9f 93       	push	r25
 2b8:	cf 93       	push	r28
 2ba:	1f 93       	push	r17
 2bc:	0f 93       	push	r16
 2be:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <printf>
 2c2:	99 ec       	ldi	r25, 0xC9	; 201
 2c4:	2f e7       	ldi	r18, 0x7F	; 127
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	91 50       	subi	r25, 0x01	; 1
 2ca:	20 40       	sbci	r18, 0x00	; 0
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0xb2>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0xbc>
 2d2:	00 00       	nop
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	ba cf       	rjmp	.-140    	; 0x252 <main+0x3c>

000002de <UART_TX>:
}

int UART_TX(char data, FILE * _in){
	(void)(_in);
	
	while( !(UCSR0A & (1 << UDRE0)) );
 2de:	5d 9b       	sbis	0x0b, 5	; 11
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <UART_TX>
	
	// send data
	UDR0 = data;
 2e2:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	08 95       	ret

000002ea <UART_RX>:

int UART_RX(FILE * _in ){
	(void)(_in);
	while( !(UCSR0A & (1 << RXC0)) );
 2ea:	5f 9b       	sbis	0x0b, 7	; 11
 2ec:	fe cf       	rjmp	.-4      	; 0x2ea <UART_RX>
	
	// Data recieved
	return UDR0;
 2ee:	8c b1       	in	r24, 0x0c	; 12
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	08 95       	ret

000002f4 <UART_Init>:


void UART_Init(unsigned int ubrr)
{
	// Baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 2f4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
 2f6:	89 b9       	out	0x09, r24	; 9
	
	// Enable Rx and Tx
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) ;
 2f8:	88 e1       	ldi	r24, 0x18	; 24
 2fa:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
 2fc:	8e e8       	ldi	r24, 0x8E	; 142
 2fe:	80 bd       	out	0x20, r24	; 32
	fdevopen(UART_TX, UART_RX);
 300:	65 e7       	ldi	r22, 0x75	; 117
 302:	71 e0       	ldi	r23, 0x01	; 1
 304:	8f e6       	ldi	r24, 0x6F	; 111
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 af 01 	call	0x35e	; 0x35e <fdevopen>
 30c:	08 95       	ret

0000030e <__divmodhi4>:
 30e:	97 fb       	bst	r25, 7
 310:	07 2e       	mov	r0, r23
 312:	16 f4       	brtc	.+4      	; 0x318 <__divmodhi4+0xa>
 314:	00 94       	com	r0
 316:	07 d0       	rcall	.+14     	; 0x326 <__divmodhi4_neg1>
 318:	77 fd       	sbrc	r23, 7
 31a:	09 d0       	rcall	.+18     	; 0x32e <__divmodhi4_neg2>
 31c:	0e 94 9b 01 	call	0x336	; 0x336 <__udivmodhi4>
 320:	07 fc       	sbrc	r0, 7
 322:	05 d0       	rcall	.+10     	; 0x32e <__divmodhi4_neg2>
 324:	3e f4       	brtc	.+14     	; 0x334 <__divmodhi4_exit>

00000326 <__divmodhi4_neg1>:
 326:	90 95       	com	r25
 328:	81 95       	neg	r24
 32a:	9f 4f       	sbci	r25, 0xFF	; 255
 32c:	08 95       	ret

0000032e <__divmodhi4_neg2>:
 32e:	70 95       	com	r23
 330:	61 95       	neg	r22
 332:	7f 4f       	sbci	r23, 0xFF	; 255

00000334 <__divmodhi4_exit>:
 334:	08 95       	ret

00000336 <__udivmodhi4>:
 336:	aa 1b       	sub	r26, r26
 338:	bb 1b       	sub	r27, r27
 33a:	51 e1       	ldi	r21, 0x11	; 17
 33c:	07 c0       	rjmp	.+14     	; 0x34c <__udivmodhi4_ep>

0000033e <__udivmodhi4_loop>:
 33e:	aa 1f       	adc	r26, r26
 340:	bb 1f       	adc	r27, r27
 342:	a6 17       	cp	r26, r22
 344:	b7 07       	cpc	r27, r23
 346:	10 f0       	brcs	.+4      	; 0x34c <__udivmodhi4_ep>
 348:	a6 1b       	sub	r26, r22
 34a:	b7 0b       	sbc	r27, r23

0000034c <__udivmodhi4_ep>:
 34c:	88 1f       	adc	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	5a 95       	dec	r21
 352:	a9 f7       	brne	.-22     	; 0x33e <__udivmodhi4_loop>
 354:	80 95       	com	r24
 356:	90 95       	com	r25
 358:	bc 01       	movw	r22, r24
 35a:	cd 01       	movw	r24, r26
 35c:	08 95       	ret

0000035e <fdevopen>:
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	31 f4       	brne	.+12     	; 0x376 <fdevopen+0x18>
 36a:	61 15       	cp	r22, r1
 36c:	71 05       	cpc	r23, r1
 36e:	19 f4       	brne	.+6      	; 0x376 <fdevopen+0x18>
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	3a c0       	rjmp	.+116    	; 0x3ea <fdevopen+0x8c>
 376:	8b 01       	movw	r16, r22
 378:	ec 01       	movw	r28, r24
 37a:	6e e0       	ldi	r22, 0x0E	; 14
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <calloc>
 386:	fc 01       	movw	r30, r24
 388:	89 2b       	or	r24, r25
 38a:	91 f3       	breq	.-28     	; 0x370 <fdevopen+0x12>
 38c:	80 e8       	ldi	r24, 0x80	; 128
 38e:	83 83       	std	Z+3, r24	; 0x03
 390:	01 15       	cp	r16, r1
 392:	11 05       	cpc	r17, r1
 394:	71 f0       	breq	.+28     	; 0x3b2 <fdevopen+0x54>
 396:	13 87       	std	Z+11, r17	; 0x0b
 398:	02 87       	std	Z+10, r16	; 0x0a
 39a:	81 e8       	ldi	r24, 0x81	; 129
 39c:	83 83       	std	Z+3, r24	; 0x03
 39e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__iob>
 3a2:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__iob+0x1>
 3a6:	89 2b       	or	r24, r25
 3a8:	21 f4       	brne	.+8      	; 0x3b2 <fdevopen+0x54>
 3aa:	f0 93 73 01 	sts	0x0173, r31	; 0x800173 <__iob+0x1>
 3ae:	e0 93 72 01 	sts	0x0172, r30	; 0x800172 <__iob>
 3b2:	20 97       	sbiw	r28, 0x00	; 0
 3b4:	c9 f0       	breq	.+50     	; 0x3e8 <fdevopen+0x8a>
 3b6:	d1 87       	std	Z+9, r29	; 0x09
 3b8:	c0 87       	std	Z+8, r28	; 0x08
 3ba:	83 81       	ldd	r24, Z+3	; 0x03
 3bc:	82 60       	ori	r24, 0x02	; 2
 3be:	83 83       	std	Z+3, r24	; 0x03
 3c0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <__iob+0x2>
 3c4:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <__iob+0x3>
 3c8:	89 2b       	or	r24, r25
 3ca:	71 f4       	brne	.+28     	; 0x3e8 <fdevopen+0x8a>
 3cc:	f0 93 75 01 	sts	0x0175, r31	; 0x800175 <__iob+0x3>
 3d0:	e0 93 74 01 	sts	0x0174, r30	; 0x800174 <__iob+0x2>
 3d4:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__iob+0x4>
 3d8:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <__iob+0x5>
 3dc:	89 2b       	or	r24, r25
 3de:	21 f4       	brne	.+8      	; 0x3e8 <fdevopen+0x8a>
 3e0:	f0 93 77 01 	sts	0x0177, r31	; 0x800177 <__iob+0x5>
 3e4:	e0 93 76 01 	sts	0x0176, r30	; 0x800176 <__iob+0x4>
 3e8:	cf 01       	movw	r24, r30
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	08 95       	ret

000003f4 <printf>:
 3f4:	a0 e0       	ldi	r26, 0x00	; 0
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	e0 e0       	ldi	r30, 0x00	; 0
 3fa:	f2 e0       	ldi	r31, 0x02	; 2
 3fc:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__prologue_saves__+0x20>
 400:	ae 01       	movw	r20, r28
 402:	4b 5f       	subi	r20, 0xFB	; 251
 404:	5f 4f       	sbci	r21, 0xFF	; 255
 406:	fa 01       	movw	r30, r20
 408:	61 91       	ld	r22, Z+
 40a:	71 91       	ld	r23, Z+
 40c:	af 01       	movw	r20, r30
 40e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <__iob+0x2>
 412:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <__iob+0x3>
 416:	0e 94 10 02 	call	0x420	; 0x420 <vfprintf>
 41a:	e2 e0       	ldi	r30, 0x02	; 2
 41c:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__epilogue_restores__+0x20>

00000420 <vfprintf>:
 420:	ac e0       	ldi	r26, 0x0C	; 12
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e6 e1       	ldi	r30, 0x16	; 22
 426:	f2 e0       	ldi	r31, 0x02	; 2
 428:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__prologue_saves__>
 42c:	7c 01       	movw	r14, r24
 42e:	6b 01       	movw	r12, r22
 430:	8a 01       	movw	r16, r20
 432:	fc 01       	movw	r30, r24
 434:	17 82       	std	Z+7, r1	; 0x07
 436:	16 82       	std	Z+6, r1	; 0x06
 438:	83 81       	ldd	r24, Z+3	; 0x03
 43a:	81 ff       	sbrs	r24, 1
 43c:	bd c1       	rjmp	.+890    	; 0x7b8 <__stack+0x2b9>
 43e:	ce 01       	movw	r24, r28
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	4c 01       	movw	r8, r24
 444:	f7 01       	movw	r30, r14
 446:	93 81       	ldd	r25, Z+3	; 0x03
 448:	f6 01       	movw	r30, r12
 44a:	93 fd       	sbrc	r25, 3
 44c:	85 91       	lpm	r24, Z+
 44e:	93 ff       	sbrs	r25, 3
 450:	81 91       	ld	r24, Z+
 452:	6f 01       	movw	r12, r30
 454:	88 23       	and	r24, r24
 456:	09 f4       	brne	.+2      	; 0x45a <vfprintf+0x3a>
 458:	ab c1       	rjmp	.+854    	; 0x7b0 <__stack+0x2b1>
 45a:	85 32       	cpi	r24, 0x25	; 37
 45c:	39 f4       	brne	.+14     	; 0x46c <vfprintf+0x4c>
 45e:	93 fd       	sbrc	r25, 3
 460:	85 91       	lpm	r24, Z+
 462:	93 ff       	sbrs	r25, 3
 464:	81 91       	ld	r24, Z+
 466:	6f 01       	movw	r12, r30
 468:	85 32       	cpi	r24, 0x25	; 37
 46a:	29 f4       	brne	.+10     	; 0x476 <vfprintf+0x56>
 46c:	b7 01       	movw	r22, r14
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 474:	e7 cf       	rjmp	.-50     	; 0x444 <vfprintf+0x24>
 476:	51 2c       	mov	r5, r1
 478:	31 2c       	mov	r3, r1
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	20 32       	cpi	r18, 0x20	; 32
 47e:	a0 f4       	brcc	.+40     	; 0x4a8 <vfprintf+0x88>
 480:	8b 32       	cpi	r24, 0x2B	; 43
 482:	69 f0       	breq	.+26     	; 0x49e <vfprintf+0x7e>
 484:	30 f4       	brcc	.+12     	; 0x492 <vfprintf+0x72>
 486:	80 32       	cpi	r24, 0x20	; 32
 488:	59 f0       	breq	.+22     	; 0x4a0 <vfprintf+0x80>
 48a:	83 32       	cpi	r24, 0x23	; 35
 48c:	69 f4       	brne	.+26     	; 0x4a8 <vfprintf+0x88>
 48e:	20 61       	ori	r18, 0x10	; 16
 490:	2c c0       	rjmp	.+88     	; 0x4ea <vfprintf+0xca>
 492:	8d 32       	cpi	r24, 0x2D	; 45
 494:	39 f0       	breq	.+14     	; 0x4a4 <vfprintf+0x84>
 496:	80 33       	cpi	r24, 0x30	; 48
 498:	39 f4       	brne	.+14     	; 0x4a8 <vfprintf+0x88>
 49a:	21 60       	ori	r18, 0x01	; 1
 49c:	26 c0       	rjmp	.+76     	; 0x4ea <vfprintf+0xca>
 49e:	22 60       	ori	r18, 0x02	; 2
 4a0:	24 60       	ori	r18, 0x04	; 4
 4a2:	23 c0       	rjmp	.+70     	; 0x4ea <vfprintf+0xca>
 4a4:	28 60       	ori	r18, 0x08	; 8
 4a6:	21 c0       	rjmp	.+66     	; 0x4ea <vfprintf+0xca>
 4a8:	27 fd       	sbrc	r18, 7
 4aa:	27 c0       	rjmp	.+78     	; 0x4fa <vfprintf+0xda>
 4ac:	30 ed       	ldi	r19, 0xD0	; 208
 4ae:	38 0f       	add	r19, r24
 4b0:	3a 30       	cpi	r19, 0x0A	; 10
 4b2:	78 f4       	brcc	.+30     	; 0x4d2 <vfprintf+0xb2>
 4b4:	26 ff       	sbrs	r18, 6
 4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <vfprintf+0xa4>
 4b8:	fa e0       	ldi	r31, 0x0A	; 10
 4ba:	5f 9e       	mul	r5, r31
 4bc:	30 0d       	add	r19, r0
 4be:	11 24       	eor	r1, r1
 4c0:	53 2e       	mov	r5, r19
 4c2:	13 c0       	rjmp	.+38     	; 0x4ea <vfprintf+0xca>
 4c4:	8a e0       	ldi	r24, 0x0A	; 10
 4c6:	38 9e       	mul	r3, r24
 4c8:	30 0d       	add	r19, r0
 4ca:	11 24       	eor	r1, r1
 4cc:	33 2e       	mov	r3, r19
 4ce:	20 62       	ori	r18, 0x20	; 32
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <vfprintf+0xca>
 4d2:	8e 32       	cpi	r24, 0x2E	; 46
 4d4:	21 f4       	brne	.+8      	; 0x4de <vfprintf+0xbe>
 4d6:	26 fd       	sbrc	r18, 6
 4d8:	6b c1       	rjmp	.+726    	; 0x7b0 <__stack+0x2b1>
 4da:	20 64       	ori	r18, 0x40	; 64
 4dc:	06 c0       	rjmp	.+12     	; 0x4ea <vfprintf+0xca>
 4de:	8c 36       	cpi	r24, 0x6C	; 108
 4e0:	11 f4       	brne	.+4      	; 0x4e6 <vfprintf+0xc6>
 4e2:	20 68       	ori	r18, 0x80	; 128
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <vfprintf+0xca>
 4e6:	88 36       	cpi	r24, 0x68	; 104
 4e8:	41 f4       	brne	.+16     	; 0x4fa <vfprintf+0xda>
 4ea:	f6 01       	movw	r30, r12
 4ec:	93 fd       	sbrc	r25, 3
 4ee:	85 91       	lpm	r24, Z+
 4f0:	93 ff       	sbrs	r25, 3
 4f2:	81 91       	ld	r24, Z+
 4f4:	6f 01       	movw	r12, r30
 4f6:	81 11       	cpse	r24, r1
 4f8:	c1 cf       	rjmp	.-126    	; 0x47c <vfprintf+0x5c>
 4fa:	98 2f       	mov	r25, r24
 4fc:	9f 7d       	andi	r25, 0xDF	; 223
 4fe:	95 54       	subi	r25, 0x45	; 69
 500:	93 30       	cpi	r25, 0x03	; 3
 502:	28 f4       	brcc	.+10     	; 0x50e <__stack+0xf>
 504:	0c 5f       	subi	r16, 0xFC	; 252
 506:	1f 4f       	sbci	r17, 0xFF	; 255
 508:	ff e3       	ldi	r31, 0x3F	; 63
 50a:	f9 83       	std	Y+1, r31	; 0x01
 50c:	0d c0       	rjmp	.+26     	; 0x528 <__stack+0x29>
 50e:	83 36       	cpi	r24, 0x63	; 99
 510:	31 f0       	breq	.+12     	; 0x51e <__stack+0x1f>
 512:	83 37       	cpi	r24, 0x73	; 115
 514:	71 f0       	breq	.+28     	; 0x532 <__stack+0x33>
 516:	83 35       	cpi	r24, 0x53	; 83
 518:	09 f0       	breq	.+2      	; 0x51c <__stack+0x1d>
 51a:	5b c0       	rjmp	.+182    	; 0x5d2 <__stack+0xd3>
 51c:	22 c0       	rjmp	.+68     	; 0x562 <__stack+0x63>
 51e:	f8 01       	movw	r30, r16
 520:	80 81       	ld	r24, Z
 522:	89 83       	std	Y+1, r24	; 0x01
 524:	0e 5f       	subi	r16, 0xFE	; 254
 526:	1f 4f       	sbci	r17, 0xFF	; 255
 528:	44 24       	eor	r4, r4
 52a:	43 94       	inc	r4
 52c:	51 2c       	mov	r5, r1
 52e:	54 01       	movw	r10, r8
 530:	15 c0       	rjmp	.+42     	; 0x55c <__stack+0x5d>
 532:	38 01       	movw	r6, r16
 534:	f2 e0       	ldi	r31, 0x02	; 2
 536:	6f 0e       	add	r6, r31
 538:	71 1c       	adc	r7, r1
 53a:	f8 01       	movw	r30, r16
 53c:	a0 80       	ld	r10, Z
 53e:	b1 80       	ldd	r11, Z+1	; 0x01
 540:	26 ff       	sbrs	r18, 6
 542:	03 c0       	rjmp	.+6      	; 0x54a <__stack+0x4b>
 544:	65 2d       	mov	r22, r5
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <__stack+0x4f>
 54a:	6f ef       	ldi	r22, 0xFF	; 255
 54c:	7f ef       	ldi	r23, 0xFF	; 255
 54e:	c5 01       	movw	r24, r10
 550:	2c 87       	std	Y+12, r18	; 0x0c
 552:	0e 94 3d 05 	call	0xa7a	; 0xa7a <strnlen>
 556:	2c 01       	movw	r4, r24
 558:	83 01       	movw	r16, r6
 55a:	2c 85       	ldd	r18, Y+12	; 0x0c
 55c:	2f 77       	andi	r18, 0x7F	; 127
 55e:	22 2e       	mov	r2, r18
 560:	17 c0       	rjmp	.+46     	; 0x590 <__stack+0x91>
 562:	38 01       	movw	r6, r16
 564:	f2 e0       	ldi	r31, 0x02	; 2
 566:	6f 0e       	add	r6, r31
 568:	71 1c       	adc	r7, r1
 56a:	f8 01       	movw	r30, r16
 56c:	a0 80       	ld	r10, Z
 56e:	b1 80       	ldd	r11, Z+1	; 0x01
 570:	26 ff       	sbrs	r18, 6
 572:	03 c0       	rjmp	.+6      	; 0x57a <__stack+0x7b>
 574:	65 2d       	mov	r22, r5
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <__stack+0x7f>
 57a:	6f ef       	ldi	r22, 0xFF	; 255
 57c:	7f ef       	ldi	r23, 0xFF	; 255
 57e:	c5 01       	movw	r24, r10
 580:	2c 87       	std	Y+12, r18	; 0x0c
 582:	0e 94 2b 05 	call	0xa56	; 0xa56 <strnlen_P>
 586:	2c 01       	movw	r4, r24
 588:	2c 85       	ldd	r18, Y+12	; 0x0c
 58a:	20 68       	ori	r18, 0x80	; 128
 58c:	22 2e       	mov	r2, r18
 58e:	83 01       	movw	r16, r6
 590:	23 fc       	sbrc	r2, 3
 592:	1b c0       	rjmp	.+54     	; 0x5ca <__stack+0xcb>
 594:	83 2d       	mov	r24, r3
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	48 16       	cp	r4, r24
 59a:	59 06       	cpc	r5, r25
 59c:	b0 f4       	brcc	.+44     	; 0x5ca <__stack+0xcb>
 59e:	b7 01       	movw	r22, r14
 5a0:	80 e2       	ldi	r24, 0x20	; 32
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 5a8:	3a 94       	dec	r3
 5aa:	f4 cf       	rjmp	.-24     	; 0x594 <__stack+0x95>
 5ac:	f5 01       	movw	r30, r10
 5ae:	27 fc       	sbrc	r2, 7
 5b0:	85 91       	lpm	r24, Z+
 5b2:	27 fe       	sbrs	r2, 7
 5b4:	81 91       	ld	r24, Z+
 5b6:	5f 01       	movw	r10, r30
 5b8:	b7 01       	movw	r22, r14
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 5c0:	31 10       	cpse	r3, r1
 5c2:	3a 94       	dec	r3
 5c4:	f1 e0       	ldi	r31, 0x01	; 1
 5c6:	4f 1a       	sub	r4, r31
 5c8:	51 08       	sbc	r5, r1
 5ca:	41 14       	cp	r4, r1
 5cc:	51 04       	cpc	r5, r1
 5ce:	71 f7       	brne	.-36     	; 0x5ac <__stack+0xad>
 5d0:	e5 c0       	rjmp	.+458    	; 0x79c <__stack+0x29d>
 5d2:	84 36       	cpi	r24, 0x64	; 100
 5d4:	11 f0       	breq	.+4      	; 0x5da <__stack+0xdb>
 5d6:	89 36       	cpi	r24, 0x69	; 105
 5d8:	39 f5       	brne	.+78     	; 0x628 <__stack+0x129>
 5da:	f8 01       	movw	r30, r16
 5dc:	27 ff       	sbrs	r18, 7
 5de:	07 c0       	rjmp	.+14     	; 0x5ee <__stack+0xef>
 5e0:	60 81       	ld	r22, Z
 5e2:	71 81       	ldd	r23, Z+1	; 0x01
 5e4:	82 81       	ldd	r24, Z+2	; 0x02
 5e6:	93 81       	ldd	r25, Z+3	; 0x03
 5e8:	0c 5f       	subi	r16, 0xFC	; 252
 5ea:	1f 4f       	sbci	r17, 0xFF	; 255
 5ec:	08 c0       	rjmp	.+16     	; 0x5fe <__stack+0xff>
 5ee:	60 81       	ld	r22, Z
 5f0:	71 81       	ldd	r23, Z+1	; 0x01
 5f2:	07 2e       	mov	r0, r23
 5f4:	00 0c       	add	r0, r0
 5f6:	88 0b       	sbc	r24, r24
 5f8:	99 0b       	sbc	r25, r25
 5fa:	0e 5f       	subi	r16, 0xFE	; 254
 5fc:	1f 4f       	sbci	r17, 0xFF	; 255
 5fe:	2f 76       	andi	r18, 0x6F	; 111
 600:	72 2e       	mov	r7, r18
 602:	97 ff       	sbrs	r25, 7
 604:	09 c0       	rjmp	.+18     	; 0x618 <__stack+0x119>
 606:	90 95       	com	r25
 608:	80 95       	com	r24
 60a:	70 95       	com	r23
 60c:	61 95       	neg	r22
 60e:	7f 4f       	sbci	r23, 0xFF	; 255
 610:	8f 4f       	sbci	r24, 0xFF	; 255
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	20 68       	ori	r18, 0x80	; 128
 616:	72 2e       	mov	r7, r18
 618:	2a e0       	ldi	r18, 0x0A	; 10
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	a4 01       	movw	r20, r8
 61e:	0e 94 80 05 	call	0xb00	; 0xb00 <__ultoa_invert>
 622:	a8 2e       	mov	r10, r24
 624:	a8 18       	sub	r10, r8
 626:	44 c0       	rjmp	.+136    	; 0x6b0 <__stack+0x1b1>
 628:	85 37       	cpi	r24, 0x75	; 117
 62a:	29 f4       	brne	.+10     	; 0x636 <__stack+0x137>
 62c:	2f 7e       	andi	r18, 0xEF	; 239
 62e:	b2 2e       	mov	r11, r18
 630:	2a e0       	ldi	r18, 0x0A	; 10
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	25 c0       	rjmp	.+74     	; 0x680 <__stack+0x181>
 636:	f2 2f       	mov	r31, r18
 638:	f9 7f       	andi	r31, 0xF9	; 249
 63a:	bf 2e       	mov	r11, r31
 63c:	8f 36       	cpi	r24, 0x6F	; 111
 63e:	c1 f0       	breq	.+48     	; 0x670 <__stack+0x171>
 640:	18 f4       	brcc	.+6      	; 0x648 <__stack+0x149>
 642:	88 35       	cpi	r24, 0x58	; 88
 644:	79 f0       	breq	.+30     	; 0x664 <__stack+0x165>
 646:	b4 c0       	rjmp	.+360    	; 0x7b0 <__stack+0x2b1>
 648:	80 37       	cpi	r24, 0x70	; 112
 64a:	19 f0       	breq	.+6      	; 0x652 <__stack+0x153>
 64c:	88 37       	cpi	r24, 0x78	; 120
 64e:	21 f0       	breq	.+8      	; 0x658 <__stack+0x159>
 650:	af c0       	rjmp	.+350    	; 0x7b0 <__stack+0x2b1>
 652:	2f 2f       	mov	r18, r31
 654:	20 61       	ori	r18, 0x10	; 16
 656:	b2 2e       	mov	r11, r18
 658:	b4 fe       	sbrs	r11, 4
 65a:	0d c0       	rjmp	.+26     	; 0x676 <__stack+0x177>
 65c:	8b 2d       	mov	r24, r11
 65e:	84 60       	ori	r24, 0x04	; 4
 660:	b8 2e       	mov	r11, r24
 662:	09 c0       	rjmp	.+18     	; 0x676 <__stack+0x177>
 664:	24 ff       	sbrs	r18, 4
 666:	0a c0       	rjmp	.+20     	; 0x67c <__stack+0x17d>
 668:	9f 2f       	mov	r25, r31
 66a:	96 60       	ori	r25, 0x06	; 6
 66c:	b9 2e       	mov	r11, r25
 66e:	06 c0       	rjmp	.+12     	; 0x67c <__stack+0x17d>
 670:	28 e0       	ldi	r18, 0x08	; 8
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	05 c0       	rjmp	.+10     	; 0x680 <__stack+0x181>
 676:	20 e1       	ldi	r18, 0x10	; 16
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	02 c0       	rjmp	.+4      	; 0x680 <__stack+0x181>
 67c:	20 e1       	ldi	r18, 0x10	; 16
 67e:	32 e0       	ldi	r19, 0x02	; 2
 680:	f8 01       	movw	r30, r16
 682:	b7 fe       	sbrs	r11, 7
 684:	07 c0       	rjmp	.+14     	; 0x694 <__stack+0x195>
 686:	60 81       	ld	r22, Z
 688:	71 81       	ldd	r23, Z+1	; 0x01
 68a:	82 81       	ldd	r24, Z+2	; 0x02
 68c:	93 81       	ldd	r25, Z+3	; 0x03
 68e:	0c 5f       	subi	r16, 0xFC	; 252
 690:	1f 4f       	sbci	r17, 0xFF	; 255
 692:	06 c0       	rjmp	.+12     	; 0x6a0 <__stack+0x1a1>
 694:	60 81       	ld	r22, Z
 696:	71 81       	ldd	r23, Z+1	; 0x01
 698:	80 e0       	ldi	r24, 0x00	; 0
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 5f       	subi	r16, 0xFE	; 254
 69e:	1f 4f       	sbci	r17, 0xFF	; 255
 6a0:	a4 01       	movw	r20, r8
 6a2:	0e 94 80 05 	call	0xb00	; 0xb00 <__ultoa_invert>
 6a6:	a8 2e       	mov	r10, r24
 6a8:	a8 18       	sub	r10, r8
 6aa:	fb 2d       	mov	r31, r11
 6ac:	ff 77       	andi	r31, 0x7F	; 127
 6ae:	7f 2e       	mov	r7, r31
 6b0:	76 fe       	sbrs	r7, 6
 6b2:	0b c0       	rjmp	.+22     	; 0x6ca <__stack+0x1cb>
 6b4:	37 2d       	mov	r19, r7
 6b6:	3e 7f       	andi	r19, 0xFE	; 254
 6b8:	a5 14       	cp	r10, r5
 6ba:	50 f4       	brcc	.+20     	; 0x6d0 <__stack+0x1d1>
 6bc:	74 fe       	sbrs	r7, 4
 6be:	0a c0       	rjmp	.+20     	; 0x6d4 <__stack+0x1d5>
 6c0:	72 fc       	sbrc	r7, 2
 6c2:	08 c0       	rjmp	.+16     	; 0x6d4 <__stack+0x1d5>
 6c4:	37 2d       	mov	r19, r7
 6c6:	3e 7e       	andi	r19, 0xEE	; 238
 6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <__stack+0x1d5>
 6ca:	ba 2c       	mov	r11, r10
 6cc:	37 2d       	mov	r19, r7
 6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <__stack+0x1d7>
 6d0:	ba 2c       	mov	r11, r10
 6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <__stack+0x1d7>
 6d4:	b5 2c       	mov	r11, r5
 6d6:	34 ff       	sbrs	r19, 4
 6d8:	0d c0       	rjmp	.+26     	; 0x6f4 <__stack+0x1f5>
 6da:	fe 01       	movw	r30, r28
 6dc:	ea 0d       	add	r30, r10
 6de:	f1 1d       	adc	r31, r1
 6e0:	80 81       	ld	r24, Z
 6e2:	80 33       	cpi	r24, 0x30	; 48
 6e4:	11 f4       	brne	.+4      	; 0x6ea <__stack+0x1eb>
 6e6:	39 7e       	andi	r19, 0xE9	; 233
 6e8:	09 c0       	rjmp	.+18     	; 0x6fc <__stack+0x1fd>
 6ea:	32 ff       	sbrs	r19, 2
 6ec:	06 c0       	rjmp	.+12     	; 0x6fa <__stack+0x1fb>
 6ee:	b3 94       	inc	r11
 6f0:	b3 94       	inc	r11
 6f2:	04 c0       	rjmp	.+8      	; 0x6fc <__stack+0x1fd>
 6f4:	83 2f       	mov	r24, r19
 6f6:	86 78       	andi	r24, 0x86	; 134
 6f8:	09 f0       	breq	.+2      	; 0x6fc <__stack+0x1fd>
 6fa:	b3 94       	inc	r11
 6fc:	33 fd       	sbrc	r19, 3
 6fe:	13 c0       	rjmp	.+38     	; 0x726 <__stack+0x227>
 700:	30 ff       	sbrs	r19, 0
 702:	06 c0       	rjmp	.+12     	; 0x710 <__stack+0x211>
 704:	5a 2c       	mov	r5, r10
 706:	b3 14       	cp	r11, r3
 708:	18 f4       	brcc	.+6      	; 0x710 <__stack+0x211>
 70a:	53 0c       	add	r5, r3
 70c:	5b 18       	sub	r5, r11
 70e:	b3 2c       	mov	r11, r3
 710:	b3 14       	cp	r11, r3
 712:	68 f4       	brcc	.+26     	; 0x72e <__stack+0x22f>
 714:	b7 01       	movw	r22, r14
 716:	80 e2       	ldi	r24, 0x20	; 32
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	3c 87       	std	Y+12, r19	; 0x0c
 71c:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 720:	b3 94       	inc	r11
 722:	3c 85       	ldd	r19, Y+12	; 0x0c
 724:	f5 cf       	rjmp	.-22     	; 0x710 <__stack+0x211>
 726:	b3 14       	cp	r11, r3
 728:	10 f4       	brcc	.+4      	; 0x72e <__stack+0x22f>
 72a:	3b 18       	sub	r3, r11
 72c:	01 c0       	rjmp	.+2      	; 0x730 <__stack+0x231>
 72e:	31 2c       	mov	r3, r1
 730:	34 ff       	sbrs	r19, 4
 732:	12 c0       	rjmp	.+36     	; 0x758 <__stack+0x259>
 734:	b7 01       	movw	r22, r14
 736:	80 e3       	ldi	r24, 0x30	; 48
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	3c 87       	std	Y+12, r19	; 0x0c
 73c:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 740:	3c 85       	ldd	r19, Y+12	; 0x0c
 742:	32 ff       	sbrs	r19, 2
 744:	17 c0       	rjmp	.+46     	; 0x774 <__stack+0x275>
 746:	31 fd       	sbrc	r19, 1
 748:	03 c0       	rjmp	.+6      	; 0x750 <__stack+0x251>
 74a:	88 e7       	ldi	r24, 0x78	; 120
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <__stack+0x255>
 750:	88 e5       	ldi	r24, 0x58	; 88
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	b7 01       	movw	r22, r14
 756:	0c c0       	rjmp	.+24     	; 0x770 <__stack+0x271>
 758:	83 2f       	mov	r24, r19
 75a:	86 78       	andi	r24, 0x86	; 134
 75c:	59 f0       	breq	.+22     	; 0x774 <__stack+0x275>
 75e:	31 ff       	sbrs	r19, 1
 760:	02 c0       	rjmp	.+4      	; 0x766 <__stack+0x267>
 762:	8b e2       	ldi	r24, 0x2B	; 43
 764:	01 c0       	rjmp	.+2      	; 0x768 <__stack+0x269>
 766:	80 e2       	ldi	r24, 0x20	; 32
 768:	37 fd       	sbrc	r19, 7
 76a:	8d e2       	ldi	r24, 0x2D	; 45
 76c:	b7 01       	movw	r22, r14
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 774:	a5 14       	cp	r10, r5
 776:	38 f4       	brcc	.+14     	; 0x786 <__stack+0x287>
 778:	b7 01       	movw	r22, r14
 77a:	80 e3       	ldi	r24, 0x30	; 48
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 782:	5a 94       	dec	r5
 784:	f7 cf       	rjmp	.-18     	; 0x774 <__stack+0x275>
 786:	aa 94       	dec	r10
 788:	f4 01       	movw	r30, r8
 78a:	ea 0d       	add	r30, r10
 78c:	f1 1d       	adc	r31, r1
 78e:	80 81       	ld	r24, Z
 790:	b7 01       	movw	r22, r14
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 798:	a1 10       	cpse	r10, r1
 79a:	f5 cf       	rjmp	.-22     	; 0x786 <__stack+0x287>
 79c:	33 20       	and	r3, r3
 79e:	09 f4       	brne	.+2      	; 0x7a2 <__stack+0x2a3>
 7a0:	51 ce       	rjmp	.-862    	; 0x444 <vfprintf+0x24>
 7a2:	b7 01       	movw	r22, r14
 7a4:	80 e2       	ldi	r24, 0x20	; 32
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 48 05 	call	0xa90	; 0xa90 <fputc>
 7ac:	3a 94       	dec	r3
 7ae:	f6 cf       	rjmp	.-20     	; 0x79c <__stack+0x29d>
 7b0:	f7 01       	movw	r30, r14
 7b2:	86 81       	ldd	r24, Z+6	; 0x06
 7b4:	97 81       	ldd	r25, Z+7	; 0x07
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <__stack+0x2bd>
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	9f ef       	ldi	r25, 0xFF	; 255
 7bc:	2c 96       	adiw	r28, 0x0c	; 12
 7be:	e2 e1       	ldi	r30, 0x12	; 18
 7c0:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__epilogue_restores__>

000007c4 <calloc>:
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	86 9f       	mul	r24, r22
 7ce:	80 01       	movw	r16, r0
 7d0:	87 9f       	mul	r24, r23
 7d2:	10 0d       	add	r17, r0
 7d4:	96 9f       	mul	r25, r22
 7d6:	10 0d       	add	r17, r0
 7d8:	11 24       	eor	r1, r1
 7da:	c8 01       	movw	r24, r16
 7dc:	0e 94 fe 03 	call	0x7fc	; 0x7fc <malloc>
 7e0:	ec 01       	movw	r28, r24
 7e2:	00 97       	sbiw	r24, 0x00	; 0
 7e4:	29 f0       	breq	.+10     	; 0x7f0 <calloc+0x2c>
 7e6:	a8 01       	movw	r20, r16
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	0e 94 36 05 	call	0xa6c	; 0xa6c <memset>
 7f0:	ce 01       	movw	r24, r28
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	1f 91       	pop	r17
 7f8:	0f 91       	pop	r16
 7fa:	08 95       	ret

000007fc <malloc>:
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	82 30       	cpi	r24, 0x02	; 2
 802:	91 05       	cpc	r25, r1
 804:	10 f4       	brcc	.+4      	; 0x80a <malloc+0xe>
 806:	82 e0       	ldi	r24, 0x02	; 2
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <__flp>
 80e:	f0 91 7b 01 	lds	r31, 0x017B	; 0x80017b <__flp+0x1>
 812:	20 e0       	ldi	r18, 0x00	; 0
 814:	30 e0       	ldi	r19, 0x00	; 0
 816:	c0 e0       	ldi	r28, 0x00	; 0
 818:	d0 e0       	ldi	r29, 0x00	; 0
 81a:	30 97       	sbiw	r30, 0x00	; 0
 81c:	11 f1       	breq	.+68     	; 0x862 <malloc+0x66>
 81e:	40 81       	ld	r20, Z
 820:	51 81       	ldd	r21, Z+1	; 0x01
 822:	48 17       	cp	r20, r24
 824:	59 07       	cpc	r21, r25
 826:	c0 f0       	brcs	.+48     	; 0x858 <malloc+0x5c>
 828:	48 17       	cp	r20, r24
 82a:	59 07       	cpc	r21, r25
 82c:	61 f4       	brne	.+24     	; 0x846 <malloc+0x4a>
 82e:	82 81       	ldd	r24, Z+2	; 0x02
 830:	93 81       	ldd	r25, Z+3	; 0x03
 832:	20 97       	sbiw	r28, 0x00	; 0
 834:	19 f0       	breq	.+6      	; 0x83c <malloc+0x40>
 836:	9b 83       	std	Y+3, r25	; 0x03
 838:	8a 83       	std	Y+2, r24	; 0x02
 83a:	2b c0       	rjmp	.+86     	; 0x892 <malloc+0x96>
 83c:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__flp+0x1>
 840:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__flp>
 844:	26 c0       	rjmp	.+76     	; 0x892 <malloc+0x96>
 846:	21 15       	cp	r18, r1
 848:	31 05       	cpc	r19, r1
 84a:	19 f0       	breq	.+6      	; 0x852 <malloc+0x56>
 84c:	42 17       	cp	r20, r18
 84e:	53 07       	cpc	r21, r19
 850:	18 f4       	brcc	.+6      	; 0x858 <malloc+0x5c>
 852:	9a 01       	movw	r18, r20
 854:	be 01       	movw	r22, r28
 856:	df 01       	movw	r26, r30
 858:	ef 01       	movw	r28, r30
 85a:	02 80       	ldd	r0, Z+2	; 0x02
 85c:	f3 81       	ldd	r31, Z+3	; 0x03
 85e:	e0 2d       	mov	r30, r0
 860:	dc cf       	rjmp	.-72     	; 0x81a <malloc+0x1e>
 862:	21 15       	cp	r18, r1
 864:	31 05       	cpc	r19, r1
 866:	09 f1       	breq	.+66     	; 0x8aa <malloc+0xae>
 868:	28 1b       	sub	r18, r24
 86a:	39 0b       	sbc	r19, r25
 86c:	24 30       	cpi	r18, 0x04	; 4
 86e:	31 05       	cpc	r19, r1
 870:	90 f4       	brcc	.+36     	; 0x896 <malloc+0x9a>
 872:	12 96       	adiw	r26, 0x02	; 2
 874:	8d 91       	ld	r24, X+
 876:	9c 91       	ld	r25, X
 878:	13 97       	sbiw	r26, 0x03	; 3
 87a:	61 15       	cp	r22, r1
 87c:	71 05       	cpc	r23, r1
 87e:	21 f0       	breq	.+8      	; 0x888 <malloc+0x8c>
 880:	fb 01       	movw	r30, r22
 882:	93 83       	std	Z+3, r25	; 0x03
 884:	82 83       	std	Z+2, r24	; 0x02
 886:	04 c0       	rjmp	.+8      	; 0x890 <malloc+0x94>
 888:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <__flp+0x1>
 88c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <__flp>
 890:	fd 01       	movw	r30, r26
 892:	32 96       	adiw	r30, 0x02	; 2
 894:	44 c0       	rjmp	.+136    	; 0x91e <malloc+0x122>
 896:	fd 01       	movw	r30, r26
 898:	e2 0f       	add	r30, r18
 89a:	f3 1f       	adc	r31, r19
 89c:	81 93       	st	Z+, r24
 89e:	91 93       	st	Z+, r25
 8a0:	22 50       	subi	r18, 0x02	; 2
 8a2:	31 09       	sbc	r19, r1
 8a4:	2d 93       	st	X+, r18
 8a6:	3c 93       	st	X, r19
 8a8:	3a c0       	rjmp	.+116    	; 0x91e <malloc+0x122>
 8aa:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <__brkval>
 8ae:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <__brkval+0x1>
 8b2:	23 2b       	or	r18, r19
 8b4:	41 f4       	brne	.+16     	; 0x8c6 <malloc+0xca>
 8b6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 8ba:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 8be:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <__brkval+0x1>
 8c2:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <__brkval>
 8c6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 8ca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 8ce:	21 15       	cp	r18, r1
 8d0:	31 05       	cpc	r19, r1
 8d2:	41 f4       	brne	.+16     	; 0x8e4 <malloc+0xe8>
 8d4:	2d b7       	in	r18, 0x3d	; 61
 8d6:	3e b7       	in	r19, 0x3e	; 62
 8d8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 8dc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 8e0:	24 1b       	sub	r18, r20
 8e2:	35 0b       	sbc	r19, r21
 8e4:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <__brkval>
 8e8:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <__brkval+0x1>
 8ec:	e2 17       	cp	r30, r18
 8ee:	f3 07       	cpc	r31, r19
 8f0:	a0 f4       	brcc	.+40     	; 0x91a <malloc+0x11e>
 8f2:	2e 1b       	sub	r18, r30
 8f4:	3f 0b       	sbc	r19, r31
 8f6:	28 17       	cp	r18, r24
 8f8:	39 07       	cpc	r19, r25
 8fa:	78 f0       	brcs	.+30     	; 0x91a <malloc+0x11e>
 8fc:	ac 01       	movw	r20, r24
 8fe:	4e 5f       	subi	r20, 0xFE	; 254
 900:	5f 4f       	sbci	r21, 0xFF	; 255
 902:	24 17       	cp	r18, r20
 904:	35 07       	cpc	r19, r21
 906:	48 f0       	brcs	.+18     	; 0x91a <malloc+0x11e>
 908:	4e 0f       	add	r20, r30
 90a:	5f 1f       	adc	r21, r31
 90c:	50 93 79 01 	sts	0x0179, r21	; 0x800179 <__brkval+0x1>
 910:	40 93 78 01 	sts	0x0178, r20	; 0x800178 <__brkval>
 914:	81 93       	st	Z+, r24
 916:	91 93       	st	Z+, r25
 918:	02 c0       	rjmp	.+4      	; 0x91e <malloc+0x122>
 91a:	e0 e0       	ldi	r30, 0x00	; 0
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	cf 01       	movw	r24, r30
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	08 95       	ret

00000926 <free>:
 926:	0f 93       	push	r16
 928:	1f 93       	push	r17
 92a:	cf 93       	push	r28
 92c:	df 93       	push	r29
 92e:	00 97       	sbiw	r24, 0x00	; 0
 930:	09 f4       	brne	.+2      	; 0x934 <free+0xe>
 932:	8c c0       	rjmp	.+280    	; 0xa4c <free+0x126>
 934:	fc 01       	movw	r30, r24
 936:	32 97       	sbiw	r30, 0x02	; 2
 938:	13 82       	std	Z+3, r1	; 0x03
 93a:	12 82       	std	Z+2, r1	; 0x02
 93c:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <__flp>
 940:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <__flp+0x1>
 944:	01 15       	cp	r16, r1
 946:	11 05       	cpc	r17, r1
 948:	81 f4       	brne	.+32     	; 0x96a <free+0x44>
 94a:	20 81       	ld	r18, Z
 94c:	31 81       	ldd	r19, Z+1	; 0x01
 94e:	82 0f       	add	r24, r18
 950:	93 1f       	adc	r25, r19
 952:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <__brkval>
 956:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <__brkval+0x1>
 95a:	28 17       	cp	r18, r24
 95c:	39 07       	cpc	r19, r25
 95e:	79 f5       	brne	.+94     	; 0x9be <free+0x98>
 960:	f0 93 79 01 	sts	0x0179, r31	; 0x800179 <__brkval+0x1>
 964:	e0 93 78 01 	sts	0x0178, r30	; 0x800178 <__brkval>
 968:	71 c0       	rjmp	.+226    	; 0xa4c <free+0x126>
 96a:	d8 01       	movw	r26, r16
 96c:	40 e0       	ldi	r20, 0x00	; 0
 96e:	50 e0       	ldi	r21, 0x00	; 0
 970:	ae 17       	cp	r26, r30
 972:	bf 07       	cpc	r27, r31
 974:	50 f4       	brcc	.+20     	; 0x98a <free+0x64>
 976:	12 96       	adiw	r26, 0x02	; 2
 978:	2d 91       	ld	r18, X+
 97a:	3c 91       	ld	r19, X
 97c:	13 97       	sbiw	r26, 0x03	; 3
 97e:	ad 01       	movw	r20, r26
 980:	21 15       	cp	r18, r1
 982:	31 05       	cpc	r19, r1
 984:	09 f1       	breq	.+66     	; 0x9c8 <free+0xa2>
 986:	d9 01       	movw	r26, r18
 988:	f3 cf       	rjmp	.-26     	; 0x970 <free+0x4a>
 98a:	9d 01       	movw	r18, r26
 98c:	da 01       	movw	r26, r20
 98e:	33 83       	std	Z+3, r19	; 0x03
 990:	22 83       	std	Z+2, r18	; 0x02
 992:	60 81       	ld	r22, Z
 994:	71 81       	ldd	r23, Z+1	; 0x01
 996:	86 0f       	add	r24, r22
 998:	97 1f       	adc	r25, r23
 99a:	82 17       	cp	r24, r18
 99c:	93 07       	cpc	r25, r19
 99e:	69 f4       	brne	.+26     	; 0x9ba <free+0x94>
 9a0:	ec 01       	movw	r28, r24
 9a2:	28 81       	ld	r18, Y
 9a4:	39 81       	ldd	r19, Y+1	; 0x01
 9a6:	26 0f       	add	r18, r22
 9a8:	37 1f       	adc	r19, r23
 9aa:	2e 5f       	subi	r18, 0xFE	; 254
 9ac:	3f 4f       	sbci	r19, 0xFF	; 255
 9ae:	31 83       	std	Z+1, r19	; 0x01
 9b0:	20 83       	st	Z, r18
 9b2:	8a 81       	ldd	r24, Y+2	; 0x02
 9b4:	9b 81       	ldd	r25, Y+3	; 0x03
 9b6:	93 83       	std	Z+3, r25	; 0x03
 9b8:	82 83       	std	Z+2, r24	; 0x02
 9ba:	45 2b       	or	r20, r21
 9bc:	29 f4       	brne	.+10     	; 0x9c8 <free+0xa2>
 9be:	f0 93 7b 01 	sts	0x017B, r31	; 0x80017b <__flp+0x1>
 9c2:	e0 93 7a 01 	sts	0x017A, r30	; 0x80017a <__flp>
 9c6:	42 c0       	rjmp	.+132    	; 0xa4c <free+0x126>
 9c8:	13 96       	adiw	r26, 0x03	; 3
 9ca:	fc 93       	st	X, r31
 9cc:	ee 93       	st	-X, r30
 9ce:	12 97       	sbiw	r26, 0x02	; 2
 9d0:	ed 01       	movw	r28, r26
 9d2:	49 91       	ld	r20, Y+
 9d4:	59 91       	ld	r21, Y+
 9d6:	9e 01       	movw	r18, r28
 9d8:	24 0f       	add	r18, r20
 9da:	35 1f       	adc	r19, r21
 9dc:	e2 17       	cp	r30, r18
 9de:	f3 07       	cpc	r31, r19
 9e0:	71 f4       	brne	.+28     	; 0x9fe <free+0xd8>
 9e2:	80 81       	ld	r24, Z
 9e4:	91 81       	ldd	r25, Z+1	; 0x01
 9e6:	84 0f       	add	r24, r20
 9e8:	95 1f       	adc	r25, r21
 9ea:	02 96       	adiw	r24, 0x02	; 2
 9ec:	11 96       	adiw	r26, 0x01	; 1
 9ee:	9c 93       	st	X, r25
 9f0:	8e 93       	st	-X, r24
 9f2:	82 81       	ldd	r24, Z+2	; 0x02
 9f4:	93 81       	ldd	r25, Z+3	; 0x03
 9f6:	13 96       	adiw	r26, 0x03	; 3
 9f8:	9c 93       	st	X, r25
 9fa:	8e 93       	st	-X, r24
 9fc:	12 97       	sbiw	r26, 0x02	; 2
 9fe:	e0 e0       	ldi	r30, 0x00	; 0
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	d8 01       	movw	r26, r16
 a04:	12 96       	adiw	r26, 0x02	; 2
 a06:	8d 91       	ld	r24, X+
 a08:	9c 91       	ld	r25, X
 a0a:	13 97       	sbiw	r26, 0x03	; 3
 a0c:	00 97       	sbiw	r24, 0x00	; 0
 a0e:	19 f0       	breq	.+6      	; 0xa16 <free+0xf0>
 a10:	f8 01       	movw	r30, r16
 a12:	8c 01       	movw	r16, r24
 a14:	f6 cf       	rjmp	.-20     	; 0xa02 <free+0xdc>
 a16:	8d 91       	ld	r24, X+
 a18:	9c 91       	ld	r25, X
 a1a:	98 01       	movw	r18, r16
 a1c:	2e 5f       	subi	r18, 0xFE	; 254
 a1e:	3f 4f       	sbci	r19, 0xFF	; 255
 a20:	82 0f       	add	r24, r18
 a22:	93 1f       	adc	r25, r19
 a24:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <__brkval>
 a28:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <__brkval+0x1>
 a2c:	28 17       	cp	r18, r24
 a2e:	39 07       	cpc	r19, r25
 a30:	69 f4       	brne	.+26     	; 0xa4c <free+0x126>
 a32:	30 97       	sbiw	r30, 0x00	; 0
 a34:	29 f4       	brne	.+10     	; 0xa40 <free+0x11a>
 a36:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <__flp+0x1>
 a3a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <__flp>
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <free+0x11e>
 a40:	13 82       	std	Z+3, r1	; 0x03
 a42:	12 82       	std	Z+2, r1	; 0x02
 a44:	10 93 79 01 	sts	0x0179, r17	; 0x800179 <__brkval+0x1>
 a48:	00 93 78 01 	sts	0x0178, r16	; 0x800178 <__brkval>
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	1f 91       	pop	r17
 a52:	0f 91       	pop	r16
 a54:	08 95       	ret

00000a56 <strnlen_P>:
 a56:	fc 01       	movw	r30, r24
 a58:	05 90       	lpm	r0, Z+
 a5a:	61 50       	subi	r22, 0x01	; 1
 a5c:	70 40       	sbci	r23, 0x00	; 0
 a5e:	01 10       	cpse	r0, r1
 a60:	d8 f7       	brcc	.-10     	; 0xa58 <strnlen_P+0x2>
 a62:	80 95       	com	r24
 a64:	90 95       	com	r25
 a66:	8e 0f       	add	r24, r30
 a68:	9f 1f       	adc	r25, r31
 a6a:	08 95       	ret

00000a6c <memset>:
 a6c:	dc 01       	movw	r26, r24
 a6e:	01 c0       	rjmp	.+2      	; 0xa72 <memset+0x6>
 a70:	6d 93       	st	X+, r22
 a72:	41 50       	subi	r20, 0x01	; 1
 a74:	50 40       	sbci	r21, 0x00	; 0
 a76:	e0 f7       	brcc	.-8      	; 0xa70 <memset+0x4>
 a78:	08 95       	ret

00000a7a <strnlen>:
 a7a:	fc 01       	movw	r30, r24
 a7c:	61 50       	subi	r22, 0x01	; 1
 a7e:	70 40       	sbci	r23, 0x00	; 0
 a80:	01 90       	ld	r0, Z+
 a82:	01 10       	cpse	r0, r1
 a84:	d8 f7       	brcc	.-10     	; 0xa7c <strnlen+0x2>
 a86:	80 95       	com	r24
 a88:	90 95       	com	r25
 a8a:	8e 0f       	add	r24, r30
 a8c:	9f 1f       	adc	r25, r31
 a8e:	08 95       	ret

00000a90 <fputc>:
 a90:	0f 93       	push	r16
 a92:	1f 93       	push	r17
 a94:	cf 93       	push	r28
 a96:	df 93       	push	r29
 a98:	fb 01       	movw	r30, r22
 a9a:	23 81       	ldd	r18, Z+3	; 0x03
 a9c:	21 fd       	sbrc	r18, 1
 a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <fputc+0x16>
 aa0:	8f ef       	ldi	r24, 0xFF	; 255
 aa2:	9f ef       	ldi	r25, 0xFF	; 255
 aa4:	28 c0       	rjmp	.+80     	; 0xaf6 <fputc+0x66>
 aa6:	22 ff       	sbrs	r18, 2
 aa8:	16 c0       	rjmp	.+44     	; 0xad6 <fputc+0x46>
 aaa:	46 81       	ldd	r20, Z+6	; 0x06
 aac:	57 81       	ldd	r21, Z+7	; 0x07
 aae:	24 81       	ldd	r18, Z+4	; 0x04
 ab0:	35 81       	ldd	r19, Z+5	; 0x05
 ab2:	42 17       	cp	r20, r18
 ab4:	53 07       	cpc	r21, r19
 ab6:	44 f4       	brge	.+16     	; 0xac8 <fputc+0x38>
 ab8:	a0 81       	ld	r26, Z
 aba:	b1 81       	ldd	r27, Z+1	; 0x01
 abc:	9d 01       	movw	r18, r26
 abe:	2f 5f       	subi	r18, 0xFF	; 255
 ac0:	3f 4f       	sbci	r19, 0xFF	; 255
 ac2:	31 83       	std	Z+1, r19	; 0x01
 ac4:	20 83       	st	Z, r18
 ac6:	8c 93       	st	X, r24
 ac8:	26 81       	ldd	r18, Z+6	; 0x06
 aca:	37 81       	ldd	r19, Z+7	; 0x07
 acc:	2f 5f       	subi	r18, 0xFF	; 255
 ace:	3f 4f       	sbci	r19, 0xFF	; 255
 ad0:	37 83       	std	Z+7, r19	; 0x07
 ad2:	26 83       	std	Z+6, r18	; 0x06
 ad4:	10 c0       	rjmp	.+32     	; 0xaf6 <fputc+0x66>
 ad6:	eb 01       	movw	r28, r22
 ad8:	09 2f       	mov	r16, r25
 ada:	18 2f       	mov	r17, r24
 adc:	00 84       	ldd	r0, Z+8	; 0x08
 ade:	f1 85       	ldd	r31, Z+9	; 0x09
 ae0:	e0 2d       	mov	r30, r0
 ae2:	09 95       	icall
 ae4:	89 2b       	or	r24, r25
 ae6:	e1 f6       	brne	.-72     	; 0xaa0 <fputc+0x10>
 ae8:	8e 81       	ldd	r24, Y+6	; 0x06
 aea:	9f 81       	ldd	r25, Y+7	; 0x07
 aec:	01 96       	adiw	r24, 0x01	; 1
 aee:	9f 83       	std	Y+7, r25	; 0x07
 af0:	8e 83       	std	Y+6, r24	; 0x06
 af2:	81 2f       	mov	r24, r17
 af4:	90 2f       	mov	r25, r16
 af6:	df 91       	pop	r29
 af8:	cf 91       	pop	r28
 afa:	1f 91       	pop	r17
 afc:	0f 91       	pop	r16
 afe:	08 95       	ret

00000b00 <__ultoa_invert>:
 b00:	fa 01       	movw	r30, r20
 b02:	aa 27       	eor	r26, r26
 b04:	28 30       	cpi	r18, 0x08	; 8
 b06:	51 f1       	breq	.+84     	; 0xb5c <__ultoa_invert+0x5c>
 b08:	20 31       	cpi	r18, 0x10	; 16
 b0a:	81 f1       	breq	.+96     	; 0xb6c <__ultoa_invert+0x6c>
 b0c:	e8 94       	clt
 b0e:	6f 93       	push	r22
 b10:	6e 7f       	andi	r22, 0xFE	; 254
 b12:	6e 5f       	subi	r22, 0xFE	; 254
 b14:	7f 4f       	sbci	r23, 0xFF	; 255
 b16:	8f 4f       	sbci	r24, 0xFF	; 255
 b18:	9f 4f       	sbci	r25, 0xFF	; 255
 b1a:	af 4f       	sbci	r26, 0xFF	; 255
 b1c:	b1 e0       	ldi	r27, 0x01	; 1
 b1e:	3e d0       	rcall	.+124    	; 0xb9c <__ultoa_invert+0x9c>
 b20:	b4 e0       	ldi	r27, 0x04	; 4
 b22:	3c d0       	rcall	.+120    	; 0xb9c <__ultoa_invert+0x9c>
 b24:	67 0f       	add	r22, r23
 b26:	78 1f       	adc	r23, r24
 b28:	89 1f       	adc	r24, r25
 b2a:	9a 1f       	adc	r25, r26
 b2c:	a1 1d       	adc	r26, r1
 b2e:	68 0f       	add	r22, r24
 b30:	79 1f       	adc	r23, r25
 b32:	8a 1f       	adc	r24, r26
 b34:	91 1d       	adc	r25, r1
 b36:	a1 1d       	adc	r26, r1
 b38:	6a 0f       	add	r22, r26
 b3a:	71 1d       	adc	r23, r1
 b3c:	81 1d       	adc	r24, r1
 b3e:	91 1d       	adc	r25, r1
 b40:	a1 1d       	adc	r26, r1
 b42:	20 d0       	rcall	.+64     	; 0xb84 <__ultoa_invert+0x84>
 b44:	09 f4       	brne	.+2      	; 0xb48 <__ultoa_invert+0x48>
 b46:	68 94       	set
 b48:	3f 91       	pop	r19
 b4a:	2a e0       	ldi	r18, 0x0A	; 10
 b4c:	26 9f       	mul	r18, r22
 b4e:	11 24       	eor	r1, r1
 b50:	30 19       	sub	r19, r0
 b52:	30 5d       	subi	r19, 0xD0	; 208
 b54:	31 93       	st	Z+, r19
 b56:	de f6       	brtc	.-74     	; 0xb0e <__ultoa_invert+0xe>
 b58:	cf 01       	movw	r24, r30
 b5a:	08 95       	ret
 b5c:	46 2f       	mov	r20, r22
 b5e:	47 70       	andi	r20, 0x07	; 7
 b60:	40 5d       	subi	r20, 0xD0	; 208
 b62:	41 93       	st	Z+, r20
 b64:	b3 e0       	ldi	r27, 0x03	; 3
 b66:	0f d0       	rcall	.+30     	; 0xb86 <__ultoa_invert+0x86>
 b68:	c9 f7       	brne	.-14     	; 0xb5c <__ultoa_invert+0x5c>
 b6a:	f6 cf       	rjmp	.-20     	; 0xb58 <__ultoa_invert+0x58>
 b6c:	46 2f       	mov	r20, r22
 b6e:	4f 70       	andi	r20, 0x0F	; 15
 b70:	40 5d       	subi	r20, 0xD0	; 208
 b72:	4a 33       	cpi	r20, 0x3A	; 58
 b74:	18 f0       	brcs	.+6      	; 0xb7c <__ultoa_invert+0x7c>
 b76:	49 5d       	subi	r20, 0xD9	; 217
 b78:	31 fd       	sbrc	r19, 1
 b7a:	40 52       	subi	r20, 0x20	; 32
 b7c:	41 93       	st	Z+, r20
 b7e:	02 d0       	rcall	.+4      	; 0xb84 <__ultoa_invert+0x84>
 b80:	a9 f7       	brne	.-22     	; 0xb6c <__ultoa_invert+0x6c>
 b82:	ea cf       	rjmp	.-44     	; 0xb58 <__ultoa_invert+0x58>
 b84:	b4 e0       	ldi	r27, 0x04	; 4
 b86:	a6 95       	lsr	r26
 b88:	97 95       	ror	r25
 b8a:	87 95       	ror	r24
 b8c:	77 95       	ror	r23
 b8e:	67 95       	ror	r22
 b90:	ba 95       	dec	r27
 b92:	c9 f7       	brne	.-14     	; 0xb86 <__ultoa_invert+0x86>
 b94:	00 97       	sbiw	r24, 0x00	; 0
 b96:	61 05       	cpc	r22, r1
 b98:	71 05       	cpc	r23, r1
 b9a:	08 95       	ret
 b9c:	9b 01       	movw	r18, r22
 b9e:	ac 01       	movw	r20, r24
 ba0:	0a 2e       	mov	r0, r26
 ba2:	06 94       	lsr	r0
 ba4:	57 95       	ror	r21
 ba6:	47 95       	ror	r20
 ba8:	37 95       	ror	r19
 baa:	27 95       	ror	r18
 bac:	ba 95       	dec	r27
 bae:	c9 f7       	brne	.-14     	; 0xba2 <__ultoa_invert+0xa2>
 bb0:	62 0f       	add	r22, r18
 bb2:	73 1f       	adc	r23, r19
 bb4:	84 1f       	adc	r24, r20
 bb6:	95 1f       	adc	r25, r21
 bb8:	a0 1d       	adc	r26, r0
 bba:	08 95       	ret

00000bbc <__prologue_saves__>:
 bbc:	2f 92       	push	r2
 bbe:	3f 92       	push	r3
 bc0:	4f 92       	push	r4
 bc2:	5f 92       	push	r5
 bc4:	6f 92       	push	r6
 bc6:	7f 92       	push	r7
 bc8:	8f 92       	push	r8
 bca:	9f 92       	push	r9
 bcc:	af 92       	push	r10
 bce:	bf 92       	push	r11
 bd0:	cf 92       	push	r12
 bd2:	df 92       	push	r13
 bd4:	ef 92       	push	r14
 bd6:	ff 92       	push	r15
 bd8:	0f 93       	push	r16
 bda:	1f 93       	push	r17
 bdc:	cf 93       	push	r28
 bde:	df 93       	push	r29
 be0:	cd b7       	in	r28, 0x3d	; 61
 be2:	de b7       	in	r29, 0x3e	; 62
 be4:	ca 1b       	sub	r28, r26
 be6:	db 0b       	sbc	r29, r27
 be8:	0f b6       	in	r0, 0x3f	; 63
 bea:	f8 94       	cli
 bec:	de bf       	out	0x3e, r29	; 62
 bee:	0f be       	out	0x3f, r0	; 63
 bf0:	cd bf       	out	0x3d, r28	; 61
 bf2:	09 94       	ijmp

00000bf4 <__epilogue_restores__>:
 bf4:	2a 88       	ldd	r2, Y+18	; 0x12
 bf6:	39 88       	ldd	r3, Y+17	; 0x11
 bf8:	48 88       	ldd	r4, Y+16	; 0x10
 bfa:	5f 84       	ldd	r5, Y+15	; 0x0f
 bfc:	6e 84       	ldd	r6, Y+14	; 0x0e
 bfe:	7d 84       	ldd	r7, Y+13	; 0x0d
 c00:	8c 84       	ldd	r8, Y+12	; 0x0c
 c02:	9b 84       	ldd	r9, Y+11	; 0x0b
 c04:	aa 84       	ldd	r10, Y+10	; 0x0a
 c06:	b9 84       	ldd	r11, Y+9	; 0x09
 c08:	c8 84       	ldd	r12, Y+8	; 0x08
 c0a:	df 80       	ldd	r13, Y+7	; 0x07
 c0c:	ee 80       	ldd	r14, Y+6	; 0x06
 c0e:	fd 80       	ldd	r15, Y+5	; 0x05
 c10:	0c 81       	ldd	r16, Y+4	; 0x04
 c12:	1b 81       	ldd	r17, Y+3	; 0x03
 c14:	aa 81       	ldd	r26, Y+2	; 0x02
 c16:	b9 81       	ldd	r27, Y+1	; 0x01
 c18:	ce 0f       	add	r28, r30
 c1a:	d1 1d       	adc	r29, r1
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	f8 94       	cli
 c20:	de bf       	out	0x3e, r29	; 62
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	cd bf       	out	0x3d, r28	; 61
 c26:	ed 01       	movw	r28, r26
 c28:	08 95       	ret

00000c2a <_exit>:
 c2a:	f8 94       	cli

00000c2c <__stop_program>:
 c2c:	ff cf       	rjmp	.-2      	; 0xc2c <__stop_program>
