
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  000014da  0000156e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800208  00800208  00001676  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001676  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001978  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d62  00000000  00000000  000031f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee5  00000000  00000000  00003f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00004e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000652  00000000  00000000  00005160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cea  00000000  00000000  000057b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000649c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_print_char+0x3a>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea ed       	ldi	r30, 0xDA	; 218
     37c:	f4 e1       	ldi	r31, 0x14	; 20
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 30       	cpi	r26, 0x08	; 8
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a8 e0       	ldi	r26, 0x08	; 8
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a6 31       	cpi	r26, 0x16	; 22
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 88 02 	call	0x510	; 0x510 <main>
     39e:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include "setup.h"
#include <util/delay.h>

int ADC_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
     3a6:	85 b7       	in	r24, 0x35	; 53
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     3ac:	80 b7       	in	r24, 0x30	; 48
     3ae:	80 62       	ori	r24, 0x20	; 32
     3b0:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	//DDRB &= ~(1<<PIND2);
	
	return 0;
}
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	08 95       	ret

000003b8 <ADC_read>:

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	48 f4       	brcc	.+18     	; 0x3ce <ADC_read+0x16>
	
	//Choose channel in ADC
	*adc = 0x04 | channel;
     3bc:	84 60       	ori	r24, 0x04	; 4
     3be:	e0 e0       	ldi	r30, 0x00	; 0
     3c0:	f4 e1       	ldi	r31, 0x14	; 20
     3c2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c4:	84 ea       	ldi	r24, 0xA4	; 164
     3c6:	8a 95       	dec	r24
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <ADC_read+0xe>
	
	//Wait for the data to be read (this can be done with an interrupt)
	//while(test_bit(PIND, PIND2));
	_delay_us(100);
	return *adc;
     3ca:	80 81       	ld	r24, Z
     3cc:	08 95       	ret

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
     3ce:	80 e0       	ldi	r24, 0x00	; 0
	
	//Wait for the data to be read (this can be done with an interrupt)
	//while(test_bit(PIND, PIND2));
	_delay_us(100);
	return *adc;
     3d0:	08 95       	ret

000003d2 <JOY_calibrate>:
			break;
		default:
				break;
	}
	return 0;
}
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     3d8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <mid_x>
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     3e2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	08 95       	ret

000003ec <joy_init>:
     3ec:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
     3f0:	87 b3       	in	r24, 0x17	; 23
     3f2:	88 7f       	andi	r24, 0xF8	; 248
     3f4:	87 bb       	out	0x17, r24	; 23
     3f6:	88 b3       	in	r24, 0x18	; 24
     3f8:	87 60       	ori	r24, 0x07	; 7
     3fa:	88 bb       	out	0x18, r24	; 24
     3fc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <JOY_calibrate>
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	08 95       	ret

00000406 <JOY_getPosition>:

joy_position JOY_getPosition(void) {
     406:	cf 93       	push	r28
	joy_position position;
	uint8_t x, y;
	
	//Read position x from channel 0
	x = ADC_read(1);
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     40e:	c8 2f       	mov	r28, r24
	//Read position y from channel 1
	y = ADC_read(0);
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     416:	e8 2f       	mov	r30, r24
	
	//Calculate position x percentage
	if(x > mid_x) {
     418:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <mid_x>
     41c:	4c 17       	cp	r20, r28
     41e:	98 f4       	brcc	.+38     	; 0x446 <JOY_getPosition+0x40>
		position.x = 100 * (x - mid_x) / (0xFF - mid_x);
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	2c 2f       	mov	r18, r28
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	24 1b       	sub	r18, r20
     428:	35 0b       	sbc	r19, r21
     42a:	64 e6       	ldi	r22, 0x64	; 100
     42c:	62 9f       	mul	r22, r18
     42e:	c0 01       	movw	r24, r0
     430:	63 9f       	mul	r22, r19
     432:	90 0d       	add	r25, r0
     434:	11 24       	eor	r1, r1
     436:	6f ef       	ldi	r22, 0xFF	; 255
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	64 1b       	sub	r22, r20
     43c:	75 0b       	sbc	r23, r21
     43e:	0e 94 d6 05 	call	0xbac	; 0xbac <__divmodhi4>
     442:	46 2f       	mov	r20, r22
     444:	13 c0       	rjmp	.+38     	; 0x46c <JOY_getPosition+0x66>
		} else if (x < mid_x) {
     446:	c4 17       	cp	r28, r20
     448:	80 f4       	brcc	.+32     	; 0x46a <JOY_getPosition+0x64>
		position.x = 100 * (x - mid_x) / (mid_x - 0);
     44a:	64 2f       	mov	r22, r20
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	2c 2f       	mov	r18, r28
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	26 1b       	sub	r18, r22
     454:	37 0b       	sbc	r19, r23
     456:	44 e6       	ldi	r20, 0x64	; 100
     458:	42 9f       	mul	r20, r18
     45a:	c0 01       	movw	r24, r0
     45c:	43 9f       	mul	r20, r19
     45e:	90 0d       	add	r25, r0
     460:	11 24       	eor	r1, r1
     462:	0e 94 d6 05 	call	0xbac	; 0xbac <__divmodhi4>
     466:	46 2f       	mov	r20, r22
     468:	01 c0       	rjmp	.+2      	; 0x46c <JOY_getPosition+0x66>
		} else {
		position.x = 0;
     46a:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	//Calculate position y percentage
	if(y > mid_y) {
     46c:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__data_end>
     470:	2e 17       	cp	r18, r30
     472:	90 f4       	brcc	.+36     	; 0x498 <JOY_getPosition+0x92>
		position.y = 100 * (y - mid_y) / (0xFF - mid_y);
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	e2 1b       	sub	r30, r18
     47a:	f3 0b       	sbc	r31, r19
     47c:	54 e6       	ldi	r21, 0x64	; 100
     47e:	5e 9f       	mul	r21, r30
     480:	c0 01       	movw	r24, r0
     482:	5f 9f       	mul	r21, r31
     484:	90 0d       	add	r25, r0
     486:	11 24       	eor	r1, r1
     488:	6f ef       	ldi	r22, 0xFF	; 255
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	62 1b       	sub	r22, r18
     48e:	73 0b       	sbc	r23, r19
     490:	0e 94 d6 05 	call	0xbac	; 0xbac <__divmodhi4>
     494:	76 2f       	mov	r23, r22
     496:	13 c0       	rjmp	.+38     	; 0x4be <JOY_getPosition+0xb8>
		} else if (y < mid_y) {
     498:	e2 17       	cp	r30, r18
     49a:	80 f4       	brcc	.+32     	; 0x4bc <JOY_getPosition+0xb6>
		position.y = 100 * (y - mid_y) / (mid_y - 0);
     49c:	62 2f       	mov	r22, r18
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	2e 2f       	mov	r18, r30
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	26 1b       	sub	r18, r22
     4a6:	37 0b       	sbc	r19, r23
     4a8:	54 e6       	ldi	r21, 0x64	; 100
     4aa:	52 9f       	mul	r21, r18
     4ac:	c0 01       	movw	r24, r0
     4ae:	53 9f       	mul	r21, r19
     4b0:	90 0d       	add	r25, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	0e 94 d6 05 	call	0xbac	; 0xbac <__divmodhi4>
     4b8:	76 2f       	mov	r23, r22
     4ba:	01 c0       	rjmp	.+2      	; 0x4be <JOY_getPosition+0xb8>
		} else {
		position.y = 0;
     4bc:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	return position;
}
     4be:	64 2f       	mov	r22, r20
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <JOY_getDirection>:

joy_position JOY_getDirection(void) {
	joy_position position;
	
	//Get actual position of joystick
	position = JOY_getPosition();
     4c8:	0e 94 03 02 	call	0x406	; 0x406 <JOY_getPosition>
     4cc:	e7 2f       	mov	r30, r23
     4ce:	28 2f       	mov	r18, r24
     4d0:	39 2f       	mov	r19, r25
	
	if(position.x < -15) {
     4d2:	61 3f       	cpi	r22, 0xF1	; 241
     4d4:	2c f0       	brlt	.+10     	; 0x4e0 <JOY_getDirection+0x18>
		position.direction = "LEFT";
		} else if(position.x > 15) {
     4d6:	60 31       	cpi	r22, 0x10	; 16
     4d8:	2c f0       	brlt	.+10     	; 0x4e4 <JOY_getDirection+0x1c>
		position.direction = "RIGHT";
     4da:	20 e1       	ldi	r18, 0x10	; 16
     4dc:	31 e0       	ldi	r19, 0x01	; 1
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <JOY_getDirection+0x1c>
	
	//Get actual position of joystick
	position = JOY_getPosition();
	
	if(position.x < -15) {
		position.direction = "LEFT";
     4e0:	2b e0       	ldi	r18, 0x0B	; 11
     4e2:	31 e0       	ldi	r19, 0x01	; 1
		} else if(position.x > 15) {
		position.direction = "RIGHT";
	}
	
	if(position.y < -15) {
     4e4:	e1 3f       	cpi	r30, 0xF1	; 241
     4e6:	2c f0       	brlt	.+10     	; 0x4f2 <JOY_getDirection+0x2a>
		position.direction = "DOWN";
		} else if(position.y > 15) {
     4e8:	e0 31       	cpi	r30, 0x10	; 16
     4ea:	2c f0       	brlt	.+10     	; 0x4f6 <JOY_getDirection+0x2e>
		position.direction = "UP";
     4ec:	2b e1       	ldi	r18, 0x1B	; 27
     4ee:	31 e0       	ldi	r19, 0x01	; 1
     4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <JOY_getDirection+0x2e>
		} else if(position.x > 15) {
		position.direction = "RIGHT";
	}
	
	if(position.y < -15) {
		position.direction = "DOWN";
     4f2:	26 e1       	ldi	r18, 0x16	; 22
     4f4:	31 e0       	ldi	r19, 0x01	; 1
		} else if(position.y > 15) {
		position.direction = "UP";
	}
	
	if((position.x >= -14 && position.x <= 14) && (position.y >= -14 && position.y <= 14)){
     4f6:	8e e0       	ldi	r24, 0x0E	; 14
     4f8:	86 0f       	add	r24, r22
     4fa:	8d 31       	cpi	r24, 0x1D	; 29
     4fc:	30 f4       	brcc	.+12     	; 0x50a <__stack+0xb>
     4fe:	8e e0       	ldi	r24, 0x0E	; 14
     500:	87 0f       	add	r24, r23
     502:	8d 31       	cpi	r24, 0x1D	; 29
     504:	10 f4       	brcc	.+4      	; 0x50a <__stack+0xb>
		position.direction = "NEUTRAL";
     506:	2e e1       	ldi	r18, 0x1E	; 30
     508:	31 e0       	ldi	r19, 0x01	; 1
	}
	
	return position;
}
     50a:	82 2f       	mov	r24, r18
     50c:	93 2f       	mov	r25, r19
     50e:	08 95       	ret

00000510 <main>:
	int prev_button = 0;
	//joy_position joy_pos;
	//slider_position slider_pos;
	//int left_b;
	//int right_b;
	UART_Init(UBRREG);
     510:	8e e1       	ldi	r24, 0x1E	; 30
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 c9 05 	call	0xb92	; 0xb92 <UART_Init>
	ADC_init();
     518:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	joy_init();
     51c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <joy_init>
	SRAM_init();
     520:	0e 94 b5 05 	call	0xb6a	; 0xb6a <SRAM_init>
	OLED_init();
     524:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <OLED_init>
	init_menu();
     528:	0e 94 0a 03 	call	0x614	; 0x614 <init_menu>
	JOY_calibrate();
     52c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <JOY_calibrate>
	
	
	

	
	printf("----TING FUNK----\n\r");
     530:	86 e2       	ldi	r24, 0x26	; 38
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	9f 93       	push	r25
     536:	8f 93       	push	r24
     538:	0e 94 49 06 	call	0xc92	; 0xc92 <printf>

	if (joy_init() == 0) {
     53c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <joy_init>
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	89 2b       	or	r24, r25
     546:	49 f4       	brne	.+18     	; 0x55a <main+0x4a>
		printf("----Joystick working----\n\r");
     548:	8a e3       	ldi	r24, 0x3A	; 58
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	9f 93       	push	r25
     54e:	8f 93       	push	r24
     550:	0e 94 49 06 	call	0xc92	; 0xc92 <printf>
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	08 c0       	rjmp	.+16     	; 0x56a <main+0x5a>
		} else {
		printf("----Joystick error!!----\n\r");
     55a:	85 e5       	ldi	r24, 0x55	; 85
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	0e 94 49 06 	call	0xc92	; 0xc92 <printf>
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
	}
	OLED_clear();
     56a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <OLED_clear>
	OLED_pos(1, 5);
     56e:	65 e0       	ldi	r22, 0x05	; 5
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
	OLED_print("Ping Pong");
     576:	80 e7       	ldi	r24, 0x70	; 112
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
	OLED_pos(2, 5);
     57e:	65 e0       	ldi	r22, 0x05	; 5
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
	OLED_print("Ping Pong");
     586:	80 e7       	ldi	r24, 0x70	; 112
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
	OLED_pos(3, 4);
     58e:	64 e0       	ldi	r22, 0x04	; 4
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
	OLED_print("Press Button");
     596:	8a e7       	ldi	r24, 0x7A	; 122
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
	OLED_pos(4, 5);
     59e:	65 e0       	ldi	r22, 0x05	; 5
     5a0:	84 e0       	ldi	r24, 0x04	; 4
     5a2:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
	OLED_print("to start");
     5a6:	87 e8       	ldi	r24, 0x87	; 135
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
	while(1){
	joy_pos = JOY_getDirection();

	init_menu();

	printf("x; %d\n\r",ADC_read(1));
     5ae:	0f 2e       	mov	r0, r31
     5b0:	f0 e9       	ldi	r31, 0x90	; 144
     5b2:	ef 2e       	mov	r14, r31
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	ff 2e       	mov	r15, r31
     5b8:	f0 2d       	mov	r31, r0
	printf("y; %d\n\r",ADC_read(0));
     5ba:	08 e9       	ldi	r16, 0x98	; 152
     5bc:	11 e0       	ldi	r17, 0x01	; 1
	printf("rettning: %s\n\r",joy_pos.direction);
     5be:	c0 ea       	ldi	r28, 0xA0	; 160
     5c0:	d1 e0       	ldi	r29, 0x01	; 1
	OLED_print("Press Button");
	OLED_pos(4, 5);
	OLED_print("to start");
	
	while(1){
	joy_pos = JOY_getDirection();
     5c2:	0e 94 64 02 	call	0x4c8	; 0x4c8 <JOY_getDirection>
     5c6:	d8 2e       	mov	r13, r24
     5c8:	c9 2e       	mov	r12, r25

	init_menu();
     5ca:	0e 94 0a 03 	call	0x614	; 0x614 <init_menu>

	printf("x; %d\n\r",ADC_read(1));
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     5d4:	1f 92       	push	r1
     5d6:	8f 93       	push	r24
     5d8:	ff 92       	push	r15
     5da:	ef 92       	push	r14
     5dc:	0e 94 49 06 	call	0xc92	; 0xc92 <printf>
	printf("y; %d\n\r",ADC_read(0));
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     5e6:	1f 92       	push	r1
     5e8:	8f 93       	push	r24
     5ea:	1f 93       	push	r17
     5ec:	0f 93       	push	r16
     5ee:	0e 94 49 06 	call	0xc92	; 0xc92 <printf>
	printf("rettning: %s\n\r",joy_pos.direction);
     5f2:	cf 92       	push	r12
     5f4:	df 92       	push	r13
     5f6:	df 93       	push	r29
     5f8:	cf 93       	push	r28
     5fa:	0e 94 49 06 	call	0xc92	; 0xc92 <printf>



//------------Menu------------//
	init_menu();
     5fe:	0e 94 0a 03 	call	0x614	; 0x614 <init_menu>
     602:	8d b7       	in	r24, 0x3d	; 61
     604:	9e b7       	in	r25, 0x3e	; 62
     606:	0c 96       	adiw	r24, 0x0c	; 12
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	9e bf       	out	0x3e, r25	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	8d bf       	out	0x3d, r24	; 61
     612:	d7 cf       	rjmp	.-82     	; 0x5c2 <main+0xb2>

00000614 <init_menu>:
//#include "buzzer.h"
//#include "eeprom.h"

char menynummer='0';

int init_menu(void) {
     614:	0f 93       	push	r16
     616:	1f 93       	push	r17
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
	joy_position joy_pos;
	joy_init();
     61c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <joy_init>
	joy_pos = JOY_getDirection();
     620:	0e 94 64 02 	call	0x4c8	; 0x4c8 <JOY_getDirection>
     624:	08 2f       	mov	r16, r24
     626:	19 2f       	mov	r17, r25


switch(menynummer){
     628:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <menynummer>
     62c:	22 33       	cpi	r18, 0x32	; 50
     62e:	09 f4       	brne	.+2      	; 0x632 <init_menu+0x1e>
     630:	55 c0       	rjmp	.+170    	; 0x6dc <init_menu+0xc8>
     632:	18 f4       	brcc	.+6      	; 0x63a <init_menu+0x26>
     634:	21 33       	cpi	r18, 0x31	; 49
     636:	41 f0       	breq	.+16     	; 0x648 <init_menu+0x34>
     638:	2c c1       	rjmp	.+600    	; 0x892 <init_menu+0x27e>
     63a:	23 33       	cpi	r18, 0x33	; 51
     63c:	09 f4       	brne	.+2      	; 0x640 <init_menu+0x2c>
     63e:	97 c0       	rjmp	.+302    	; 0x76e <init_menu+0x15a>
     640:	24 33       	cpi	r18, 0x34	; 52
     642:	09 f4       	brne	.+2      	; 0x646 <init_menu+0x32>
     644:	de c0       	rjmp	.+444    	; 0x802 <init_menu+0x1ee>
     646:	25 c1       	rjmp	.+586    	; 0x892 <init_menu+0x27e>
	case '1' :
			OLED_clear();
     648:	0e 94 d7 04 	call	0x9ae	; 0x9ae <OLED_clear>
			OLED_pos(1, 4);
     64c:	64 e0       	ldi	r22, 0x04	; 4
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("* Start game");
     654:	8f ea       	ldi	r24, 0xAF	; 175
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(3, 4);
     65c:	64 e0       	ldi	r22, 0x04	; 4
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Difficulty");
     664:	8c eb       	ldi	r24, 0xBC	; 188
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(5, 4);
     66c:	64 e0       	ldi	r22, 0x04	; 4
     66e:	85 e0       	ldi	r24, 0x05	; 5
     670:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Options");
     674:	89 ec       	ldi	r24, 0xC9	; 201
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(7, 4);
     67c:	64 e0       	ldi	r22, 0x04	; 4
     67e:	87 e0       	ldi	r24, 0x07	; 7
     680:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Music");
     684:	83 ed       	ldi	r24, 0xD3	; 211
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     68c:	2d e5       	ldi	r18, 0x5D	; 93
     68e:	8f e7       	ldi	r24, 0x7F	; 127
     690:	94 e0       	ldi	r25, 0x04	; 4
     692:	21 50       	subi	r18, 0x01	; 1
     694:	80 40       	sbci	r24, 0x00	; 0
     696:	90 40       	sbci	r25, 0x00	; 0
     698:	e1 f7       	brne	.-8      	; 0x692 <init_menu+0x7e>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <init_menu+0x88>
     69c:	00 00       	nop
char menynummer='0';

int init_menu(void) {
	joy_position joy_pos;
	joy_init();
	joy_pos = JOY_getDirection();
     69e:	c0 2f       	mov	r28, r16
     6a0:	d1 2f       	mov	r29, r17
     6a2:	17 c0       	rjmp	.+46     	; 0x6d2 <init_menu+0xbe>
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
		while(menynummer=='1'){
			joy_pos = JOY_getDirection();
     6a4:	0e 94 64 02 	call	0x4c8	; 0x4c8 <JOY_getDirection>
// 			OLED_pos(radvelger, 1);
// 			OLED_print("*");
			if (joy_pos.direction=="DOWN"){
     6a8:	21 e0       	ldi	r18, 0x01	; 1
     6aa:	86 31       	cpi	r24, 0x16	; 22
     6ac:	92 07       	cpc	r25, r18
     6ae:	31 f4       	brne	.+12     	; 0x6bc <init_menu+0xa8>
				menynummer='2' ;
     6b0:	82 e3       	ldi	r24, 0x32	; 50
     6b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menynummer>
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
		while(menynummer=='1'){
			joy_pos = JOY_getDirection();
     6b6:	c6 e1       	ldi	r28, 0x16	; 22
     6b8:	d1 e0       	ldi	r29, 0x01	; 1
// 			OLED_pos(radvelger, 1);
// 			OLED_print("*");
			if (joy_pos.direction=="DOWN"){
				menynummer='2' ;
				break;
     6ba:	11 c0       	rjmp	.+34     	; 0x6de <init_menu+0xca>
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
		while(menynummer=='1'){
			joy_pos = JOY_getDirection();
     6bc:	ec 01       	movw	r28, r24
// 			OLED_print("*");
			if (joy_pos.direction=="DOWN"){
				menynummer='2' ;
				break;
			}
			else if (joy_pos.direction=="UP"){
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	cb 31       	cpi	r28, 0x1B	; 27
     6c2:	d8 07       	cpc	r29, r24
     6c4:	31 f4       	brne	.+12     	; 0x6d2 <init_menu+0xbe>
				menynummer='1' ;
     6c6:	81 e3       	ldi	r24, 0x31	; 49
     6c8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menynummer>
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
		while(menynummer=='1'){
			joy_pos = JOY_getDirection();
     6cc:	cb e1       	ldi	r28, 0x1B	; 27
     6ce:	d1 e0       	ldi	r29, 0x01	; 1
				menynummer='2' ;
				break;
			}
			else if (joy_pos.direction=="UP"){
				menynummer='1' ;
				break;
     6d0:	06 c0       	rjmp	.+12     	; 0x6de <init_menu+0xca>
			OLED_pos(5, 4);
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
		while(menynummer=='1'){
     6d2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menynummer>
     6d6:	81 33       	cpi	r24, 0x31	; 49
     6d8:	29 f3       	breq	.-54     	; 0x6a4 <init_menu+0x90>
     6da:	01 c0       	rjmp	.+2      	; 0x6de <init_menu+0xca>
char menynummer='0';

int init_menu(void) {
	joy_position joy_pos;
	joy_init();
	joy_pos = JOY_getDirection();
     6dc:	ec 01       	movw	r28, r24
				break;
			}
			// definere peker
		}
	case '2' :
			OLED_clear();
     6de:	0e 94 d7 04 	call	0x9ae	; 0x9ae <OLED_clear>
			OLED_pos(1, 4);
     6e2:	64 e0       	ldi	r22, 0x04	; 4
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Start game");
     6ea:	8b ed       	ldi	r24, 0xDB	; 219
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(3, 4);
     6f2:	64 e0       	ldi	r22, 0x04	; 4
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("* Difficulty");
     6fa:	88 ee       	ldi	r24, 0xE8	; 232
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(5, 4);
     702:	64 e0       	ldi	r22, 0x04	; 4
     704:	85 e0       	ldi	r24, 0x05	; 5
     706:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Options");
     70a:	89 ec       	ldi	r24, 0xC9	; 201
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(7, 4);
     712:	64 e0       	ldi	r22, 0x04	; 4
     714:	87 e0       	ldi	r24, 0x07	; 7
     716:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Music");
     71a:	83 ed       	ldi	r24, 0xD3	; 211
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
     722:	9d e5       	ldi	r25, 0x5D	; 93
     724:	2f e7       	ldi	r18, 0x7F	; 127
     726:	84 e0       	ldi	r24, 0x04	; 4
     728:	91 50       	subi	r25, 0x01	; 1
     72a:	20 40       	sbci	r18, 0x00	; 0
     72c:	80 40       	sbci	r24, 0x00	; 0
     72e:	e1 f7       	brne	.-8      	; 0x728 <init_menu+0x114>
     730:	00 c0       	rjmp	.+0      	; 0x732 <init_menu+0x11e>
     732:	00 00       	nop
     734:	17 c0       	rjmp	.+46     	; 0x764 <init_menu+0x150>
			_delay_ms(300);
			while(menynummer=='2'){
			joy_pos = JOY_getDirection();
     736:	0e 94 64 02 	call	0x4c8	; 0x4c8 <JOY_getDirection>
				// 			OLED_pos(radvelger, 1);
				// 			OLED_print("*");
				if (joy_pos.direction=="DOWN"){
     73a:	21 e0       	ldi	r18, 0x01	; 1
     73c:	86 31       	cpi	r24, 0x16	; 22
     73e:	92 07       	cpc	r25, r18
     740:	31 f4       	brne	.+12     	; 0x74e <init_menu+0x13a>
					menynummer='3' ;
     742:	83 e3       	ldi	r24, 0x33	; 51
     744:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menynummer>
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
			while(menynummer=='2'){
			joy_pos = JOY_getDirection();
     748:	c6 e1       	ldi	r28, 0x16	; 22
     74a:	d1 e0       	ldi	r29, 0x01	; 1
				// 			OLED_pos(radvelger, 1);
				// 			OLED_print("*");
				if (joy_pos.direction=="DOWN"){
					menynummer='3' ;
					break;
     74c:	12 c0       	rjmp	.+36     	; 0x772 <init_menu+0x15e>
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
			while(menynummer=='2'){
			joy_pos = JOY_getDirection();
     74e:	ec 01       	movw	r28, r24
				// 			OLED_print("*");
				if (joy_pos.direction=="DOWN"){
					menynummer='3' ;
					break;
				}
				else if (joy_pos.direction=="UP"){
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	cb 31       	cpi	r28, 0x1B	; 27
     754:	d8 07       	cpc	r29, r24
     756:	31 f4       	brne	.+12     	; 0x764 <init_menu+0x150>
					menynummer='1' ;
     758:	81 e3       	ldi	r24, 0x31	; 49
     75a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menynummer>
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
			while(menynummer=='2'){
			joy_pos = JOY_getDirection();
     75e:	cb e1       	ldi	r28, 0x1B	; 27
     760:	d1 e0       	ldi	r29, 0x01	; 1
					menynummer='3' ;
					break;
				}
				else if (joy_pos.direction=="UP"){
					menynummer='1' ;
					break;
     762:	07 c0       	rjmp	.+14     	; 0x772 <init_menu+0x15e>
			OLED_pos(5, 4);
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
			while(menynummer=='2'){
     764:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menynummer>
     768:	82 33       	cpi	r24, 0x32	; 50
     76a:	29 f3       	breq	.-54     	; 0x736 <init_menu+0x122>
     76c:	02 c0       	rjmp	.+4      	; 0x772 <init_menu+0x15e>
char menynummer='0';

int init_menu(void) {
	joy_position joy_pos;
	joy_init();
	joy_pos = JOY_getDirection();
     76e:	c8 2f       	mov	r28, r24
     770:	d9 2f       	mov	r29, r25
				}
				// definere peker
			}

	case '3' :
			OLED_clear();
     772:	0e 94 d7 04 	call	0x9ae	; 0x9ae <OLED_clear>
			OLED_pos(1, 4);
     776:	64 e0       	ldi	r22, 0x04	; 4
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Start game");
     77e:	8b ed       	ldi	r24, 0xDB	; 219
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(3, 4);
     786:	64 e0       	ldi	r22, 0x04	; 4
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Difficulty");
     78e:	8c eb       	ldi	r24, 0xBC	; 188
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(5, 4);
     796:	64 e0       	ldi	r22, 0x04	; 4
     798:	85 e0       	ldi	r24, 0x05	; 5
     79a:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("* Options");
     79e:	85 ef       	ldi	r24, 0xF5	; 245
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(7, 4);
     7a6:	64 e0       	ldi	r22, 0x04	; 4
     7a8:	87 e0       	ldi	r24, 0x07	; 7
     7aa:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Music");
     7ae:	83 ed       	ldi	r24, 0xD3	; 211
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
     7b6:	9d e5       	ldi	r25, 0x5D	; 93
     7b8:	2f e7       	ldi	r18, 0x7F	; 127
     7ba:	84 e0       	ldi	r24, 0x04	; 4
     7bc:	91 50       	subi	r25, 0x01	; 1
     7be:	20 40       	sbci	r18, 0x00	; 0
     7c0:	80 40       	sbci	r24, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <init_menu+0x1a8>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <init_menu+0x1b2>
     7c6:	00 00       	nop
     7c8:	17 c0       	rjmp	.+46     	; 0x7f8 <init_menu+0x1e4>
			_delay_ms(300);
			while(menynummer=='3'){
			joy_pos = JOY_getDirection();
     7ca:	0e 94 64 02 	call	0x4c8	; 0x4c8 <JOY_getDirection>
				// 			OLED_pos(radvelger, 1);
				// 			OLED_print("*");
				if (joy_pos.direction=="DOWN"){
     7ce:	21 e0       	ldi	r18, 0x01	; 1
     7d0:	86 31       	cpi	r24, 0x16	; 22
     7d2:	92 07       	cpc	r25, r18
     7d4:	31 f4       	brne	.+12     	; 0x7e2 <init_menu+0x1ce>
					menynummer='4' ;
     7d6:	84 e3       	ldi	r24, 0x34	; 52
     7d8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menynummer>
			OLED_print("* Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
			while(menynummer=='3'){
			joy_pos = JOY_getDirection();
     7dc:	c6 e1       	ldi	r28, 0x16	; 22
     7de:	d1 e0       	ldi	r29, 0x01	; 1
				// 			OLED_pos(radvelger, 1);
				// 			OLED_print("*");
				if (joy_pos.direction=="DOWN"){
					menynummer='4' ;
					break;
     7e0:	12 c0       	rjmp	.+36     	; 0x806 <init_menu+0x1f2>
			OLED_print("* Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
			while(menynummer=='3'){
			joy_pos = JOY_getDirection();
     7e2:	ec 01       	movw	r28, r24
				// 			OLED_print("*");
				if (joy_pos.direction=="DOWN"){
					menynummer='4' ;
					break;
				}
				else if (joy_pos.direction=="UP"){
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	cb 31       	cpi	r28, 0x1B	; 27
     7e8:	d8 07       	cpc	r29, r24
     7ea:	31 f4       	brne	.+12     	; 0x7f8 <init_menu+0x1e4>
					menynummer='2' ;
     7ec:	82 e3       	ldi	r24, 0x32	; 50
     7ee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menynummer>
			OLED_print("* Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
			while(menynummer=='3'){
			joy_pos = JOY_getDirection();
     7f2:	cb e1       	ldi	r28, 0x1B	; 27
     7f4:	d1 e0       	ldi	r29, 0x01	; 1
					menynummer='4' ;
					break;
				}
				else if (joy_pos.direction=="UP"){
					menynummer='2' ;
					break;
     7f6:	07 c0       	rjmp	.+14     	; 0x806 <init_menu+0x1f2>
			OLED_pos(5, 4);
			OLED_print("* Options");
			OLED_pos(7, 4);
			OLED_print("  Music");
			_delay_ms(300);
			while(menynummer=='3'){
     7f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menynummer>
     7fc:	83 33       	cpi	r24, 0x33	; 51
     7fe:	29 f3       	breq	.-54     	; 0x7ca <init_menu+0x1b6>
     800:	02 c0       	rjmp	.+4      	; 0x806 <init_menu+0x1f2>
char menynummer='0';

int init_menu(void) {
	joy_position joy_pos;
	joy_init();
	joy_pos = JOY_getDirection();
     802:	c8 2f       	mov	r28, r24
     804:	d9 2f       	mov	r29, r25
					break;
				}
				// definere peker
			}
	case '4' :			
			OLED_clear();
     806:	0e 94 d7 04 	call	0x9ae	; 0x9ae <OLED_clear>
			OLED_pos(1, 4);
     80a:	64 e0       	ldi	r22, 0x04	; 4
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Start game");
     812:	8b ed       	ldi	r24, 0xDB	; 219
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(3, 4);
     81a:	64 e0       	ldi	r22, 0x04	; 4
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Difficulty");
     822:	8c eb       	ldi	r24, 0xBC	; 188
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(5, 4);
     82a:	64 e0       	ldi	r22, 0x04	; 4
     82c:	85 e0       	ldi	r24, 0x05	; 5
     82e:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("  Options");
     832:	89 ec       	ldi	r24, 0xC9	; 201
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
			OLED_pos(7, 4);
     83a:	64 e0       	ldi	r22, 0x04	; 4
     83c:	87 e0       	ldi	r24, 0x07	; 7
     83e:	0e 94 aa 04 	call	0x954	; 0x954 <OLED_pos>
			OLED_print("* Music");
     842:	8f ef       	ldi	r24, 0xFF	; 255
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 a4 05 	call	0xb48	; 0xb48 <OLED_print>
     84a:	9d e5       	ldi	r25, 0x5D	; 93
     84c:	2f e7       	ldi	r18, 0x7F	; 127
     84e:	84 e0       	ldi	r24, 0x04	; 4
     850:	91 50       	subi	r25, 0x01	; 1
     852:	20 40       	sbci	r18, 0x00	; 0
     854:	80 40       	sbci	r24, 0x00	; 0
     856:	e1 f7       	brne	.-8      	; 0x850 <init_menu+0x23c>
     858:	00 c0       	rjmp	.+0      	; 0x85a <init_menu+0x246>
     85a:	00 00       	nop
     85c:	15 c0       	rjmp	.+42     	; 0x888 <init_menu+0x274>
			_delay_ms(300);
			while(menynummer=='4'){
			joy_pos = JOY_getDirection();
     85e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <JOY_getDirection>
			// 			OLED_pos(radvelger, 1);
			// 			OLED_print("*");
				if (joy_pos.direction=="DOWN"){
     862:	21 e0       	ldi	r18, 0x01	; 1
     864:	86 31       	cpi	r24, 0x16	; 22
     866:	92 07       	cpc	r25, r18
     868:	21 f4       	brne	.+8      	; 0x872 <init_menu+0x25e>
					menynummer='4' ;
     86a:	84 e3       	ldi	r24, 0x34	; 52
     86c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menynummer>
     870:	15 c0       	rjmp	.+42     	; 0x89c <init_menu+0x288>
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("* Music");
			_delay_ms(300);
			while(menynummer=='4'){
			joy_pos = JOY_getDirection();
     872:	ec 01       	movw	r28, r24
			// 			OLED_print("*");
				if (joy_pos.direction=="DOWN"){
					menynummer='4' ;
					break;
				}
				else if (joy_pos.direction=="UP"){
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	cb 31       	cpi	r28, 0x1B	; 27
     878:	d8 07       	cpc	r29, r24
     87a:	31 f4       	brne	.+12     	; 0x888 <init_menu+0x274>
					menynummer='3' ;
     87c:	83 e3       	ldi	r24, 0x33	; 51
     87e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menynummer>
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("* Music");
			_delay_ms(300);
			while(menynummer=='4'){
			joy_pos = JOY_getDirection();
     882:	cb e1       	ldi	r28, 0x1B	; 27
     884:	d1 e0       	ldi	r29, 0x01	; 1
					menynummer='4' ;
					break;
				}
				else if (joy_pos.direction=="UP"){
					menynummer='3' ;
					break;
     886:	07 c0       	rjmp	.+14     	; 0x896 <init_menu+0x282>
			OLED_pos(5, 4);
			OLED_print("  Options");
			OLED_pos(7, 4);
			OLED_print("* Music");
			_delay_ms(300);
			while(menynummer=='4'){
     888:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <menynummer>
     88c:	84 33       	cpi	r24, 0x34	; 52
     88e:	39 f3       	breq	.-50     	; 0x85e <init_menu+0x24a>
     890:	02 c0       	rjmp	.+4      	; 0x896 <init_menu+0x282>
char menynummer='0';

int init_menu(void) {
	joy_position joy_pos;
	joy_init();
	joy_pos = JOY_getDirection();
     892:	c0 2f       	mov	r28, r16
     894:	d1 2f       	mov	r29, r17
				}
		// definere peker
			}
    
	default:
 		if (joy_pos.direction == "DOWN") {
     896:	c6 51       	subi	r28, 0x16	; 22
     898:	d1 40       	sbci	r29, 0x01	; 1
     89a:	29 f4       	brne	.+10     	; 0x8a6 <init_menu+0x292>
	 		OLED_clear();
     89c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <OLED_clear>
	 		menynummer = '1';
     8a0:	81 e3       	ldi	r24, 0x31	; 49
     8a2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <menynummer>
 		}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	08 95       	ret

000008b0 <OLED_home>:
	return 0;
}

int OLED_home(void) {
	//Reset the page and column
	page = 0;
     8b0:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <page>
	col = 0;
     8b4:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <col>
	*OLED_cmd =0xD3; 	
     8b8:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     8bc:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     8c0:	83 ed       	ldi	r24, 0xD3	; 211
     8c2:	80 83       	st	Z, r24
	 *OLED_cmd = 0b11001000;
     8c4:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     8c8:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     8cc:	88 ec       	ldi	r24, 0xC8	; 200
     8ce:	80 83       	st	Z, r24
	//Set the cursor to the start of the screen
	*OLED_cmd = 0x21;
     8d0:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     8d4:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     8d8:	81 e2       	ldi	r24, 0x21	; 33
     8da:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
     8dc:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     8e0:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     8e4:	10 82       	st	Z, r1
	*OLED_cmd = 0x7f;
     8e6:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     8ea:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     8ee:	8f e7       	ldi	r24, 0x7F	; 127
     8f0:	80 83       	st	Z, r24
		
	*OLED_cmd = 0x22;
     8f2:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     8f6:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     8fa:	82 e2       	ldi	r24, 0x22	; 34
     8fc:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
     8fe:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     902:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     906:	10 82       	st	Z, r1
	*OLED_cmd = 0x7;
     908:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     90c:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     910:	87 e0       	ldi	r24, 0x07	; 7
     912:	80 83       	st	Z, r24
		
 	return 0;
 }
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	08 95       	ret

0000091a <OLED_goto_line>:
 
int OLED_goto_line(uint8_t line) {
     91a:	cf 93       	push	r28
     91c:	c8 2f       	mov	r28, r24
	OLED_home();
     91e:	0e 94 58 04 	call	0x8b0	; 0x8b0 <OLED_home>
	
	//Check if it's a valid page
	if (line < 8) {
     922:	c8 30       	cpi	r28, 0x08	; 8
     924:	98 f4       	brcc	.+38     	; 0x94c <OLED_goto_line+0x32>
		//Save the page we are moving to
		page = line;
     926:	c0 93 0b 02 	sts	0x020B, r28	; 0x80020b <page>
		//Set lower column address
		*OLED_cmd = 0x00;
     92a:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     92e:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     932:	10 82       	st	Z, r1
		//Set higher column address
		*OLED_cmd = 0x10;
     934:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     938:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     93c:	80 e1       	ldi	r24, 0x10	; 16
     93e:	80 83       	st	Z, r24
		//Set page address
		*OLED_cmd = 0xB0 | line;
     940:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     944:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     948:	c0 6b       	ori	r28, 0xB0	; 176
     94a:	c0 83       	st	Z, r28
	}
 
 	return 0;
 }
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <OLED_pos>:

int OLED_pos(uint8_t line, uint8_t column) {
     954:	cf 93       	push	r28
     956:	c6 2f       	mov	r28, r22
	OLED_goto_line(line);
     958:	0e 94 8d 04 	call	0x91a	; 0x91a <OLED_goto_line>
	
	//Check if it's a valid column according to the font
	if (column < (128/FONTWIDTH)) {
     95c:	c0 31       	cpi	r28, 0x10	; 16
     95e:	98 f4       	brcc	.+38     	; 0x986 <OLED_pos+0x32>
		//Save the column we are moving to
		col = column*FONTWIDTH;
     960:	8c 2f       	mov	r24, r28
     962:	88 0f       	add	r24, r24
     964:	88 0f       	add	r24, r24
     966:	88 0f       	add	r24, r24
     968:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <col>
		//Set lower column start address
		//*OLED_cmd = 0x00 + (column*(FONTWIDTH)<<4);
		//Set higher column start address
		*OLED_cmd = 0X0F & col;
     96c:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     970:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     974:	8f 70       	andi	r24, 0x0F	; 15
     976:	80 83       	st	Z, r24
		*OLED_cmd = 0x10 | (column*(FONTWIDTH)>>4);
     978:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     97c:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     980:	c0 62       	ori	r28, 0x20	; 32
     982:	c6 95       	lsr	r28
     984:	c0 83       	st	Z, r28
	}
	
	return 0;
}
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <OLED_clear_line>:

int OLED_clear_line(uint8_t line) {
	OLED_goto_line(line);
     98e:	0e 94 8d 04 	call	0x91a	; 0x91a <OLED_goto_line>
     992:	80 e8       	ldi	r24, 0x80	; 128
     994:	90 e0       	ldi	r25, 0x00	; 0
	
	//Clear the page
	for (int i = 0; i < 128; i++) {
		*OLED_data=0x00;
     996:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <OLED_data>
     99a:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <OLED_data+0x1>
     99e:	10 82       	st	Z, r1
     9a0:	01 97       	sbiw	r24, 0x01	; 1

int OLED_clear_line(uint8_t line) {
	OLED_goto_line(line);
	
	//Clear the page
	for (int i = 0; i < 128; i++) {
     9a2:	c9 f7       	brne	.-14     	; 0x996 <OLED_clear_line+0x8>
		*OLED_data=0x00;
	}
	
	OLED_home();
     9a4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <OLED_home>
	
	return 0;
}
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	08 95       	ret

000009ae <OLED_clear>:

int OLED_clear(void) {
     9ae:	cf 93       	push	r28
     9b0:	c0 e0       	ldi	r28, 0x00	; 0
	//Clear every page
	for (int k = 0; k < 8; k++) {
		OLED_clear_line(k);
     9b2:	8c 2f       	mov	r24, r28
     9b4:	0e 94 c7 04 	call	0x98e	; 0x98e <OLED_clear_line>
     9b8:	cf 5f       	subi	r28, 0xFF	; 255
	return 0;
}

int OLED_clear(void) {
	//Clear every page
	for (int k = 0; k < 8; k++) {
     9ba:	c8 30       	cpi	r28, 0x08	; 8
     9bc:	d1 f7       	brne	.-12     	; 0x9b2 <OLED_clear+0x4>
		OLED_clear_line(k);
	}
	
	return 0;
}
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <OLED_init>:

uint8_t page, col;

int OLED_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
     9c6:	85 b7       	in	r24, 0x35	; 53
     9c8:	80 68       	ori	r24, 0x80	; 128
     9ca:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     9cc:	80 b7       	in	r24, 0x30	; 48
     9ce:	80 62       	ori	r24, 0x20	; 32
     9d0:	80 bf       	out	0x30, r24	; 48

	//Setup the OLED display
	
	//display off
	*OLED_cmd = 0xAE;
     9d2:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     9d6:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     9da:	8e ea       	ldi	r24, 0xAE	; 174
     9dc:	80 83       	st	Z, r24
	//segment remap
	*OLED_cmd = 0xA1;
     9de:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     9e2:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     9e6:	81 ea       	ldi	r24, 0xA1	; 161
     9e8:	80 83       	st	Z, r24
	
	//common pads hardware: alternative
	*OLED_cmd = 0xDA;
     9ea:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     9ee:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     9f2:	8a ed       	ldi	r24, 0xDA	; 218
     9f4:	80 83       	st	Z, r24
	*OLED_cmd = 0x12;
     9f6:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     9fa:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     9fe:	82 e1       	ldi	r24, 0x12	; 18
     a00:	80 83       	st	Z, r24
	
	//common output scan direction:com63~com0
	*OLED_cmd = 0xC8;
     a02:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a06:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a0a:	88 ec       	ldi	r24, 0xC8	; 200
     a0c:	80 83       	st	Z, r24

	//multiplex ration mode:63
	*OLED_cmd = 0xA8;
     a0e:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a12:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a16:	88 ea       	ldi	r24, 0xA8	; 168
     a18:	80 83       	st	Z, r24
	*OLED_cmd = 0x3F;
     a1a:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a1e:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a22:	8f e3       	ldi	r24, 0x3F	; 63
     a24:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_cmd = 0xD5;
     a26:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a2a:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a2e:	85 ed       	ldi	r24, 0xD5	; 213
     a30:	80 83       	st	Z, r24
	*OLED_cmd = 0x80;
     a32:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a36:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a3a:	80 e8       	ldi	r24, 0x80	; 128
     a3c:	80 83       	st	Z, r24

	//contrast control
	*OLED_cmd = 0x81;
     a3e:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a42:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a46:	81 e8       	ldi	r24, 0x81	; 129
     a48:	80 83       	st	Z, r24
	*OLED_cmd = 0x50;
     a4a:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a4e:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a52:	80 e5       	ldi	r24, 0x50	; 80
     a54:	80 83       	st	Z, r24

	//set pre-charge period
	*OLED_cmd = 0xD9;
     a56:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a5a:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a5e:	89 ed       	ldi	r24, 0xD9	; 217
     a60:	80 83       	st	Z, r24
	*OLED_cmd = 0x21;
     a62:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a66:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a6a:	81 e2       	ldi	r24, 0x21	; 33
     a6c:	80 83       	st	Z, r24

	//set Memory Addressing Mode
	*OLED_cmd = 0x20;
     a6e:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a72:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a76:	80 e2       	ldi	r24, 0x20	; 32
     a78:	80 83       	st	Z, r24
	*OLED_cmd = 0x02;
     a7a:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a7e:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	80 83       	st	Z, r24

	//VCOM deselect level mode
	*OLED_cmd = 0xDB;
     a86:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a8a:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a8e:	8b ed       	ldi	r24, 0xDB	; 219
     a90:	80 83       	st	Z, r24
	*OLED_cmd = 0x30;
     a92:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     a96:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     a9a:	80 e3       	ldi	r24, 0x30	; 48
     a9c:	80 83       	st	Z, r24

	//master configuration
	*OLED_cmd = 0xAD;
     a9e:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     aa2:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     aa6:	8d ea       	ldi	r24, 0xAD	; 173
     aa8:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
     aaa:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     aae:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     ab2:	10 82       	st	Z, r1

	//out follows RAM content
	*OLED_cmd = 0xA4;
     ab4:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     ab8:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     abc:	84 ea       	ldi	r24, 0xA4	; 164
     abe:	80 83       	st	Z, r24

	//set normal display
	*OLED_cmd = 0xA6;
     ac0:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     ac4:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     ac8:	86 ea       	ldi	r24, 0xA6	; 166
     aca:	80 83       	st	Z, r24
	//display on
	*OLED_cmd = 0xAF;
     acc:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     ad0:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     ad4:	8f ea       	ldi	r24, 0xAF	; 175
     ad6:	80 83       	st	Z, r24
	
	//Set page start address
	*OLED_cmd = 0xB0;
     ad8:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     adc:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     ae0:	80 eb       	ldi	r24, 0xB0	; 176
     ae2:	80 83       	st	Z, r24
	//Set lower column start address
	*OLED_cmd = 0x00;
     ae4:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     ae8:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     aec:	10 82       	st	Z, r1
	//Set higher column start address
	*OLED_cmd = 0x10;
     aee:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <OLED_cmd>
     af2:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <OLED_cmd+0x1>
     af6:	80 e1       	ldi	r24, 0x10	; 16
     af8:	80 83       	st	Z, r24
	
	//Clear the display
	OLED_clear();
     afa:	0e 94 d7 04 	call	0x9ae	; 0x9ae <OLED_clear>
	OLED_home();
     afe:	0e 94 58 04 	call	0x8b0	; 0x8b0 <OLED_home>

	return 0;
}
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	08 95       	ret

00000b08 <OLED_print_char>:
	}
	
	return 0;
}

int OLED_print_char(char c) {
     b08:	28 2f       	mov	r18, r24
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	f9 01       	movw	r30, r18
     b0e:	ee 0f       	add	r30, r30
     b10:	ff 1f       	adc	r31, r31
     b12:	ee 0f       	add	r30, r30
     b14:	ff 1f       	adc	r31, r31
     b16:	ee 0f       	add	r30, r30
     b18:	ff 1f       	adc	r31, r31
     b1a:	e0 59       	subi	r30, 0x90	; 144
     b1c:	f0 40       	sbci	r31, 0x00	; 0
     b1e:	22 0f       	add	r18, r18
     b20:	33 1f       	adc	r19, r19
     b22:	22 0f       	add	r18, r18
     b24:	33 1f       	adc	r19, r19
     b26:	22 0f       	add	r18, r18
     b28:	33 1f       	adc	r19, r19
     b2a:	28 58       	subi	r18, 0x88	; 136
     b2c:	30 40       	sbci	r19, 0x00	; 0
	//Write the complete character
	for (int i = 0; i < FONTWIDTH; i++) {
		*OLED_data = pgm_read_byte(&font[c-' '][i]);
     b2e:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <OLED_data>
     b32:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <OLED_data+0x1>
     b36:	94 91       	lpm	r25, Z
     b38:	9c 93       	st	X, r25
     b3a:	31 96       	adiw	r30, 0x01	; 1
	return 0;
}

int OLED_print_char(char c) {
	//Write the complete character
	for (int i = 0; i < FONTWIDTH; i++) {
     b3c:	e2 17       	cp	r30, r18
     b3e:	f3 07       	cpc	r31, r19
     b40:	b1 f7       	brne	.-20     	; 0xb2e <OLED_print_char+0x26>
		*OLED_data = pgm_read_byte(&font[c-' '][i]);
	}
	
	return 0;
}
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	08 95       	ret

00000b48 <OLED_print>:

int OLED_print(char *data) {
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	ec 01       	movw	r28, r24
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
     b4e:	88 81       	ld	r24, Y
     b50:	88 23       	and	r24, r24
     b52:	31 f0       	breq	.+12     	; 0xb60 <OLED_print+0x18>
     b54:	21 96       	adiw	r28, 0x01	; 1
		OLED_print_char(data[i]);
     b56:	0e 94 84 05 	call	0xb08	; 0xb08 <OLED_print_char>

int OLED_print(char *data) {
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
     b5a:	89 91       	ld	r24, Y+
     b5c:	81 11       	cpse	r24, r1
     b5e:	fb cf       	rjmp	.-10     	; 0xb56 <OLED_print+0xe>
		OLED_print_char(data[i]);
		i++;
	}
	
	return 0;
}
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <SRAM_init>:
#include <avr/io.h>
#include <stdio.h>

int SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
     b6a:	85 b7       	in	r24, 0x35	; 53
     b6c:	80 68       	ori	r24, 0x80	; 128
     b6e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     b70:	80 b7       	in	r24, 0x30	; 48
     b72:	80 62       	ori	r24, 0x20	; 32
     b74:	80 bf       	out	0x30, r24	; 48
	
	return 0;
}
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	08 95       	ret

00000b7c <UART_TX>:
}

int UART_TX(char data, FILE * _in){
	(void)(_in);
	
	while( !(UCSR0A & (1 << UDRE0)) );
     b7c:	5d 9b       	sbis	0x0b, 5	; 11
     b7e:	fe cf       	rjmp	.-4      	; 0xb7c <UART_TX>
	
	// send data
	UDR0 = data;
     b80:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	08 95       	ret

00000b88 <UART_RX>:

int UART_RX(FILE * _in ){
	(void)(_in);
	while( !(UCSR0A & (1 << RXC0)) );
     b88:	5f 9b       	sbis	0x0b, 7	; 11
     b8a:	fe cf       	rjmp	.-4      	; 0xb88 <UART_RX>
	
	// Data recieved
	return UDR0;
     b8c:	8c b1       	in	r24, 0x0c	; 12
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	08 95       	ret

00000b92 <UART_Init>:


void UART_Init(unsigned int ubrr)
{
	// Baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     b92:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
     b94:	89 b9       	out	0x09, r24	; 9
	
	// Enable Rx and Tx
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) ;
     b96:	88 e1       	ldi	r24, 0x18	; 24
     b98:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
     b9a:	8e e8       	ldi	r24, 0x8E	; 142
     b9c:	80 bd       	out	0x20, r24	; 32
	fdevopen(UART_TX, UART_RX);
     b9e:	64 ec       	ldi	r22, 0xC4	; 196
     ba0:	75 e0       	ldi	r23, 0x05	; 5
     ba2:	8e eb       	ldi	r24, 0xBE	; 190
     ba4:	95 e0       	ldi	r25, 0x05	; 5
     ba6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <fdevopen>
     baa:	08 95       	ret

00000bac <__divmodhi4>:
     bac:	97 fb       	bst	r25, 7
     bae:	07 2e       	mov	r0, r23
     bb0:	16 f4       	brtc	.+4      	; 0xbb6 <__divmodhi4+0xa>
     bb2:	00 94       	com	r0
     bb4:	07 d0       	rcall	.+14     	; 0xbc4 <__divmodhi4_neg1>
     bb6:	77 fd       	sbrc	r23, 7
     bb8:	09 d0       	rcall	.+18     	; 0xbcc <__divmodhi4_neg2>
     bba:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__udivmodhi4>
     bbe:	07 fc       	sbrc	r0, 7
     bc0:	05 d0       	rcall	.+10     	; 0xbcc <__divmodhi4_neg2>
     bc2:	3e f4       	brtc	.+14     	; 0xbd2 <__divmodhi4_exit>

00000bc4 <__divmodhi4_neg1>:
     bc4:	90 95       	com	r25
     bc6:	81 95       	neg	r24
     bc8:	9f 4f       	sbci	r25, 0xFF	; 255
     bca:	08 95       	ret

00000bcc <__divmodhi4_neg2>:
     bcc:	70 95       	com	r23
     bce:	61 95       	neg	r22
     bd0:	7f 4f       	sbci	r23, 0xFF	; 255

00000bd2 <__divmodhi4_exit>:
     bd2:	08 95       	ret

00000bd4 <__udivmodhi4>:
     bd4:	aa 1b       	sub	r26, r26
     bd6:	bb 1b       	sub	r27, r27
     bd8:	51 e1       	ldi	r21, 0x11	; 17
     bda:	07 c0       	rjmp	.+14     	; 0xbea <__udivmodhi4_ep>

00000bdc <__udivmodhi4_loop>:
     bdc:	aa 1f       	adc	r26, r26
     bde:	bb 1f       	adc	r27, r27
     be0:	a6 17       	cp	r26, r22
     be2:	b7 07       	cpc	r27, r23
     be4:	10 f0       	brcs	.+4      	; 0xbea <__udivmodhi4_ep>
     be6:	a6 1b       	sub	r26, r22
     be8:	b7 0b       	sbc	r27, r23

00000bea <__udivmodhi4_ep>:
     bea:	88 1f       	adc	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	5a 95       	dec	r21
     bf0:	a9 f7       	brne	.-22     	; 0xbdc <__udivmodhi4_loop>
     bf2:	80 95       	com	r24
     bf4:	90 95       	com	r25
     bf6:	bc 01       	movw	r22, r24
     bf8:	cd 01       	movw	r24, r26
     bfa:	08 95       	ret

00000bfc <fdevopen>:
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	31 f4       	brne	.+12     	; 0xc14 <fdevopen+0x18>
     c08:	61 15       	cp	r22, r1
     c0a:	71 05       	cpc	r23, r1
     c0c:	19 f4       	brne	.+6      	; 0xc14 <fdevopen+0x18>
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	3a c0       	rjmp	.+116    	; 0xc88 <fdevopen+0x8c>
     c14:	8b 01       	movw	r16, r22
     c16:	ec 01       	movw	r28, r24
     c18:	6e e0       	ldi	r22, 0x0E	; 14
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 40 08 	call	0x1080	; 0x1080 <calloc>
     c24:	fc 01       	movw	r30, r24
     c26:	89 2b       	or	r24, r25
     c28:	91 f3       	breq	.-28     	; 0xc0e <fdevopen+0x12>
     c2a:	80 e8       	ldi	r24, 0x80	; 128
     c2c:	83 83       	std	Z+3, r24	; 0x03
     c2e:	01 15       	cp	r16, r1
     c30:	11 05       	cpc	r17, r1
     c32:	71 f0       	breq	.+28     	; 0xc50 <fdevopen+0x54>
     c34:	13 87       	std	Z+11, r17	; 0x0b
     c36:	02 87       	std	Z+10, r16	; 0x0a
     c38:	81 e8       	ldi	r24, 0x81	; 129
     c3a:	83 83       	std	Z+3, r24	; 0x03
     c3c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__iob>
     c40:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__iob+0x1>
     c44:	89 2b       	or	r24, r25
     c46:	21 f4       	brne	.+8      	; 0xc50 <fdevopen+0x54>
     c48:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__iob+0x1>
     c4c:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__iob>
     c50:	20 97       	sbiw	r28, 0x00	; 0
     c52:	c9 f0       	breq	.+50     	; 0xc86 <fdevopen+0x8a>
     c54:	d1 87       	std	Z+9, r29	; 0x09
     c56:	c0 87       	std	Z+8, r28	; 0x08
     c58:	83 81       	ldd	r24, Z+3	; 0x03
     c5a:	82 60       	ori	r24, 0x02	; 2
     c5c:	83 83       	std	Z+3, r24	; 0x03
     c5e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__iob+0x2>
     c62:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <__iob+0x3>
     c66:	89 2b       	or	r24, r25
     c68:	71 f4       	brne	.+28     	; 0xc86 <fdevopen+0x8a>
     c6a:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <__iob+0x3>
     c6e:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <__iob+0x2>
     c72:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__iob+0x4>
     c76:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <__iob+0x5>
     c7a:	89 2b       	or	r24, r25
     c7c:	21 f4       	brne	.+8      	; 0xc86 <fdevopen+0x8a>
     c7e:	f0 93 11 02 	sts	0x0211, r31	; 0x800211 <__iob+0x5>
     c82:	e0 93 10 02 	sts	0x0210, r30	; 0x800210 <__iob+0x4>
     c86:	cf 01       	movw	r24, r30
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <printf>:
     c92:	a0 e0       	ldi	r26, 0x00	; 0
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ef e4       	ldi	r30, 0x4F	; 79
     c98:	f6 e0       	ldi	r31, 0x06	; 6
     c9a:	0c 94 44 0a 	jmp	0x1488	; 0x1488 <__prologue_saves__+0x20>
     c9e:	ae 01       	movw	r20, r28
     ca0:	4b 5f       	subi	r20, 0xFB	; 251
     ca2:	5f 4f       	sbci	r21, 0xFF	; 255
     ca4:	fa 01       	movw	r30, r20
     ca6:	61 91       	ld	r22, Z+
     ca8:	71 91       	ld	r23, Z+
     caa:	af 01       	movw	r20, r30
     cac:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__iob+0x2>
     cb0:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <__iob+0x3>
     cb4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <vfprintf>
     cb8:	e2 e0       	ldi	r30, 0x02	; 2
     cba:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__epilogue_restores__+0x20>

00000cbe <vfprintf>:
     cbe:	ab e0       	ldi	r26, 0x0B	; 11
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e5 e6       	ldi	r30, 0x65	; 101
     cc4:	f6 e0       	ldi	r31, 0x06	; 6
     cc6:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__prologue_saves__>
     cca:	6c 01       	movw	r12, r24
     ccc:	7b 01       	movw	r14, r22
     cce:	8a 01       	movw	r16, r20
     cd0:	fc 01       	movw	r30, r24
     cd2:	17 82       	std	Z+7, r1	; 0x07
     cd4:	16 82       	std	Z+6, r1	; 0x06
     cd6:	83 81       	ldd	r24, Z+3	; 0x03
     cd8:	81 ff       	sbrs	r24, 1
     cda:	cc c1       	rjmp	.+920    	; 0x1074 <vfprintf+0x3b6>
     cdc:	ce 01       	movw	r24, r28
     cde:	01 96       	adiw	r24, 0x01	; 1
     ce0:	3c 01       	movw	r6, r24
     ce2:	f6 01       	movw	r30, r12
     ce4:	93 81       	ldd	r25, Z+3	; 0x03
     ce6:	f7 01       	movw	r30, r14
     ce8:	93 fd       	sbrc	r25, 3
     cea:	85 91       	lpm	r24, Z+
     cec:	93 ff       	sbrs	r25, 3
     cee:	81 91       	ld	r24, Z+
     cf0:	7f 01       	movw	r14, r30
     cf2:	88 23       	and	r24, r24
     cf4:	09 f4       	brne	.+2      	; 0xcf8 <vfprintf+0x3a>
     cf6:	ba c1       	rjmp	.+884    	; 0x106c <vfprintf+0x3ae>
     cf8:	85 32       	cpi	r24, 0x25	; 37
     cfa:	39 f4       	brne	.+14     	; 0xd0a <vfprintf+0x4c>
     cfc:	93 fd       	sbrc	r25, 3
     cfe:	85 91       	lpm	r24, Z+
     d00:	93 ff       	sbrs	r25, 3
     d02:	81 91       	ld	r24, Z+
     d04:	7f 01       	movw	r14, r30
     d06:	85 32       	cpi	r24, 0x25	; 37
     d08:	29 f4       	brne	.+10     	; 0xd14 <vfprintf+0x56>
     d0a:	b6 01       	movw	r22, r12
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 9a 09 	call	0x1334	; 0x1334 <fputc>
     d12:	e7 cf       	rjmp	.-50     	; 0xce2 <vfprintf+0x24>
     d14:	91 2c       	mov	r9, r1
     d16:	21 2c       	mov	r2, r1
     d18:	31 2c       	mov	r3, r1
     d1a:	ff e1       	ldi	r31, 0x1F	; 31
     d1c:	f3 15       	cp	r31, r3
     d1e:	d8 f0       	brcs	.+54     	; 0xd56 <vfprintf+0x98>
     d20:	8b 32       	cpi	r24, 0x2B	; 43
     d22:	79 f0       	breq	.+30     	; 0xd42 <vfprintf+0x84>
     d24:	38 f4       	brcc	.+14     	; 0xd34 <vfprintf+0x76>
     d26:	80 32       	cpi	r24, 0x20	; 32
     d28:	79 f0       	breq	.+30     	; 0xd48 <vfprintf+0x8a>
     d2a:	83 32       	cpi	r24, 0x23	; 35
     d2c:	a1 f4       	brne	.+40     	; 0xd56 <vfprintf+0x98>
     d2e:	23 2d       	mov	r18, r3
     d30:	20 61       	ori	r18, 0x10	; 16
     d32:	1d c0       	rjmp	.+58     	; 0xd6e <vfprintf+0xb0>
     d34:	8d 32       	cpi	r24, 0x2D	; 45
     d36:	61 f0       	breq	.+24     	; 0xd50 <vfprintf+0x92>
     d38:	80 33       	cpi	r24, 0x30	; 48
     d3a:	69 f4       	brne	.+26     	; 0xd56 <vfprintf+0x98>
     d3c:	23 2d       	mov	r18, r3
     d3e:	21 60       	ori	r18, 0x01	; 1
     d40:	16 c0       	rjmp	.+44     	; 0xd6e <vfprintf+0xb0>
     d42:	83 2d       	mov	r24, r3
     d44:	82 60       	ori	r24, 0x02	; 2
     d46:	38 2e       	mov	r3, r24
     d48:	e3 2d       	mov	r30, r3
     d4a:	e4 60       	ori	r30, 0x04	; 4
     d4c:	3e 2e       	mov	r3, r30
     d4e:	2a c0       	rjmp	.+84     	; 0xda4 <vfprintf+0xe6>
     d50:	f3 2d       	mov	r31, r3
     d52:	f8 60       	ori	r31, 0x08	; 8
     d54:	1d c0       	rjmp	.+58     	; 0xd90 <vfprintf+0xd2>
     d56:	37 fc       	sbrc	r3, 7
     d58:	2d c0       	rjmp	.+90     	; 0xdb4 <vfprintf+0xf6>
     d5a:	20 ed       	ldi	r18, 0xD0	; 208
     d5c:	28 0f       	add	r18, r24
     d5e:	2a 30       	cpi	r18, 0x0A	; 10
     d60:	40 f0       	brcs	.+16     	; 0xd72 <vfprintf+0xb4>
     d62:	8e 32       	cpi	r24, 0x2E	; 46
     d64:	b9 f4       	brne	.+46     	; 0xd94 <vfprintf+0xd6>
     d66:	36 fc       	sbrc	r3, 6
     d68:	81 c1       	rjmp	.+770    	; 0x106c <vfprintf+0x3ae>
     d6a:	23 2d       	mov	r18, r3
     d6c:	20 64       	ori	r18, 0x40	; 64
     d6e:	32 2e       	mov	r3, r18
     d70:	19 c0       	rjmp	.+50     	; 0xda4 <vfprintf+0xe6>
     d72:	36 fe       	sbrs	r3, 6
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <vfprintf+0xc4>
     d76:	8a e0       	ldi	r24, 0x0A	; 10
     d78:	98 9e       	mul	r9, r24
     d7a:	20 0d       	add	r18, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	92 2e       	mov	r9, r18
     d80:	11 c0       	rjmp	.+34     	; 0xda4 <vfprintf+0xe6>
     d82:	ea e0       	ldi	r30, 0x0A	; 10
     d84:	2e 9e       	mul	r2, r30
     d86:	20 0d       	add	r18, r0
     d88:	11 24       	eor	r1, r1
     d8a:	22 2e       	mov	r2, r18
     d8c:	f3 2d       	mov	r31, r3
     d8e:	f0 62       	ori	r31, 0x20	; 32
     d90:	3f 2e       	mov	r3, r31
     d92:	08 c0       	rjmp	.+16     	; 0xda4 <vfprintf+0xe6>
     d94:	8c 36       	cpi	r24, 0x6C	; 108
     d96:	21 f4       	brne	.+8      	; 0xda0 <vfprintf+0xe2>
     d98:	83 2d       	mov	r24, r3
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	38 2e       	mov	r3, r24
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <vfprintf+0xe6>
     da0:	88 36       	cpi	r24, 0x68	; 104
     da2:	41 f4       	brne	.+16     	; 0xdb4 <vfprintf+0xf6>
     da4:	f7 01       	movw	r30, r14
     da6:	93 fd       	sbrc	r25, 3
     da8:	85 91       	lpm	r24, Z+
     daa:	93 ff       	sbrs	r25, 3
     dac:	81 91       	ld	r24, Z+
     dae:	7f 01       	movw	r14, r30
     db0:	81 11       	cpse	r24, r1
     db2:	b3 cf       	rjmp	.-154    	; 0xd1a <vfprintf+0x5c>
     db4:	98 2f       	mov	r25, r24
     db6:	9f 7d       	andi	r25, 0xDF	; 223
     db8:	95 54       	subi	r25, 0x45	; 69
     dba:	93 30       	cpi	r25, 0x03	; 3
     dbc:	28 f4       	brcc	.+10     	; 0xdc8 <vfprintf+0x10a>
     dbe:	0c 5f       	subi	r16, 0xFC	; 252
     dc0:	1f 4f       	sbci	r17, 0xFF	; 255
     dc2:	9f e3       	ldi	r25, 0x3F	; 63
     dc4:	99 83       	std	Y+1, r25	; 0x01
     dc6:	0d c0       	rjmp	.+26     	; 0xde2 <vfprintf+0x124>
     dc8:	83 36       	cpi	r24, 0x63	; 99
     dca:	31 f0       	breq	.+12     	; 0xdd8 <vfprintf+0x11a>
     dcc:	83 37       	cpi	r24, 0x73	; 115
     dce:	71 f0       	breq	.+28     	; 0xdec <vfprintf+0x12e>
     dd0:	83 35       	cpi	r24, 0x53	; 83
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <vfprintf+0x118>
     dd4:	59 c0       	rjmp	.+178    	; 0xe88 <vfprintf+0x1ca>
     dd6:	21 c0       	rjmp	.+66     	; 0xe1a <vfprintf+0x15c>
     dd8:	f8 01       	movw	r30, r16
     dda:	80 81       	ld	r24, Z
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	0e 5f       	subi	r16, 0xFE	; 254
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	88 24       	eor	r8, r8
     de4:	83 94       	inc	r8
     de6:	91 2c       	mov	r9, r1
     de8:	53 01       	movw	r10, r6
     dea:	13 c0       	rjmp	.+38     	; 0xe12 <vfprintf+0x154>
     dec:	28 01       	movw	r4, r16
     dee:	f2 e0       	ldi	r31, 0x02	; 2
     df0:	4f 0e       	add	r4, r31
     df2:	51 1c       	adc	r5, r1
     df4:	f8 01       	movw	r30, r16
     df6:	a0 80       	ld	r10, Z
     df8:	b1 80       	ldd	r11, Z+1	; 0x01
     dfa:	36 fe       	sbrs	r3, 6
     dfc:	03 c0       	rjmp	.+6      	; 0xe04 <vfprintf+0x146>
     dfe:	69 2d       	mov	r22, r9
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <vfprintf+0x14a>
     e04:	6f ef       	ldi	r22, 0xFF	; 255
     e06:	7f ef       	ldi	r23, 0xFF	; 255
     e08:	c5 01       	movw	r24, r10
     e0a:	0e 94 8f 09 	call	0x131e	; 0x131e <strnlen>
     e0e:	4c 01       	movw	r8, r24
     e10:	82 01       	movw	r16, r4
     e12:	f3 2d       	mov	r31, r3
     e14:	ff 77       	andi	r31, 0x7F	; 127
     e16:	3f 2e       	mov	r3, r31
     e18:	16 c0       	rjmp	.+44     	; 0xe46 <vfprintf+0x188>
     e1a:	28 01       	movw	r4, r16
     e1c:	22 e0       	ldi	r18, 0x02	; 2
     e1e:	42 0e       	add	r4, r18
     e20:	51 1c       	adc	r5, r1
     e22:	f8 01       	movw	r30, r16
     e24:	a0 80       	ld	r10, Z
     e26:	b1 80       	ldd	r11, Z+1	; 0x01
     e28:	36 fe       	sbrs	r3, 6
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <vfprintf+0x174>
     e2c:	69 2d       	mov	r22, r9
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <vfprintf+0x178>
     e32:	6f ef       	ldi	r22, 0xFF	; 255
     e34:	7f ef       	ldi	r23, 0xFF	; 255
     e36:	c5 01       	movw	r24, r10
     e38:	0e 94 7d 09 	call	0x12fa	; 0x12fa <strnlen_P>
     e3c:	4c 01       	movw	r8, r24
     e3e:	f3 2d       	mov	r31, r3
     e40:	f0 68       	ori	r31, 0x80	; 128
     e42:	3f 2e       	mov	r3, r31
     e44:	82 01       	movw	r16, r4
     e46:	33 fc       	sbrc	r3, 3
     e48:	1b c0       	rjmp	.+54     	; 0xe80 <vfprintf+0x1c2>
     e4a:	82 2d       	mov	r24, r2
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	88 16       	cp	r8, r24
     e50:	99 06       	cpc	r9, r25
     e52:	b0 f4       	brcc	.+44     	; 0xe80 <vfprintf+0x1c2>
     e54:	b6 01       	movw	r22, r12
     e56:	80 e2       	ldi	r24, 0x20	; 32
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 9a 09 	call	0x1334	; 0x1334 <fputc>
     e5e:	2a 94       	dec	r2
     e60:	f4 cf       	rjmp	.-24     	; 0xe4a <vfprintf+0x18c>
     e62:	f5 01       	movw	r30, r10
     e64:	37 fc       	sbrc	r3, 7
     e66:	85 91       	lpm	r24, Z+
     e68:	37 fe       	sbrs	r3, 7
     e6a:	81 91       	ld	r24, Z+
     e6c:	5f 01       	movw	r10, r30
     e6e:	b6 01       	movw	r22, r12
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 9a 09 	call	0x1334	; 0x1334 <fputc>
     e76:	21 10       	cpse	r2, r1
     e78:	2a 94       	dec	r2
     e7a:	21 e0       	ldi	r18, 0x01	; 1
     e7c:	82 1a       	sub	r8, r18
     e7e:	91 08       	sbc	r9, r1
     e80:	81 14       	cp	r8, r1
     e82:	91 04       	cpc	r9, r1
     e84:	71 f7       	brne	.-36     	; 0xe62 <vfprintf+0x1a4>
     e86:	e8 c0       	rjmp	.+464    	; 0x1058 <vfprintf+0x39a>
     e88:	84 36       	cpi	r24, 0x64	; 100
     e8a:	11 f0       	breq	.+4      	; 0xe90 <vfprintf+0x1d2>
     e8c:	89 36       	cpi	r24, 0x69	; 105
     e8e:	41 f5       	brne	.+80     	; 0xee0 <vfprintf+0x222>
     e90:	f8 01       	movw	r30, r16
     e92:	37 fe       	sbrs	r3, 7
     e94:	07 c0       	rjmp	.+14     	; 0xea4 <vfprintf+0x1e6>
     e96:	60 81       	ld	r22, Z
     e98:	71 81       	ldd	r23, Z+1	; 0x01
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	0c 5f       	subi	r16, 0xFC	; 252
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	08 c0       	rjmp	.+16     	; 0xeb4 <vfprintf+0x1f6>
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	07 2e       	mov	r0, r23
     eaa:	00 0c       	add	r0, r0
     eac:	88 0b       	sbc	r24, r24
     eae:	99 0b       	sbc	r25, r25
     eb0:	0e 5f       	subi	r16, 0xFE	; 254
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
     eb4:	f3 2d       	mov	r31, r3
     eb6:	ff 76       	andi	r31, 0x6F	; 111
     eb8:	3f 2e       	mov	r3, r31
     eba:	97 ff       	sbrs	r25, 7
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <vfprintf+0x212>
     ebe:	90 95       	com	r25
     ec0:	80 95       	com	r24
     ec2:	70 95       	com	r23
     ec4:	61 95       	neg	r22
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	8f 4f       	sbci	r24, 0xFF	; 255
     eca:	9f 4f       	sbci	r25, 0xFF	; 255
     ecc:	f0 68       	ori	r31, 0x80	; 128
     ece:	3f 2e       	mov	r3, r31
     ed0:	2a e0       	ldi	r18, 0x0A	; 10
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	a3 01       	movw	r20, r6
     ed6:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__ultoa_invert>
     eda:	88 2e       	mov	r8, r24
     edc:	86 18       	sub	r8, r6
     ede:	45 c0       	rjmp	.+138    	; 0xf6a <vfprintf+0x2ac>
     ee0:	85 37       	cpi	r24, 0x75	; 117
     ee2:	31 f4       	brne	.+12     	; 0xef0 <vfprintf+0x232>
     ee4:	23 2d       	mov	r18, r3
     ee6:	2f 7e       	andi	r18, 0xEF	; 239
     ee8:	b2 2e       	mov	r11, r18
     eea:	2a e0       	ldi	r18, 0x0A	; 10
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	25 c0       	rjmp	.+74     	; 0xf3a <vfprintf+0x27c>
     ef0:	93 2d       	mov	r25, r3
     ef2:	99 7f       	andi	r25, 0xF9	; 249
     ef4:	b9 2e       	mov	r11, r25
     ef6:	8f 36       	cpi	r24, 0x6F	; 111
     ef8:	c1 f0       	breq	.+48     	; 0xf2a <vfprintf+0x26c>
     efa:	18 f4       	brcc	.+6      	; 0xf02 <vfprintf+0x244>
     efc:	88 35       	cpi	r24, 0x58	; 88
     efe:	79 f0       	breq	.+30     	; 0xf1e <vfprintf+0x260>
     f00:	b5 c0       	rjmp	.+362    	; 0x106c <vfprintf+0x3ae>
     f02:	80 37       	cpi	r24, 0x70	; 112
     f04:	19 f0       	breq	.+6      	; 0xf0c <vfprintf+0x24e>
     f06:	88 37       	cpi	r24, 0x78	; 120
     f08:	21 f0       	breq	.+8      	; 0xf12 <vfprintf+0x254>
     f0a:	b0 c0       	rjmp	.+352    	; 0x106c <vfprintf+0x3ae>
     f0c:	e9 2f       	mov	r30, r25
     f0e:	e0 61       	ori	r30, 0x10	; 16
     f10:	be 2e       	mov	r11, r30
     f12:	b4 fe       	sbrs	r11, 4
     f14:	0d c0       	rjmp	.+26     	; 0xf30 <vfprintf+0x272>
     f16:	fb 2d       	mov	r31, r11
     f18:	f4 60       	ori	r31, 0x04	; 4
     f1a:	bf 2e       	mov	r11, r31
     f1c:	09 c0       	rjmp	.+18     	; 0xf30 <vfprintf+0x272>
     f1e:	34 fe       	sbrs	r3, 4
     f20:	0a c0       	rjmp	.+20     	; 0xf36 <vfprintf+0x278>
     f22:	29 2f       	mov	r18, r25
     f24:	26 60       	ori	r18, 0x06	; 6
     f26:	b2 2e       	mov	r11, r18
     f28:	06 c0       	rjmp	.+12     	; 0xf36 <vfprintf+0x278>
     f2a:	28 e0       	ldi	r18, 0x08	; 8
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	05 c0       	rjmp	.+10     	; 0xf3a <vfprintf+0x27c>
     f30:	20 e1       	ldi	r18, 0x10	; 16
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x27c>
     f36:	20 e1       	ldi	r18, 0x10	; 16
     f38:	32 e0       	ldi	r19, 0x02	; 2
     f3a:	f8 01       	movw	r30, r16
     f3c:	b7 fe       	sbrs	r11, 7
     f3e:	07 c0       	rjmp	.+14     	; 0xf4e <vfprintf+0x290>
     f40:	60 81       	ld	r22, Z
     f42:	71 81       	ldd	r23, Z+1	; 0x01
     f44:	82 81       	ldd	r24, Z+2	; 0x02
     f46:	93 81       	ldd	r25, Z+3	; 0x03
     f48:	0c 5f       	subi	r16, 0xFC	; 252
     f4a:	1f 4f       	sbci	r17, 0xFF	; 255
     f4c:	06 c0       	rjmp	.+12     	; 0xf5a <vfprintf+0x29c>
     f4e:	60 81       	ld	r22, Z
     f50:	71 81       	ldd	r23, Z+1	; 0x01
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 5f       	subi	r16, 0xFE	; 254
     f58:	1f 4f       	sbci	r17, 0xFF	; 255
     f5a:	a3 01       	movw	r20, r6
     f5c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <__ultoa_invert>
     f60:	88 2e       	mov	r8, r24
     f62:	86 18       	sub	r8, r6
     f64:	fb 2d       	mov	r31, r11
     f66:	ff 77       	andi	r31, 0x7F	; 127
     f68:	3f 2e       	mov	r3, r31
     f6a:	36 fe       	sbrs	r3, 6
     f6c:	0d c0       	rjmp	.+26     	; 0xf88 <vfprintf+0x2ca>
     f6e:	23 2d       	mov	r18, r3
     f70:	2e 7f       	andi	r18, 0xFE	; 254
     f72:	a2 2e       	mov	r10, r18
     f74:	89 14       	cp	r8, r9
     f76:	58 f4       	brcc	.+22     	; 0xf8e <vfprintf+0x2d0>
     f78:	34 fe       	sbrs	r3, 4
     f7a:	0b c0       	rjmp	.+22     	; 0xf92 <vfprintf+0x2d4>
     f7c:	32 fc       	sbrc	r3, 2
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <vfprintf+0x2d4>
     f80:	83 2d       	mov	r24, r3
     f82:	8e 7e       	andi	r24, 0xEE	; 238
     f84:	a8 2e       	mov	r10, r24
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <vfprintf+0x2d4>
     f88:	b8 2c       	mov	r11, r8
     f8a:	a3 2c       	mov	r10, r3
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <vfprintf+0x2d6>
     f8e:	b8 2c       	mov	r11, r8
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <vfprintf+0x2d6>
     f92:	b9 2c       	mov	r11, r9
     f94:	a4 fe       	sbrs	r10, 4
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <vfprintf+0x2f8>
     f98:	fe 01       	movw	r30, r28
     f9a:	e8 0d       	add	r30, r8
     f9c:	f1 1d       	adc	r31, r1
     f9e:	80 81       	ld	r24, Z
     fa0:	80 33       	cpi	r24, 0x30	; 48
     fa2:	21 f4       	brne	.+8      	; 0xfac <vfprintf+0x2ee>
     fa4:	9a 2d       	mov	r25, r10
     fa6:	99 7e       	andi	r25, 0xE9	; 233
     fa8:	a9 2e       	mov	r10, r25
     faa:	09 c0       	rjmp	.+18     	; 0xfbe <vfprintf+0x300>
     fac:	a2 fe       	sbrs	r10, 2
     fae:	06 c0       	rjmp	.+12     	; 0xfbc <vfprintf+0x2fe>
     fb0:	b3 94       	inc	r11
     fb2:	b3 94       	inc	r11
     fb4:	04 c0       	rjmp	.+8      	; 0xfbe <vfprintf+0x300>
     fb6:	8a 2d       	mov	r24, r10
     fb8:	86 78       	andi	r24, 0x86	; 134
     fba:	09 f0       	breq	.+2      	; 0xfbe <vfprintf+0x300>
     fbc:	b3 94       	inc	r11
     fbe:	a3 fc       	sbrc	r10, 3
     fc0:	11 c0       	rjmp	.+34     	; 0xfe4 <vfprintf+0x326>
     fc2:	a0 fe       	sbrs	r10, 0
     fc4:	06 c0       	rjmp	.+12     	; 0xfd2 <vfprintf+0x314>
     fc6:	b2 14       	cp	r11, r2
     fc8:	88 f4       	brcc	.+34     	; 0xfec <vfprintf+0x32e>
     fca:	28 0c       	add	r2, r8
     fcc:	92 2c       	mov	r9, r2
     fce:	9b 18       	sub	r9, r11
     fd0:	0e c0       	rjmp	.+28     	; 0xfee <vfprintf+0x330>
     fd2:	b2 14       	cp	r11, r2
     fd4:	60 f4       	brcc	.+24     	; 0xfee <vfprintf+0x330>
     fd6:	b6 01       	movw	r22, r12
     fd8:	80 e2       	ldi	r24, 0x20	; 32
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 9a 09 	call	0x1334	; 0x1334 <fputc>
     fe0:	b3 94       	inc	r11
     fe2:	f7 cf       	rjmp	.-18     	; 0xfd2 <vfprintf+0x314>
     fe4:	b2 14       	cp	r11, r2
     fe6:	18 f4       	brcc	.+6      	; 0xfee <vfprintf+0x330>
     fe8:	2b 18       	sub	r2, r11
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <vfprintf+0x332>
     fec:	98 2c       	mov	r9, r8
     fee:	21 2c       	mov	r2, r1
     ff0:	a4 fe       	sbrs	r10, 4
     ff2:	10 c0       	rjmp	.+32     	; 0x1014 <vfprintf+0x356>
     ff4:	b6 01       	movw	r22, r12
     ff6:	80 e3       	ldi	r24, 0x30	; 48
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 9a 09 	call	0x1334	; 0x1334 <fputc>
     ffe:	a2 fe       	sbrs	r10, 2
    1000:	17 c0       	rjmp	.+46     	; 0x1030 <vfprintf+0x372>
    1002:	a1 fc       	sbrc	r10, 1
    1004:	03 c0       	rjmp	.+6      	; 0x100c <vfprintf+0x34e>
    1006:	88 e7       	ldi	r24, 0x78	; 120
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <vfprintf+0x352>
    100c:	88 e5       	ldi	r24, 0x58	; 88
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	b6 01       	movw	r22, r12
    1012:	0c c0       	rjmp	.+24     	; 0x102c <vfprintf+0x36e>
    1014:	8a 2d       	mov	r24, r10
    1016:	86 78       	andi	r24, 0x86	; 134
    1018:	59 f0       	breq	.+22     	; 0x1030 <vfprintf+0x372>
    101a:	a1 fe       	sbrs	r10, 1
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <vfprintf+0x364>
    101e:	8b e2       	ldi	r24, 0x2B	; 43
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <vfprintf+0x366>
    1022:	80 e2       	ldi	r24, 0x20	; 32
    1024:	a7 fc       	sbrc	r10, 7
    1026:	8d e2       	ldi	r24, 0x2D	; 45
    1028:	b6 01       	movw	r22, r12
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 9a 09 	call	0x1334	; 0x1334 <fputc>
    1030:	89 14       	cp	r8, r9
    1032:	38 f4       	brcc	.+14     	; 0x1042 <vfprintf+0x384>
    1034:	b6 01       	movw	r22, r12
    1036:	80 e3       	ldi	r24, 0x30	; 48
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 94 9a 09 	call	0x1334	; 0x1334 <fputc>
    103e:	9a 94       	dec	r9
    1040:	f7 cf       	rjmp	.-18     	; 0x1030 <vfprintf+0x372>
    1042:	8a 94       	dec	r8
    1044:	f3 01       	movw	r30, r6
    1046:	e8 0d       	add	r30, r8
    1048:	f1 1d       	adc	r31, r1
    104a:	80 81       	ld	r24, Z
    104c:	b6 01       	movw	r22, r12
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 9a 09 	call	0x1334	; 0x1334 <fputc>
    1054:	81 10       	cpse	r8, r1
    1056:	f5 cf       	rjmp	.-22     	; 0x1042 <vfprintf+0x384>
    1058:	22 20       	and	r2, r2
    105a:	09 f4       	brne	.+2      	; 0x105e <vfprintf+0x3a0>
    105c:	42 ce       	rjmp	.-892    	; 0xce2 <vfprintf+0x24>
    105e:	b6 01       	movw	r22, r12
    1060:	80 e2       	ldi	r24, 0x20	; 32
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 9a 09 	call	0x1334	; 0x1334 <fputc>
    1068:	2a 94       	dec	r2
    106a:	f6 cf       	rjmp	.-20     	; 0x1058 <vfprintf+0x39a>
    106c:	f6 01       	movw	r30, r12
    106e:	86 81       	ldd	r24, Z+6	; 0x06
    1070:	97 81       	ldd	r25, Z+7	; 0x07
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <vfprintf+0x3ba>
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	9f ef       	ldi	r25, 0xFF	; 255
    1078:	2b 96       	adiw	r28, 0x0b	; 11
    107a:	e2 e1       	ldi	r30, 0x12	; 18
    107c:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__epilogue_restores__>

00001080 <calloc>:
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	86 9f       	mul	r24, r22
    108a:	80 01       	movw	r16, r0
    108c:	87 9f       	mul	r24, r23
    108e:	10 0d       	add	r17, r0
    1090:	96 9f       	mul	r25, r22
    1092:	10 0d       	add	r17, r0
    1094:	11 24       	eor	r1, r1
    1096:	c8 01       	movw	r24, r16
    1098:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <malloc>
    109c:	ec 01       	movw	r28, r24
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	29 f0       	breq	.+10     	; 0x10ac <calloc+0x2c>
    10a2:	a8 01       	movw	r20, r16
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	0e 94 88 09 	call	0x1310	; 0x1310 <memset>
    10ac:	ce 01       	movw	r24, r28
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	08 95       	ret

000010b8 <malloc>:
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	91 05       	cpc	r25, r1
    10c4:	10 f4       	brcc	.+4      	; 0x10ca <malloc+0x12>
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <__flp>
    10ce:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <__flp+0x1>
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	30 97       	sbiw	r30, 0x00	; 0
    10dc:	19 f1       	breq	.+70     	; 0x1124 <malloc+0x6c>
    10de:	40 81       	ld	r20, Z
    10e0:	51 81       	ldd	r21, Z+1	; 0x01
    10e2:	02 81       	ldd	r16, Z+2	; 0x02
    10e4:	13 81       	ldd	r17, Z+3	; 0x03
    10e6:	48 17       	cp	r20, r24
    10e8:	59 07       	cpc	r21, r25
    10ea:	c8 f0       	brcs	.+50     	; 0x111e <malloc+0x66>
    10ec:	84 17       	cp	r24, r20
    10ee:	95 07       	cpc	r25, r21
    10f0:	69 f4       	brne	.+26     	; 0x110c <malloc+0x54>
    10f2:	10 97       	sbiw	r26, 0x00	; 0
    10f4:	31 f0       	breq	.+12     	; 0x1102 <malloc+0x4a>
    10f6:	12 96       	adiw	r26, 0x02	; 2
    10f8:	0c 93       	st	X, r16
    10fa:	12 97       	sbiw	r26, 0x02	; 2
    10fc:	13 96       	adiw	r26, 0x03	; 3
    10fe:	1c 93       	st	X, r17
    1100:	27 c0       	rjmp	.+78     	; 0x1150 <malloc+0x98>
    1102:	00 93 14 02 	sts	0x0214, r16	; 0x800214 <__flp>
    1106:	10 93 15 02 	sts	0x0215, r17	; 0x800215 <__flp+0x1>
    110a:	22 c0       	rjmp	.+68     	; 0x1150 <malloc+0x98>
    110c:	21 15       	cp	r18, r1
    110e:	31 05       	cpc	r19, r1
    1110:	19 f0       	breq	.+6      	; 0x1118 <malloc+0x60>
    1112:	42 17       	cp	r20, r18
    1114:	53 07       	cpc	r21, r19
    1116:	18 f4       	brcc	.+6      	; 0x111e <malloc+0x66>
    1118:	9a 01       	movw	r18, r20
    111a:	bd 01       	movw	r22, r26
    111c:	ef 01       	movw	r28, r30
    111e:	df 01       	movw	r26, r30
    1120:	f8 01       	movw	r30, r16
    1122:	db cf       	rjmp	.-74     	; 0x10da <malloc+0x22>
    1124:	21 15       	cp	r18, r1
    1126:	31 05       	cpc	r19, r1
    1128:	f9 f0       	breq	.+62     	; 0x1168 <malloc+0xb0>
    112a:	28 1b       	sub	r18, r24
    112c:	39 0b       	sbc	r19, r25
    112e:	24 30       	cpi	r18, 0x04	; 4
    1130:	31 05       	cpc	r19, r1
    1132:	80 f4       	brcc	.+32     	; 0x1154 <malloc+0x9c>
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	9b 81       	ldd	r25, Y+3	; 0x03
    1138:	61 15       	cp	r22, r1
    113a:	71 05       	cpc	r23, r1
    113c:	21 f0       	breq	.+8      	; 0x1146 <malloc+0x8e>
    113e:	fb 01       	movw	r30, r22
    1140:	93 83       	std	Z+3, r25	; 0x03
    1142:	82 83       	std	Z+2, r24	; 0x02
    1144:	04 c0       	rjmp	.+8      	; 0x114e <malloc+0x96>
    1146:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__flp+0x1>
    114a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__flp>
    114e:	fe 01       	movw	r30, r28
    1150:	32 96       	adiw	r30, 0x02	; 2
    1152:	44 c0       	rjmp	.+136    	; 0x11dc <malloc+0x124>
    1154:	fe 01       	movw	r30, r28
    1156:	e2 0f       	add	r30, r18
    1158:	f3 1f       	adc	r31, r19
    115a:	81 93       	st	Z+, r24
    115c:	91 93       	st	Z+, r25
    115e:	22 50       	subi	r18, 0x02	; 2
    1160:	31 09       	sbc	r19, r1
    1162:	39 83       	std	Y+1, r19	; 0x01
    1164:	28 83       	st	Y, r18
    1166:	3a c0       	rjmp	.+116    	; 0x11dc <malloc+0x124>
    1168:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__brkval>
    116c:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__brkval+0x1>
    1170:	23 2b       	or	r18, r19
    1172:	41 f4       	brne	.+16     	; 0x1184 <malloc+0xcc>
    1174:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1178:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    117c:	30 93 13 02 	sts	0x0213, r19	; 0x800213 <__brkval+0x1>
    1180:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <__brkval>
    1184:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1188:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    118c:	21 15       	cp	r18, r1
    118e:	31 05       	cpc	r19, r1
    1190:	41 f4       	brne	.+16     	; 0x11a2 <malloc+0xea>
    1192:	2d b7       	in	r18, 0x3d	; 61
    1194:	3e b7       	in	r19, 0x3e	; 62
    1196:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    119a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    119e:	24 1b       	sub	r18, r20
    11a0:	35 0b       	sbc	r19, r21
    11a2:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <__brkval>
    11a6:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <__brkval+0x1>
    11aa:	e2 17       	cp	r30, r18
    11ac:	f3 07       	cpc	r31, r19
    11ae:	a0 f4       	brcc	.+40     	; 0x11d8 <malloc+0x120>
    11b0:	2e 1b       	sub	r18, r30
    11b2:	3f 0b       	sbc	r19, r31
    11b4:	28 17       	cp	r18, r24
    11b6:	39 07       	cpc	r19, r25
    11b8:	78 f0       	brcs	.+30     	; 0x11d8 <malloc+0x120>
    11ba:	ac 01       	movw	r20, r24
    11bc:	4e 5f       	subi	r20, 0xFE	; 254
    11be:	5f 4f       	sbci	r21, 0xFF	; 255
    11c0:	24 17       	cp	r18, r20
    11c2:	35 07       	cpc	r19, r21
    11c4:	48 f0       	brcs	.+18     	; 0x11d8 <malloc+0x120>
    11c6:	4e 0f       	add	r20, r30
    11c8:	5f 1f       	adc	r21, r31
    11ca:	50 93 13 02 	sts	0x0213, r21	; 0x800213 <__brkval+0x1>
    11ce:	40 93 12 02 	sts	0x0212, r20	; 0x800212 <__brkval>
    11d2:	81 93       	st	Z+, r24
    11d4:	91 93       	st	Z+, r25
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <malloc+0x124>
    11d8:	e0 e0       	ldi	r30, 0x00	; 0
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	cf 01       	movw	r24, r30
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	08 95       	ret

000011e8 <free>:
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	00 97       	sbiw	r24, 0x00	; 0
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <free+0xa>
    11f0:	81 c0       	rjmp	.+258    	; 0x12f4 <free+0x10c>
    11f2:	fc 01       	movw	r30, r24
    11f4:	32 97       	sbiw	r30, 0x02	; 2
    11f6:	13 82       	std	Z+3, r1	; 0x03
    11f8:	12 82       	std	Z+2, r1	; 0x02
    11fa:	a0 91 14 02 	lds	r26, 0x0214	; 0x800214 <__flp>
    11fe:	b0 91 15 02 	lds	r27, 0x0215	; 0x800215 <__flp+0x1>
    1202:	10 97       	sbiw	r26, 0x00	; 0
    1204:	81 f4       	brne	.+32     	; 0x1226 <free+0x3e>
    1206:	20 81       	ld	r18, Z
    1208:	31 81       	ldd	r19, Z+1	; 0x01
    120a:	82 0f       	add	r24, r18
    120c:	93 1f       	adc	r25, r19
    120e:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__brkval>
    1212:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__brkval+0x1>
    1216:	28 17       	cp	r18, r24
    1218:	39 07       	cpc	r19, r25
    121a:	51 f5       	brne	.+84     	; 0x1270 <free+0x88>
    121c:	f0 93 13 02 	sts	0x0213, r31	; 0x800213 <__brkval+0x1>
    1220:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <__brkval>
    1224:	67 c0       	rjmp	.+206    	; 0x12f4 <free+0x10c>
    1226:	ed 01       	movw	r28, r26
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	ce 17       	cp	r28, r30
    122e:	df 07       	cpc	r29, r31
    1230:	40 f4       	brcc	.+16     	; 0x1242 <free+0x5a>
    1232:	4a 81       	ldd	r20, Y+2	; 0x02
    1234:	5b 81       	ldd	r21, Y+3	; 0x03
    1236:	9e 01       	movw	r18, r28
    1238:	41 15       	cp	r20, r1
    123a:	51 05       	cpc	r21, r1
    123c:	f1 f0       	breq	.+60     	; 0x127a <free+0x92>
    123e:	ea 01       	movw	r28, r20
    1240:	f5 cf       	rjmp	.-22     	; 0x122c <free+0x44>
    1242:	d3 83       	std	Z+3, r29	; 0x03
    1244:	c2 83       	std	Z+2, r28	; 0x02
    1246:	40 81       	ld	r20, Z
    1248:	51 81       	ldd	r21, Z+1	; 0x01
    124a:	84 0f       	add	r24, r20
    124c:	95 1f       	adc	r25, r21
    124e:	c8 17       	cp	r28, r24
    1250:	d9 07       	cpc	r29, r25
    1252:	59 f4       	brne	.+22     	; 0x126a <free+0x82>
    1254:	88 81       	ld	r24, Y
    1256:	99 81       	ldd	r25, Y+1	; 0x01
    1258:	84 0f       	add	r24, r20
    125a:	95 1f       	adc	r25, r21
    125c:	02 96       	adiw	r24, 0x02	; 2
    125e:	91 83       	std	Z+1, r25	; 0x01
    1260:	80 83       	st	Z, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	9b 81       	ldd	r25, Y+3	; 0x03
    1266:	93 83       	std	Z+3, r25	; 0x03
    1268:	82 83       	std	Z+2, r24	; 0x02
    126a:	21 15       	cp	r18, r1
    126c:	31 05       	cpc	r19, r1
    126e:	29 f4       	brne	.+10     	; 0x127a <free+0x92>
    1270:	f0 93 15 02 	sts	0x0215, r31	; 0x800215 <__flp+0x1>
    1274:	e0 93 14 02 	sts	0x0214, r30	; 0x800214 <__flp>
    1278:	3d c0       	rjmp	.+122    	; 0x12f4 <free+0x10c>
    127a:	e9 01       	movw	r28, r18
    127c:	fb 83       	std	Y+3, r31	; 0x03
    127e:	ea 83       	std	Y+2, r30	; 0x02
    1280:	49 91       	ld	r20, Y+
    1282:	59 91       	ld	r21, Y+
    1284:	c4 0f       	add	r28, r20
    1286:	d5 1f       	adc	r29, r21
    1288:	ec 17       	cp	r30, r28
    128a:	fd 07       	cpc	r31, r29
    128c:	61 f4       	brne	.+24     	; 0x12a6 <free+0xbe>
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	84 0f       	add	r24, r20
    1294:	95 1f       	adc	r25, r21
    1296:	02 96       	adiw	r24, 0x02	; 2
    1298:	e9 01       	movw	r28, r18
    129a:	99 83       	std	Y+1, r25	; 0x01
    129c:	88 83       	st	Y, r24
    129e:	82 81       	ldd	r24, Z+2	; 0x02
    12a0:	93 81       	ldd	r25, Z+3	; 0x03
    12a2:	9b 83       	std	Y+3, r25	; 0x03
    12a4:	8a 83       	std	Y+2, r24	; 0x02
    12a6:	e0 e0       	ldi	r30, 0x00	; 0
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	12 96       	adiw	r26, 0x02	; 2
    12ac:	8d 91       	ld	r24, X+
    12ae:	9c 91       	ld	r25, X
    12b0:	13 97       	sbiw	r26, 0x03	; 3
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	19 f0       	breq	.+6      	; 0x12bc <free+0xd4>
    12b6:	fd 01       	movw	r30, r26
    12b8:	dc 01       	movw	r26, r24
    12ba:	f7 cf       	rjmp	.-18     	; 0x12aa <free+0xc2>
    12bc:	8d 91       	ld	r24, X+
    12be:	9c 91       	ld	r25, X
    12c0:	11 97       	sbiw	r26, 0x01	; 1
    12c2:	9d 01       	movw	r18, r26
    12c4:	2e 5f       	subi	r18, 0xFE	; 254
    12c6:	3f 4f       	sbci	r19, 0xFF	; 255
    12c8:	82 0f       	add	r24, r18
    12ca:	93 1f       	adc	r25, r19
    12cc:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__brkval>
    12d0:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <__brkval+0x1>
    12d4:	28 17       	cp	r18, r24
    12d6:	39 07       	cpc	r19, r25
    12d8:	69 f4       	brne	.+26     	; 0x12f4 <free+0x10c>
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <free+0x100>
    12de:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <__flp+0x1>
    12e2:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__flp>
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <free+0x104>
    12e8:	13 82       	std	Z+3, r1	; 0x03
    12ea:	12 82       	std	Z+2, r1	; 0x02
    12ec:	b0 93 13 02 	sts	0x0213, r27	; 0x800213 <__brkval+0x1>
    12f0:	a0 93 12 02 	sts	0x0212, r26	; 0x800212 <__brkval>
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	08 95       	ret

000012fa <strnlen_P>:
    12fa:	fc 01       	movw	r30, r24
    12fc:	05 90       	lpm	r0, Z+
    12fe:	61 50       	subi	r22, 0x01	; 1
    1300:	70 40       	sbci	r23, 0x00	; 0
    1302:	01 10       	cpse	r0, r1
    1304:	d8 f7       	brcc	.-10     	; 0x12fc <strnlen_P+0x2>
    1306:	80 95       	com	r24
    1308:	90 95       	com	r25
    130a:	8e 0f       	add	r24, r30
    130c:	9f 1f       	adc	r25, r31
    130e:	08 95       	ret

00001310 <memset>:
    1310:	dc 01       	movw	r26, r24
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <memset+0x6>
    1314:	6d 93       	st	X+, r22
    1316:	41 50       	subi	r20, 0x01	; 1
    1318:	50 40       	sbci	r21, 0x00	; 0
    131a:	e0 f7       	brcc	.-8      	; 0x1314 <memset+0x4>
    131c:	08 95       	ret

0000131e <strnlen>:
    131e:	fc 01       	movw	r30, r24
    1320:	61 50       	subi	r22, 0x01	; 1
    1322:	70 40       	sbci	r23, 0x00	; 0
    1324:	01 90       	ld	r0, Z+
    1326:	01 10       	cpse	r0, r1
    1328:	d8 f7       	brcc	.-10     	; 0x1320 <strnlen+0x2>
    132a:	80 95       	com	r24
    132c:	90 95       	com	r25
    132e:	8e 0f       	add	r24, r30
    1330:	9f 1f       	adc	r25, r31
    1332:	08 95       	ret

00001334 <fputc>:
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	fb 01       	movw	r30, r22
    133e:	23 81       	ldd	r18, Z+3	; 0x03
    1340:	21 fd       	sbrc	r18, 1
    1342:	03 c0       	rjmp	.+6      	; 0x134a <fputc+0x16>
    1344:	8f ef       	ldi	r24, 0xFF	; 255
    1346:	9f ef       	ldi	r25, 0xFF	; 255
    1348:	2c c0       	rjmp	.+88     	; 0x13a2 <fputc+0x6e>
    134a:	22 ff       	sbrs	r18, 2
    134c:	16 c0       	rjmp	.+44     	; 0x137a <fputc+0x46>
    134e:	46 81       	ldd	r20, Z+6	; 0x06
    1350:	57 81       	ldd	r21, Z+7	; 0x07
    1352:	24 81       	ldd	r18, Z+4	; 0x04
    1354:	35 81       	ldd	r19, Z+5	; 0x05
    1356:	42 17       	cp	r20, r18
    1358:	53 07       	cpc	r21, r19
    135a:	44 f4       	brge	.+16     	; 0x136c <fputc+0x38>
    135c:	a0 81       	ld	r26, Z
    135e:	b1 81       	ldd	r27, Z+1	; 0x01
    1360:	9d 01       	movw	r18, r26
    1362:	2f 5f       	subi	r18, 0xFF	; 255
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	31 83       	std	Z+1, r19	; 0x01
    1368:	20 83       	st	Z, r18
    136a:	8c 93       	st	X, r24
    136c:	26 81       	ldd	r18, Z+6	; 0x06
    136e:	37 81       	ldd	r19, Z+7	; 0x07
    1370:	2f 5f       	subi	r18, 0xFF	; 255
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	37 83       	std	Z+7, r19	; 0x07
    1376:	26 83       	std	Z+6, r18	; 0x06
    1378:	14 c0       	rjmp	.+40     	; 0x13a2 <fputc+0x6e>
    137a:	8b 01       	movw	r16, r22
    137c:	ec 01       	movw	r28, r24
    137e:	fb 01       	movw	r30, r22
    1380:	00 84       	ldd	r0, Z+8	; 0x08
    1382:	f1 85       	ldd	r31, Z+9	; 0x09
    1384:	e0 2d       	mov	r30, r0
    1386:	09 95       	icall
    1388:	89 2b       	or	r24, r25
    138a:	e1 f6       	brne	.-72     	; 0x1344 <fputc+0x10>
    138c:	d8 01       	movw	r26, r16
    138e:	16 96       	adiw	r26, 0x06	; 6
    1390:	8d 91       	ld	r24, X+
    1392:	9c 91       	ld	r25, X
    1394:	17 97       	sbiw	r26, 0x07	; 7
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	17 96       	adiw	r26, 0x07	; 7
    139a:	9c 93       	st	X, r25
    139c:	8e 93       	st	-X, r24
    139e:	16 97       	sbiw	r26, 0x06	; 6
    13a0:	ce 01       	movw	r24, r28
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	1f 91       	pop	r17
    13a8:	0f 91       	pop	r16
    13aa:	08 95       	ret

000013ac <__ultoa_invert>:
    13ac:	fa 01       	movw	r30, r20
    13ae:	aa 27       	eor	r26, r26
    13b0:	28 30       	cpi	r18, 0x08	; 8
    13b2:	51 f1       	breq	.+84     	; 0x1408 <__ultoa_invert+0x5c>
    13b4:	20 31       	cpi	r18, 0x10	; 16
    13b6:	81 f1       	breq	.+96     	; 0x1418 <__ultoa_invert+0x6c>
    13b8:	e8 94       	clt
    13ba:	6f 93       	push	r22
    13bc:	6e 7f       	andi	r22, 0xFE	; 254
    13be:	6e 5f       	subi	r22, 0xFE	; 254
    13c0:	7f 4f       	sbci	r23, 0xFF	; 255
    13c2:	8f 4f       	sbci	r24, 0xFF	; 255
    13c4:	9f 4f       	sbci	r25, 0xFF	; 255
    13c6:	af 4f       	sbci	r26, 0xFF	; 255
    13c8:	b1 e0       	ldi	r27, 0x01	; 1
    13ca:	3e d0       	rcall	.+124    	; 0x1448 <__ultoa_invert+0x9c>
    13cc:	b4 e0       	ldi	r27, 0x04	; 4
    13ce:	3c d0       	rcall	.+120    	; 0x1448 <__ultoa_invert+0x9c>
    13d0:	67 0f       	add	r22, r23
    13d2:	78 1f       	adc	r23, r24
    13d4:	89 1f       	adc	r24, r25
    13d6:	9a 1f       	adc	r25, r26
    13d8:	a1 1d       	adc	r26, r1
    13da:	68 0f       	add	r22, r24
    13dc:	79 1f       	adc	r23, r25
    13de:	8a 1f       	adc	r24, r26
    13e0:	91 1d       	adc	r25, r1
    13e2:	a1 1d       	adc	r26, r1
    13e4:	6a 0f       	add	r22, r26
    13e6:	71 1d       	adc	r23, r1
    13e8:	81 1d       	adc	r24, r1
    13ea:	91 1d       	adc	r25, r1
    13ec:	a1 1d       	adc	r26, r1
    13ee:	20 d0       	rcall	.+64     	; 0x1430 <__ultoa_invert+0x84>
    13f0:	09 f4       	brne	.+2      	; 0x13f4 <__ultoa_invert+0x48>
    13f2:	68 94       	set
    13f4:	3f 91       	pop	r19
    13f6:	2a e0       	ldi	r18, 0x0A	; 10
    13f8:	26 9f       	mul	r18, r22
    13fa:	11 24       	eor	r1, r1
    13fc:	30 19       	sub	r19, r0
    13fe:	30 5d       	subi	r19, 0xD0	; 208
    1400:	31 93       	st	Z+, r19
    1402:	de f6       	brtc	.-74     	; 0x13ba <__ultoa_invert+0xe>
    1404:	cf 01       	movw	r24, r30
    1406:	08 95       	ret
    1408:	46 2f       	mov	r20, r22
    140a:	47 70       	andi	r20, 0x07	; 7
    140c:	40 5d       	subi	r20, 0xD0	; 208
    140e:	41 93       	st	Z+, r20
    1410:	b3 e0       	ldi	r27, 0x03	; 3
    1412:	0f d0       	rcall	.+30     	; 0x1432 <__ultoa_invert+0x86>
    1414:	c9 f7       	brne	.-14     	; 0x1408 <__ultoa_invert+0x5c>
    1416:	f6 cf       	rjmp	.-20     	; 0x1404 <__ultoa_invert+0x58>
    1418:	46 2f       	mov	r20, r22
    141a:	4f 70       	andi	r20, 0x0F	; 15
    141c:	40 5d       	subi	r20, 0xD0	; 208
    141e:	4a 33       	cpi	r20, 0x3A	; 58
    1420:	18 f0       	brcs	.+6      	; 0x1428 <__ultoa_invert+0x7c>
    1422:	49 5d       	subi	r20, 0xD9	; 217
    1424:	31 fd       	sbrc	r19, 1
    1426:	40 52       	subi	r20, 0x20	; 32
    1428:	41 93       	st	Z+, r20
    142a:	02 d0       	rcall	.+4      	; 0x1430 <__ultoa_invert+0x84>
    142c:	a9 f7       	brne	.-22     	; 0x1418 <__ultoa_invert+0x6c>
    142e:	ea cf       	rjmp	.-44     	; 0x1404 <__ultoa_invert+0x58>
    1430:	b4 e0       	ldi	r27, 0x04	; 4
    1432:	a6 95       	lsr	r26
    1434:	97 95       	ror	r25
    1436:	87 95       	ror	r24
    1438:	77 95       	ror	r23
    143a:	67 95       	ror	r22
    143c:	ba 95       	dec	r27
    143e:	c9 f7       	brne	.-14     	; 0x1432 <__ultoa_invert+0x86>
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	61 05       	cpc	r22, r1
    1444:	71 05       	cpc	r23, r1
    1446:	08 95       	ret
    1448:	9b 01       	movw	r18, r22
    144a:	ac 01       	movw	r20, r24
    144c:	0a 2e       	mov	r0, r26
    144e:	06 94       	lsr	r0
    1450:	57 95       	ror	r21
    1452:	47 95       	ror	r20
    1454:	37 95       	ror	r19
    1456:	27 95       	ror	r18
    1458:	ba 95       	dec	r27
    145a:	c9 f7       	brne	.-14     	; 0x144e <__ultoa_invert+0xa2>
    145c:	62 0f       	add	r22, r18
    145e:	73 1f       	adc	r23, r19
    1460:	84 1f       	adc	r24, r20
    1462:	95 1f       	adc	r25, r21
    1464:	a0 1d       	adc	r26, r0
    1466:	08 95       	ret

00001468 <__prologue_saves__>:
    1468:	2f 92       	push	r2
    146a:	3f 92       	push	r3
    146c:	4f 92       	push	r4
    146e:	5f 92       	push	r5
    1470:	6f 92       	push	r6
    1472:	7f 92       	push	r7
    1474:	8f 92       	push	r8
    1476:	9f 92       	push	r9
    1478:	af 92       	push	r10
    147a:	bf 92       	push	r11
    147c:	cf 92       	push	r12
    147e:	df 92       	push	r13
    1480:	ef 92       	push	r14
    1482:	ff 92       	push	r15
    1484:	0f 93       	push	r16
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	ca 1b       	sub	r28, r26
    1492:	db 0b       	sbc	r29, r27
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	09 94       	ijmp

000014a0 <__epilogue_restores__>:
    14a0:	2a 88       	ldd	r2, Y+18	; 0x12
    14a2:	39 88       	ldd	r3, Y+17	; 0x11
    14a4:	48 88       	ldd	r4, Y+16	; 0x10
    14a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    14a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    14aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    14ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    14ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    14b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    14b2:	b9 84       	ldd	r11, Y+9	; 0x09
    14b4:	c8 84       	ldd	r12, Y+8	; 0x08
    14b6:	df 80       	ldd	r13, Y+7	; 0x07
    14b8:	ee 80       	ldd	r14, Y+6	; 0x06
    14ba:	fd 80       	ldd	r15, Y+5	; 0x05
    14bc:	0c 81       	ldd	r16, Y+4	; 0x04
    14be:	1b 81       	ldd	r17, Y+3	; 0x03
    14c0:	aa 81       	ldd	r26, Y+2	; 0x02
    14c2:	b9 81       	ldd	r27, Y+1	; 0x01
    14c4:	ce 0f       	add	r28, r30
    14c6:	d1 1d       	adc	r29, r1
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
    14d2:	ed 01       	movw	r28, r26
    14d4:	08 95       	ret

000014d6 <_exit>:
    14d6:	f8 94       	cli

000014d8 <__stop_program>:
    14d8:	ff cf       	rjmp	.-2      	; 0x14d8 <__stop_program>
