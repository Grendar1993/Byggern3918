
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00000c8a  00000d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001a0  008001a0  00000dbe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e03  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a03  00000000  00000000  00001d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000735  00000000  00000000  0000271e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00002e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004dd  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000459  00000000  00000000  00003489  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000038e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e8       	ldi	r30, 0x8A	; 138
  84:	fc e0       	ldi	r31, 0x0C	; 12
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 3a       	cpi	r26, 0xA0	; 160
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 ea       	ldi	r26, 0xA0	; 160
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	ac 3a       	cpi	r26, 0xAC	; 172
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 4a 01 	call	0x294	; 0x294 <main>
  a6:	0c 94 43 06 	jmp	0xc86	; 0xc86 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
#include "setup.h"
#include <util/delay.h>

int ADC_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	DDRB &= ~(1<<PIND2);
  ba:	ba 98       	cbi	0x17, 2	; 23
	
	return 0;
}
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	08 95       	ret

000000c2 <ADC_read>:

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	48 f4       	brcc	.+18     	; 0xd8 <ADC_read+0x16>
	
	//Choose channel in ADC
	*adc = 0x04 | channel;
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	f4 e1       	ldi	r31, 0x14	; 20
  cc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	84 ea       	ldi	r24, 0xA4	; 164
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <ADC_read+0xe>
	
	//Wait for the data to be read (this can be done with an interrupt)
	//while(test_bit(PIND, PIND2));
	_delay_us(100);
	return *adc;
  d4:	80 81       	ld	r24, Z
  d6:	08 95       	ret

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
  d8:	80 e0       	ldi	r24, 0x00	; 0
	
	//Wait for the data to be read (this can be done with an interrupt)
	//while(test_bit(PIND, PIND2));
	_delay_us(100);
	return *adc;
  da:	08 95       	ret

000000dc <JOY_calibrate>:
	return 0;
}


int JOY_calibrate(void) {
	mid_x=ADC_read(0);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
  e2:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <mid_x>
	mid_y=ADC_read(1);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
  ec:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
	return 0;
}
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	08 95       	ret

000000f6 <joy_init>:

uint8_t mid_x, mid_y;

int joy_init(void){
	// sette opp adc
	ADC_init();
  f6:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	
	//Set Button pins to input
	DDRB &= ~(1<<PINB0) & ~(1<<PINB1) & ~(1<<PINB2);
  fa:	87 b3       	in	r24, 0x17	; 23
  fc:	88 7f       	andi	r24, 0xF8	; 248
  fe:	87 bb       	out	0x17, r24	; 23
	//sette opp pullupresistors
	PORTB |= (1<<PINB0) | (1<<PINB1) | (1<<PINB2); 
 100:	88 b3       	in	r24, 0x18	; 24
 102:	87 60       	ori	r24, 0x07	; 7
 104:	88 bb       	out	0x18, r24	; 24
	
	//kalibrasjon init
	JOY_calibrate();
 106:	0e 94 6e 00 	call	0xdc	; 0xdc <JOY_calibrate>
	
	return 0;
}
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	08 95       	ret

00000110 <joy_button>:
	mid_y=ADC_read(1);
	return 0;
}

int joy_button(int button){
	switch (button) {
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	91 05       	cpc	r25, r1
 114:	59 f0       	breq	.+22     	; 0x12c <joy_button+0x1c>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	91 05       	cpc	r25, r1
 11a:	79 f0       	breq	.+30     	; 0x13a <joy_button+0x2a>
 11c:	89 2b       	or	r24, r25
 11e:	a9 f4       	brne	.+42     	; 0x14a <joy_button+0x3a>
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
 120:	96 b3       	in	r25, 0x16	; 22
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	89 27       	eor	r24, r25
 126:	81 70       	andi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	08 95       	ret
			break;
		case 1: // left button
			if (!test_bit(PINB,PINB1)) return 1;
 12c:	86 b3       	in	r24, 0x16	; 22
}

int joy_button(int button){
	switch (button) {
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
 12e:	86 95       	lsr	r24
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	89 27       	eor	r24, r25
 134:	81 70       	andi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	08 95       	ret
			break;
		case 1: // left button
			if (!test_bit(PINB,PINB1)) return 1;
			break;	
		case 2: // right button
			if (!test_bit(PINB,PINB2)) return 1;
 13a:	86 b3       	in	r24, 0x16	; 22
}

int joy_button(int button){
	switch (button) {
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
 13c:	86 95       	lsr	r24
 13e:	86 95       	lsr	r24
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	89 27       	eor	r24, r25
 144:	81 70       	andi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 95       	ret
			if (!test_bit(PINB,PINB2)) return 1;
			break;
		default:
				break;
	}
	return 0;
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
}
 14e:	08 95       	ret

00000150 <JOY_getPosition>:

joy_position JOY_getPosition(void) {
 150:	cf 93       	push	r28
	joy_position position;
	uint8_t x, y;
	
	//Read position x from channel 0
	x = ADC_read(1);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
 158:	c8 2f       	mov	r28, r24
	//Read position y from channel 1
	y = ADC_read(0);
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
 160:	e8 2f       	mov	r30, r24
	
	//Calculate position x percentage
	if(x > mid_x) {
 162:	40 91 a1 01 	lds	r20, 0x01A1	; 0x8001a1 <mid_x>
 166:	4c 17       	cp	r20, r28
 168:	98 f4       	brcc	.+38     	; 0x190 <JOY_getPosition+0x40>
		position.x = 100 * (x - mid_x) / (0xFF - mid_x);
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	2c 2f       	mov	r18, r28
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	24 1b       	sub	r18, r20
 172:	35 0b       	sbc	r19, r21
 174:	64 e6       	ldi	r22, 0x64	; 100
 176:	62 9f       	mul	r22, r18
 178:	c0 01       	movw	r24, r0
 17a:	63 9f       	mul	r22, r19
 17c:	90 0d       	add	r25, r0
 17e:	11 24       	eor	r1, r1
 180:	6f ef       	ldi	r22, 0xFF	; 255
 182:	70 e0       	ldi	r23, 0x00	; 0
 184:	64 1b       	sub	r22, r20
 186:	75 0b       	sbc	r23, r21
 188:	0e 94 ae 01 	call	0x35c	; 0x35c <__divmodhi4>
 18c:	46 2f       	mov	r20, r22
 18e:	13 c0       	rjmp	.+38     	; 0x1b6 <JOY_getPosition+0x66>
		} else if (x < mid_x) {
 190:	c4 17       	cp	r28, r20
 192:	80 f4       	brcc	.+32     	; 0x1b4 <JOY_getPosition+0x64>
		position.x = 100 * (x - mid_x) / (mid_x - 0);
 194:	64 2f       	mov	r22, r20
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	2c 2f       	mov	r18, r28
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	26 1b       	sub	r18, r22
 19e:	37 0b       	sbc	r19, r23
 1a0:	44 e6       	ldi	r20, 0x64	; 100
 1a2:	42 9f       	mul	r20, r18
 1a4:	c0 01       	movw	r24, r0
 1a6:	43 9f       	mul	r20, r19
 1a8:	90 0d       	add	r25, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	0e 94 ae 01 	call	0x35c	; 0x35c <__divmodhi4>
 1b0:	46 2f       	mov	r20, r22
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <JOY_getPosition+0x66>
		} else {
		position.x = 0;
 1b4:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	//Calculate position y percentage
	if(y > mid_y) {
 1b6:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end>
 1ba:	2e 17       	cp	r18, r30
 1bc:	90 f4       	brcc	.+36     	; 0x1e2 <JOY_getPosition+0x92>
		position.y = 100 * (y - mid_y) / (0xFF - mid_y);
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	e2 1b       	sub	r30, r18
 1c4:	f3 0b       	sbc	r31, r19
 1c6:	54 e6       	ldi	r21, 0x64	; 100
 1c8:	5e 9f       	mul	r21, r30
 1ca:	c0 01       	movw	r24, r0
 1cc:	5f 9f       	mul	r21, r31
 1ce:	90 0d       	add	r25, r0
 1d0:	11 24       	eor	r1, r1
 1d2:	6f ef       	ldi	r22, 0xFF	; 255
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	62 1b       	sub	r22, r18
 1d8:	73 0b       	sbc	r23, r19
 1da:	0e 94 ae 01 	call	0x35c	; 0x35c <__divmodhi4>
 1de:	76 2f       	mov	r23, r22
 1e0:	13 c0       	rjmp	.+38     	; 0x208 <JOY_getPosition+0xb8>
		} else if (y < mid_y) {
 1e2:	e2 17       	cp	r30, r18
 1e4:	80 f4       	brcc	.+32     	; 0x206 <JOY_getPosition+0xb6>
		position.y = 100 * (y - mid_y) / (mid_y - 0);
 1e6:	62 2f       	mov	r22, r18
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	2e 2f       	mov	r18, r30
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	26 1b       	sub	r18, r22
 1f0:	37 0b       	sbc	r19, r23
 1f2:	54 e6       	ldi	r21, 0x64	; 100
 1f4:	52 9f       	mul	r21, r18
 1f6:	c0 01       	movw	r24, r0
 1f8:	53 9f       	mul	r21, r19
 1fa:	90 0d       	add	r25, r0
 1fc:	11 24       	eor	r1, r1
 1fe:	0e 94 ae 01 	call	0x35c	; 0x35c <__divmodhi4>
 202:	76 2f       	mov	r23, r22
 204:	01 c0       	rjmp	.+2      	; 0x208 <JOY_getPosition+0xb8>
		} else {
		position.y = 0;
 206:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	return position;
}
 208:	64 2f       	mov	r22, r20
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <JOY_getDirection>:

joy_position JOY_getDirection(void) {
	joy_position position;
	
	//Get actual position of joystick
	position = JOY_getPosition();
 212:	0e 94 a8 00 	call	0x150	; 0x150 <JOY_getPosition>
 216:	e7 2f       	mov	r30, r23
 218:	28 2f       	mov	r18, r24
 21a:	39 2f       	mov	r19, r25
	
	if(position.x < -15) {
 21c:	61 3f       	cpi	r22, 0xF1	; 241
 21e:	2c f0       	brlt	.+10     	; 0x22a <JOY_getDirection+0x18>
		position.direction = "LEFT";
		} else if(position.x > 15) {
 220:	60 31       	cpi	r22, 0x10	; 16
 222:	2c f0       	brlt	.+10     	; 0x22e <JOY_getDirection+0x1c>
		position.direction = "RIGHT";
 224:	2b e0       	ldi	r18, 0x0B	; 11
 226:	31 e0       	ldi	r19, 0x01	; 1
 228:	02 c0       	rjmp	.+4      	; 0x22e <JOY_getDirection+0x1c>
	
	//Get actual position of joystick
	position = JOY_getPosition();
	
	if(position.x < -15) {
		position.direction = "LEFT";
 22a:	26 e0       	ldi	r18, 0x06	; 6
 22c:	31 e0       	ldi	r19, 0x01	; 1
		} else if(position.x > 15) {
		position.direction = "RIGHT";
	}
	
	if(position.y < -15) {
 22e:	e1 3f       	cpi	r30, 0xF1	; 241
 230:	2c f0       	brlt	.+10     	; 0x23c <JOY_getDirection+0x2a>
		position.direction = "DOWN";
		} else if(position.y > 15) {
 232:	e0 31       	cpi	r30, 0x10	; 16
 234:	2c f0       	brlt	.+10     	; 0x240 <JOY_getDirection+0x2e>
		position.direction = "UP";
 236:	26 e1       	ldi	r18, 0x16	; 22
 238:	31 e0       	ldi	r19, 0x01	; 1
 23a:	02 c0       	rjmp	.+4      	; 0x240 <JOY_getDirection+0x2e>
		} else if(position.x > 15) {
		position.direction = "RIGHT";
	}
	
	if(position.y < -15) {
		position.direction = "DOWN";
 23c:	21 e1       	ldi	r18, 0x11	; 17
 23e:	31 e0       	ldi	r19, 0x01	; 1
		} else if(position.y > 15) {
		position.direction = "UP";
	}
	
	if((position.x >= -14 && position.x <= 14) && (position.y >= -14 && position.y <= 14)){
 240:	8e e0       	ldi	r24, 0x0E	; 14
 242:	86 0f       	add	r24, r22
 244:	8d 31       	cpi	r24, 0x1D	; 29
 246:	30 f4       	brcc	.+12     	; 0x254 <JOY_getDirection+0x42>
 248:	8e e0       	ldi	r24, 0x0E	; 14
 24a:	87 0f       	add	r24, r23
 24c:	8d 31       	cpi	r24, 0x1D	; 29
 24e:	10 f4       	brcc	.+4      	; 0x254 <JOY_getDirection+0x42>
		position.direction = "NEUTRAL";
 250:	29 e1       	ldi	r18, 0x19	; 25
 252:	31 e0       	ldi	r19, 0x01	; 1
	}
	
	return position;
}
 254:	82 2f       	mov	r24, r18
 256:	93 2f       	mov	r25, r19
 258:	08 95       	ret

0000025a <JOY_getSliderPosition>:

slider_position JOY_getSliderPosition(void) {
 25a:	cf 93       	push	r28
	slider_position position;
	uint8_t l, r;
	
	//Read left slider from channel 2
	l = ADC_read(2);
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
 262:	c8 2f       	mov	r28, r24
	//Read right slider from channel 3
	r = ADC_read(3);
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_read>
 26a:	48 2f       	mov	r20, r24
	
	//Calculate position percentage
	position.left = 100 * l / 0xFF;
	position.right = 100 * r / 0xFF;
	
	return position;
 26c:	24 e6       	ldi	r18, 0x64	; 100
 26e:	2c 9f       	mul	r18, r28
 270:	c0 01       	movw	r24, r0
 272:	11 24       	eor	r1, r1
 274:	ef ef       	ldi	r30, 0xFF	; 255
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	bf 01       	movw	r22, r30
 27a:	0e 94 ae 01 	call	0x35c	; 0x35c <__divmodhi4>
 27e:	36 2f       	mov	r19, r22
 280:	24 9f       	mul	r18, r20
 282:	c0 01       	movw	r24, r0
 284:	11 24       	eor	r1, r1
 286:	bf 01       	movw	r22, r30
 288:	0e 94 ae 01 	call	0x35c	; 0x35c <__divmodhi4>
 28c:	96 2f       	mov	r25, r22
}
 28e:	83 2f       	mov	r24, r19
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <main>:
	joy_position joy_pos;
	slider_position slider_pos;
	int joy_b;
	int left_b;
	int right_b;
	UART_Init(UBRREG);
 294:	8e e1       	ldi	r24, 0x1E	; 30
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 a1 01 	call	0x342	; 0x342 <UART_Init>
	ADC_init();
 29c:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	joy_init();
 2a0:	0e 94 7b 00 	call	0xf6	; 0xf6 <joy_init>
	printf("----TING FUNK----\n\r");
 2a4:	81 e2       	ldi	r24, 0x21	; 33
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	9f 93       	push	r25
 2aa:	8f 93       	push	r24
 2ac:	0e 94 21 02 	call	0x442	; 0x442 <printf>
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
	right_b = joy_button(2);
	
// 	printf("Joystick-button: %d, Right button: %d Left button: %d.\n\r", joy_b, right_b, left_b);
// 	printf("Hoyre slider har posisjon %d og venstre slider har posisjon %d \n \r", slider_pos.right, slider_pos.left);
//  	printf("Posisjon er %s, retning x er %d og retning y er %d \n \r",joy_pos.direction, joy_pos.x, joy_pos.y);
	printf("Joystick-b: %d, Right button: %d, Left button: %d, Right Slider: %d, Left Slider: %d, Joy-pos: %s \n \r \n \r", joy_b, right_b, left_b, slider_pos.right, slider_pos.left, joy_pos.direction);
 2b4:	c5 e3       	ldi	r28, 0x35	; 53
 2b6:	d1 e0       	ldi	r29, 0x01	; 1
	printf("----TING FUNK----\n\r");
	//SRAM_test();
	
	while(1){
	
	joy_pos = JOY_getDirection();
 2b8:	0e 94 09 01 	call	0x212	; 0x212 <JOY_getDirection>
 2bc:	b8 2e       	mov	r11, r24
 2be:	a9 2e       	mov	r10, r25
	slider_pos = JOY_getSliderPosition();
 2c0:	0e 94 2d 01 	call	0x25a	; 0x25a <JOY_getSliderPosition>
 2c4:	c8 2e       	mov	r12, r24
 2c6:	d9 2e       	mov	r13, r25
	joy_b = joy_button(0);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 88 00 	call	0x110	; 0x110 <joy_button>
 2d0:	18 2f       	mov	r17, r24
 2d2:	09 2f       	mov	r16, r25
	left_b = joy_button(1);
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 88 00 	call	0x110	; 0x110 <joy_button>
 2dc:	f8 2e       	mov	r15, r24
 2de:	e9 2e       	mov	r14, r25
	right_b = joy_button(2);
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 88 00 	call	0x110	; 0x110 <joy_button>
	
// 	printf("Joystick-button: %d, Right button: %d Left button: %d.\n\r", joy_b, right_b, left_b);
// 	printf("Hoyre slider har posisjon %d og venstre slider har posisjon %d \n \r", slider_pos.right, slider_pos.left);
//  	printf("Posisjon er %s, retning x er %d og retning y er %d \n \r",joy_pos.direction, joy_pos.x, joy_pos.y);
	printf("Joystick-b: %d, Right button: %d, Left button: %d, Right Slider: %d, Left Slider: %d, Joy-pos: %s \n \r \n \r", joy_b, right_b, left_b, slider_pos.right, slider_pos.left, joy_pos.direction);
 2e8:	af 92       	push	r10
 2ea:	bf 92       	push	r11
 2ec:	1f 92       	push	r1
 2ee:	cf 92       	push	r12
 2f0:	1f 92       	push	r1
 2f2:	df 92       	push	r13
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	9f 93       	push	r25
 2fa:	8f 93       	push	r24
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	df 93       	push	r29
 302:	cf 93       	push	r28
 304:	0e 94 21 02 	call	0x442	; 0x442 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 308:	93 e9       	ldi	r25, 0x93	; 147
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	91 50       	subi	r25, 0x01	; 1
 310:	20 40       	sbci	r18, 0x00	; 0
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x7a>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x84>
 318:	00 00       	nop
 31a:	8d b7       	in	r24, 0x3d	; 61
 31c:	9e b7       	in	r25, 0x3e	; 62
 31e:	0e 96       	adiw	r24, 0x0e	; 14
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	9e bf       	out	0x3e, r25	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	8d bf       	out	0x3d, r24	; 61
 32a:	c6 cf       	rjmp	.-116    	; 0x2b8 <main+0x24>

0000032c <UART_TX>:
}

int UART_TX(char data, FILE * _in){
	(void)(_in);
	
	while( !(UCSR0A & (1 << UDRE0)) );
 32c:	5d 9b       	sbis	0x0b, 5	; 11
 32e:	fe cf       	rjmp	.-4      	; 0x32c <UART_TX>
	
	// send data
	UDR0 = data;
 330:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	08 95       	ret

00000338 <UART_RX>:

int UART_RX(FILE * _in ){
	(void)(_in);
	while( !(UCSR0A & (1 << RXC0)) );
 338:	5f 9b       	sbis	0x0b, 7	; 11
 33a:	fe cf       	rjmp	.-4      	; 0x338 <UART_RX>
	
	// Data recieved
	return UDR0;
 33c:	8c b1       	in	r24, 0x0c	; 12
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	08 95       	ret

00000342 <UART_Init>:


void UART_Init(unsigned int ubrr)
{
	// Baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
 342:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
 344:	89 b9       	out	0x09, r24	; 9
	
	// Enable Rx and Tx
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) ;
 346:	88 e1       	ldi	r24, 0x18	; 24
 348:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
 34a:	8e e8       	ldi	r24, 0x8E	; 142
 34c:	80 bd       	out	0x20, r24	; 32
	fdevopen(UART_TX, UART_RX);
 34e:	6c e9       	ldi	r22, 0x9C	; 156
 350:	71 e0       	ldi	r23, 0x01	; 1
 352:	86 e9       	ldi	r24, 0x96	; 150
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 d6 01 	call	0x3ac	; 0x3ac <fdevopen>
 35a:	08 95       	ret

0000035c <__divmodhi4>:
 35c:	97 fb       	bst	r25, 7
 35e:	07 2e       	mov	r0, r23
 360:	16 f4       	brtc	.+4      	; 0x366 <__divmodhi4+0xa>
 362:	00 94       	com	r0
 364:	07 d0       	rcall	.+14     	; 0x374 <__divmodhi4_neg1>
 366:	77 fd       	sbrc	r23, 7
 368:	09 d0       	rcall	.+18     	; 0x37c <__divmodhi4_neg2>
 36a:	0e 94 c2 01 	call	0x384	; 0x384 <__udivmodhi4>
 36e:	07 fc       	sbrc	r0, 7
 370:	05 d0       	rcall	.+10     	; 0x37c <__divmodhi4_neg2>
 372:	3e f4       	brtc	.+14     	; 0x382 <__divmodhi4_exit>

00000374 <__divmodhi4_neg1>:
 374:	90 95       	com	r25
 376:	81 95       	neg	r24
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	08 95       	ret

0000037c <__divmodhi4_neg2>:
 37c:	70 95       	com	r23
 37e:	61 95       	neg	r22
 380:	7f 4f       	sbci	r23, 0xFF	; 255

00000382 <__divmodhi4_exit>:
 382:	08 95       	ret

00000384 <__udivmodhi4>:
 384:	aa 1b       	sub	r26, r26
 386:	bb 1b       	sub	r27, r27
 388:	51 e1       	ldi	r21, 0x11	; 17
 38a:	07 c0       	rjmp	.+14     	; 0x39a <__udivmodhi4_ep>

0000038c <__udivmodhi4_loop>:
 38c:	aa 1f       	adc	r26, r26
 38e:	bb 1f       	adc	r27, r27
 390:	a6 17       	cp	r26, r22
 392:	b7 07       	cpc	r27, r23
 394:	10 f0       	brcs	.+4      	; 0x39a <__udivmodhi4_ep>
 396:	a6 1b       	sub	r26, r22
 398:	b7 0b       	sbc	r27, r23

0000039a <__udivmodhi4_ep>:
 39a:	88 1f       	adc	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	5a 95       	dec	r21
 3a0:	a9 f7       	brne	.-22     	; 0x38c <__udivmodhi4_loop>
 3a2:	80 95       	com	r24
 3a4:	90 95       	com	r25
 3a6:	bc 01       	movw	r22, r24
 3a8:	cd 01       	movw	r24, r26
 3aa:	08 95       	ret

000003ac <fdevopen>:
 3ac:	0f 93       	push	r16
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	00 97       	sbiw	r24, 0x00	; 0
 3b6:	31 f4       	brne	.+12     	; 0x3c4 <fdevopen+0x18>
 3b8:	61 15       	cp	r22, r1
 3ba:	71 05       	cpc	r23, r1
 3bc:	19 f4       	brne	.+6      	; 0x3c4 <fdevopen+0x18>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	3a c0       	rjmp	.+116    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3c4:	8b 01       	movw	r16, r22
 3c6:	ec 01       	movw	r28, r24
 3c8:	6e e0       	ldi	r22, 0x0E	; 14
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 18 04 	call	0x830	; 0x830 <calloc>
 3d4:	fc 01       	movw	r30, r24
 3d6:	89 2b       	or	r24, r25
 3d8:	91 f3       	breq	.-28     	; 0x3be <fdevopen+0x12>
 3da:	80 e8       	ldi	r24, 0x80	; 128
 3dc:	83 83       	std	Z+3, r24	; 0x03
 3de:	01 15       	cp	r16, r1
 3e0:	11 05       	cpc	r17, r1
 3e2:	71 f0       	breq	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
 3e4:	13 87       	std	Z+11, r17	; 0x0b
 3e6:	02 87       	std	Z+10, r16	; 0x0a
 3e8:	81 e8       	ldi	r24, 0x81	; 129
 3ea:	83 83       	std	Z+3, r24	; 0x03
 3ec:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__iob>
 3f0:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__iob+0x1>
 3f4:	89 2b       	or	r24, r25
 3f6:	21 f4       	brne	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
 3f8:	f0 93 a3 01 	sts	0x01A3, r31	; 0x8001a3 <__iob+0x1>
 3fc:	e0 93 a2 01 	sts	0x01A2, r30	; 0x8001a2 <__iob>
 400:	20 97       	sbiw	r28, 0x00	; 0
 402:	c9 f0       	breq	.+50     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 404:	d1 87       	std	Z+9, r29	; 0x09
 406:	c0 87       	std	Z+8, r28	; 0x08
 408:	83 81       	ldd	r24, Z+3	; 0x03
 40a:	82 60       	ori	r24, 0x02	; 2
 40c:	83 83       	std	Z+3, r24	; 0x03
 40e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__iob+0x2>
 412:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__iob+0x3>
 416:	89 2b       	or	r24, r25
 418:	71 f4       	brne	.+28     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 41a:	f0 93 a5 01 	sts	0x01A5, r31	; 0x8001a5 <__iob+0x3>
 41e:	e0 93 a4 01 	sts	0x01A4, r30	; 0x8001a4 <__iob+0x2>
 422:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__iob+0x4>
 426:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__iob+0x5>
 42a:	89 2b       	or	r24, r25
 42c:	21 f4       	brne	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42e:	f0 93 a7 01 	sts	0x01A7, r31	; 0x8001a7 <__iob+0x5>
 432:	e0 93 a6 01 	sts	0x01A6, r30	; 0x8001a6 <__iob+0x4>
 436:	cf 01       	movw	r24, r30
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	0f 91       	pop	r16
 440:	08 95       	ret

00000442 <printf>:
 442:	a0 e0       	ldi	r26, 0x00	; 0
 444:	b0 e0       	ldi	r27, 0x00	; 0
 446:	e7 e2       	ldi	r30, 0x27	; 39
 448:	f2 e0       	ldi	r31, 0x02	; 2
 44a:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__prologue_saves__+0x20>
 44e:	ae 01       	movw	r20, r28
 450:	4b 5f       	subi	r20, 0xFB	; 251
 452:	5f 4f       	sbci	r21, 0xFF	; 255
 454:	fa 01       	movw	r30, r20
 456:	61 91       	ld	r22, Z+
 458:	71 91       	ld	r23, Z+
 45a:	af 01       	movw	r20, r30
 45c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__iob+0x2>
 460:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__iob+0x3>
 464:	0e 94 37 02 	call	0x46e	; 0x46e <vfprintf>
 468:	e2 e0       	ldi	r30, 0x02	; 2
 46a:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__epilogue_restores__+0x20>

0000046e <vfprintf>:
 46e:	ab e0       	ldi	r26, 0x0B	; 11
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	ed e3       	ldi	r30, 0x3D	; 61
 474:	f2 e0       	ldi	r31, 0x02	; 2
 476:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__prologue_saves__>
 47a:	6c 01       	movw	r12, r24
 47c:	7b 01       	movw	r14, r22
 47e:	8a 01       	movw	r16, r20
 480:	fc 01       	movw	r30, r24
 482:	17 82       	std	Z+7, r1	; 0x07
 484:	16 82       	std	Z+6, r1	; 0x06
 486:	83 81       	ldd	r24, Z+3	; 0x03
 488:	81 ff       	sbrs	r24, 1
 48a:	cc c1       	rjmp	.+920    	; 0x824 <__stack+0x325>
 48c:	ce 01       	movw	r24, r28
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	3c 01       	movw	r6, r24
 492:	f6 01       	movw	r30, r12
 494:	93 81       	ldd	r25, Z+3	; 0x03
 496:	f7 01       	movw	r30, r14
 498:	93 fd       	sbrc	r25, 3
 49a:	85 91       	lpm	r24, Z+
 49c:	93 ff       	sbrs	r25, 3
 49e:	81 91       	ld	r24, Z+
 4a0:	7f 01       	movw	r14, r30
 4a2:	88 23       	and	r24, r24
 4a4:	09 f4       	brne	.+2      	; 0x4a8 <vfprintf+0x3a>
 4a6:	ba c1       	rjmp	.+884    	; 0x81c <__stack+0x31d>
 4a8:	85 32       	cpi	r24, 0x25	; 37
 4aa:	39 f4       	brne	.+14     	; 0x4ba <vfprintf+0x4c>
 4ac:	93 fd       	sbrc	r25, 3
 4ae:	85 91       	lpm	r24, Z+
 4b0:	93 ff       	sbrs	r25, 3
 4b2:	81 91       	ld	r24, Z+
 4b4:	7f 01       	movw	r14, r30
 4b6:	85 32       	cpi	r24, 0x25	; 37
 4b8:	29 f4       	brne	.+10     	; 0x4c4 <vfprintf+0x56>
 4ba:	b6 01       	movw	r22, r12
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 72 05 	call	0xae4	; 0xae4 <fputc>
 4c2:	e7 cf       	rjmp	.-50     	; 0x492 <vfprintf+0x24>
 4c4:	91 2c       	mov	r9, r1
 4c6:	21 2c       	mov	r2, r1
 4c8:	31 2c       	mov	r3, r1
 4ca:	ff e1       	ldi	r31, 0x1F	; 31
 4cc:	f3 15       	cp	r31, r3
 4ce:	d8 f0       	brcs	.+54     	; 0x506 <__stack+0x7>
 4d0:	8b 32       	cpi	r24, 0x2B	; 43
 4d2:	79 f0       	breq	.+30     	; 0x4f2 <vfprintf+0x84>
 4d4:	38 f4       	brcc	.+14     	; 0x4e4 <vfprintf+0x76>
 4d6:	80 32       	cpi	r24, 0x20	; 32
 4d8:	79 f0       	breq	.+30     	; 0x4f8 <vfprintf+0x8a>
 4da:	83 32       	cpi	r24, 0x23	; 35
 4dc:	a1 f4       	brne	.+40     	; 0x506 <__stack+0x7>
 4de:	23 2d       	mov	r18, r3
 4e0:	20 61       	ori	r18, 0x10	; 16
 4e2:	1d c0       	rjmp	.+58     	; 0x51e <__stack+0x1f>
 4e4:	8d 32       	cpi	r24, 0x2D	; 45
 4e6:	61 f0       	breq	.+24     	; 0x500 <__stack+0x1>
 4e8:	80 33       	cpi	r24, 0x30	; 48
 4ea:	69 f4       	brne	.+26     	; 0x506 <__stack+0x7>
 4ec:	23 2d       	mov	r18, r3
 4ee:	21 60       	ori	r18, 0x01	; 1
 4f0:	16 c0       	rjmp	.+44     	; 0x51e <__stack+0x1f>
 4f2:	83 2d       	mov	r24, r3
 4f4:	82 60       	ori	r24, 0x02	; 2
 4f6:	38 2e       	mov	r3, r24
 4f8:	e3 2d       	mov	r30, r3
 4fa:	e4 60       	ori	r30, 0x04	; 4
 4fc:	3e 2e       	mov	r3, r30
 4fe:	2a c0       	rjmp	.+84     	; 0x554 <__stack+0x55>
 500:	f3 2d       	mov	r31, r3
 502:	f8 60       	ori	r31, 0x08	; 8
 504:	1d c0       	rjmp	.+58     	; 0x540 <__stack+0x41>
 506:	37 fc       	sbrc	r3, 7
 508:	2d c0       	rjmp	.+90     	; 0x564 <__stack+0x65>
 50a:	20 ed       	ldi	r18, 0xD0	; 208
 50c:	28 0f       	add	r18, r24
 50e:	2a 30       	cpi	r18, 0x0A	; 10
 510:	40 f0       	brcs	.+16     	; 0x522 <__stack+0x23>
 512:	8e 32       	cpi	r24, 0x2E	; 46
 514:	b9 f4       	brne	.+46     	; 0x544 <__stack+0x45>
 516:	36 fc       	sbrc	r3, 6
 518:	81 c1       	rjmp	.+770    	; 0x81c <__stack+0x31d>
 51a:	23 2d       	mov	r18, r3
 51c:	20 64       	ori	r18, 0x40	; 64
 51e:	32 2e       	mov	r3, r18
 520:	19 c0       	rjmp	.+50     	; 0x554 <__stack+0x55>
 522:	36 fe       	sbrs	r3, 6
 524:	06 c0       	rjmp	.+12     	; 0x532 <__stack+0x33>
 526:	8a e0       	ldi	r24, 0x0A	; 10
 528:	98 9e       	mul	r9, r24
 52a:	20 0d       	add	r18, r0
 52c:	11 24       	eor	r1, r1
 52e:	92 2e       	mov	r9, r18
 530:	11 c0       	rjmp	.+34     	; 0x554 <__stack+0x55>
 532:	ea e0       	ldi	r30, 0x0A	; 10
 534:	2e 9e       	mul	r2, r30
 536:	20 0d       	add	r18, r0
 538:	11 24       	eor	r1, r1
 53a:	22 2e       	mov	r2, r18
 53c:	f3 2d       	mov	r31, r3
 53e:	f0 62       	ori	r31, 0x20	; 32
 540:	3f 2e       	mov	r3, r31
 542:	08 c0       	rjmp	.+16     	; 0x554 <__stack+0x55>
 544:	8c 36       	cpi	r24, 0x6C	; 108
 546:	21 f4       	brne	.+8      	; 0x550 <__stack+0x51>
 548:	83 2d       	mov	r24, r3
 54a:	80 68       	ori	r24, 0x80	; 128
 54c:	38 2e       	mov	r3, r24
 54e:	02 c0       	rjmp	.+4      	; 0x554 <__stack+0x55>
 550:	88 36       	cpi	r24, 0x68	; 104
 552:	41 f4       	brne	.+16     	; 0x564 <__stack+0x65>
 554:	f7 01       	movw	r30, r14
 556:	93 fd       	sbrc	r25, 3
 558:	85 91       	lpm	r24, Z+
 55a:	93 ff       	sbrs	r25, 3
 55c:	81 91       	ld	r24, Z+
 55e:	7f 01       	movw	r14, r30
 560:	81 11       	cpse	r24, r1
 562:	b3 cf       	rjmp	.-154    	; 0x4ca <vfprintf+0x5c>
 564:	98 2f       	mov	r25, r24
 566:	9f 7d       	andi	r25, 0xDF	; 223
 568:	95 54       	subi	r25, 0x45	; 69
 56a:	93 30       	cpi	r25, 0x03	; 3
 56c:	28 f4       	brcc	.+10     	; 0x578 <__stack+0x79>
 56e:	0c 5f       	subi	r16, 0xFC	; 252
 570:	1f 4f       	sbci	r17, 0xFF	; 255
 572:	9f e3       	ldi	r25, 0x3F	; 63
 574:	99 83       	std	Y+1, r25	; 0x01
 576:	0d c0       	rjmp	.+26     	; 0x592 <__stack+0x93>
 578:	83 36       	cpi	r24, 0x63	; 99
 57a:	31 f0       	breq	.+12     	; 0x588 <__stack+0x89>
 57c:	83 37       	cpi	r24, 0x73	; 115
 57e:	71 f0       	breq	.+28     	; 0x59c <__stack+0x9d>
 580:	83 35       	cpi	r24, 0x53	; 83
 582:	09 f0       	breq	.+2      	; 0x586 <__stack+0x87>
 584:	59 c0       	rjmp	.+178    	; 0x638 <__stack+0x139>
 586:	21 c0       	rjmp	.+66     	; 0x5ca <__stack+0xcb>
 588:	f8 01       	movw	r30, r16
 58a:	80 81       	ld	r24, Z
 58c:	89 83       	std	Y+1, r24	; 0x01
 58e:	0e 5f       	subi	r16, 0xFE	; 254
 590:	1f 4f       	sbci	r17, 0xFF	; 255
 592:	88 24       	eor	r8, r8
 594:	83 94       	inc	r8
 596:	91 2c       	mov	r9, r1
 598:	53 01       	movw	r10, r6
 59a:	13 c0       	rjmp	.+38     	; 0x5c2 <__stack+0xc3>
 59c:	28 01       	movw	r4, r16
 59e:	f2 e0       	ldi	r31, 0x02	; 2
 5a0:	4f 0e       	add	r4, r31
 5a2:	51 1c       	adc	r5, r1
 5a4:	f8 01       	movw	r30, r16
 5a6:	a0 80       	ld	r10, Z
 5a8:	b1 80       	ldd	r11, Z+1	; 0x01
 5aa:	36 fe       	sbrs	r3, 6
 5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <__stack+0xb5>
 5ae:	69 2d       	mov	r22, r9
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <__stack+0xb9>
 5b4:	6f ef       	ldi	r22, 0xFF	; 255
 5b6:	7f ef       	ldi	r23, 0xFF	; 255
 5b8:	c5 01       	movw	r24, r10
 5ba:	0e 94 67 05 	call	0xace	; 0xace <strnlen>
 5be:	4c 01       	movw	r8, r24
 5c0:	82 01       	movw	r16, r4
 5c2:	f3 2d       	mov	r31, r3
 5c4:	ff 77       	andi	r31, 0x7F	; 127
 5c6:	3f 2e       	mov	r3, r31
 5c8:	16 c0       	rjmp	.+44     	; 0x5f6 <__stack+0xf7>
 5ca:	28 01       	movw	r4, r16
 5cc:	22 e0       	ldi	r18, 0x02	; 2
 5ce:	42 0e       	add	r4, r18
 5d0:	51 1c       	adc	r5, r1
 5d2:	f8 01       	movw	r30, r16
 5d4:	a0 80       	ld	r10, Z
 5d6:	b1 80       	ldd	r11, Z+1	; 0x01
 5d8:	36 fe       	sbrs	r3, 6
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <__stack+0xe3>
 5dc:	69 2d       	mov	r22, r9
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <__stack+0xe7>
 5e2:	6f ef       	ldi	r22, 0xFF	; 255
 5e4:	7f ef       	ldi	r23, 0xFF	; 255
 5e6:	c5 01       	movw	r24, r10
 5e8:	0e 94 55 05 	call	0xaaa	; 0xaaa <strnlen_P>
 5ec:	4c 01       	movw	r8, r24
 5ee:	f3 2d       	mov	r31, r3
 5f0:	f0 68       	ori	r31, 0x80	; 128
 5f2:	3f 2e       	mov	r3, r31
 5f4:	82 01       	movw	r16, r4
 5f6:	33 fc       	sbrc	r3, 3
 5f8:	1b c0       	rjmp	.+54     	; 0x630 <__stack+0x131>
 5fa:	82 2d       	mov	r24, r2
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	88 16       	cp	r8, r24
 600:	99 06       	cpc	r9, r25
 602:	b0 f4       	brcc	.+44     	; 0x630 <__stack+0x131>
 604:	b6 01       	movw	r22, r12
 606:	80 e2       	ldi	r24, 0x20	; 32
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 72 05 	call	0xae4	; 0xae4 <fputc>
 60e:	2a 94       	dec	r2
 610:	f4 cf       	rjmp	.-24     	; 0x5fa <__stack+0xfb>
 612:	f5 01       	movw	r30, r10
 614:	37 fc       	sbrc	r3, 7
 616:	85 91       	lpm	r24, Z+
 618:	37 fe       	sbrs	r3, 7
 61a:	81 91       	ld	r24, Z+
 61c:	5f 01       	movw	r10, r30
 61e:	b6 01       	movw	r22, r12
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 72 05 	call	0xae4	; 0xae4 <fputc>
 626:	21 10       	cpse	r2, r1
 628:	2a 94       	dec	r2
 62a:	21 e0       	ldi	r18, 0x01	; 1
 62c:	82 1a       	sub	r8, r18
 62e:	91 08       	sbc	r9, r1
 630:	81 14       	cp	r8, r1
 632:	91 04       	cpc	r9, r1
 634:	71 f7       	brne	.-36     	; 0x612 <__stack+0x113>
 636:	e8 c0       	rjmp	.+464    	; 0x808 <__stack+0x309>
 638:	84 36       	cpi	r24, 0x64	; 100
 63a:	11 f0       	breq	.+4      	; 0x640 <__stack+0x141>
 63c:	89 36       	cpi	r24, 0x69	; 105
 63e:	41 f5       	brne	.+80     	; 0x690 <__stack+0x191>
 640:	f8 01       	movw	r30, r16
 642:	37 fe       	sbrs	r3, 7
 644:	07 c0       	rjmp	.+14     	; 0x654 <__stack+0x155>
 646:	60 81       	ld	r22, Z
 648:	71 81       	ldd	r23, Z+1	; 0x01
 64a:	82 81       	ldd	r24, Z+2	; 0x02
 64c:	93 81       	ldd	r25, Z+3	; 0x03
 64e:	0c 5f       	subi	r16, 0xFC	; 252
 650:	1f 4f       	sbci	r17, 0xFF	; 255
 652:	08 c0       	rjmp	.+16     	; 0x664 <__stack+0x165>
 654:	60 81       	ld	r22, Z
 656:	71 81       	ldd	r23, Z+1	; 0x01
 658:	07 2e       	mov	r0, r23
 65a:	00 0c       	add	r0, r0
 65c:	88 0b       	sbc	r24, r24
 65e:	99 0b       	sbc	r25, r25
 660:	0e 5f       	subi	r16, 0xFE	; 254
 662:	1f 4f       	sbci	r17, 0xFF	; 255
 664:	f3 2d       	mov	r31, r3
 666:	ff 76       	andi	r31, 0x6F	; 111
 668:	3f 2e       	mov	r3, r31
 66a:	97 ff       	sbrs	r25, 7
 66c:	09 c0       	rjmp	.+18     	; 0x680 <__stack+0x181>
 66e:	90 95       	com	r25
 670:	80 95       	com	r24
 672:	70 95       	com	r23
 674:	61 95       	neg	r22
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	8f 4f       	sbci	r24, 0xFF	; 255
 67a:	9f 4f       	sbci	r25, 0xFF	; 255
 67c:	f0 68       	ori	r31, 0x80	; 128
 67e:	3f 2e       	mov	r3, r31
 680:	2a e0       	ldi	r18, 0x0A	; 10
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	a3 01       	movw	r20, r6
 686:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__ultoa_invert>
 68a:	88 2e       	mov	r8, r24
 68c:	86 18       	sub	r8, r6
 68e:	45 c0       	rjmp	.+138    	; 0x71a <__stack+0x21b>
 690:	85 37       	cpi	r24, 0x75	; 117
 692:	31 f4       	brne	.+12     	; 0x6a0 <__stack+0x1a1>
 694:	23 2d       	mov	r18, r3
 696:	2f 7e       	andi	r18, 0xEF	; 239
 698:	b2 2e       	mov	r11, r18
 69a:	2a e0       	ldi	r18, 0x0A	; 10
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	25 c0       	rjmp	.+74     	; 0x6ea <__stack+0x1eb>
 6a0:	93 2d       	mov	r25, r3
 6a2:	99 7f       	andi	r25, 0xF9	; 249
 6a4:	b9 2e       	mov	r11, r25
 6a6:	8f 36       	cpi	r24, 0x6F	; 111
 6a8:	c1 f0       	breq	.+48     	; 0x6da <__stack+0x1db>
 6aa:	18 f4       	brcc	.+6      	; 0x6b2 <__stack+0x1b3>
 6ac:	88 35       	cpi	r24, 0x58	; 88
 6ae:	79 f0       	breq	.+30     	; 0x6ce <__stack+0x1cf>
 6b0:	b5 c0       	rjmp	.+362    	; 0x81c <__stack+0x31d>
 6b2:	80 37       	cpi	r24, 0x70	; 112
 6b4:	19 f0       	breq	.+6      	; 0x6bc <__stack+0x1bd>
 6b6:	88 37       	cpi	r24, 0x78	; 120
 6b8:	21 f0       	breq	.+8      	; 0x6c2 <__stack+0x1c3>
 6ba:	b0 c0       	rjmp	.+352    	; 0x81c <__stack+0x31d>
 6bc:	e9 2f       	mov	r30, r25
 6be:	e0 61       	ori	r30, 0x10	; 16
 6c0:	be 2e       	mov	r11, r30
 6c2:	b4 fe       	sbrs	r11, 4
 6c4:	0d c0       	rjmp	.+26     	; 0x6e0 <__stack+0x1e1>
 6c6:	fb 2d       	mov	r31, r11
 6c8:	f4 60       	ori	r31, 0x04	; 4
 6ca:	bf 2e       	mov	r11, r31
 6cc:	09 c0       	rjmp	.+18     	; 0x6e0 <__stack+0x1e1>
 6ce:	34 fe       	sbrs	r3, 4
 6d0:	0a c0       	rjmp	.+20     	; 0x6e6 <__stack+0x1e7>
 6d2:	29 2f       	mov	r18, r25
 6d4:	26 60       	ori	r18, 0x06	; 6
 6d6:	b2 2e       	mov	r11, r18
 6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <__stack+0x1e7>
 6da:	28 e0       	ldi	r18, 0x08	; 8
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	05 c0       	rjmp	.+10     	; 0x6ea <__stack+0x1eb>
 6e0:	20 e1       	ldi	r18, 0x10	; 16
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <__stack+0x1eb>
 6e6:	20 e1       	ldi	r18, 0x10	; 16
 6e8:	32 e0       	ldi	r19, 0x02	; 2
 6ea:	f8 01       	movw	r30, r16
 6ec:	b7 fe       	sbrs	r11, 7
 6ee:	07 c0       	rjmp	.+14     	; 0x6fe <__stack+0x1ff>
 6f0:	60 81       	ld	r22, Z
 6f2:	71 81       	ldd	r23, Z+1	; 0x01
 6f4:	82 81       	ldd	r24, Z+2	; 0x02
 6f6:	93 81       	ldd	r25, Z+3	; 0x03
 6f8:	0c 5f       	subi	r16, 0xFC	; 252
 6fa:	1f 4f       	sbci	r17, 0xFF	; 255
 6fc:	06 c0       	rjmp	.+12     	; 0x70a <__stack+0x20b>
 6fe:	60 81       	ld	r22, Z
 700:	71 81       	ldd	r23, Z+1	; 0x01
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 5f       	subi	r16, 0xFE	; 254
 708:	1f 4f       	sbci	r17, 0xFF	; 255
 70a:	a3 01       	movw	r20, r6
 70c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__ultoa_invert>
 710:	88 2e       	mov	r8, r24
 712:	86 18       	sub	r8, r6
 714:	fb 2d       	mov	r31, r11
 716:	ff 77       	andi	r31, 0x7F	; 127
 718:	3f 2e       	mov	r3, r31
 71a:	36 fe       	sbrs	r3, 6
 71c:	0d c0       	rjmp	.+26     	; 0x738 <__stack+0x239>
 71e:	23 2d       	mov	r18, r3
 720:	2e 7f       	andi	r18, 0xFE	; 254
 722:	a2 2e       	mov	r10, r18
 724:	89 14       	cp	r8, r9
 726:	58 f4       	brcc	.+22     	; 0x73e <__stack+0x23f>
 728:	34 fe       	sbrs	r3, 4
 72a:	0b c0       	rjmp	.+22     	; 0x742 <__stack+0x243>
 72c:	32 fc       	sbrc	r3, 2
 72e:	09 c0       	rjmp	.+18     	; 0x742 <__stack+0x243>
 730:	83 2d       	mov	r24, r3
 732:	8e 7e       	andi	r24, 0xEE	; 238
 734:	a8 2e       	mov	r10, r24
 736:	05 c0       	rjmp	.+10     	; 0x742 <__stack+0x243>
 738:	b8 2c       	mov	r11, r8
 73a:	a3 2c       	mov	r10, r3
 73c:	03 c0       	rjmp	.+6      	; 0x744 <__stack+0x245>
 73e:	b8 2c       	mov	r11, r8
 740:	01 c0       	rjmp	.+2      	; 0x744 <__stack+0x245>
 742:	b9 2c       	mov	r11, r9
 744:	a4 fe       	sbrs	r10, 4
 746:	0f c0       	rjmp	.+30     	; 0x766 <__stack+0x267>
 748:	fe 01       	movw	r30, r28
 74a:	e8 0d       	add	r30, r8
 74c:	f1 1d       	adc	r31, r1
 74e:	80 81       	ld	r24, Z
 750:	80 33       	cpi	r24, 0x30	; 48
 752:	21 f4       	brne	.+8      	; 0x75c <__stack+0x25d>
 754:	9a 2d       	mov	r25, r10
 756:	99 7e       	andi	r25, 0xE9	; 233
 758:	a9 2e       	mov	r10, r25
 75a:	09 c0       	rjmp	.+18     	; 0x76e <__stack+0x26f>
 75c:	a2 fe       	sbrs	r10, 2
 75e:	06 c0       	rjmp	.+12     	; 0x76c <__stack+0x26d>
 760:	b3 94       	inc	r11
 762:	b3 94       	inc	r11
 764:	04 c0       	rjmp	.+8      	; 0x76e <__stack+0x26f>
 766:	8a 2d       	mov	r24, r10
 768:	86 78       	andi	r24, 0x86	; 134
 76a:	09 f0       	breq	.+2      	; 0x76e <__stack+0x26f>
 76c:	b3 94       	inc	r11
 76e:	a3 fc       	sbrc	r10, 3
 770:	11 c0       	rjmp	.+34     	; 0x794 <__stack+0x295>
 772:	a0 fe       	sbrs	r10, 0
 774:	06 c0       	rjmp	.+12     	; 0x782 <__stack+0x283>
 776:	b2 14       	cp	r11, r2
 778:	88 f4       	brcc	.+34     	; 0x79c <__stack+0x29d>
 77a:	28 0c       	add	r2, r8
 77c:	92 2c       	mov	r9, r2
 77e:	9b 18       	sub	r9, r11
 780:	0e c0       	rjmp	.+28     	; 0x79e <__stack+0x29f>
 782:	b2 14       	cp	r11, r2
 784:	60 f4       	brcc	.+24     	; 0x79e <__stack+0x29f>
 786:	b6 01       	movw	r22, r12
 788:	80 e2       	ldi	r24, 0x20	; 32
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 94 72 05 	call	0xae4	; 0xae4 <fputc>
 790:	b3 94       	inc	r11
 792:	f7 cf       	rjmp	.-18     	; 0x782 <__stack+0x283>
 794:	b2 14       	cp	r11, r2
 796:	18 f4       	brcc	.+6      	; 0x79e <__stack+0x29f>
 798:	2b 18       	sub	r2, r11
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <__stack+0x2a1>
 79c:	98 2c       	mov	r9, r8
 79e:	21 2c       	mov	r2, r1
 7a0:	a4 fe       	sbrs	r10, 4
 7a2:	10 c0       	rjmp	.+32     	; 0x7c4 <__stack+0x2c5>
 7a4:	b6 01       	movw	r22, r12
 7a6:	80 e3       	ldi	r24, 0x30	; 48
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 72 05 	call	0xae4	; 0xae4 <fputc>
 7ae:	a2 fe       	sbrs	r10, 2
 7b0:	17 c0       	rjmp	.+46     	; 0x7e0 <__stack+0x2e1>
 7b2:	a1 fc       	sbrc	r10, 1
 7b4:	03 c0       	rjmp	.+6      	; 0x7bc <__stack+0x2bd>
 7b6:	88 e7       	ldi	r24, 0x78	; 120
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <__stack+0x2c1>
 7bc:	88 e5       	ldi	r24, 0x58	; 88
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	b6 01       	movw	r22, r12
 7c2:	0c c0       	rjmp	.+24     	; 0x7dc <__stack+0x2dd>
 7c4:	8a 2d       	mov	r24, r10
 7c6:	86 78       	andi	r24, 0x86	; 134
 7c8:	59 f0       	breq	.+22     	; 0x7e0 <__stack+0x2e1>
 7ca:	a1 fe       	sbrs	r10, 1
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <__stack+0x2d3>
 7ce:	8b e2       	ldi	r24, 0x2B	; 43
 7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <__stack+0x2d5>
 7d2:	80 e2       	ldi	r24, 0x20	; 32
 7d4:	a7 fc       	sbrc	r10, 7
 7d6:	8d e2       	ldi	r24, 0x2D	; 45
 7d8:	b6 01       	movw	r22, r12
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0e 94 72 05 	call	0xae4	; 0xae4 <fputc>
 7e0:	89 14       	cp	r8, r9
 7e2:	38 f4       	brcc	.+14     	; 0x7f2 <__stack+0x2f3>
 7e4:	b6 01       	movw	r22, r12
 7e6:	80 e3       	ldi	r24, 0x30	; 48
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 72 05 	call	0xae4	; 0xae4 <fputc>
 7ee:	9a 94       	dec	r9
 7f0:	f7 cf       	rjmp	.-18     	; 0x7e0 <__stack+0x2e1>
 7f2:	8a 94       	dec	r8
 7f4:	f3 01       	movw	r30, r6
 7f6:	e8 0d       	add	r30, r8
 7f8:	f1 1d       	adc	r31, r1
 7fa:	80 81       	ld	r24, Z
 7fc:	b6 01       	movw	r22, r12
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 72 05 	call	0xae4	; 0xae4 <fputc>
 804:	81 10       	cpse	r8, r1
 806:	f5 cf       	rjmp	.-22     	; 0x7f2 <__stack+0x2f3>
 808:	22 20       	and	r2, r2
 80a:	09 f4       	brne	.+2      	; 0x80e <__stack+0x30f>
 80c:	42 ce       	rjmp	.-892    	; 0x492 <vfprintf+0x24>
 80e:	b6 01       	movw	r22, r12
 810:	80 e2       	ldi	r24, 0x20	; 32
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 72 05 	call	0xae4	; 0xae4 <fputc>
 818:	2a 94       	dec	r2
 81a:	f6 cf       	rjmp	.-20     	; 0x808 <__stack+0x309>
 81c:	f6 01       	movw	r30, r12
 81e:	86 81       	ldd	r24, Z+6	; 0x06
 820:	97 81       	ldd	r25, Z+7	; 0x07
 822:	02 c0       	rjmp	.+4      	; 0x828 <__stack+0x329>
 824:	8f ef       	ldi	r24, 0xFF	; 255
 826:	9f ef       	ldi	r25, 0xFF	; 255
 828:	2b 96       	adiw	r28, 0x0b	; 11
 82a:	e2 e1       	ldi	r30, 0x12	; 18
 82c:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__epilogue_restores__>

00000830 <calloc>:
 830:	0f 93       	push	r16
 832:	1f 93       	push	r17
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	86 9f       	mul	r24, r22
 83a:	80 01       	movw	r16, r0
 83c:	87 9f       	mul	r24, r23
 83e:	10 0d       	add	r17, r0
 840:	96 9f       	mul	r25, r22
 842:	10 0d       	add	r17, r0
 844:	11 24       	eor	r1, r1
 846:	c8 01       	movw	r24, r16
 848:	0e 94 34 04 	call	0x868	; 0x868 <malloc>
 84c:	ec 01       	movw	r28, r24
 84e:	00 97       	sbiw	r24, 0x00	; 0
 850:	29 f0       	breq	.+10     	; 0x85c <calloc+0x2c>
 852:	a8 01       	movw	r20, r16
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	0e 94 60 05 	call	0xac0	; 0xac0 <memset>
 85c:	ce 01       	movw	r24, r28
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	08 95       	ret

00000868 <malloc>:
 868:	0f 93       	push	r16
 86a:	1f 93       	push	r17
 86c:	cf 93       	push	r28
 86e:	df 93       	push	r29
 870:	82 30       	cpi	r24, 0x02	; 2
 872:	91 05       	cpc	r25, r1
 874:	10 f4       	brcc	.+4      	; 0x87a <malloc+0x12>
 876:	82 e0       	ldi	r24, 0x02	; 2
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <__flp>
 87e:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <__flp+0x1>
 882:	20 e0       	ldi	r18, 0x00	; 0
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	a0 e0       	ldi	r26, 0x00	; 0
 888:	b0 e0       	ldi	r27, 0x00	; 0
 88a:	30 97       	sbiw	r30, 0x00	; 0
 88c:	19 f1       	breq	.+70     	; 0x8d4 <malloc+0x6c>
 88e:	40 81       	ld	r20, Z
 890:	51 81       	ldd	r21, Z+1	; 0x01
 892:	02 81       	ldd	r16, Z+2	; 0x02
 894:	13 81       	ldd	r17, Z+3	; 0x03
 896:	48 17       	cp	r20, r24
 898:	59 07       	cpc	r21, r25
 89a:	c8 f0       	brcs	.+50     	; 0x8ce <malloc+0x66>
 89c:	84 17       	cp	r24, r20
 89e:	95 07       	cpc	r25, r21
 8a0:	69 f4       	brne	.+26     	; 0x8bc <malloc+0x54>
 8a2:	10 97       	sbiw	r26, 0x00	; 0
 8a4:	31 f0       	breq	.+12     	; 0x8b2 <malloc+0x4a>
 8a6:	12 96       	adiw	r26, 0x02	; 2
 8a8:	0c 93       	st	X, r16
 8aa:	12 97       	sbiw	r26, 0x02	; 2
 8ac:	13 96       	adiw	r26, 0x03	; 3
 8ae:	1c 93       	st	X, r17
 8b0:	27 c0       	rjmp	.+78     	; 0x900 <malloc+0x98>
 8b2:	00 93 aa 01 	sts	0x01AA, r16	; 0x8001aa <__flp>
 8b6:	10 93 ab 01 	sts	0x01AB, r17	; 0x8001ab <__flp+0x1>
 8ba:	22 c0       	rjmp	.+68     	; 0x900 <malloc+0x98>
 8bc:	21 15       	cp	r18, r1
 8be:	31 05       	cpc	r19, r1
 8c0:	19 f0       	breq	.+6      	; 0x8c8 <malloc+0x60>
 8c2:	42 17       	cp	r20, r18
 8c4:	53 07       	cpc	r21, r19
 8c6:	18 f4       	brcc	.+6      	; 0x8ce <malloc+0x66>
 8c8:	9a 01       	movw	r18, r20
 8ca:	bd 01       	movw	r22, r26
 8cc:	ef 01       	movw	r28, r30
 8ce:	df 01       	movw	r26, r30
 8d0:	f8 01       	movw	r30, r16
 8d2:	db cf       	rjmp	.-74     	; 0x88a <malloc+0x22>
 8d4:	21 15       	cp	r18, r1
 8d6:	31 05       	cpc	r19, r1
 8d8:	f9 f0       	breq	.+62     	; 0x918 <malloc+0xb0>
 8da:	28 1b       	sub	r18, r24
 8dc:	39 0b       	sbc	r19, r25
 8de:	24 30       	cpi	r18, 0x04	; 4
 8e0:	31 05       	cpc	r19, r1
 8e2:	80 f4       	brcc	.+32     	; 0x904 <malloc+0x9c>
 8e4:	8a 81       	ldd	r24, Y+2	; 0x02
 8e6:	9b 81       	ldd	r25, Y+3	; 0x03
 8e8:	61 15       	cp	r22, r1
 8ea:	71 05       	cpc	r23, r1
 8ec:	21 f0       	breq	.+8      	; 0x8f6 <malloc+0x8e>
 8ee:	fb 01       	movw	r30, r22
 8f0:	93 83       	std	Z+3, r25	; 0x03
 8f2:	82 83       	std	Z+2, r24	; 0x02
 8f4:	04 c0       	rjmp	.+8      	; 0x8fe <malloc+0x96>
 8f6:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__flp+0x1>
 8fa:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__flp>
 8fe:	fe 01       	movw	r30, r28
 900:	32 96       	adiw	r30, 0x02	; 2
 902:	44 c0       	rjmp	.+136    	; 0x98c <malloc+0x124>
 904:	fe 01       	movw	r30, r28
 906:	e2 0f       	add	r30, r18
 908:	f3 1f       	adc	r31, r19
 90a:	81 93       	st	Z+, r24
 90c:	91 93       	st	Z+, r25
 90e:	22 50       	subi	r18, 0x02	; 2
 910:	31 09       	sbc	r19, r1
 912:	39 83       	std	Y+1, r19	; 0x01
 914:	28 83       	st	Y, r18
 916:	3a c0       	rjmp	.+116    	; 0x98c <malloc+0x124>
 918:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <__brkval>
 91c:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <__brkval+0x1>
 920:	23 2b       	or	r18, r19
 922:	41 f4       	brne	.+16     	; 0x934 <malloc+0xcc>
 924:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 928:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 92c:	30 93 a9 01 	sts	0x01A9, r19	; 0x8001a9 <__brkval+0x1>
 930:	20 93 a8 01 	sts	0x01A8, r18	; 0x8001a8 <__brkval>
 934:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 938:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 93c:	21 15       	cp	r18, r1
 93e:	31 05       	cpc	r19, r1
 940:	41 f4       	brne	.+16     	; 0x952 <malloc+0xea>
 942:	2d b7       	in	r18, 0x3d	; 61
 944:	3e b7       	in	r19, 0x3e	; 62
 946:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 94a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 94e:	24 1b       	sub	r18, r20
 950:	35 0b       	sbc	r19, r21
 952:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <__brkval>
 956:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <__brkval+0x1>
 95a:	e2 17       	cp	r30, r18
 95c:	f3 07       	cpc	r31, r19
 95e:	a0 f4       	brcc	.+40     	; 0x988 <malloc+0x120>
 960:	2e 1b       	sub	r18, r30
 962:	3f 0b       	sbc	r19, r31
 964:	28 17       	cp	r18, r24
 966:	39 07       	cpc	r19, r25
 968:	78 f0       	brcs	.+30     	; 0x988 <malloc+0x120>
 96a:	ac 01       	movw	r20, r24
 96c:	4e 5f       	subi	r20, 0xFE	; 254
 96e:	5f 4f       	sbci	r21, 0xFF	; 255
 970:	24 17       	cp	r18, r20
 972:	35 07       	cpc	r19, r21
 974:	48 f0       	brcs	.+18     	; 0x988 <malloc+0x120>
 976:	4e 0f       	add	r20, r30
 978:	5f 1f       	adc	r21, r31
 97a:	50 93 a9 01 	sts	0x01A9, r21	; 0x8001a9 <__brkval+0x1>
 97e:	40 93 a8 01 	sts	0x01A8, r20	; 0x8001a8 <__brkval>
 982:	81 93       	st	Z+, r24
 984:	91 93       	st	Z+, r25
 986:	02 c0       	rjmp	.+4      	; 0x98c <malloc+0x124>
 988:	e0 e0       	ldi	r30, 0x00	; 0
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	cf 01       	movw	r24, r30
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	1f 91       	pop	r17
 994:	0f 91       	pop	r16
 996:	08 95       	ret

00000998 <free>:
 998:	cf 93       	push	r28
 99a:	df 93       	push	r29
 99c:	00 97       	sbiw	r24, 0x00	; 0
 99e:	09 f4       	brne	.+2      	; 0x9a2 <free+0xa>
 9a0:	81 c0       	rjmp	.+258    	; 0xaa4 <free+0x10c>
 9a2:	fc 01       	movw	r30, r24
 9a4:	32 97       	sbiw	r30, 0x02	; 2
 9a6:	13 82       	std	Z+3, r1	; 0x03
 9a8:	12 82       	std	Z+2, r1	; 0x02
 9aa:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <__flp>
 9ae:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <__flp+0x1>
 9b2:	10 97       	sbiw	r26, 0x00	; 0
 9b4:	81 f4       	brne	.+32     	; 0x9d6 <free+0x3e>
 9b6:	20 81       	ld	r18, Z
 9b8:	31 81       	ldd	r19, Z+1	; 0x01
 9ba:	82 0f       	add	r24, r18
 9bc:	93 1f       	adc	r25, r19
 9be:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <__brkval>
 9c2:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <__brkval+0x1>
 9c6:	28 17       	cp	r18, r24
 9c8:	39 07       	cpc	r19, r25
 9ca:	51 f5       	brne	.+84     	; 0xa20 <free+0x88>
 9cc:	f0 93 a9 01 	sts	0x01A9, r31	; 0x8001a9 <__brkval+0x1>
 9d0:	e0 93 a8 01 	sts	0x01A8, r30	; 0x8001a8 <__brkval>
 9d4:	67 c0       	rjmp	.+206    	; 0xaa4 <free+0x10c>
 9d6:	ed 01       	movw	r28, r26
 9d8:	20 e0       	ldi	r18, 0x00	; 0
 9da:	30 e0       	ldi	r19, 0x00	; 0
 9dc:	ce 17       	cp	r28, r30
 9de:	df 07       	cpc	r29, r31
 9e0:	40 f4       	brcc	.+16     	; 0x9f2 <free+0x5a>
 9e2:	4a 81       	ldd	r20, Y+2	; 0x02
 9e4:	5b 81       	ldd	r21, Y+3	; 0x03
 9e6:	9e 01       	movw	r18, r28
 9e8:	41 15       	cp	r20, r1
 9ea:	51 05       	cpc	r21, r1
 9ec:	f1 f0       	breq	.+60     	; 0xa2a <free+0x92>
 9ee:	ea 01       	movw	r28, r20
 9f0:	f5 cf       	rjmp	.-22     	; 0x9dc <free+0x44>
 9f2:	d3 83       	std	Z+3, r29	; 0x03
 9f4:	c2 83       	std	Z+2, r28	; 0x02
 9f6:	40 81       	ld	r20, Z
 9f8:	51 81       	ldd	r21, Z+1	; 0x01
 9fa:	84 0f       	add	r24, r20
 9fc:	95 1f       	adc	r25, r21
 9fe:	c8 17       	cp	r28, r24
 a00:	d9 07       	cpc	r29, r25
 a02:	59 f4       	brne	.+22     	; 0xa1a <free+0x82>
 a04:	88 81       	ld	r24, Y
 a06:	99 81       	ldd	r25, Y+1	; 0x01
 a08:	84 0f       	add	r24, r20
 a0a:	95 1f       	adc	r25, r21
 a0c:	02 96       	adiw	r24, 0x02	; 2
 a0e:	91 83       	std	Z+1, r25	; 0x01
 a10:	80 83       	st	Z, r24
 a12:	8a 81       	ldd	r24, Y+2	; 0x02
 a14:	9b 81       	ldd	r25, Y+3	; 0x03
 a16:	93 83       	std	Z+3, r25	; 0x03
 a18:	82 83       	std	Z+2, r24	; 0x02
 a1a:	21 15       	cp	r18, r1
 a1c:	31 05       	cpc	r19, r1
 a1e:	29 f4       	brne	.+10     	; 0xa2a <free+0x92>
 a20:	f0 93 ab 01 	sts	0x01AB, r31	; 0x8001ab <__flp+0x1>
 a24:	e0 93 aa 01 	sts	0x01AA, r30	; 0x8001aa <__flp>
 a28:	3d c0       	rjmp	.+122    	; 0xaa4 <free+0x10c>
 a2a:	e9 01       	movw	r28, r18
 a2c:	fb 83       	std	Y+3, r31	; 0x03
 a2e:	ea 83       	std	Y+2, r30	; 0x02
 a30:	49 91       	ld	r20, Y+
 a32:	59 91       	ld	r21, Y+
 a34:	c4 0f       	add	r28, r20
 a36:	d5 1f       	adc	r29, r21
 a38:	ec 17       	cp	r30, r28
 a3a:	fd 07       	cpc	r31, r29
 a3c:	61 f4       	brne	.+24     	; 0xa56 <free+0xbe>
 a3e:	80 81       	ld	r24, Z
 a40:	91 81       	ldd	r25, Z+1	; 0x01
 a42:	84 0f       	add	r24, r20
 a44:	95 1f       	adc	r25, r21
 a46:	02 96       	adiw	r24, 0x02	; 2
 a48:	e9 01       	movw	r28, r18
 a4a:	99 83       	std	Y+1, r25	; 0x01
 a4c:	88 83       	st	Y, r24
 a4e:	82 81       	ldd	r24, Z+2	; 0x02
 a50:	93 81       	ldd	r25, Z+3	; 0x03
 a52:	9b 83       	std	Y+3, r25	; 0x03
 a54:	8a 83       	std	Y+2, r24	; 0x02
 a56:	e0 e0       	ldi	r30, 0x00	; 0
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	12 96       	adiw	r26, 0x02	; 2
 a5c:	8d 91       	ld	r24, X+
 a5e:	9c 91       	ld	r25, X
 a60:	13 97       	sbiw	r26, 0x03	; 3
 a62:	00 97       	sbiw	r24, 0x00	; 0
 a64:	19 f0       	breq	.+6      	; 0xa6c <free+0xd4>
 a66:	fd 01       	movw	r30, r26
 a68:	dc 01       	movw	r26, r24
 a6a:	f7 cf       	rjmp	.-18     	; 0xa5a <free+0xc2>
 a6c:	8d 91       	ld	r24, X+
 a6e:	9c 91       	ld	r25, X
 a70:	11 97       	sbiw	r26, 0x01	; 1
 a72:	9d 01       	movw	r18, r26
 a74:	2e 5f       	subi	r18, 0xFE	; 254
 a76:	3f 4f       	sbci	r19, 0xFF	; 255
 a78:	82 0f       	add	r24, r18
 a7a:	93 1f       	adc	r25, r19
 a7c:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <__brkval>
 a80:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <__brkval+0x1>
 a84:	28 17       	cp	r18, r24
 a86:	39 07       	cpc	r19, r25
 a88:	69 f4       	brne	.+26     	; 0xaa4 <free+0x10c>
 a8a:	30 97       	sbiw	r30, 0x00	; 0
 a8c:	29 f4       	brne	.+10     	; 0xa98 <free+0x100>
 a8e:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <__flp+0x1>
 a92:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <__flp>
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <free+0x104>
 a98:	13 82       	std	Z+3, r1	; 0x03
 a9a:	12 82       	std	Z+2, r1	; 0x02
 a9c:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <__brkval+0x1>
 aa0:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <__brkval>
 aa4:	df 91       	pop	r29
 aa6:	cf 91       	pop	r28
 aa8:	08 95       	ret

00000aaa <strnlen_P>:
 aaa:	fc 01       	movw	r30, r24
 aac:	05 90       	lpm	r0, Z+
 aae:	61 50       	subi	r22, 0x01	; 1
 ab0:	70 40       	sbci	r23, 0x00	; 0
 ab2:	01 10       	cpse	r0, r1
 ab4:	d8 f7       	brcc	.-10     	; 0xaac <strnlen_P+0x2>
 ab6:	80 95       	com	r24
 ab8:	90 95       	com	r25
 aba:	8e 0f       	add	r24, r30
 abc:	9f 1f       	adc	r25, r31
 abe:	08 95       	ret

00000ac0 <memset>:
 ac0:	dc 01       	movw	r26, r24
 ac2:	01 c0       	rjmp	.+2      	; 0xac6 <memset+0x6>
 ac4:	6d 93       	st	X+, r22
 ac6:	41 50       	subi	r20, 0x01	; 1
 ac8:	50 40       	sbci	r21, 0x00	; 0
 aca:	e0 f7       	brcc	.-8      	; 0xac4 <memset+0x4>
 acc:	08 95       	ret

00000ace <strnlen>:
 ace:	fc 01       	movw	r30, r24
 ad0:	61 50       	subi	r22, 0x01	; 1
 ad2:	70 40       	sbci	r23, 0x00	; 0
 ad4:	01 90       	ld	r0, Z+
 ad6:	01 10       	cpse	r0, r1
 ad8:	d8 f7       	brcc	.-10     	; 0xad0 <strnlen+0x2>
 ada:	80 95       	com	r24
 adc:	90 95       	com	r25
 ade:	8e 0f       	add	r24, r30
 ae0:	9f 1f       	adc	r25, r31
 ae2:	08 95       	ret

00000ae4 <fputc>:
 ae4:	0f 93       	push	r16
 ae6:	1f 93       	push	r17
 ae8:	cf 93       	push	r28
 aea:	df 93       	push	r29
 aec:	fb 01       	movw	r30, r22
 aee:	23 81       	ldd	r18, Z+3	; 0x03
 af0:	21 fd       	sbrc	r18, 1
 af2:	03 c0       	rjmp	.+6      	; 0xafa <fputc+0x16>
 af4:	8f ef       	ldi	r24, 0xFF	; 255
 af6:	9f ef       	ldi	r25, 0xFF	; 255
 af8:	2c c0       	rjmp	.+88     	; 0xb52 <fputc+0x6e>
 afa:	22 ff       	sbrs	r18, 2
 afc:	16 c0       	rjmp	.+44     	; 0xb2a <fputc+0x46>
 afe:	46 81       	ldd	r20, Z+6	; 0x06
 b00:	57 81       	ldd	r21, Z+7	; 0x07
 b02:	24 81       	ldd	r18, Z+4	; 0x04
 b04:	35 81       	ldd	r19, Z+5	; 0x05
 b06:	42 17       	cp	r20, r18
 b08:	53 07       	cpc	r21, r19
 b0a:	44 f4       	brge	.+16     	; 0xb1c <fputc+0x38>
 b0c:	a0 81       	ld	r26, Z
 b0e:	b1 81       	ldd	r27, Z+1	; 0x01
 b10:	9d 01       	movw	r18, r26
 b12:	2f 5f       	subi	r18, 0xFF	; 255
 b14:	3f 4f       	sbci	r19, 0xFF	; 255
 b16:	31 83       	std	Z+1, r19	; 0x01
 b18:	20 83       	st	Z, r18
 b1a:	8c 93       	st	X, r24
 b1c:	26 81       	ldd	r18, Z+6	; 0x06
 b1e:	37 81       	ldd	r19, Z+7	; 0x07
 b20:	2f 5f       	subi	r18, 0xFF	; 255
 b22:	3f 4f       	sbci	r19, 0xFF	; 255
 b24:	37 83       	std	Z+7, r19	; 0x07
 b26:	26 83       	std	Z+6, r18	; 0x06
 b28:	14 c0       	rjmp	.+40     	; 0xb52 <fputc+0x6e>
 b2a:	8b 01       	movw	r16, r22
 b2c:	ec 01       	movw	r28, r24
 b2e:	fb 01       	movw	r30, r22
 b30:	00 84       	ldd	r0, Z+8	; 0x08
 b32:	f1 85       	ldd	r31, Z+9	; 0x09
 b34:	e0 2d       	mov	r30, r0
 b36:	09 95       	icall
 b38:	89 2b       	or	r24, r25
 b3a:	e1 f6       	brne	.-72     	; 0xaf4 <fputc+0x10>
 b3c:	d8 01       	movw	r26, r16
 b3e:	16 96       	adiw	r26, 0x06	; 6
 b40:	8d 91       	ld	r24, X+
 b42:	9c 91       	ld	r25, X
 b44:	17 97       	sbiw	r26, 0x07	; 7
 b46:	01 96       	adiw	r24, 0x01	; 1
 b48:	17 96       	adiw	r26, 0x07	; 7
 b4a:	9c 93       	st	X, r25
 b4c:	8e 93       	st	-X, r24
 b4e:	16 97       	sbiw	r26, 0x06	; 6
 b50:	ce 01       	movw	r24, r28
 b52:	df 91       	pop	r29
 b54:	cf 91       	pop	r28
 b56:	1f 91       	pop	r17
 b58:	0f 91       	pop	r16
 b5a:	08 95       	ret

00000b5c <__ultoa_invert>:
 b5c:	fa 01       	movw	r30, r20
 b5e:	aa 27       	eor	r26, r26
 b60:	28 30       	cpi	r18, 0x08	; 8
 b62:	51 f1       	breq	.+84     	; 0xbb8 <__ultoa_invert+0x5c>
 b64:	20 31       	cpi	r18, 0x10	; 16
 b66:	81 f1       	breq	.+96     	; 0xbc8 <__ultoa_invert+0x6c>
 b68:	e8 94       	clt
 b6a:	6f 93       	push	r22
 b6c:	6e 7f       	andi	r22, 0xFE	; 254
 b6e:	6e 5f       	subi	r22, 0xFE	; 254
 b70:	7f 4f       	sbci	r23, 0xFF	; 255
 b72:	8f 4f       	sbci	r24, 0xFF	; 255
 b74:	9f 4f       	sbci	r25, 0xFF	; 255
 b76:	af 4f       	sbci	r26, 0xFF	; 255
 b78:	b1 e0       	ldi	r27, 0x01	; 1
 b7a:	3e d0       	rcall	.+124    	; 0xbf8 <__ultoa_invert+0x9c>
 b7c:	b4 e0       	ldi	r27, 0x04	; 4
 b7e:	3c d0       	rcall	.+120    	; 0xbf8 <__ultoa_invert+0x9c>
 b80:	67 0f       	add	r22, r23
 b82:	78 1f       	adc	r23, r24
 b84:	89 1f       	adc	r24, r25
 b86:	9a 1f       	adc	r25, r26
 b88:	a1 1d       	adc	r26, r1
 b8a:	68 0f       	add	r22, r24
 b8c:	79 1f       	adc	r23, r25
 b8e:	8a 1f       	adc	r24, r26
 b90:	91 1d       	adc	r25, r1
 b92:	a1 1d       	adc	r26, r1
 b94:	6a 0f       	add	r22, r26
 b96:	71 1d       	adc	r23, r1
 b98:	81 1d       	adc	r24, r1
 b9a:	91 1d       	adc	r25, r1
 b9c:	a1 1d       	adc	r26, r1
 b9e:	20 d0       	rcall	.+64     	; 0xbe0 <__ultoa_invert+0x84>
 ba0:	09 f4       	brne	.+2      	; 0xba4 <__ultoa_invert+0x48>
 ba2:	68 94       	set
 ba4:	3f 91       	pop	r19
 ba6:	2a e0       	ldi	r18, 0x0A	; 10
 ba8:	26 9f       	mul	r18, r22
 baa:	11 24       	eor	r1, r1
 bac:	30 19       	sub	r19, r0
 bae:	30 5d       	subi	r19, 0xD0	; 208
 bb0:	31 93       	st	Z+, r19
 bb2:	de f6       	brtc	.-74     	; 0xb6a <__ultoa_invert+0xe>
 bb4:	cf 01       	movw	r24, r30
 bb6:	08 95       	ret
 bb8:	46 2f       	mov	r20, r22
 bba:	47 70       	andi	r20, 0x07	; 7
 bbc:	40 5d       	subi	r20, 0xD0	; 208
 bbe:	41 93       	st	Z+, r20
 bc0:	b3 e0       	ldi	r27, 0x03	; 3
 bc2:	0f d0       	rcall	.+30     	; 0xbe2 <__ultoa_invert+0x86>
 bc4:	c9 f7       	brne	.-14     	; 0xbb8 <__ultoa_invert+0x5c>
 bc6:	f6 cf       	rjmp	.-20     	; 0xbb4 <__ultoa_invert+0x58>
 bc8:	46 2f       	mov	r20, r22
 bca:	4f 70       	andi	r20, 0x0F	; 15
 bcc:	40 5d       	subi	r20, 0xD0	; 208
 bce:	4a 33       	cpi	r20, 0x3A	; 58
 bd0:	18 f0       	brcs	.+6      	; 0xbd8 <__ultoa_invert+0x7c>
 bd2:	49 5d       	subi	r20, 0xD9	; 217
 bd4:	31 fd       	sbrc	r19, 1
 bd6:	40 52       	subi	r20, 0x20	; 32
 bd8:	41 93       	st	Z+, r20
 bda:	02 d0       	rcall	.+4      	; 0xbe0 <__ultoa_invert+0x84>
 bdc:	a9 f7       	brne	.-22     	; 0xbc8 <__ultoa_invert+0x6c>
 bde:	ea cf       	rjmp	.-44     	; 0xbb4 <__ultoa_invert+0x58>
 be0:	b4 e0       	ldi	r27, 0x04	; 4
 be2:	a6 95       	lsr	r26
 be4:	97 95       	ror	r25
 be6:	87 95       	ror	r24
 be8:	77 95       	ror	r23
 bea:	67 95       	ror	r22
 bec:	ba 95       	dec	r27
 bee:	c9 f7       	brne	.-14     	; 0xbe2 <__ultoa_invert+0x86>
 bf0:	00 97       	sbiw	r24, 0x00	; 0
 bf2:	61 05       	cpc	r22, r1
 bf4:	71 05       	cpc	r23, r1
 bf6:	08 95       	ret
 bf8:	9b 01       	movw	r18, r22
 bfa:	ac 01       	movw	r20, r24
 bfc:	0a 2e       	mov	r0, r26
 bfe:	06 94       	lsr	r0
 c00:	57 95       	ror	r21
 c02:	47 95       	ror	r20
 c04:	37 95       	ror	r19
 c06:	27 95       	ror	r18
 c08:	ba 95       	dec	r27
 c0a:	c9 f7       	brne	.-14     	; 0xbfe <__ultoa_invert+0xa2>
 c0c:	62 0f       	add	r22, r18
 c0e:	73 1f       	adc	r23, r19
 c10:	84 1f       	adc	r24, r20
 c12:	95 1f       	adc	r25, r21
 c14:	a0 1d       	adc	r26, r0
 c16:	08 95       	ret

00000c18 <__prologue_saves__>:
 c18:	2f 92       	push	r2
 c1a:	3f 92       	push	r3
 c1c:	4f 92       	push	r4
 c1e:	5f 92       	push	r5
 c20:	6f 92       	push	r6
 c22:	7f 92       	push	r7
 c24:	8f 92       	push	r8
 c26:	9f 92       	push	r9
 c28:	af 92       	push	r10
 c2a:	bf 92       	push	r11
 c2c:	cf 92       	push	r12
 c2e:	df 92       	push	r13
 c30:	ef 92       	push	r14
 c32:	ff 92       	push	r15
 c34:	0f 93       	push	r16
 c36:	1f 93       	push	r17
 c38:	cf 93       	push	r28
 c3a:	df 93       	push	r29
 c3c:	cd b7       	in	r28, 0x3d	; 61
 c3e:	de b7       	in	r29, 0x3e	; 62
 c40:	ca 1b       	sub	r28, r26
 c42:	db 0b       	sbc	r29, r27
 c44:	0f b6       	in	r0, 0x3f	; 63
 c46:	f8 94       	cli
 c48:	de bf       	out	0x3e, r29	; 62
 c4a:	0f be       	out	0x3f, r0	; 63
 c4c:	cd bf       	out	0x3d, r28	; 61
 c4e:	09 94       	ijmp

00000c50 <__epilogue_restores__>:
 c50:	2a 88       	ldd	r2, Y+18	; 0x12
 c52:	39 88       	ldd	r3, Y+17	; 0x11
 c54:	48 88       	ldd	r4, Y+16	; 0x10
 c56:	5f 84       	ldd	r5, Y+15	; 0x0f
 c58:	6e 84       	ldd	r6, Y+14	; 0x0e
 c5a:	7d 84       	ldd	r7, Y+13	; 0x0d
 c5c:	8c 84       	ldd	r8, Y+12	; 0x0c
 c5e:	9b 84       	ldd	r9, Y+11	; 0x0b
 c60:	aa 84       	ldd	r10, Y+10	; 0x0a
 c62:	b9 84       	ldd	r11, Y+9	; 0x09
 c64:	c8 84       	ldd	r12, Y+8	; 0x08
 c66:	df 80       	ldd	r13, Y+7	; 0x07
 c68:	ee 80       	ldd	r14, Y+6	; 0x06
 c6a:	fd 80       	ldd	r15, Y+5	; 0x05
 c6c:	0c 81       	ldd	r16, Y+4	; 0x04
 c6e:	1b 81       	ldd	r17, Y+3	; 0x03
 c70:	aa 81       	ldd	r26, Y+2	; 0x02
 c72:	b9 81       	ldd	r27, Y+1	; 0x01
 c74:	ce 0f       	add	r28, r30
 c76:	d1 1d       	adc	r29, r1
 c78:	0f b6       	in	r0, 0x3f	; 63
 c7a:	f8 94       	cli
 c7c:	de bf       	out	0x3e, r29	; 62
 c7e:	0f be       	out	0x3f, r0	; 63
 c80:	cd bf       	out	0x3d, r28	; 61
 c82:	ed 01       	movw	r28, r26
 c84:	08 95       	ret

00000c86 <_exit>:
 c86:	f8 94       	cli

00000c88 <__stop_program>:
 c88:	ff cf       	rjmp	.-2      	; 0xc88 <__stop_program>
