
Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000304  00800100  00003898  0000392c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800404  00800404  00003c30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00003cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005407  00000000  00000000  00003f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013ad  00000000  00000000  0000932f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000028ba  00000000  00000000  0000a6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000644  00000000  00000000  0000cf98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008fc  00000000  00000000  0000d5dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029a2  00000000  00000000  0000ded8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0001087a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__ctors_end>
       4:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_1>
       8:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
       c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      10:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      14:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      18:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      1c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      20:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      24:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      28:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      2c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      30:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      34:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      38:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      3c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      40:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      44:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      48:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      4c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      50:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      54:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      58:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      5c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      60:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      64:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      68:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      6c:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__bad_interrupt>
      70:	2a 05       	cpc	r18, r10
      72:	2a 06       	cpc	r2, r26
      74:	89 06       	cpc	r8, r25
      76:	0a 07       	cpc	r16, r26
      78:	64 07       	cpc	r22, r20
      7a:	b1 07       	cpc	r27, r17
      7c:	fe 07       	cpc	r31, r30
      7e:	5d 08       	sbc	r5, r13
      80:	bd 08       	sbc	r11, r13
      82:	15 09       	sbc	r17, r5
      84:	73 09       	sbc	r23, r3
      86:	c0 09       	sbc	r28, r0
      88:	1f 0a       	sbc	r1, r31
      8a:	76 0a       	sbc	r7, r22
      8c:	d3 0a       	sbc	r13, r19
      8e:	31 0b       	sbc	r19, r17
      90:	7d 0b       	sbc	r23, r29
      92:	d4 0b       	sbc	r29, r20
      94:	28 0c       	add	r2, r8
      96:	74 0c       	add	r7, r4
      98:	c8 0c       	add	r12, r8
      9a:	14 0d       	add	r17, r4
      9c:	68 0d       	add	r22, r8
      9e:	b4 0d       	add	r27, r4
      a0:	69 0e       	add	r6, r25
      a2:	1e 0f       	add	r17, r30
      a4:	63 0f       	add	r22, r19
      a6:	db 0f       	add	r29, r27
      a8:	80 10       	cpse	r8, r0

000000aa <__trampolines_end>:
	...
      b2:	00 06       	cpc	r0, r16
      b4:	5f 5f       	subi	r21, 0xFF	; 255
      b6:	06 00       	.word	0x0006	; ????
      b8:	00 00       	nop
      ba:	00 07       	cpc	r16, r16
      bc:	07 00       	.word	0x0007	; ????
      be:	07 07       	cpc	r16, r23
      c0:	00 00       	nop
      c2:	14 7f       	andi	r17, 0xF4	; 244
      c4:	7f 14       	cp	r7, r15
      c6:	7f 7f       	andi	r23, 0xFF	; 255
      c8:	14 00       	.word	0x0014	; ????
      ca:	24 2e       	mov	r2, r20
      cc:	6b 6b       	ori	r22, 0xBB	; 187
      ce:	3a 12       	cpse	r3, r26
      d0:	00 00       	nop
      d2:	46 66       	ori	r20, 0x66	; 102
      d4:	30 18       	sub	r3, r0
      d6:	0c 66       	ori	r16, 0x6C	; 108
      d8:	62 00       	.word	0x0062	; ????
      da:	30 7a       	andi	r19, 0xA0	; 160
      dc:	4f 5d       	subi	r20, 0xDF	; 223
      de:	37 7a       	andi	r19, 0xA7	; 167
      e0:	48 00       	.word	0x0048	; ????
      e2:	04 07       	cpc	r16, r20
      e4:	03 00       	.word	0x0003	; ????
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	00 1c       	adc	r0, r0
      ec:	3e 63       	ori	r19, 0x3E	; 62
      ee:	41 00       	.word	0x0041	; ????
      f0:	00 00       	nop
      f2:	00 41       	sbci	r16, 0x10	; 16
      f4:	63 3e       	cpi	r22, 0xE3	; 227
      f6:	1c 00       	.word	0x001c	; ????
      f8:	00 00       	nop
      fa:	08 2a       	or	r0, r24
      fc:	3e 1c       	adc	r3, r14
      fe:	1c 3e       	cpi	r17, 0xEC	; 236
     100:	2a 08       	sbc	r2, r10
     102:	08 08       	sbc	r0, r8
     104:	3e 3e       	cpi	r19, 0xEE	; 238
     106:	08 08       	sbc	r0, r8
     108:	00 00       	nop
     10a:	00 a0       	ldd	r0, Z+32	; 0x20
     10c:	e0 60       	ori	r30, 0x00	; 0
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	08 08       	sbc	r0, r8
     114:	08 08       	sbc	r0, r8
     116:	08 08       	sbc	r0, r8
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	60 60       	ori	r22, 0x00	; 0
     11e:	00 00       	nop
     120:	00 00       	nop
     122:	60 30       	cpi	r22, 0x00	; 0
     124:	18 0c       	add	r1, r8
     126:	06 03       	mulsu	r16, r22
     128:	01 00       	.word	0x0001	; ????
     12a:	3e 7f       	andi	r19, 0xFE	; 254
     12c:	59 4d       	sbci	r21, 0xD9	; 217
     12e:	7f 3e       	cpi	r23, 0xEF	; 239
     130:	00 00       	nop
     132:	42 42       	sbci	r20, 0x22	; 34
     134:	7f 7f       	andi	r23, 0xFF	; 255
     136:	40 40       	sbci	r20, 0x00	; 0
     138:	00 00       	nop
     13a:	62 73       	andi	r22, 0x32	; 50
     13c:	59 49       	sbci	r21, 0x99	; 153
     13e:	6f 66       	ori	r22, 0x6F	; 111
     140:	00 00       	nop
     142:	22 63       	ori	r18, 0x32	; 50
     144:	49 49       	sbci	r20, 0x99	; 153
     146:	7f 36       	cpi	r23, 0x6F	; 111
     148:	00 00       	nop
     14a:	18 1c       	adc	r1, r8
     14c:	16 13       	cpse	r17, r22
     14e:	7f 7f       	andi	r23, 0xFF	; 255
     150:	10 00       	.word	0x0010	; ????
     152:	27 67       	ori	r18, 0x77	; 119
     154:	45 45       	sbci	r20, 0x55	; 85
     156:	7d 39       	cpi	r23, 0x9D	; 157
     158:	00 00       	nop
     15a:	3c 7e       	andi	r19, 0xEC	; 236
     15c:	4b 49       	sbci	r20, 0x9B	; 155
     15e:	79 30       	cpi	r23, 0x09	; 9
     160:	00 00       	nop
     162:	03 63       	ori	r16, 0x33	; 51
     164:	71 19       	sub	r23, r1
     166:	0f 07       	cpc	r16, r31
     168:	00 00       	nop
     16a:	36 7f       	andi	r19, 0xF6	; 246
     16c:	49 49       	sbci	r20, 0x99	; 153
     16e:	7f 36       	cpi	r23, 0x6F	; 111
     170:	00 00       	nop
     172:	06 4f       	sbci	r16, 0xF6	; 246
     174:	49 69       	ori	r20, 0x99	; 153
     176:	3f 1e       	adc	r3, r31
     178:	00 00       	nop
     17a:	00 00       	nop
     17c:	6c 6c       	ori	r22, 0xCC	; 204
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	00 a0       	ldd	r0, Z+32	; 0x20
     184:	ec 6c       	ori	r30, 0xCC	; 204
     186:	00 00       	nop
     188:	00 00       	nop
     18a:	08 1c       	adc	r0, r8
     18c:	36 63       	ori	r19, 0x36	; 54
     18e:	41 00       	.word	0x0041	; ????
     190:	00 00       	nop
     192:	14 14       	cp	r1, r4
     194:	14 14       	cp	r1, r4
     196:	14 14       	cp	r1, r4
     198:	00 00       	nop
     19a:	00 41       	sbci	r16, 0x10	; 16
     19c:	63 36       	cpi	r22, 0x63	; 99
     19e:	1c 08       	sbc	r1, r12
     1a0:	00 00       	nop
     1a2:	02 03       	mulsu	r16, r18
     1a4:	51 59       	subi	r21, 0x91	; 145
     1a6:	0f 06       	cpc	r0, r31
     1a8:	00 00       	nop
     1aa:	3e 7f       	andi	r19, 0xFE	; 254
     1ac:	41 5d       	subi	r20, 0xD1	; 209
     1ae:	5d 1f       	adc	r21, r29
     1b0:	1e 00       	.word	0x001e	; ????
     1b2:	7c 7e       	andi	r23, 0xEC	; 236
     1b4:	13 13       	cpse	r17, r19
     1b6:	7e 7c       	andi	r23, 0xCE	; 206
     1b8:	00 00       	nop
     1ba:	41 7f       	andi	r20, 0xF1	; 241
     1bc:	7f 49       	sbci	r23, 0x9F	; 159
     1be:	49 7f       	andi	r20, 0xF9	; 249
     1c0:	36 00       	.word	0x0036	; ????
     1c2:	1c 3e       	cpi	r17, 0xEC	; 236
     1c4:	63 41       	sbci	r22, 0x13	; 19
     1c6:	41 63       	ori	r20, 0x31	; 49
     1c8:	22 00       	.word	0x0022	; ????
     1ca:	41 7f       	andi	r20, 0xF1	; 241
     1cc:	7f 41       	sbci	r23, 0x1F	; 31
     1ce:	63 7f       	andi	r22, 0xF3	; 243
     1d0:	1c 00       	.word	0x001c	; ????
     1d2:	41 7f       	andi	r20, 0xF1	; 241
     1d4:	7f 49       	sbci	r23, 0x9F	; 159
     1d6:	5d 41       	sbci	r21, 0x1D	; 29
     1d8:	63 00       	.word	0x0063	; ????
     1da:	41 7f       	andi	r20, 0xF1	; 241
     1dc:	7f 49       	sbci	r23, 0x9F	; 159
     1de:	1d 01       	movw	r2, r26
     1e0:	03 00       	.word	0x0003	; ????
     1e2:	1c 3e       	cpi	r17, 0xEC	; 236
     1e4:	63 41       	sbci	r22, 0x13	; 19
     1e6:	51 73       	andi	r21, 0x31	; 49
     1e8:	72 00       	.word	0x0072	; ????
     1ea:	7f 7f       	andi	r23, 0xFF	; 255
     1ec:	08 08       	sbc	r0, r8
     1ee:	7f 7f       	andi	r23, 0xFF	; 255
     1f0:	00 00       	nop
     1f2:	00 41       	sbci	r16, 0x10	; 16
     1f4:	7f 7f       	andi	r23, 0xFF	; 255
     1f6:	41 00       	.word	0x0041	; ????
     1f8:	00 00       	nop
     1fa:	30 70       	andi	r19, 0x00	; 0
     1fc:	40 41       	sbci	r20, 0x10	; 16
     1fe:	7f 3f       	cpi	r23, 0xFF	; 255
     200:	01 00       	.word	0x0001	; ????
     202:	41 7f       	andi	r20, 0xF1	; 241
     204:	7f 08       	sbc	r7, r15
     206:	1c 77       	andi	r17, 0x7C	; 124
     208:	63 00       	.word	0x0063	; ????
     20a:	41 7f       	andi	r20, 0xF1	; 241
     20c:	7f 41       	sbci	r23, 0x1F	; 31
     20e:	40 60       	ori	r20, 0x00	; 0
     210:	70 00       	.word	0x0070	; ????
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	06 0c       	add	r0, r6
     216:	06 7f       	andi	r16, 0xF6	; 246
     218:	7f 00       	.word	0x007f	; ????
     21a:	7f 7f       	andi	r23, 0xFF	; 255
     21c:	06 0c       	add	r0, r6
     21e:	18 7f       	andi	r17, 0xF8	; 248
     220:	7f 00       	.word	0x007f	; ????
     222:	1c 3e       	cpi	r17, 0xEC	; 236
     224:	63 41       	sbci	r22, 0x13	; 19
     226:	63 3e       	cpi	r22, 0xE3	; 227
     228:	1c 00       	.word	0x001c	; ????
     22a:	41 7f       	andi	r20, 0xF1	; 241
     22c:	7f 49       	sbci	r23, 0x9F	; 159
     22e:	09 0f       	add	r16, r25
     230:	06 00       	.word	0x0006	; ????
     232:	1e 3f       	cpi	r17, 0xFE	; 254
     234:	21 71       	andi	r18, 0x11	; 17
     236:	7f 5e       	subi	r23, 0xEF	; 239
     238:	00 00       	nop
     23a:	41 7f       	andi	r20, 0xF1	; 241
     23c:	7f 19       	sub	r23, r15
     23e:	39 6f       	ori	r19, 0xF9	; 249
     240:	46 00       	.word	0x0046	; ????
     242:	26 67       	ori	r18, 0x76	; 118
     244:	4d 59       	subi	r20, 0x9D	; 157
     246:	7b 32       	cpi	r23, 0x2B	; 43
     248:	00 00       	nop
     24a:	03 41       	sbci	r16, 0x13	; 19
     24c:	7f 7f       	andi	r23, 0xFF	; 255
     24e:	41 03       	mulsu	r20, r17
     250:	00 00       	nop
     252:	7f 7f       	andi	r23, 0xFF	; 255
     254:	40 40       	sbci	r20, 0x00	; 0
     256:	7f 7f       	andi	r23, 0xFF	; 255
     258:	00 00       	nop
     25a:	1f 3f       	cpi	r17, 0xFF	; 255
     25c:	60 60       	ori	r22, 0x00	; 0
     25e:	3f 1f       	adc	r19, r31
     260:	00 00       	nop
     262:	7f 7f       	andi	r23, 0xFF	; 255
     264:	30 18       	sub	r3, r0
     266:	30 7f       	andi	r19, 0xF0	; 240
     268:	7f 00       	.word	0x007f	; ????
     26a:	63 77       	andi	r22, 0x73	; 115
     26c:	1c 08       	sbc	r1, r12
     26e:	1c 77       	andi	r17, 0x7C	; 124
     270:	63 00       	.word	0x0063	; ????
     272:	07 4f       	sbci	r16, 0xF7	; 247
     274:	78 78       	andi	r23, 0x88	; 136
     276:	4f 07       	cpc	r20, r31
     278:	00 00       	nop
     27a:	67 73       	andi	r22, 0x37	; 55
     27c:	59 4d       	sbci	r21, 0xD9	; 217
     27e:	47 63       	ori	r20, 0x37	; 55
     280:	71 00       	.word	0x0071	; ????
     282:	00 7f       	andi	r16, 0xF0	; 240
     284:	7f 41       	sbci	r23, 0x1F	; 31
     286:	41 00       	.word	0x0041	; ????
     288:	00 00       	nop
     28a:	00 00       	nop
     28c:	00 00       	nop
     28e:	06 06       	cpc	r0, r22
     290:	02 02       	muls	r16, r18
     292:	00 00       	nop
     294:	00 00       	nop
     296:	0e 06       	cpc	r0, r30
     298:	06 06       	cpc	r0, r22
     29a:	00 02       	muls	r16, r16
     29c:	02 02       	muls	r16, r18
     29e:	02 02       	muls	r16, r18
     2a0:	02 00       	.word	0x0002	; ????
     2a2:	06 06       	cpc	r0, r22
     2a4:	06 06       	cpc	r0, r22
     2a6:	06 06       	cpc	r0, r22
     2a8:	06 06       	cpc	r0, r22
     2aa:	06 06       	cpc	r0, r22
     2ac:	06 0e       	add	r0, r22
     2ae:	00 00       	nop
     2b0:	00 00       	nop
     2b2:	20 74       	andi	r18, 0x40	; 64
     2b4:	54 54       	subi	r21, 0x44	; 68
     2b6:	3c 78       	andi	r19, 0x8C	; 140
     2b8:	40 00       	.word	0x0040	; ????
     2ba:	41 3f       	cpi	r20, 0xF1	; 241
     2bc:	7f 44       	sbci	r23, 0x4F	; 79
     2be:	44 7c       	andi	r20, 0xC4	; 196
     2c0:	38 00       	.word	0x0038	; ????
     2c2:	38 7c       	andi	r19, 0xC8	; 200
     2c4:	44 44       	sbci	r20, 0x44	; 68
     2c6:	6c 28       	or	r6, r12
     2c8:	00 00       	nop
     2ca:	30 78       	andi	r19, 0x80	; 128
     2cc:	48 49       	sbci	r20, 0x98	; 152
     2ce:	3f 7f       	andi	r19, 0xFF	; 255
     2d0:	40 00       	.word	0x0040	; ????
     2d2:	38 7c       	andi	r19, 0xC8	; 200
     2d4:	54 54       	subi	r21, 0x44	; 68
     2d6:	5c 18       	sub	r5, r12
     2d8:	00 00       	nop
     2da:	48 7e       	andi	r20, 0xE8	; 232
     2dc:	7f 49       	sbci	r23, 0x9F	; 159
     2de:	03 02       	muls	r16, r19
     2e0:	00 00       	nop
     2e2:	98 bc       	out	0x28, r9	; 40
     2e4:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2e6:	f8 7c       	andi	r31, 0xC8	; 200
     2e8:	04 00       	.word	0x0004	; ????
     2ea:	41 7f       	andi	r20, 0xF1	; 241
     2ec:	7f 08       	sbc	r7, r15
     2ee:	04 7c       	andi	r16, 0xC4	; 196
     2f0:	78 00       	.word	0x0078	; ????
     2f2:	00 44       	sbci	r16, 0x40	; 64
     2f4:	7d 7d       	andi	r23, 0xDD	; 221
     2f6:	40 00       	.word	0x0040	; ????
     2f8:	00 00       	nop
     2fa:	40 c4       	rjmp	.+2176   	; 0xb7c <init_menu+0x178>
     2fc:	84 fd       	sbrc	r24, 4
     2fe:	7d 00       	.word	0x007d	; ????
     300:	00 00       	nop
     302:	41 7f       	andi	r20, 0xF1	; 241
     304:	7f 10       	cpse	r7, r15
     306:	38 6c       	ori	r19, 0xC8	; 200
     308:	44 00       	.word	0x0044	; ????
     30a:	00 41       	sbci	r16, 0x10	; 16
     30c:	7f 7f       	andi	r23, 0xFF	; 255
     30e:	40 00       	.word	0x0040	; ????
     310:	00 00       	nop
     312:	7c 7c       	andi	r23, 0xCC	; 204
     314:	0c 18       	sub	r0, r12
     316:	0c 7c       	andi	r16, 0xCC	; 204
     318:	78 00       	.word	0x0078	; ????
     31a:	7c 7c       	andi	r23, 0xCC	; 204
     31c:	04 04       	cpc	r0, r4
     31e:	7c 78       	andi	r23, 0x8C	; 140
     320:	00 00       	nop
     322:	38 7c       	andi	r19, 0xC8	; 200
     324:	44 44       	sbci	r20, 0x44	; 68
     326:	7c 38       	cpi	r23, 0x8C	; 140
     328:	00 00       	nop
     32a:	84 fc       	sbrc	r8, 4
     32c:	f8 a4       	ldd	r15, Y+40	; 0x28
     32e:	24 3c       	cpi	r18, 0xC4	; 196
     330:	18 00       	.word	0x0018	; ????
     332:	18 3c       	cpi	r17, 0xC8	; 200
     334:	24 a4       	ldd	r2, Z+44	; 0x2c
     336:	f8 fc       	.word	0xfcf8	; ????
     338:	84 00       	.word	0x0084	; ????
     33a:	44 7c       	andi	r20, 0xC4	; 196
     33c:	78 44       	sbci	r23, 0x48	; 72
     33e:	1c 18       	sub	r1, r12
     340:	00 00       	nop
     342:	48 5c       	subi	r20, 0xC8	; 200
     344:	54 54       	subi	r21, 0x44	; 68
     346:	74 24       	eor	r7, r4
     348:	00 00       	nop
     34a:	00 04       	cpc	r0, r0
     34c:	3e 7f       	andi	r19, 0xFE	; 254
     34e:	44 24       	eor	r4, r4
     350:	00 00       	nop
     352:	3c 7c       	andi	r19, 0xCC	; 204
     354:	40 40       	sbci	r20, 0x00	; 0
     356:	3c 7c       	andi	r19, 0xCC	; 204
     358:	40 00       	.word	0x0040	; ????
     35a:	1c 3c       	cpi	r17, 0xCC	; 204
     35c:	60 60       	ori	r22, 0x00	; 0
     35e:	3c 1c       	adc	r3, r12
     360:	00 00       	nop
     362:	3c 7c       	andi	r19, 0xCC	; 204
     364:	60 30       	cpi	r22, 0x00	; 0
     366:	60 7c       	andi	r22, 0xC0	; 192
     368:	3c 00       	.word	0x003c	; ????
     36a:	44 6c       	ori	r20, 0xC4	; 196
     36c:	38 10       	cpse	r3, r8
     36e:	38 6c       	ori	r19, 0xC8	; 200
     370:	44 00       	.word	0x0044	; ????
     372:	9c bc       	out	0x2c, r9	; 44
     374:	a0 a0       	ldd	r10, Z+32	; 0x20
     376:	fc 7c       	andi	r31, 0xCC	; 204
     378:	00 00       	nop
     37a:	4c 64       	ori	r20, 0x4C	; 76
     37c:	74 5c       	subi	r23, 0xC4	; 196
     37e:	4c 64       	ori	r20, 0x4C	; 76
     380:	00 00       	nop
     382:	08 08       	sbc	r0, r8
     384:	3e 77       	andi	r19, 0x7E	; 126
     386:	41 41       	sbci	r20, 0x11	; 17
     388:	00 00       	nop
     38a:	00 00       	nop
     38c:	00 77       	andi	r16, 0x70	; 112
     38e:	77 00       	.word	0x0077	; ????
     390:	00 00       	nop
     392:	00 1e       	adc	r0, r16
     394:	3f fc       	.word	0xfc3f	; ????
     396:	fc 3f       	cpi	r31, 0xFC	; 252
     398:	1e 00       	.word	0x001e	; ????
     39a:	38 7c       	andi	r19, 0xC8	; 200
     39c:	7c 7c       	andi	r23, 0xCC	; 204
     39e:	7c 38       	cpi	r23, 0x8C	; 140
	...

000003a2 <__ctors_end>:
     3a2:	11 24       	eor	r1, r1
     3a4:	1f be       	out	0x3f, r1	; 63
     3a6:	cf ef       	ldi	r28, 0xFF	; 255
     3a8:	d4 e0       	ldi	r29, 0x04	; 4
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	cd bf       	out	0x3d, r28	; 61

000003ae <__do_copy_data>:
     3ae:	14 e0       	ldi	r17, 0x04	; 4
     3b0:	a0 e0       	ldi	r26, 0x00	; 0
     3b2:	b1 e0       	ldi	r27, 0x01	; 1
     3b4:	e8 e9       	ldi	r30, 0x98	; 152
     3b6:	f8 e3       	ldi	r31, 0x38	; 56
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <__do_copy_data+0x10>
     3ba:	05 90       	lpm	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	a4 30       	cpi	r26, 0x04	; 4
     3c0:	b1 07       	cpc	r27, r17
     3c2:	d9 f7       	brne	.-10     	; 0x3ba <__do_copy_data+0xc>

000003c4 <__do_clear_bss>:
     3c4:	24 e0       	ldi	r18, 0x04	; 4
     3c6:	a4 e0       	ldi	r26, 0x04	; 4
     3c8:	b4 e0       	ldi	r27, 0x04	; 4
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <.do_clear_bss_start>

000003cc <.do_clear_bss_loop>:
     3cc:	1d 92       	st	X+, r1

000003ce <.do_clear_bss_start>:
     3ce:	af 34       	cpi	r26, 0x4F	; 79
     3d0:	b2 07       	cpc	r27, r18
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <.do_clear_bss_loop>
     3d4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <main>
     3d8:	0c 94 4a 1c 	jmp	0x3894	; 0x3894 <_exit>

000003dc <__bad_interrupt>:
     3dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003e0 <ADC_init>:
#include "setup.h"
#include <util/delay.h>

int ADC_init(void) {
	//Enable the external memory interface/4 bits address, page 26-35 in Atmega162 data sheet
	MCUCR |= (1<<SRE);
     3e0:	85 b7       	in	r24, 0x35	; 53
     3e2:	80 68       	ori	r24, 0x80	; 128
     3e4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     3e6:	80 b7       	in	r24, 0x30	; 48
     3e8:	80 62       	ori	r24, 0x20	; 32
     3ea:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input, INT0, PD2
	DDRB &= ~(1<<PIND2);
     3ec:	ba 98       	cbi	0x17, 2	; 23
	
	return 0;
}
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	08 95       	ret

000003f4 <ADC_read>:
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC, used as chip select
	volatile char *adc = (char *) 0x1400;
	
	//checks if the channel is valid, we can only use channel 1-4.
	if(channel > 3) {return 0;}
     3f4:	84 30       	cpi	r24, 0x04	; 4
     3f6:	48 f4       	brcc	.+18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	
	//Choose channel in ADC, lets us chose what device we want to read
	*adc = 0x04 | channel;
     3f8:	84 60       	ori	r24, 0x04	; 4
     3fa:	e0 e0       	ldi	r30, 0x00	; 0
     3fc:	f4 e1       	ldi	r31, 0x14	; 20
     3fe:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     400:	84 ea       	ldi	r24, 0xA4	; 164
     402:	8a 95       	dec	r24
     404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>

	//delay to let the adc finish its conversion
	_delay_us(100);
	return *adc;
     406:	80 81       	ld	r24, Z
     408:	08 95       	ret
uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC, used as chip select
	volatile char *adc = (char *) 0x1400;
	
	//checks if the channel is valid, we can only use channel 1-4.
	if(channel > 3) {return 0;}
     40a:	80 e0       	ldi	r24, 0x00	; 0
	*adc = 0x04 | channel;

	//delay to let the adc finish its conversion
	_delay_us(100);
	return *adc;
     40c:	08 95       	ret

0000040e <CAN_init>:

uint8_t rx_flag = 0;

int CAN_init(void) {
	//Enter config mode
	mcp2515_init();
     40e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <mcp2515_init>
			
	//RX0 - Turn masks/filters off, rollover disabled
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100100, 0xFF);
     412:	4f ef       	ldi	r20, 0xFF	; 255
     414:	64 e6       	ldi	r22, 0x64	; 100
     416:	80 e6       	ldi	r24, 0x60	; 96
     418:	0e 94 a8 04 	call	0x950	; 0x950 <mcp2515_bit_modify>
	
	//Enable normal mode
	mcp2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	60 ee       	ldi	r22, 0xE0	; 224
     420:	8f e0       	ldi	r24, 0x0F	; 15
     422:	0e 94 a8 04 	call	0x950	; 0x950 <mcp2515_bit_modify>
	
	//Enable interrupt when message is received (RX0IE = 1)
	mcp2515_bit_modify(MCP_CANINTE, 0x01, 1);
     426:	41 e0       	ldi	r20, 0x01	; 1
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	8b e2       	ldi	r24, 0x2B	; 43
     42c:	0e 94 a8 04 	call	0x950	; 0x950 <mcp2515_bit_modify>

	return 0;
}
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	08 95       	ret

00000436 <CAN_error>:
	
	return 0;
}

int CAN_error(void) {
	uint8_t error = mcp2515_read(MCP_TXB0CTRL);
     436:	80 e3       	ldi	r24, 0x30	; 48
     438:	0e 94 ce 04 	call	0x99c	; 0x99c <mcp2515_read>
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
     43c:	84 fd       	sbrc	r24, 4
     43e:	05 c0       	rjmp	.+10     	; 0x44a <CAN_error+0x14>
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
     440:	85 fd       	sbrc	r24, 5
     442:	06 c0       	rjmp	.+12     	; 0x450 <CAN_error+0x1a>
	
	return 0;
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	08 95       	ret

int CAN_error(void) {
	uint8_t error = mcp2515_read(MCP_TXB0CTRL);
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	9f ef       	ldi	r25, 0xFF	; 255
     44e:	08 95       	ret
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
     450:	8e ef       	ldi	r24, 0xFE	; 254
     452:	9f ef       	ldi	r25, 0xFF	; 255
	
	return 0;
}
     454:	08 95       	ret

00000456 <CAN_transmit_complete>:


int CAN_transmit_complete(void) {
	//Check if TX buffer is not pending transmission (TXREQ = 0)
	if (test_bit(mcp2515_read(MCP_TXB0CTRL), 3)) {
     456:	80 e3       	ldi	r24, 0x30	; 48
     458:	0e 94 ce 04 	call	0x99c	; 0x99c <mcp2515_read>
     45c:	86 95       	lsr	r24
     45e:	86 95       	lsr	r24
     460:	86 95       	lsr	r24
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	89 27       	eor	r24, r25
		return 0;
	} else {
		return 1;
	}
}
     466:	81 70       	andi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	08 95       	ret

0000046c <CAN_message_send>:
	mcp2515_bit_modify(MCP_CANINTE, 0x01, 1);

	return 0;
}

int CAN_message_send(CAN_message_t* message) {
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	8c 01       	movw	r16, r24
	uint8_t i;
	
	//Check if there is no pending transmission
	if (CAN_transmit_complete()) {
     474:	0e 94 2b 02 	call	0x456	; 0x456 <CAN_transmit_complete>
     478:	89 2b       	or	r24, r25
     47a:	c1 f1       	breq	.+112    	; 0x4ec <CAN_message_send+0x80>
		
		//Set the message id (use standard identifier)
		mcp2515_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
     47c:	f8 01       	movw	r30, r16
     47e:	60 81       	ld	r22, Z
     480:	71 81       	ldd	r23, Z+1	; 0x01
     482:	75 95       	asr	r23
     484:	67 95       	ror	r22
     486:	75 95       	asr	r23
     488:	67 95       	ror	r22
     48a:	75 95       	asr	r23
     48c:	67 95       	ror	r22
     48e:	81 e3       	ldi	r24, 0x31	; 49
     490:	0e 94 80 04 	call	0x900	; 0x900 <mcp2515_write>
		mcp2515_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
     494:	f8 01       	movw	r30, r16
     496:	60 81       	ld	r22, Z
     498:	71 81       	ldd	r23, Z+1	; 0x01
     49a:	66 0f       	add	r22, r22
     49c:	77 1f       	adc	r23, r23
     49e:	62 95       	swap	r22
     4a0:	72 95       	swap	r23
     4a2:	70 7f       	andi	r23, 0xF0	; 240
     4a4:	76 27       	eor	r23, r22
     4a6:	60 7f       	andi	r22, 0xF0	; 240
     4a8:	76 27       	eor	r23, r22
     4aa:	82 e3       	ldi	r24, 0x32	; 50
     4ac:	0e 94 80 04 	call	0x900	; 0x900 <mcp2515_write>
		
		//Set data length and use data frame (RTR = 0)
		mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));
     4b0:	f8 01       	movw	r30, r16
     4b2:	62 81       	ldd	r22, Z+2	; 0x02
     4b4:	6f 70       	andi	r22, 0x0F	; 15
     4b6:	85 e3       	ldi	r24, 0x35	; 53
     4b8:	0e 94 80 04 	call	0x900	; 0x900 <mcp2515_write>

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
     4bc:	f8 01       	movw	r30, r16
     4be:	82 81       	ldd	r24, Z+2	; 0x02
     4c0:	88 23       	and	r24, r24
     4c2:	71 f0       	breq	.+28     	; 0x4e0 <CAN_message_send+0x74>
     4c4:	c0 e0       	ldi	r28, 0x00	; 0
			mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
     4c6:	f8 01       	movw	r30, r16
     4c8:	ec 0f       	add	r30, r28
     4ca:	f1 1d       	adc	r31, r1
     4cc:	63 81       	ldd	r22, Z+3	; 0x03
     4ce:	86 e3       	ldi	r24, 0x36	; 54
     4d0:	8c 0f       	add	r24, r28
     4d2:	0e 94 80 04 	call	0x900	; 0x900 <mcp2515_write>
		
		//Set data length and use data frame (RTR = 0)
		mcp2515_write(MCP_TXB0DLC, (0x0F) & (message->length));

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
     4d6:	cf 5f       	subi	r28, 0xFF	; 255
     4d8:	f8 01       	movw	r30, r16
     4da:	82 81       	ldd	r24, Z+2	; 0x02
     4dc:	c8 17       	cp	r28, r24
     4de:	98 f3       	brcs	.-26     	; 0x4c6 <CAN_message_send+0x5a>
			mcp2515_write(MCP_TXB0D0 + i, message->data[i]);
		}
		
		//Request to send via TX0
		mcp2515_request_to_send(1);
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 96 04 	call	0x92c	; 0x92c <mcp2515_request_to_send>
		if (CAN_error() < 0) {
			return -1;
		}
	}
	
	return 0;
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	07 c0       	rjmp	.+14     	; 0x4fa <CAN_message_send+0x8e>
		
		//Request to send via TX0
		mcp2515_request_to_send(1);
		
	} else {
		if (CAN_error() < 0) {
     4ec:	0e 94 1b 02 	call	0x436	; 0x436 <CAN_error>
     4f0:	99 0f       	add	r25, r25
     4f2:	99 0b       	sbc	r25, r25
     4f4:	89 2f       	mov	r24, r25
     4f6:	99 0f       	add	r25, r25
     4f8:	99 0b       	sbc	r25, r25
			return -1;
		}
	}
	
	return 0;
}
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <CAN_int_vect>:
	}
}

int CAN_int_vect(void) {
	//Clear interrupt flag
	mcp2515_bit_modify(MCP_CANINTF, 0x01, 0);
     502:	40 e0       	ldi	r20, 0x00	; 0
     504:	61 e0       	ldi	r22, 0x01	; 1
     506:	8c e2       	ldi	r24, 0x2C	; 44
     508:	0e 94 a8 04 	call	0x950	; 0x950 <mcp2515_bit_modify>
	rx_flag = 1;
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <__data_end>

	return 0;
}
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	08 95       	ret

00000518 <CAN_data_receive>:

CAN_message_t CAN_data_receive(void) {
     518:	9f 92       	push	r9
     51a:	af 92       	push	r10
     51c:	bf 92       	push	r11
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	2b 97       	sbiw	r28, 0x0b	; 11
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	5c 01       	movw	r10, r24
	uint8_t i;
	CAN_message_t message;
	
	//Check if RX buffer has a message
	if (rx_flag == 1) {
     540:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <__data_end>
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	59 f5       	brne	.+86     	; 0x59e <CAN_data_receive+0x86>
		
		//Get message id
		message.id  = (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     548:	81 e6       	ldi	r24, 0x61	; 97
     54a:	0e 94 ce 04 	call	0x99c	; 0x99c <mcp2515_read>
     54e:	c8 2e       	mov	r12, r24
     550:	82 e6       	ldi	r24, 0x62	; 98
     552:	0e 94 ce 04 	call	0x99c	; 0x99c <mcp2515_read>
     556:	d1 2c       	mov	r13, r1
     558:	cc 0c       	add	r12, r12
     55a:	dd 1c       	adc	r13, r13
     55c:	cc 0c       	add	r12, r12
     55e:	dd 1c       	adc	r13, r13
     560:	cc 0c       	add	r12, r12
     562:	dd 1c       	adc	r13, r13
     564:	82 95       	swap	r24
     566:	86 95       	lsr	r24
     568:	87 70       	andi	r24, 0x07	; 7
     56a:	c8 2a       	or	r12, r24
	
		//Get message length
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
     56c:	85 e6       	ldi	r24, 0x65	; 101
     56e:	0e 94 ce 04 	call	0x99c	; 0x99c <mcp2515_read>
     572:	8f 70       	andi	r24, 0x0F	; 15
     574:	98 2e       	mov	r9, r24
	
		//Get message data
		for(i = 0; i < message.length; i++) {
     576:	81 f0       	breq	.+32     	; 0x598 <CAN_data_receive+0x80>
     578:	7e 01       	movw	r14, r28
     57a:	84 e0       	ldi	r24, 0x04	; 4
     57c:	e8 0e       	add	r14, r24
     57e:	f1 1c       	adc	r15, r1
     580:	06 e6       	ldi	r16, 0x66	; 102
     582:	09 0d       	add	r16, r9
     584:	16 e6       	ldi	r17, 0x66	; 102
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
     586:	81 2f       	mov	r24, r17
     588:	0e 94 ce 04 	call	0x99c	; 0x99c <mcp2515_read>
     58c:	f7 01       	movw	r30, r14
     58e:	81 93       	st	Z+, r24
     590:	7f 01       	movw	r14, r30
     592:	1f 5f       	subi	r17, 0xFF	; 255
	
		//Get message length
		message.length = (0x0F) & (mcp2515_read(MCP_RXB0DLC));
	
		//Get message data
		for(i = 0; i < message.length; i++) {
     594:	10 13       	cpse	r17, r16
     596:	f7 cf       	rjmp	.-18     	; 0x586 <CAN_data_receive+0x6e>
			message.data[i] = mcp2515_read(MCP_RXB0D0 + i);
		}
		
		//Clear interrupt flag
		rx_flag = 0;
     598:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <__data_end>
     59c:	03 c0       	rjmp	.+6      	; 0x5a4 <CAN_data_receive+0x8c>
				
	} else {
		//Message not received
		message.id = -1;
     59e:	cc 24       	eor	r12, r12
     5a0:	ca 94       	dec	r12
     5a2:	dc 2c       	mov	r13, r12
	}
	
	return message;
     5a4:	da 82       	std	Y+2, r13	; 0x02
     5a6:	c9 82       	std	Y+1, r12	; 0x01
     5a8:	9b 82       	std	Y+3, r9	; 0x03
     5aa:	8b e0       	ldi	r24, 0x0B	; 11
     5ac:	fe 01       	movw	r30, r28
     5ae:	31 96       	adiw	r30, 0x01	; 1
     5b0:	d5 01       	movw	r26, r10
     5b2:	01 90       	ld	r0, Z+
     5b4:	0d 92       	st	X+, r0
     5b6:	8a 95       	dec	r24
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <CAN_data_receive+0x9a>
}
     5ba:	c5 01       	movw	r24, r10
     5bc:	2b 96       	adiw	r28, 0x0b	; 11
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	cf 90       	pop	r12
     5d8:	bf 90       	pop	r11
     5da:	af 90       	pop	r10
     5dc:	9f 90       	pop	r9
     5de:	08 95       	ret

000005e0 <__vector_1>:

//Interrupt service routine for CAN bus
ISR(INT0_vect) {
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	2f 93       	push	r18
     5ec:	3f 93       	push	r19
     5ee:	4f 93       	push	r20
     5f0:	5f 93       	push	r21
     5f2:	6f 93       	push	r22
     5f4:	7f 93       	push	r23
     5f6:	8f 93       	push	r24
     5f8:	9f 93       	push	r25
     5fa:	af 93       	push	r26
     5fc:	bf 93       	push	r27
     5fe:	ef 93       	push	r30
     600:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     602:	89 ef       	ldi	r24, 0xF9	; 249
     604:	9f e2       	ldi	r25, 0x2F	; 47
     606:	01 97       	sbiw	r24, 0x01	; 1
     608:	f1 f7       	brne	.-4      	; 0x606 <__vector_1+0x26>
	_delay_ms(10);
	CAN_int_vect();
     60a:	0e 94 81 02 	call	0x502	; 0x502 <CAN_int_vect>
     60e:	ff 91       	pop	r31
     610:	ef 91       	pop	r30
     612:	bf 91       	pop	r27
     614:	af 91       	pop	r26
     616:	9f 91       	pop	r25
     618:	8f 91       	pop	r24
     61a:	7f 91       	pop	r23
     61c:	6f 91       	pop	r22
     61e:	5f 91       	pop	r21
     620:	4f 91       	pop	r20
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0f be       	out	0x3f, r0	; 63
     62a:	0f 90       	pop	r0
     62c:	1f 90       	pop	r1
     62e:	18 95       	reti

00000630 <JOY_calibrate>:
	return 0;
}

//the calibrate function reads the initial values of the joystick and assumes these are the neutral positions.
int JOY_calibrate(void) {
	mid_x=ADC_read(0);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     636:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <mid_x>
	mid_y=ADC_read(1);
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     640:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <mid_y>
	return 0;
}
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	08 95       	ret

0000064a <joy_init>:

uint8_t mid_x, mid_y;

int joy_init(void){
	// let the ADC set itself up
	ADC_init();
     64a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <ADC_init>
	
	//Set Button pins to input
	DDRB &= ~(1<<PINB0) & ~(1<<PINB1) & ~(1<<PINB2);
     64e:	87 b3       	in	r24, 0x17	; 23
     650:	88 7f       	andi	r24, 0xF8	; 248
     652:	87 bb       	out	0x17, r24	; 23
	//set pull up resistors
	PORTB |= (1<<PINB0) | (1<<PINB1) | (1<<PINB2); 
     654:	88 b3       	in	r24, 0x18	; 24
     656:	87 60       	ori	r24, 0x07	; 7
     658:	88 bb       	out	0x18, r24	; 24
	
	//Let the joystick calibrate itself
	JOY_calibrate();
     65a:	0e 94 18 03 	call	0x630	; 0x630 <JOY_calibrate>
	
	return 0;
}
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	08 95       	ret

00000664 <joy_button>:
	return 0;
}

// setting the inputs for the pins that the buttons are connected to
int joy_button(int button){
	switch (button) {
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	91 05       	cpc	r25, r1
     668:	59 f0       	breq	.+22     	; 0x680 <joy_button+0x1c>
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	91 05       	cpc	r25, r1
     66e:	79 f0       	breq	.+30     	; 0x68e <joy_button+0x2a>
     670:	89 2b       	or	r24, r25
     672:	a9 f4       	brne	.+42     	; 0x69e <joy_button+0x3a>
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     674:	96 b3       	in	r25, 0x16	; 22
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	89 27       	eor	r24, r25
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	08 95       	ret
			break;
		case 1: // left button
			if (!test_bit(PINB,PINB1)) return 1;
     680:	86 b3       	in	r24, 0x16	; 22

// setting the inputs for the pins that the buttons are connected to
int joy_button(int button){
	switch (button) {
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     682:	86 95       	lsr	r24
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	89 27       	eor	r24, r25
     688:	81 70       	andi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	08 95       	ret
			break;
		case 1: // left button
			if (!test_bit(PINB,PINB1)) return 1;
			break;	
		case 2: // right button
			if (!test_bit(PINB,PINB2)) return 1;
     68e:	86 b3       	in	r24, 0x16	; 22

// setting the inputs for the pins that the buttons are connected to
int joy_button(int button){
	switch (button) {
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     690:	86 95       	lsr	r24
     692:	86 95       	lsr	r24
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	89 27       	eor	r24, r25
     698:	81 70       	andi	r24, 0x01	; 1
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	08 95       	ret
			if (!test_bit(PINB,PINB2)) return 1;
			break;
		default:
				break;
	}
	return 0;
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
}
     6a2:	08 95       	ret

000006a4 <JOY_getPosition>:

// function that is used to get the position of the joystick
joy_position JOY_getPosition(void) {
     6a4:	cf 93       	push	r28
	joy_position position;
	uint8_t x, y;
	
	//Read position x from channel 0
	x = ADC_read(1);
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     6ac:	c8 2f       	mov	r28, r24
	//Read position y from channel 1
	y = ADC_read(0);
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     6b4:	e8 2f       	mov	r30, r24
	
	//Calculate position x percentage
	if(x > mid_x) {
     6b6:	40 91 0f 04 	lds	r20, 0x040F	; 0x80040f <mid_x>
     6ba:	4c 17       	cp	r20, r28
     6bc:	98 f4       	brcc	.+38     	; 0x6e4 <JOY_getPosition+0x40>
		position.x = 100 * (x - mid_x) / (0xFF - mid_x);
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	2c 2f       	mov	r18, r28
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	24 1b       	sub	r18, r20
     6c6:	35 0b       	sbc	r19, r21
     6c8:	64 e6       	ldi	r22, 0x64	; 100
     6ca:	62 9f       	mul	r22, r18
     6cc:	c0 01       	movw	r24, r0
     6ce:	63 9f       	mul	r22, r19
     6d0:	90 0d       	add	r25, r0
     6d2:	11 24       	eor	r1, r1
     6d4:	6f ef       	ldi	r22, 0xFF	; 255
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	64 1b       	sub	r22, r20
     6da:	75 0b       	sbc	r23, r21
     6dc:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__divmodhi4>
     6e0:	46 2f       	mov	r20, r22
     6e2:	13 c0       	rjmp	.+38     	; 0x70a <JOY_getPosition+0x66>
		} else if (x < mid_x) {
     6e4:	c4 17       	cp	r28, r20
     6e6:	80 f4       	brcc	.+32     	; 0x708 <JOY_getPosition+0x64>
		position.x = 100 * (x - mid_x) / (mid_x - 0);
     6e8:	64 2f       	mov	r22, r20
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	2c 2f       	mov	r18, r28
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	26 1b       	sub	r18, r22
     6f2:	37 0b       	sbc	r19, r23
     6f4:	44 e6       	ldi	r20, 0x64	; 100
     6f6:	42 9f       	mul	r20, r18
     6f8:	c0 01       	movw	r24, r0
     6fa:	43 9f       	mul	r20, r19
     6fc:	90 0d       	add	r25, r0
     6fe:	11 24       	eor	r1, r1
     700:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__divmodhi4>
     704:	46 2f       	mov	r20, r22
     706:	01 c0       	rjmp	.+2      	; 0x70a <JOY_getPosition+0x66>
		} else {
		position.x = 0;
     708:	40 e0       	ldi	r20, 0x00	; 0
	}
	
	//Calculate position y percentage
	if(y > mid_y) {
     70a:	20 91 0e 04 	lds	r18, 0x040E	; 0x80040e <mid_y>
     70e:	2e 17       	cp	r18, r30
     710:	90 f4       	brcc	.+36     	; 0x736 <JOY_getPosition+0x92>
		position.y = 100 * (y - mid_y) / (0xFF - mid_y);
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	e2 1b       	sub	r30, r18
     718:	f3 0b       	sbc	r31, r19
     71a:	54 e6       	ldi	r21, 0x64	; 100
     71c:	5e 9f       	mul	r21, r30
     71e:	c0 01       	movw	r24, r0
     720:	5f 9f       	mul	r21, r31
     722:	90 0d       	add	r25, r0
     724:	11 24       	eor	r1, r1
     726:	6f ef       	ldi	r22, 0xFF	; 255
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	62 1b       	sub	r22, r18
     72c:	73 0b       	sbc	r23, r19
     72e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__divmodhi4>
     732:	76 2f       	mov	r23, r22
     734:	13 c0       	rjmp	.+38     	; 0x75c <JOY_getPosition+0xb8>
		} else if (y < mid_y) {
     736:	e2 17       	cp	r30, r18
     738:	80 f4       	brcc	.+32     	; 0x75a <JOY_getPosition+0xb6>
		position.y = 100 * (y - mid_y) / (mid_y - 0);
     73a:	62 2f       	mov	r22, r18
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	2e 2f       	mov	r18, r30
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	26 1b       	sub	r18, r22
     744:	37 0b       	sbc	r19, r23
     746:	54 e6       	ldi	r21, 0x64	; 100
     748:	52 9f       	mul	r21, r18
     74a:	c0 01       	movw	r24, r0
     74c:	53 9f       	mul	r21, r19
     74e:	90 0d       	add	r25, r0
     750:	11 24       	eor	r1, r1
     752:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__divmodhi4>
     756:	76 2f       	mov	r23, r22
     758:	01 c0       	rjmp	.+2      	; 0x75c <JOY_getPosition+0xb8>
		} else {
		position.y = 0;
     75a:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	return position;
}
     75c:	64 2f       	mov	r22, r20
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <JOY_getDirection>:
//function to find the direction of the joystick, for use in the menu, represented both as a string and an integer
joy_position JOY_getDirection(void) {
	joy_position position;
	
	//Get actual position of joystick
	position = JOY_getPosition();
     766:	0e 94 52 03 	call	0x6a4	; 0x6a4 <JOY_getPosition>
     76a:	27 2f       	mov	r18, r23
	
	if(position.x < -45) {
     76c:	63 3d       	cpi	r22, 0xD3	; 211
     76e:	24 f0       	brlt	.+8      	; 0x778 <JOY_getDirection+0x12>
		position.sidedir = 2;
		} 
	else if(position.x > 45) {
     770:	6e 32       	cpi	r22, 0x2E	; 46
     772:	1c f0       	brlt	.+6      	; 0x77a <JOY_getDirection+0x14>
		position.sidedir = 1;
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	01 c0       	rjmp	.+2      	; 0x77a <JOY_getDirection+0x14>
	
	//Get actual position of joystick
	position = JOY_getPosition();
	
	if(position.x < -45) {
		position.sidedir = 2;
     778:	92 e0       	ldi	r25, 0x02	; 2
		} 
	else if(position.x > 45) {
		position.sidedir = 1;
	}
	
	if(position.y < -45) {
     77a:	23 3d       	cpi	r18, 0xD3	; 211
     77c:	24 f0       	brlt	.+8      	; 0x786 <JOY_getDirection+0x20>
		position.dir = 2;
		} 
	else if(position.y > 45) {
     77e:	2e 32       	cpi	r18, 0x2E	; 46
     780:	1c f0       	brlt	.+6      	; 0x788 <JOY_getDirection+0x22>
		position.dir = 1;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	01 c0       	rjmp	.+2      	; 0x788 <JOY_getDirection+0x22>
	else if(position.x > 45) {
		position.sidedir = 1;
	}
	
	if(position.y < -45) {
		position.dir = 2;
     786:	82 e0       	ldi	r24, 0x02	; 2
		} 
	else if(position.y > 45) {
		position.dir = 1;
	}
	
	if((position.x >= -44 && position.x <= 44) && (position.y >= -44 && position.y <= 44)){
     788:	2c e2       	ldi	r18, 0x2C	; 44
     78a:	26 0f       	add	r18, r22
     78c:	29 35       	cpi	r18, 0x59	; 89
     78e:	30 f4       	brcc	.+12     	; 0x79c <JOY_getDirection+0x36>
     790:	2c e2       	ldi	r18, 0x2C	; 44
     792:	27 0f       	add	r18, r23
     794:	29 35       	cpi	r18, 0x59	; 89
     796:	10 f4       	brcc	.+4      	; 0x79c <JOY_getDirection+0x36>
		position.dir = 0;
		position.sidedir = 0;
     798:	90 e0       	ldi	r25, 0x00	; 0
	else if(position.y > 45) {
		position.dir = 1;
	}
	
	if((position.x >= -44 && position.x <= 44) && (position.y >= -44 && position.y <= 44)){
		position.dir = 0;
     79a:	80 e0       	ldi	r24, 0x00	; 0
		position.sidedir = 0;
	}
	
	return position;
}
     79c:	08 95       	ret

0000079e <JOY_getSliderPosition>:
//find the slider position, for both sliders
slider_position JOY_getSliderPosition(void) {
     79e:	cf 93       	push	r28
	slider_position position;
	uint8_t l, r;
	
	//Read left slider from channel 2
	l = ADC_read(2);
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     7a6:	c8 2f       	mov	r28, r24
	//Read right slider from channel 3
	r = ADC_read(3);
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <ADC_read>
     7ae:	48 2f       	mov	r20, r24
	
	//Calculate position percentage
	position.left = 100 * l / 0xFF;
	position.right = 100 * r / 0xFF;
	
	return position;
     7b0:	24 e6       	ldi	r18, 0x64	; 100
     7b2:	2c 9f       	mul	r18, r28
     7b4:	c0 01       	movw	r24, r0
     7b6:	11 24       	eor	r1, r1
     7b8:	ef ef       	ldi	r30, 0xFF	; 255
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	bf 01       	movw	r22, r30
     7be:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__divmodhi4>
     7c2:	36 2f       	mov	r19, r22
     7c4:	24 9f       	mul	r18, r20
     7c6:	c0 01       	movw	r24, r0
     7c8:	11 24       	eor	r1, r1
     7ca:	bf 01       	movw	r22, r30
     7cc:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__divmodhi4>
     7d0:	96 2f       	mov	r25, r22
}
     7d2:	83 2f       	mov	r24, r19
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <main>:
int score = 0;
int x, y;
	
int main(void)
{
	cli();
     7d8:	f8 94       	cli
	
	GICR  |= (1 << INT0);						//Enable INT0
     7da:	8b b7       	in	r24, 0x3b	; 59
     7dc:	80 64       	ori	r24, 0x40	; 64
     7de:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (0 << ISC01) | (0 << ISC00);		//On falling edge
     7e0:	85 b7       	in	r24, 0x35	; 53
     7e2:	85 bf       	out	0x35, r24	; 53
	DDRD &= ~(1 << PIND2);						//Set D2(INT0) as input
     7e4:	8a 98       	cbi	0x11, 2	; 17
	
	UART_Init(UBRREG);
     7e6:	8e e1       	ldi	r24, 0x1E	; 30
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <UART_Init>
	ADC_init();
     7ee:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <ADC_init>
	SPI_init();
     7f2:	0e 94 5f 15 	call	0x2abe	; 0x2abe <SPI_init>
	mcp2515_init();
     7f6:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <mcp2515_init>
	joy_init();
     7fa:	0e 94 25 03 	call	0x64a	; 0x64a <joy_init>
	SRAM_init();
     7fe:	0e 94 79 15 	call	0x2af2	; 0x2af2 <SRAM_init>
	OLED_init();;
     802:	0e 94 a9 12 	call	0x2552	; 0x2552 <OLED_init>
	JOY_calibrate();
     806:	0e 94 18 03 	call	0x630	; 0x630 <JOY_calibrate>
	
	if (CAN_init() == 0) {
     80a:	0e 94 07 02 	call	0x40e	; 0x40e <CAN_init>
     80e:	89 2b       	or	r24, r25
     810:	89 f4       	brne	.+34     	; 0x834 <main+0x5c>
		printf("CAN initiated \n\r");
     812:	81 e6       	ldi	r24, 0x61	; 97
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	0e 94 18 18 	call	0x3030	; 0x3030 <printf>
		can_msg_send.id = 1;
     81e:	e0 e1       	ldi	r30, 0x10	; 16
     820:	f4 e0       	ldi	r31, 0x04	; 4
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	91 83       	std	Z+1, r25	; 0x01
     828:	80 83       	st	Z, r24
		can_msg_send.length = 8;
     82a:	88 e0       	ldi	r24, 0x08	; 8
     82c:	82 83       	std	Z+2, r24	; 0x02
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	08 c0       	rjmp	.+16     	; 0x844 <main+0x6c>
		} else {
		printf("CAN not initiated properly \n\r");
     834:	82 e7       	ldi	r24, 0x72	; 114
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	0e 94 18 18 	call	0x3030	; 0x3030 <printf>
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
	}

	if (joy_init() == 0) {
     844:	0e 94 25 03 	call	0x64a	; 0x64a <joy_init>
     848:	89 2b       	or	r24, r25
     84a:	49 f4       	brne	.+18     	; 0x85e <main+0x86>
		printf(" Joystick initiated \n\r");
     84c:	80 e9       	ldi	r24, 0x90	; 144
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	0e 94 18 18 	call	0x3030	; 0x3030 <printf>
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	08 c0       	rjmp	.+16     	; 0x86e <main+0x96>
		} else {
		printf(" Joystick not initiated properly\n\r");
     85e:	87 ea       	ldi	r24, 0xA7	; 167
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	9f 93       	push	r25
     864:	8f 93       	push	r24
     866:	0e 94 18 18 	call	0x3030	; 0x3030 <printf>
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
	}
	
	sei();
     86e:	78 94       	sei
	while(1){
			joy_pos = JOY_getDirection();
			slider_pos = JOY_getSliderPosition();
		if (gamestep == 1){
			gamestep = init_menu();
			can_msg_send.data[4] = 0;
     870:	c0 e1       	ldi	r28, 0x10	; 16
     872:	d4 e0       	ldi	r29, 0x04	; 4
     874:	ec 2e       	mov	r14, r28
     876:	fd 2e       	mov	r15, r29
			CAN_message_send(&can_msg_send);
		}
		if (gamestep == 2){
			can_msg_send.data[3] = diff;   //1 = easy ... 3 = hard
			can_msg_send.data[4] = 1;
     878:	dd 24       	eor	r13, r13
     87a:	d3 94       	inc	r13
			CAN_message_send(&can_msg_send);
			_delay_ms(50);
			score = OLED_game(diff);
			gamestep = 1;
     87c:	01 e0       	ldi	r16, 0x01	; 1
     87e:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	sei();
	
	while(1){
			joy_pos = JOY_getDirection();
     880:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
     884:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
     888:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
     88c:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
     890:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
			slider_pos = JOY_getSliderPosition();
     894:	0e 94 cf 03 	call	0x79e	; 0x79e <JOY_getSliderPosition>
     898:	90 93 32 04 	sts	0x0432, r25	; 0x800432 <slider_pos+0x1>
     89c:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <slider_pos>
		if (gamestep == 1){
     8a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <gamestep>
     8a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <gamestep+0x1>
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	59 f4       	brne	.+22     	; 0x8c2 <main+0xea>
			gamestep = init_menu();
     8ac:	0e 94 02 05 	call	0xa04	; 0xa04 <init_menu>
     8b0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <gamestep+0x1>
     8b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <gamestep>
			can_msg_send.data[4] = 0;
     8b8:	1f 82       	std	Y+7, r1	; 0x07
			CAN_message_send(&can_msg_send);
     8ba:	8e 2d       	mov	r24, r14
     8bc:	9f 2d       	mov	r25, r15
     8be:	0e 94 36 02 	call	0x46c	; 0x46c <CAN_message_send>
		}
		if (gamestep == 2){
     8c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <gamestep>
     8c6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <gamestep+0x1>
     8ca:	02 97       	sbiw	r24, 0x02	; 2
     8cc:	c9 f6       	brne	.-78     	; 0x880 <main+0xa8>
			can_msg_send.data[3] = diff;   //1 = easy ... 3 = hard
     8ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <diff>
     8d2:	8e 83       	std	Y+6, r24	; 0x06
			can_msg_send.data[4] = 1;
     8d4:	df 82       	std	Y+7, r13	; 0x07
			CAN_message_send(&can_msg_send);
     8d6:	ce 01       	movw	r24, r28
     8d8:	0e 94 36 02 	call	0x46c	; 0x46c <CAN_message_send>
     8dc:	8e ed       	ldi	r24, 0xDE	; 222
     8de:	9f ee       	ldi	r25, 0xEF	; 239
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <main+0x108>
			_delay_ms(50);
			score = OLED_game(diff);
     8e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <diff>
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 a4 14 	call	0x2948	; 0x2948 <OLED_game>
     8ee:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <score+0x1>
     8f2:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <score>
			gamestep = 1;
     8f6:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <gamestep+0x1>
     8fa:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <gamestep>
     8fe:	c0 cf       	rjmp	.-128    	; 0x880 <main+0xa8>

00000900 <mcp2515_write>:
	}
	
	return 0;
}

int mcp2515_write(uint8_t address, uint8_t data) {
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	d8 2f       	mov	r29, r24
     906:	c6 2f       	mov	r28, r22
	//Select CAN-controller
	SPI_select();
     908:	0e 94 75 15 	call	0x2aea	; 0x2aea <SPI_select>
		
	SPI_send(MCP_WRITE);	//Send write command
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
	SPI_send(address);		//Send address
     912:	8d 2f       	mov	r24, r29
     914:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
	SPI_send(data);			//Send data
     918:	8c 2f       	mov	r24, r28
     91a:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
		
	//Deselect CAN-controller
	SPI_deselect();
     91e:	0e 94 77 15 	call	0x2aee	; 0x2aee <SPI_deselect>
		
	return 0;
}
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	08 95       	ret

0000092c <mcp2515_request_to_send>:

int mcp2515_request_to_send(uint8_t command) {
     92c:	cf 93       	push	r28
	//Check the last three bits for the commands
	if(command <= 7) {
     92e:	88 30       	cpi	r24, 0x08	; 8
     930:	18 f4       	brcc	.+6      	; 0x938 <mcp2515_request_to_send+0xc>
		command = MCP_RTS | command;
     932:	c8 2f       	mov	r28, r24
     934:	c0 68       	ori	r28, 0x80	; 128
     936:	01 c0       	rjmp	.+2      	; 0x93a <mcp2515_request_to_send+0xe>
	} else {
		command = MCP_RTS;
     938:	c0 e8       	ldi	r28, 0x80	; 128
	}
	
	//Select CAN-controller
	SPI_select();
     93a:	0e 94 75 15 	call	0x2aea	; 0x2aea <SPI_select>
		
	SPI_send(command);		//Send RTS command
     93e:	8c 2f       	mov	r24, r28
     940:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
		
	//Deselect CAN-controller
	SPI_deselect();
     944:	0e 94 77 15 	call	0x2aee	; 0x2aee <SPI_deselect>
		
	return 0;
}
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <mcp2515_bit_modify>:

int mcp2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data) {
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	18 2f       	mov	r17, r24
     958:	d6 2f       	mov	r29, r22
     95a:	c4 2f       	mov	r28, r20
	//Select CAN-controller
	SPI_select();
     95c:	0e 94 75 15 	call	0x2aea	; 0x2aea <SPI_select>
		
	SPI_send(MCP_BITMOD);		//Send bit modify command
     960:	85 e0       	ldi	r24, 0x05	; 5
     962:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
	SPI_send(address);			//Send address
     966:	81 2f       	mov	r24, r17
     968:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
	SPI_send(mask);				//Send mask byte
     96c:	8d 2f       	mov	r24, r29
     96e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
	SPI_send(data);				//Send data
     972:	8c 2f       	mov	r24, r28
     974:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
		
	//Deselect CAN-controller
	SPI_deselect();
     978:	0e 94 77 15 	call	0x2aee	; 0x2aee <SPI_deselect>
		
	return 0;
}
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	08 95       	ret

00000988 <mcp2515_reset>:

int mcp2515_reset(void) {
	//Select CAN-controller
	SPI_select();
     988:	0e 94 75 15 	call	0x2aea	; 0x2aea <SPI_select>
	
	SPI_send(MCP_RESET);	//Send reset command
     98c:	80 ec       	ldi	r24, 0xC0	; 192
     98e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
	
	//Deselect CAN-controller
	SPI_deselect();
     992:	0e 94 77 15 	call	0x2aee	; 0x2aee <SPI_deselect>
	
	return 0;
}
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	08 95       	ret

0000099c <mcp2515_read>:

uint8_t mcp2515_read(uint8_t address) {
     99c:	cf 93       	push	r28
     99e:	c8 2f       	mov	r28, r24
	uint8_t result;

	//Select CAN-controller
	SPI_select();
     9a0:	0e 94 75 15 	call	0x2aea	; 0x2aea <SPI_select>
	
	SPI_send(MCP_READ);		//Send read command
     9a4:	83 e0       	ldi	r24, 0x03	; 3
     9a6:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
	SPI_send(address);		//Send address
     9aa:	8c 2f       	mov	r24, r28
     9ac:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
	result = SPI_read();	//Read result
     9b0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <SPI_read>
     9b4:	c8 2f       	mov	r28, r24
	
	//Deselect CAN-controller
	SPI_deselect();
     9b6:	0e 94 77 15 	call	0x2aee	; 0x2aee <SPI_deselect>
	
	return result;
}
     9ba:	8c 2f       	mov	r24, r28
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <mcp2515_init>:
#include <avr/io.h>
#include "uart.h"
#include "spi.h"
#include "mcp2515.h"

int mcp2515_init(void) {
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	1f 92       	push	r1
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t value;
	
	//Initialize SPI driver
	SPI_init();
     9ca:	0e 94 5f 15 	call	0x2abe	; 0x2abe <SPI_init>
	
	//Reset the CAN controller
	mcp2515_reset();
     9ce:	0e 94 c4 04 	call	0x988	; 0x988 <mcp2515_reset>
	
	//Self-test
	value = mcp2515_read(MCP_CANSTAT);
     9d2:	8e e0       	ldi	r24, 0x0E	; 14
     9d4:	0e 94 ce 04 	call	0x99c	; 0x99c <mcp2515_read>
     9d8:	89 83       	std	Y+1, r24	; 0x01
	if ((value & MODE_MASK) != MODE_CONFIG) {
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	80 7e       	andi	r24, 0xE0	; 224
     9de:	80 38       	cpi	r24, 0x80	; 128
     9e0:	59 f0       	breq	.+22     	; 0x9f8 <mcp2515_init+0x38>
		printf("MCP2515 is NOT in configuration mode after reset!");
     9e2:	8a ec       	ldi	r24, 0xCA	; 202
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	9f 93       	push	r25
     9e8:	8f 93       	push	r24
     9ea:	0e 94 18 18 	call	0x3030	; 0x3030 <printf>
		return 1;
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <mcp2515_init+0x3c>
	}
	
	return 0;
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
}
     9fc:	0f 90       	pop	r0
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <init_menu>:
extern char* highscorename3[4] = {".", ".", ".", "."};
char buffer[8];
char* name[4];
joy_position joy_pos;

int init_menu(void) {
     a04:	2f 92       	push	r2
     a06:	3f 92       	push	r3
     a08:	4f 92       	push	r4
     a0a:	5f 92       	push	r5
     a0c:	6f 92       	push	r6
     a0e:	7f 92       	push	r7
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	2e 97       	sbiw	r28, 0x0e	; 14
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
	switch(menynummer){
     a38:	e0 91 0d 04 	lds	r30, 0x040D	; 0x80040d <menynummer>
     a3c:	8e 2f       	mov	r24, r30
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	8d 31       	cpi	r24, 0x1D	; 29
     a42:	91 05       	cpc	r25, r1
     a44:	10 f0       	brcs	.+4      	; 0xa4a <init_menu+0x46>
     a46:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
     a4a:	fc 01       	movw	r30, r24
     a4c:	e8 5c       	subi	r30, 0xC8	; 200
     a4e:	ff 4f       	sbci	r31, 0xFF	; 255
     a50:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__tablejump2__>
		case 0 : // Velkommen
				OLED_clear();
     a54:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
				float y = 2;
				float z = 1;
				float w = 1;
				float x = 1;
				int counter = 0;
     a58:	1e 82       	std	Y+6, r1	; 0x06
     a5a:	1d 82       	std	Y+5, r1	; 0x05
		case 0 : // Velkommen
				OLED_clear();
				float y = 2;
				float z = 1;
				float w = 1;
				float x = 1;
     a5c:	0f 2e       	mov	r0, r31
     a5e:	c1 2c       	mov	r12, r1
     a60:	d1 2c       	mov	r13, r1
     a62:	f0 e8       	ldi	r31, 0x80	; 128
     a64:	ef 2e       	mov	r14, r31
     a66:	ff e3       	ldi	r31, 0x3F	; 63
     a68:	ff 2e       	mov	r15, r31
     a6a:	f0 2d       	mov	r31, r0
	switch(menynummer){
		case 0 : // Velkommen
				OLED_clear();
				float y = 2;
				float z = 1;
				float w = 1;
     a6c:	26 01       	movw	r4, r12
     a6e:	37 01       	movw	r6, r14
int init_menu(void) {
	switch(menynummer){
		case 0 : // Velkommen
				OLED_clear();
				float y = 2;
				float z = 1;
     a70:	46 01       	movw	r8, r12
     a72:	57 01       	movw	r10, r14

int init_menu(void) {
	switch(menynummer){
		case 0 : // Velkommen
				OLED_clear();
				float y = 2;
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e4       	ldi	r27, 0x40	; 64
     a7c:	89 83       	std	Y+1, r24	; 0x01
     a7e:	9a 83       	std	Y+2, r25	; 0x02
     a80:	ab 83       	std	Y+3, r26	; 0x03
     a82:	bc 83       	std	Y+4, r27	; 0x04
					if (y == 2){w = w*-1;}
					if (x == 15){z = z*-1;}
					if (x == 0){z = z*-1;}
					joy_pos = JOY_getDirection();
					_delay_ms(125);
					if (joy_pos.sidedir == 1){
     a84:	0d e2       	ldi	r16, 0x2D	; 45
     a86:	14 e0       	ldi	r17, 0x04	; 4
						menynummer = 28;
					}
					else if (joy_pos.sidedir == 2){
						menynummer = 28;
     a88:	0f 2e       	mov	r0, r31
     a8a:	fc e1       	ldi	r31, 0x1C	; 28
     a8c:	2f 2e       	mov	r2, r31
     a8e:	f0 2d       	mov	r31, r0
				float y = 2;
				float z = 1;
				float w = 1;
				float x = 1;
				int counter = 0;
				while (menynummer == 0){
     a90:	da c0       	rjmp	.+436    	; 0xc46 <init_menu+0x242>
					OLED_clear();
     a92:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
					OLED_pos(7,x-1);
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	40 e8       	ldi	r20, 0x80	; 128
     a9c:	5f e3       	ldi	r21, 0x3F	; 63
     a9e:	c7 01       	movw	r24, r14
     aa0:	b6 01       	movw	r22, r12
     aa2:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__subsf3>
     aa6:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__fixunssfsi>
     aaa:	87 e0       	ldi	r24, 0x07	; 7
     aac:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
					OLED_print("]_`");
     ab0:	8c ef       	ldi	r24, 0xFC	; 252
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
					OLED_pos(1,6);
     ab8:	66 e0       	ldi	r22, 0x06	; 6
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
					if (counter < 10){
     ac0:	ed 81       	ldd	r30, Y+5	; 0x05
     ac2:	fe 81       	ldd	r31, Y+6	; 0x06
     ac4:	3a 97       	sbiw	r30, 0x0a	; 10
     ac6:	2c f4       	brge	.+10     	; 0xad2 <init_menu+0xce>
						OLED_print("00");
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
     ad0:	09 c0       	rjmp	.+18     	; 0xae4 <init_menu+0xe0>
					}
					else if (counter < 100){
     ad2:	2d 81       	ldd	r18, Y+5	; 0x05
     ad4:	3e 81       	ldd	r19, Y+6	; 0x06
     ad6:	24 36       	cpi	r18, 0x64	; 100
     ad8:	31 05       	cpc	r19, r1
     ada:	24 f4       	brge	.+8      	; 0xae4 <init_menu+0xe0>
						OLED_print("0");
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     ae4:	4a e0       	ldi	r20, 0x0A	; 10
     ae6:	65 e3       	ldi	r22, 0x35	; 53
     ae8:	74 e0       	ldi	r23, 0x04	; 4
     aea:	8d 81       	ldd	r24, Y+5	; 0x05
     aec:	9e 81       	ldd	r25, Y+6	; 0x06
     aee:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__itoa_ncheck>
					}
					OLED_print(itoa(counter, buffer, 10));
     af2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
					OLED_pos(y,x);
     af6:	c7 01       	movw	r24, r14
     af8:	b6 01       	movw	r22, r12
     afa:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__fixunssfsi>
     afe:	36 2e       	mov	r3, r22
     b00:	69 81       	ldd	r22, Y+1	; 0x01
     b02:	7a 81       	ldd	r23, Y+2	; 0x02
     b04:	8b 81       	ldd	r24, Y+3	; 0x03
     b06:	9c 81       	ldd	r25, Y+4	; 0x04
     b08:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__fixunssfsi>
     b0c:	86 2f       	mov	r24, r22
     b0e:	63 2d       	mov	r22, r3
     b10:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
					OLED_print("~");
     b14:	8c ea       	ldi	r24, 0xAC	; 172
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
					OLED_pos(8,1);
     b1c:	61 e0       	ldi	r22, 0x01	; 1
     b1e:	88 e0       	ldi	r24, 0x08	; 8
     b20:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
					OLED_print("Press any key");
     b24:	83 e0       	ldi	r24, 0x03	; 3
     b26:	92 e0       	ldi	r25, 0x02	; 2
     b28:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
					x = x + z*1;
     b2c:	a5 01       	movw	r20, r10
     b2e:	94 01       	movw	r18, r8
     b30:	c7 01       	movw	r24, r14
     b32:	b6 01       	movw	r22, r12
     b34:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__addsf3>
     b38:	6b 01       	movw	r12, r22
     b3a:	7c 01       	movw	r14, r24
					y = y + w*0.5;
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	5f e3       	ldi	r21, 0x3F	; 63
     b44:	c3 01       	movw	r24, r6
     b46:	b2 01       	movw	r22, r4
     b48:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__mulsf3>
     b4c:	9b 01       	movw	r18, r22
     b4e:	ac 01       	movw	r20, r24
     b50:	69 81       	ldd	r22, Y+1	; 0x01
     b52:	7a 81       	ldd	r23, Y+2	; 0x02
     b54:	8b 81       	ldd	r24, Y+3	; 0x03
     b56:	9c 81       	ldd	r25, Y+4	; 0x04
     b58:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__addsf3>
     b5c:	69 83       	std	Y+1, r22	; 0x01
     b5e:	7a 83       	std	Y+2, r23	; 0x02
     b60:	8b 83       	std	Y+3, r24	; 0x03
     b62:	9c 83       	std	Y+4, r25	; 0x04
					if (y == 6){w = w*-1; counter = counter + 1;}
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 ec       	ldi	r20, 0xC0	; 192
     b6a:	50 e4       	ldi	r21, 0x40	; 64
     b6c:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
     b70:	81 11       	cpse	r24, r1
     b72:	0a c0       	rjmp	.+20     	; 0xb88 <init_menu+0x184>
     b74:	77 fa       	bst	r7, 7
     b76:	70 94       	com	r7
     b78:	77 f8       	bld	r7, 7
     b7a:	70 94       	com	r7
     b7c:	8d 81       	ldd	r24, Y+5	; 0x05
     b7e:	9e 81       	ldd	r25, Y+6	; 0x06
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	9e 83       	std	Y+6, r25	; 0x06
     b84:	8d 83       	std	Y+5, r24	; 0x05
     b86:	10 c0       	rjmp	.+32     	; 0xba8 <init_menu+0x1a4>
					if (y == 2){w = w*-1;}
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	50 e4       	ldi	r21, 0x40	; 64
     b90:	69 81       	ldd	r22, Y+1	; 0x01
     b92:	7a 81       	ldd	r23, Y+2	; 0x02
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9c 81       	ldd	r25, Y+4	; 0x04
     b98:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
     b9c:	81 11       	cpse	r24, r1
     b9e:	04 c0       	rjmp	.+8      	; 0xba8 <init_menu+0x1a4>
     ba0:	77 fa       	bst	r7, 7
     ba2:	70 94       	com	r7
     ba4:	77 f8       	bld	r7, 7
     ba6:	70 94       	com	r7
					if (x == 15){z = z*-1;}
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e7       	ldi	r20, 0x70	; 112
     bae:	51 e4       	ldi	r21, 0x41	; 65
     bb0:	c7 01       	movw	r24, r14
     bb2:	b6 01       	movw	r22, r12
     bb4:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
     bb8:	81 11       	cpse	r24, r1
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <init_menu+0x1c2>
     bbc:	b7 fa       	bst	r11, 7
     bbe:	b0 94       	com	r11
     bc0:	b7 f8       	bld	r11, 7
     bc2:	b0 94       	com	r11
     bc4:	0d c0       	rjmp	.+26     	; 0xbe0 <init_menu+0x1dc>
					if (x == 0){z = z*-1;}
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	a9 01       	movw	r20, r18
     bcc:	c7 01       	movw	r24, r14
     bce:	b6 01       	movw	r22, r12
     bd0:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
     bd4:	81 11       	cpse	r24, r1
     bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <init_menu+0x1dc>
     bd8:	b7 fa       	bst	r11, 7
     bda:	b0 94       	com	r11
     bdc:	b7 f8       	bld	r11, 7
     bde:	b0 94       	com	r11
					joy_pos = JOY_getDirection();
     be0:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
     be4:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
     be8:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
     bec:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
     bf0:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
     bf4:	9c eb       	ldi	r25, 0xBC	; 188
     bf6:	af ed       	ldi	r26, 0xDF	; 223
     bf8:	b1 e0       	ldi	r27, 0x01	; 1
     bfa:	91 50       	subi	r25, 0x01	; 1
     bfc:	a0 40       	sbci	r26, 0x00	; 0
     bfe:	b0 40       	sbci	r27, 0x00	; 0
     c00:	e1 f7       	brne	.-8      	; 0xbfa <init_menu+0x1f6>
     c02:	00 00       	nop
					_delay_ms(125);
					if (joy_pos.sidedir == 1){
     c04:	f8 01       	movw	r30, r16
     c06:	83 81       	ldd	r24, Z+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	19 f4       	brne	.+6      	; 0xc12 <init_menu+0x20e>
						menynummer = 28;
     c0c:	20 92 0d 04 	sts	0x040D, r2	; 0x80040d <menynummer>
     c10:	1a c0       	rjmp	.+52     	; 0xc46 <init_menu+0x242>
					}
					else if (joy_pos.sidedir == 2){
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	19 f4       	brne	.+6      	; 0xc1c <init_menu+0x218>
						menynummer = 28;
     c16:	20 92 0d 04 	sts	0x040D, r2	; 0x80040d <menynummer>
     c1a:	15 c0       	rjmp	.+42     	; 0xc46 <init_menu+0x242>
					}
					else if (joy_pos.dir == 1){
     c1c:	82 81       	ldd	r24, Z+2	; 0x02
     c1e:	81 30       	cpi	r24, 0x01	; 1
     c20:	19 f4       	brne	.+6      	; 0xc28 <init_menu+0x224>
						menynummer = 1;
     c22:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
     c26:	0f c0       	rjmp	.+30     	; 0xc46 <init_menu+0x242>
					}
					else if (joy_pos.dir == 2){
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	21 f4       	brne	.+8      	; 0xc34 <init_menu+0x230>
						menynummer = 1;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
     c32:	09 c0       	rjmp	.+18     	; 0xc46 <init_menu+0x242>
					}
					else if (joy_button(1) == 0){
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
     c3c:	89 2b       	or	r24, r25
     c3e:	19 f4       	brne	.+6      	; 0xc46 <init_menu+0x242>
						menynummer = 1;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
				float y = 2;
				float z = 1;
				float w = 1;
				float x = 1;
				int counter = 0;
				while (menynummer == 0){
     c46:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
     c4a:	88 23       	and	r24, r24
     c4c:	09 f4       	brne	.+2      	; 0xc50 <init_menu+0x24c>
     c4e:	21 cf       	rjmp	.-446    	; 0xa92 <init_menu+0x8e>
     c50:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
						menynummer = 1;
					}
			}
			break;
		case 1 : // Start Game
			OLED_clear();
     c54:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
     c58:	61 e0       	ldi	r22, 0x01	; 1
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Start game");
     c60:	81 e1       	ldi	r24, 0x11	; 17
     c62:	92 e0       	ldi	r25, 0x02	; 2
     c64:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	83 e0       	ldi	r24, 0x03	; 3
     c6c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Difficulty");
     c70:	8e e1       	ldi	r24, 0x1E	; 30
     c72:	92 e0       	ldi	r25, 0x02	; 2
     c74:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	85 e0       	ldi	r24, 0x05	; 5
     c7c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Highscores");
     c80:	8b e2       	ldi	r24, 0x2B	; 43
     c82:	92 e0       	ldi	r25, 0x02	; 2
     c84:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	87 e0       	ldi	r24, 0x07	; 7
     c8c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Music");
     c90:	88 e3       	ldi	r24, 0x38	; 56
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
     c98:	b3 e9       	ldi	r27, 0x93	; 147
     c9a:	ef ef       	ldi	r30, 0xFF	; 255
     c9c:	f2 e0       	ldi	r31, 0x02	; 2
     c9e:	b1 50       	subi	r27, 0x01	; 1
     ca0:	e0 40       	sbci	r30, 0x00	; 0
     ca2:	f0 40       	sbci	r31, 0x00	; 0
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <init_menu+0x29a>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <init_menu+0x2a4>
     ca8:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 4;
				}
				else if (joy_pos.dir == 2){
					menynummer = 2;
     caa:	12 e0       	ldi	r17, 0x02	; 2
			_delay_ms(200);
			while(menynummer == 1){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 4;
     cac:	04 e0       	ldi	r16, 0x04	; 4
     cae:	2b c0       	rjmp	.+86     	; 0xd06 <init_menu+0x302>
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("  Music");
			_delay_ms(200);
			while(menynummer == 1){
				joy_pos = JOY_getDirection();
     cb0:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
     cb4:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
     cb8:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
     cbc:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
     cc0:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
     cc4:	8e ed       	ldi	r24, 0xDE	; 222
     cc6:	9f ee       	ldi	r25, 0xEF	; 239
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <init_menu+0x2c4>
				_delay_ms(50);
				if (joy_pos.dir == 1){
     ccc:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
     cd0:	81 30       	cpi	r24, 0x01	; 1
     cd2:	19 f4       	brne	.+6      	; 0xcda <init_menu+0x2d6>
					menynummer = 4;
     cd4:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
     cd8:	16 c0       	rjmp	.+44     	; 0xd06 <init_menu+0x302>
				}
				else if (joy_pos.dir == 2){
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	19 f4       	brne	.+6      	; 0xce4 <init_menu+0x2e0>
					menynummer = 2;
     cde:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
     ce2:	11 c0       	rjmp	.+34     	; 0xd06 <init_menu+0x302>
				}
				else if (joy_button(1) == 0){
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
     cec:	89 2b       	or	r24, r25
     cee:	59 f4       	brne	.+22     	; 0xd06 <init_menu+0x302>
					menynummer = 27;
     cf0:	8b e1       	ldi	r24, 0x1B	; 27
     cf2:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					gamestep = 2;
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <gamestep+0x1>
     cfe:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <gamestep>
					break;
     d02:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
			OLED_pos(5, 1);
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("  Music");
			_delay_ms(200);
			while(menynummer == 1){
     d06:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	89 f2       	breq	.-94     	; 0xcb0 <init_menu+0x2ac>
     d0e:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
					break;
				}
			}
			break;
		case 2 : // Difficulty
			OLED_clear();
     d12:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Start game");
     d1e:	80 e4       	ldi	r24, 0x40	; 64
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Difficulty");
     d2e:	8d e4       	ldi	r24, 0x4D	; 77
     d30:	92 e0       	ldi	r25, 0x02	; 2
     d32:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	85 e0       	ldi	r24, 0x05	; 5
     d3a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Highscores");
     d3e:	8b e2       	ldi	r24, 0x2B	; 43
     d40:	92 e0       	ldi	r25, 0x02	; 2
     d42:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	87 e0       	ldi	r24, 0x07	; 7
     d4a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Music");
     d4e:	88 e3       	ldi	r24, 0x38	; 56
     d50:	92 e0       	ldi	r25, 0x02	; 2
     d52:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
     d56:	93 e9       	ldi	r25, 0x93	; 147
     d58:	af ef       	ldi	r26, 0xFF	; 255
     d5a:	b2 e0       	ldi	r27, 0x02	; 2
     d5c:	91 50       	subi	r25, 0x01	; 1
     d5e:	a0 40       	sbci	r26, 0x00	; 0
     d60:	b0 40       	sbci	r27, 0x00	; 0
     d62:	e1 f7       	brne	.-8      	; 0xd5c <init_menu+0x358>
     d64:	00 c0       	rjmp	.+0      	; 0xd66 <init_menu+0x362>
     d66:	00 00       	nop
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 2){
					menynummer = 9;
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 3){
					menynummer = 13;
     d68:	0f 2e       	mov	r0, r31
     d6a:	fd e0       	ldi	r31, 0x0D	; 13
     d6c:	df 2e       	mov	r13, r31
     d6e:	f0 2d       	mov	r31, r0
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 1){
					menynummer = 5;
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 2){
					menynummer = 9;
     d70:	0f 2e       	mov	r0, r31
     d72:	f9 e0       	ldi	r31, 0x09	; 9
     d74:	ef 2e       	mov	r14, r31
     d76:	f0 2d       	mov	r31, r0
				}
				else if (joy_pos.dir == 2){
					menynummer = 1;
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 1){
					menynummer = 5;
     d78:	0f 2e       	mov	r0, r31
     d7a:	f5 e0       	ldi	r31, 0x05	; 5
     d7c:	ff 2e       	mov	r15, r31
     d7e:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 3;
				}
				else if (joy_pos.dir == 2){
					menynummer = 1;
     d80:	11 e0       	ldi	r17, 0x01	; 1
			_delay_ms(200);
			while(menynummer == 2){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 3;
     d82:	03 e0       	ldi	r16, 0x03	; 3
     d84:	40 c0       	rjmp	.+128    	; 0xe06 <init_menu+0x402>
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("  Music");
			_delay_ms(200);
			while(menynummer == 2){
				joy_pos = JOY_getDirection();
     d86:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
     d8a:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
     d8e:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
     d92:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
     d96:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
     d9a:	ee ed       	ldi	r30, 0xDE	; 222
     d9c:	ff ee       	ldi	r31, 0xEF	; 239
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <init_menu+0x39a>
				_delay_ms(50);
				if (joy_pos.dir == 1){
     da2:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	19 f4       	brne	.+6      	; 0xdb0 <init_menu+0x3ac>
					menynummer = 3;
     daa:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
     dae:	2b c0       	rjmp	.+86     	; 0xe06 <init_menu+0x402>
				}
				else if (joy_pos.dir == 2){
     db0:	82 30       	cpi	r24, 0x02	; 2
     db2:	19 f4       	brne	.+6      	; 0xdba <init_menu+0x3b6>
					menynummer = 1;
     db4:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
     db8:	26 c0       	rjmp	.+76     	; 0xe06 <init_menu+0x402>
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 1){
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
     dc2:	89 2b       	or	r24, r25
     dc4:	39 f4       	brne	.+14     	; 0xdd4 <init_menu+0x3d0>
     dc6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <vanskelighetsgrad>
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	19 f4       	brne	.+6      	; 0xdd4 <init_menu+0x3d0>
					menynummer = 5;
     dce:	f0 92 0d 04 	sts	0x040D, r15	; 0x80040d <menynummer>
     dd2:	19 c0       	rjmp	.+50     	; 0xe06 <init_menu+0x402>
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 2){
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
     ddc:	89 2b       	or	r24, r25
     dde:	39 f4       	brne	.+14     	; 0xdee <init_menu+0x3ea>
     de0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <vanskelighetsgrad>
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	19 f4       	brne	.+6      	; 0xdee <init_menu+0x3ea>
					menynummer = 9;
     de8:	e0 92 0d 04 	sts	0x040D, r14	; 0x80040d <menynummer>
     dec:	0c c0       	rjmp	.+24     	; 0xe06 <init_menu+0x402>
				}
				else if (joy_button(1) == 0 && vanskelighetsgrad == 3){
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
     df6:	89 2b       	or	r24, r25
     df8:	31 f4       	brne	.+12     	; 0xe06 <init_menu+0x402>
     dfa:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <vanskelighetsgrad>
     dfe:	83 30       	cpi	r24, 0x03	; 3
     e00:	11 f4       	brne	.+4      	; 0xe06 <init_menu+0x402>
					menynummer = 13;
     e02:	d0 92 0d 04 	sts	0x040D, r13	; 0x80040d <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("  Music");
			_delay_ms(200);
			while(menynummer == 2){
     e06:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	09 f4       	brne	.+2      	; 0xe10 <init_menu+0x40c>
     e0e:	bb cf       	rjmp	.-138    	; 0xd86 <init_menu+0x382>
     e10:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
					menynummer = 13;
				}
			}
			break;
		case 3 : // Highscores
			OLED_clear();
     e14:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Start game");
     e20:	80 e4       	ldi	r24, 0x40	; 64
     e22:	92 e0       	ldi	r25, 0x02	; 2
     e24:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Difficulty");
     e30:	8e e1       	ldi	r24, 0x1E	; 30
     e32:	92 e0       	ldi	r25, 0x02	; 2
     e34:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	85 e0       	ldi	r24, 0x05	; 5
     e3c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Highscores");
     e40:	8a e5       	ldi	r24, 0x5A	; 90
     e42:	92 e0       	ldi	r25, 0x02	; 2
     e44:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
     e48:	61 e0       	ldi	r22, 0x01	; 1
     e4a:	87 e0       	ldi	r24, 0x07	; 7
     e4c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Music");
     e50:	88 e3       	ldi	r24, 0x38	; 56
     e52:	92 e0       	ldi	r25, 0x02	; 2
     e54:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
     e58:	f3 e9       	ldi	r31, 0x93	; 147
     e5a:	2f ef       	ldi	r18, 0xFF	; 255
     e5c:	32 e0       	ldi	r19, 0x02	; 2
     e5e:	f1 50       	subi	r31, 0x01	; 1
     e60:	20 40       	sbci	r18, 0x00	; 0
     e62:	30 40       	sbci	r19, 0x00	; 0
     e64:	e1 f7       	brne	.-8      	; 0xe5e <init_menu+0x45a>
     e66:	00 c0       	rjmp	.+0      	; 0xe68 <init_menu+0x464>
     e68:	00 00       	nop
				}
				else if (joy_pos.dir == 2){
					menynummer = 2;
				}
				else if (joy_button(1) == 0){
					menynummer = 9;
     e6a:	0f 2e       	mov	r0, r31
     e6c:	f9 e0       	ldi	r31, 0x09	; 9
     e6e:	ff 2e       	mov	r15, r31
     e70:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 4;
				}
				else if (joy_pos.dir == 2){
					menynummer = 2;
     e72:	12 e0       	ldi	r17, 0x02	; 2
			_delay_ms(200);
			while(menynummer == 3){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 4;
     e74:	04 e0       	ldi	r16, 0x04	; 4
     e76:	22 c0       	rjmp	.+68     	; 0xebc <init_menu+0x4b8>
			OLED_print("* Highscores");
			OLED_pos(7, 1);
			OLED_print("  Music");
			_delay_ms(200);
			while(menynummer == 3){
				joy_pos = JOY_getDirection();
     e78:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
     e7c:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
     e80:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
     e84:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
     e88:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
     e8c:	8e ed       	ldi	r24, 0xDE	; 222
     e8e:	9f ee       	ldi	r25, 0xEF	; 239
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <init_menu+0x48c>
				_delay_ms(50);
				if (joy_pos.dir == 1){
     e94:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	19 f4       	brne	.+6      	; 0xea2 <init_menu+0x49e>
					menynummer = 4;
     e9c:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <init_menu+0x4b8>
				}
				else if (joy_pos.dir == 2){
     ea2:	82 30       	cpi	r24, 0x02	; 2
     ea4:	19 f4       	brne	.+6      	; 0xeac <init_menu+0x4a8>
					menynummer = 2;
     ea6:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
     eaa:	08 c0       	rjmp	.+16     	; 0xebc <init_menu+0x4b8>
				}
				else if (joy_button(1) == 0){
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
     eb4:	89 2b       	or	r24, r25
     eb6:	11 f4       	brne	.+4      	; 0xebc <init_menu+0x4b8>
					menynummer = 9;
     eb8:	f0 92 0d 04 	sts	0x040D, r15	; 0x80040d <menynummer>
			OLED_pos(5, 1);
			OLED_print("* Highscores");
			OLED_pos(7, 1);
			OLED_print("  Music");
			_delay_ms(200);
			while(menynummer == 3){
     ebc:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
     ec0:	83 30       	cpi	r24, 0x03	; 3
     ec2:	d1 f2       	breq	.-76     	; 0xe78 <init_menu+0x474>
     ec4:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
					menynummer = 9;
				}
			}
			break;
		case 4 : // music
			OLED_clear();
     ec8:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Start game");
     ed4:	80 e4       	ldi	r24, 0x40	; 64
     ed6:	92 e0       	ldi	r25, 0x02	; 2
     ed8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	83 e0       	ldi	r24, 0x03	; 3
     ee0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Difficulty");
     ee4:	8e e1       	ldi	r24, 0x1E	; 30
     ee6:	92 e0       	ldi	r25, 0x02	; 2
     ee8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	85 e0       	ldi	r24, 0x05	; 5
     ef0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Highscores");
     ef4:	8b e2       	ldi	r24, 0x2B	; 43
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	87 e0       	ldi	r24, 0x07	; 7
     f00:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Music");
     f04:	87 e6       	ldi	r24, 0x67	; 103
     f06:	92 e0       	ldi	r25, 0x02	; 2
     f08:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
     f0c:	93 e9       	ldi	r25, 0x93	; 147
     f0e:	af ef       	ldi	r26, 0xFF	; 255
     f10:	b2 e0       	ldi	r27, 0x02	; 2
     f12:	91 50       	subi	r25, 0x01	; 1
     f14:	a0 40       	sbci	r26, 0x00	; 0
     f16:	b0 40       	sbci	r27, 0x00	; 0
     f18:	e1 f7       	brne	.-8      	; 0xf12 <init_menu+0x50e>
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <init_menu+0x518>
     f1c:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 1;
				}
				else if (joy_pos.dir == 2){
					menynummer = 3;
     f1e:	03 e0       	ldi	r16, 0x03	; 3
			_delay_ms(200);
			while(menynummer == 4){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 1;
     f20:	11 e0       	ldi	r17, 0x01	; 1
     f22:	19 c0       	rjmp	.+50     	; 0xf56 <init_menu+0x552>
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("* Music");
			_delay_ms(200);
			while(menynummer == 4){
				joy_pos = JOY_getDirection();
     f24:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
     f28:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
     f2c:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
     f30:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
     f34:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
     f38:	ee ed       	ldi	r30, 0xDE	; 222
     f3a:	ff ee       	ldi	r31, 0xEF	; 239
     f3c:	31 97       	sbiw	r30, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <init_menu+0x538>
				_delay_ms(50);
				if (joy_pos.dir == 1){
     f40:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	19 f4       	brne	.+6      	; 0xf4e <init_menu+0x54a>
					menynummer = 1;
     f48:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <init_menu+0x552>
				}
				else if (joy_pos.dir == 2){
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	11 f4       	brne	.+4      	; 0xf56 <init_menu+0x552>
					menynummer = 3;
     f52:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Highscores");
			OLED_pos(7, 1);
			OLED_print("* Music");
			_delay_ms(200);
			while(menynummer == 4){
     f56:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	19 f3       	breq	.-58     	; 0xf24 <init_menu+0x520>
     f5e:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
					menynummer = 3;
				}
			}
			break;
		case 5 : // Submeny EASY-EASY
			OLED_clear();
     f62:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
     f66:	61 e0       	ldi	r22, 0x01	; 1
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* >Easy<");
     f6e:	8f e6       	ldi	r24, 0x6F	; 111
     f70:	92 e0       	ldi	r25, 0x02	; 2
     f72:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Medium");
     f7e:	88 e7       	ldi	r24, 0x78	; 120
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
     f86:	61 e0       	ldi	r22, 0x01	; 1
     f88:	85 e0       	ldi	r24, 0x05	; 5
     f8a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Hard");
     f8e:	81 e8       	ldi	r24, 0x81	; 129
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	87 e0       	ldi	r24, 0x07	; 7
     f9a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
     f9e:	88 e8       	ldi	r24, 0x88	; 136
     fa0:	92 e0       	ldi	r25, 0x02	; 2
     fa2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
     fa6:	f3 e9       	ldi	r31, 0x93	; 147
     fa8:	2f ef       	ldi	r18, 0xFF	; 255
     faa:	32 e0       	ldi	r19, 0x02	; 2
     fac:	f1 50       	subi	r31, 0x01	; 1
     fae:	20 40       	sbci	r18, 0x00	; 0
     fb0:	30 40       	sbci	r19, 0x00	; 0
     fb2:	e1 f7       	brne	.-8      	; 0xfac <init_menu+0x5a8>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <init_menu+0x5b2>
     fb6:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 6;
				}
				else if (joy_pos.dir == 2){
					menynummer = 8;
     fb8:	08 e0       	ldi	r16, 0x08	; 8
			_delay_ms(200);
			while(menynummer == 5){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 6;
     fba:	16 e0       	ldi	r17, 0x06	; 6
     fbc:	19 c0       	rjmp	.+50     	; 0xff0 <init_menu+0x5ec>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 5){
				joy_pos = JOY_getDirection();
     fbe:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
     fc2:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
     fc6:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
     fca:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
     fce:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
     fd2:	8e ed       	ldi	r24, 0xDE	; 222
     fd4:	9f ee       	ldi	r25, 0xEF	; 239
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <init_menu+0x5d2>
				_delay_ms(50);
				if (joy_pos.dir == 1){
     fda:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	19 f4       	brne	.+6      	; 0xfe8 <init_menu+0x5e4>
					menynummer = 6;
     fe2:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <init_menu+0x5ec>
				}
				else if (joy_pos.dir == 2){
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	11 f4       	brne	.+4      	; 0xff0 <init_menu+0x5ec>
					menynummer = 8;
     fec:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 5){
     ff0:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
     ff4:	85 30       	cpi	r24, 0x05	; 5
     ff6:	19 f3       	breq	.-58     	; 0xfbe <init_menu+0x5ba>
     ff8:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
					menynummer = 8;
				}
			}
			break;
		case 6 : // Submeny EASY-MEDIUM
			OLED_clear();
     ffc:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
    1000:	61 e0       	ldi	r22, 0x01	; 1
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  >Easy<");
    1008:	8f e8       	ldi	r24, 0x8F	; 143
    100a:	92 e0       	ldi	r25, 0x02	; 2
    100c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Medium");
    1018:	88 e9       	ldi	r24, 0x98	; 152
    101a:	92 e0       	ldi	r25, 0x02	; 2
    101c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	85 e0       	ldi	r24, 0x05	; 5
    1024:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Hard");
    1028:	81 e8       	ldi	r24, 0x81	; 129
    102a:	92 e0       	ldi	r25, 0x02	; 2
    102c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	87 e0       	ldi	r24, 0x07	; 7
    1034:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
    1038:	88 e8       	ldi	r24, 0x88	; 136
    103a:	92 e0       	ldi	r25, 0x02	; 2
    103c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    1040:	93 e9       	ldi	r25, 0x93	; 147
    1042:	af ef       	ldi	r26, 0xFF	; 255
    1044:	b2 e0       	ldi	r27, 0x02	; 2
    1046:	91 50       	subi	r25, 0x01	; 1
    1048:	a0 40       	sbci	r26, 0x00	; 0
    104a:	b0 40       	sbci	r27, 0x00	; 0
    104c:	e1 f7       	brne	.-8      	; 0x1046 <init_menu+0x642>
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <init_menu+0x64c>
    1050:	00 00       	nop
				}
				else if (joy_pos.dir == 2){
					menynummer = 5;
				}
				else if (joy_button(1) == 0){
					vanskelighetsgrad = 2;
    1052:	68 94       	set
    1054:	ee 24       	eor	r14, r14
    1056:	e1 f8       	bld	r14, 1
					menynummer = 10;
    1058:	0f 2e       	mov	r0, r31
    105a:	fa e0       	ldi	r31, 0x0A	; 10
    105c:	ff 2e       	mov	r15, r31
    105e:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 7;
				}
				else if (joy_pos.dir == 2){
					menynummer = 5;
    1060:	15 e0       	ldi	r17, 0x05	; 5
			_delay_ms(200);
			while(menynummer == 6){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 7;
    1062:	07 e0       	ldi	r16, 0x07	; 7
    1064:	24 c0       	rjmp	.+72     	; 0x10ae <init_menu+0x6aa>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 6){
				joy_pos = JOY_getDirection();
    1066:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    106a:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    106e:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    1072:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1076:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    107a:	ee ed       	ldi	r30, 0xDE	; 222
    107c:	ff ee       	ldi	r31, 0xEF	; 239
    107e:	31 97       	sbiw	r30, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <init_menu+0x67a>
				_delay_ms(50);
				if (joy_pos.dir == 1){
    1082:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	19 f4       	brne	.+6      	; 0x1090 <init_menu+0x68c>
					menynummer = 7;
    108a:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <init_menu+0x6aa>
				}
				else if (joy_pos.dir == 2){
    1090:	82 30       	cpi	r24, 0x02	; 2
    1092:	19 f4       	brne	.+6      	; 0x109a <init_menu+0x696>
					menynummer = 5;
    1094:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    1098:	0a c0       	rjmp	.+20     	; 0x10ae <init_menu+0x6aa>
				}
				else if (joy_button(1) == 0){
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    10a2:	89 2b       	or	r24, r25
    10a4:	21 f4       	brne	.+8      	; 0x10ae <init_menu+0x6aa>
					vanskelighetsgrad = 2;
    10a6:	e0 92 22 01 	sts	0x0122, r14	; 0x800122 <vanskelighetsgrad>
					menynummer = 10;
    10aa:	f0 92 0d 04 	sts	0x040D, r15	; 0x80040d <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 6){
    10ae:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    10b2:	86 30       	cpi	r24, 0x06	; 6
    10b4:	c1 f2       	breq	.-80     	; 0x1066 <init_menu+0x662>
    10b6:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
					menynummer = 10;
				}
			}
			break;
		case 7 : // Submeny EASY-HARD
			OLED_clear();
    10ba:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
    10be:	61 e0       	ldi	r22, 0x01	; 1
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  >Easy<");
    10c6:	8f e8       	ldi	r24, 0x8F	; 143
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	83 e0       	ldi	r24, 0x03	; 3
    10d2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Medium");
    10d6:	88 e7       	ldi	r24, 0x78	; 120
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	85 e0       	ldi	r24, 0x05	; 5
    10e2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Hard");
    10e6:	81 ea       	ldi	r24, 0xA1	; 161
    10e8:	92 e0       	ldi	r25, 0x02	; 2
    10ea:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	87 e0       	ldi	r24, 0x07	; 7
    10f2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
    10f6:	88 e8       	ldi	r24, 0x88	; 136
    10f8:	92 e0       	ldi	r25, 0x02	; 2
    10fa:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    10fe:	f3 e9       	ldi	r31, 0x93	; 147
    1100:	2f ef       	ldi	r18, 0xFF	; 255
    1102:	32 e0       	ldi	r19, 0x02	; 2
    1104:	f1 50       	subi	r31, 0x01	; 1
    1106:	20 40       	sbci	r18, 0x00	; 0
    1108:	30 40       	sbci	r19, 0x00	; 0
    110a:	e1 f7       	brne	.-8      	; 0x1104 <init_menu+0x700>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <init_menu+0x70a>
    110e:	00 00       	nop
				}
				else if (joy_pos.dir == 2){
					menynummer = 6;
				}
				else if (joy_button(1) == 0){
					vanskelighetsgrad = 3;
    1110:	0f 2e       	mov	r0, r31
    1112:	f3 e0       	ldi	r31, 0x03	; 3
    1114:	ef 2e       	mov	r14, r31
    1116:	f0 2d       	mov	r31, r0
					menynummer = 15;
    1118:	0f 2e       	mov	r0, r31
    111a:	ff e0       	ldi	r31, 0x0F	; 15
    111c:	ff 2e       	mov	r15, r31
    111e:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 8;
				}
				else if (joy_pos.dir == 2){
					menynummer = 6;
    1120:	16 e0       	ldi	r17, 0x06	; 6
			_delay_ms(200);
			while(menynummer == 7){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 8;
    1122:	08 e0       	ldi	r16, 0x08	; 8
    1124:	24 c0       	rjmp	.+72     	; 0x116e <init_menu+0x76a>
			OLED_print("* Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 7){
				joy_pos = JOY_getDirection();
    1126:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    112a:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    112e:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    1132:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1136:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    113a:	8e ed       	ldi	r24, 0xDE	; 222
    113c:	9f ee       	ldi	r25, 0xEF	; 239
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	f1 f7       	brne	.-4      	; 0x113e <init_menu+0x73a>
				_delay_ms(50);
				if (joy_pos.dir == 1){
    1142:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	19 f4       	brne	.+6      	; 0x1150 <init_menu+0x74c>
					menynummer = 8;
    114a:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
    114e:	0f c0       	rjmp	.+30     	; 0x116e <init_menu+0x76a>
				}
				else if (joy_pos.dir == 2){
    1150:	82 30       	cpi	r24, 0x02	; 2
    1152:	19 f4       	brne	.+6      	; 0x115a <init_menu+0x756>
					menynummer = 6;
    1154:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    1158:	0a c0       	rjmp	.+20     	; 0x116e <init_menu+0x76a>
				}
				else if (joy_button(1) == 0){
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1162:	89 2b       	or	r24, r25
    1164:	21 f4       	brne	.+8      	; 0x116e <init_menu+0x76a>
					vanskelighetsgrad = 3;
    1166:	e0 92 22 01 	sts	0x0122, r14	; 0x800122 <vanskelighetsgrad>
					menynummer = 15;
    116a:	f0 92 0d 04 	sts	0x040D, r15	; 0x80040d <menynummer>
			OLED_pos(5, 1);
			OLED_print("* Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 7){
    116e:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    1172:	87 30       	cpi	r24, 0x07	; 7
    1174:	c1 f2       	breq	.-80     	; 0x1126 <init_menu+0x722>
    1176:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
					menynummer = 15;
				}
			}
			break;
		case 8 : // Submeny EASY-RETURN
			OLED_clear();
    117a:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
    117e:	61 e0       	ldi	r22, 0x01	; 1
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  >Easy<");
    1186:	8f e8       	ldi	r24, 0x8F	; 143
    1188:	92 e0       	ldi	r25, 0x02	; 2
    118a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	83 e0       	ldi	r24, 0x03	; 3
    1192:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Medium");
    1196:	88 e7       	ldi	r24, 0x78	; 120
    1198:	92 e0       	ldi	r25, 0x02	; 2
    119a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    119e:	61 e0       	ldi	r22, 0x01	; 1
    11a0:	85 e0       	ldi	r24, 0x05	; 5
    11a2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Hard");
    11a6:	81 e8       	ldi	r24, 0x81	; 129
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	87 e0       	ldi	r24, 0x07	; 7
    11b2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Back");
    11b6:	88 ea       	ldi	r24, 0xA8	; 168
    11b8:	92 e0       	ldi	r25, 0x02	; 2
    11ba:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    11be:	93 e9       	ldi	r25, 0x93	; 147
    11c0:	af ef       	ldi	r26, 0xFF	; 255
    11c2:	b2 e0       	ldi	r27, 0x02	; 2
    11c4:	91 50       	subi	r25, 0x01	; 1
    11c6:	a0 40       	sbci	r26, 0x00	; 0
    11c8:	b0 40       	sbci	r27, 0x00	; 0
    11ca:	e1 f7       	brne	.-8      	; 0x11c4 <init_menu+0x7c0>
    11cc:	00 c0       	rjmp	.+0      	; 0x11ce <init_menu+0x7ca>
    11ce:	00 00       	nop
				}
				else if (joy_pos.dir == 2){
					menynummer = 7;
				}
				else if (joy_button(1) == 0){
					menynummer = 1;
    11d0:	ff 24       	eor	r15, r15
    11d2:	f3 94       	inc	r15
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 5;
				}
				else if (joy_pos.dir == 2){
					menynummer = 7;
    11d4:	17 e0       	ldi	r17, 0x07	; 7
			_delay_ms(200);
			while(menynummer == 8){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 5;
    11d6:	05 e0       	ldi	r16, 0x05	; 5
    11d8:	22 c0       	rjmp	.+68     	; 0x121e <init_menu+0x81a>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 8){
				joy_pos = JOY_getDirection();
    11da:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    11de:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    11e2:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    11e6:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    11ea:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    11ee:	ee ed       	ldi	r30, 0xDE	; 222
    11f0:	ff ee       	ldi	r31, 0xEF	; 239
    11f2:	31 97       	sbiw	r30, 0x01	; 1
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <init_menu+0x7ee>
				_delay_ms(50);
				if (joy_pos.dir == 1){
    11f6:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	19 f4       	brne	.+6      	; 0x1204 <init_menu+0x800>
					menynummer = 5;
    11fe:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
    1202:	0d c0       	rjmp	.+26     	; 0x121e <init_menu+0x81a>
				}
				else if (joy_pos.dir == 2){
    1204:	82 30       	cpi	r24, 0x02	; 2
    1206:	19 f4       	brne	.+6      	; 0x120e <init_menu+0x80a>
					menynummer = 7;
    1208:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    120c:	08 c0       	rjmp	.+16     	; 0x121e <init_menu+0x81a>
				}
				else if (joy_button(1) == 0){
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1216:	89 2b       	or	r24, r25
    1218:	11 f4       	brne	.+4      	; 0x121e <init_menu+0x81a>
					menynummer = 1;
    121a:	f0 92 0d 04 	sts	0x040D, r15	; 0x80040d <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 8){
    121e:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    1222:	88 30       	cpi	r24, 0x08	; 8
    1224:	d1 f2       	breq	.-76     	; 0x11da <init_menu+0x7d6>
    1226:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
					menynummer = 1;
				}
			}
			break;
		case 9 : // Submeny MEDIUM-EASY
			OLED_clear();
    122a:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Easy");
    1236:	8f ea       	ldi	r24, 0xAF	; 175
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	83 e0       	ldi	r24, 0x03	; 3
    1242:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print(" >Medium<");
    1246:	88 ec       	ldi	r24, 0xC8	; 200
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	85 e0       	ldi	r24, 0x05	; 5
    1252:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Hard");
    1256:	81 e8       	ldi	r24, 0x81	; 129
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	87 e0       	ldi	r24, 0x07	; 7
    1262:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
    1266:	88 e8       	ldi	r24, 0x88	; 136
    1268:	92 e0       	ldi	r25, 0x02	; 2
    126a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    126e:	f3 e9       	ldi	r31, 0x93	; 147
    1270:	2f ef       	ldi	r18, 0xFF	; 255
    1272:	32 e0       	ldi	r19, 0x02	; 2
    1274:	f1 50       	subi	r31, 0x01	; 1
    1276:	20 40       	sbci	r18, 0x00	; 0
    1278:	30 40       	sbci	r19, 0x00	; 0
    127a:	e1 f7       	brne	.-8      	; 0x1274 <init_menu+0x870>
    127c:	00 c0       	rjmp	.+0      	; 0x127e <init_menu+0x87a>
    127e:	00 00       	nop
				}
				else if (joy_pos.dir == 2){
					menynummer = 12;
				}
				else if (joy_button(1) == 0){
					menynummer = 5;
    1280:	0f 2e       	mov	r0, r31
    1282:	f5 e0       	ldi	r31, 0x05	; 5
    1284:	ef 2e       	mov	r14, r31
    1286:	f0 2d       	mov	r31, r0
					vanskelighetsgrad = 1;
    1288:	ff 24       	eor	r15, r15
    128a:	f3 94       	inc	r15
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 10;
				}
				else if (joy_pos.dir == 2){
					menynummer = 12;
    128c:	1c e0       	ldi	r17, 0x0C	; 12
			_delay_ms(200);
			while(menynummer == 9){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 10;
    128e:	0a e0       	ldi	r16, 0x0A	; 10
    1290:	24 c0       	rjmp	.+72     	; 0x12da <init_menu+0x8d6>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 9){
				joy_pos = JOY_getDirection();
    1292:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    1296:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    129a:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    129e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    12a2:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    12a6:	8e ed       	ldi	r24, 0xDE	; 222
    12a8:	9f ee       	ldi	r25, 0xEF	; 239
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <init_menu+0x8a6>
				_delay_ms(50);
				if (joy_pos.dir == 1){
    12ae:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	19 f4       	brne	.+6      	; 0x12bc <init_menu+0x8b8>
					menynummer = 10;
    12b6:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
    12ba:	0f c0       	rjmp	.+30     	; 0x12da <init_menu+0x8d6>
				}
				else if (joy_pos.dir == 2){
    12bc:	82 30       	cpi	r24, 0x02	; 2
    12be:	19 f4       	brne	.+6      	; 0x12c6 <init_menu+0x8c2>
					menynummer = 12;
    12c0:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    12c4:	0a c0       	rjmp	.+20     	; 0x12da <init_menu+0x8d6>
				}
				else if (joy_button(1) == 0){
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    12ce:	89 2b       	or	r24, r25
    12d0:	21 f4       	brne	.+8      	; 0x12da <init_menu+0x8d6>
					menynummer = 5;
    12d2:	e0 92 0d 04 	sts	0x040D, r14	; 0x80040d <menynummer>
					vanskelighetsgrad = 1;
    12d6:	f0 92 22 01 	sts	0x0122, r15	; 0x800122 <vanskelighetsgrad>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 9){
    12da:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    12de:	89 30       	cpi	r24, 0x09	; 9
    12e0:	c1 f2       	breq	.-80     	; 0x1292 <init_menu+0x88e>
    12e2:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
					vanskelighetsgrad = 1;
				}
			}
			break;
		case 10 : // Submeny MEDIUM-MEDIUM
			OLED_clear();
    12e6:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
    12ea:	61 e0       	ldi	r22, 0x01	; 1
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  >Easy<");
    12f2:	8f e8       	ldi	r24, 0x8F	; 143
    12f4:	92 e0       	ldi	r25, 0x02	; 2
    12f6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
    12fa:	61 e0       	ldi	r22, 0x01	; 1
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("*>Medium<");
    1302:	86 eb       	ldi	r24, 0xB6	; 182
    1304:	92 e0       	ldi	r25, 0x02	; 2
    1306:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	85 e0       	ldi	r24, 0x05	; 5
    130e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Hard");
    1312:	81 e8       	ldi	r24, 0x81	; 129
    1314:	92 e0       	ldi	r25, 0x02	; 2
    1316:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	87 e0       	ldi	r24, 0x07	; 7
    131e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
    1322:	88 e8       	ldi	r24, 0x88	; 136
    1324:	92 e0       	ldi	r25, 0x02	; 2
    1326:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    132a:	93 e9       	ldi	r25, 0x93	; 147
    132c:	af ef       	ldi	r26, 0xFF	; 255
    132e:	b2 e0       	ldi	r27, 0x02	; 2
    1330:	91 50       	subi	r25, 0x01	; 1
    1332:	a0 40       	sbci	r26, 0x00	; 0
    1334:	b0 40       	sbci	r27, 0x00	; 0
    1336:	e1 f7       	brne	.-8      	; 0x1330 <init_menu+0x92c>
    1338:	00 c0       	rjmp	.+0      	; 0x133a <init_menu+0x936>
    133a:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 11;
				}
				else if (joy_pos.dir == 2){
					menynummer = 9;
    133c:	09 e0       	ldi	r16, 0x09	; 9
			_delay_ms(200);
			while(menynummer == 10){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 11;
    133e:	1b e0       	ldi	r17, 0x0B	; 11
    1340:	19 c0       	rjmp	.+50     	; 0x1374 <init_menu+0x970>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 10){
				joy_pos = JOY_getDirection();
    1342:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    1346:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    134a:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    134e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1352:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    1356:	ee ed       	ldi	r30, 0xDE	; 222
    1358:	ff ee       	ldi	r31, 0xEF	; 239
    135a:	31 97       	sbiw	r30, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <init_menu+0x956>
				_delay_ms(50);
				if (joy_pos.dir == 1){
    135e:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	19 f4       	brne	.+6      	; 0x136c <init_menu+0x968>
					menynummer = 11;
    1366:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    136a:	04 c0       	rjmp	.+8      	; 0x1374 <init_menu+0x970>
				}
				else if (joy_pos.dir == 2){
    136c:	82 30       	cpi	r24, 0x02	; 2
    136e:	11 f4       	brne	.+4      	; 0x1374 <init_menu+0x970>
					menynummer = 9;
    1370:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 10){
    1374:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    1378:	8a 30       	cpi	r24, 0x0A	; 10
    137a:	19 f3       	breq	.-58     	; 0x1342 <init_menu+0x93e>
    137c:	0c 94 01 12 	jmp	0x2402	; 0x2402 <init_menu+0x19fe>
					menynummer = 9;
				}
			}
			break;
		case 11 : // Submeny MEDIUM-HARD
			OLED_clear();
    1380:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Easy");
    138c:	80 ec       	ldi	r24, 0xC0	; 192
    138e:	92 e0       	ldi	r25, 0x02	; 2
    1390:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  >Medium<");
    139c:	87 ec       	ldi	r24, 0xC7	; 199
    139e:	92 e0       	ldi	r25, 0x02	; 2
    13a0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    13a4:	61 e0       	ldi	r22, 0x01	; 1
    13a6:	85 e0       	ldi	r24, 0x05	; 5
    13a8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Hard");
    13ac:	81 ea       	ldi	r24, 0xA1	; 161
    13ae:	92 e0       	ldi	r25, 0x02	; 2
    13b0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	87 e0       	ldi	r24, 0x07	; 7
    13b8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
    13bc:	88 e8       	ldi	r24, 0x88	; 136
    13be:	92 e0       	ldi	r25, 0x02	; 2
    13c0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    13c4:	f3 e9       	ldi	r31, 0x93	; 147
    13c6:	2f ef       	ldi	r18, 0xFF	; 255
    13c8:	32 e0       	ldi	r19, 0x02	; 2
    13ca:	f1 50       	subi	r31, 0x01	; 1
    13cc:	20 40       	sbci	r18, 0x00	; 0
    13ce:	30 40       	sbci	r19, 0x00	; 0
    13d0:	e1 f7       	brne	.-8      	; 0x13ca <init_menu+0x9c6>
    13d2:	00 c0       	rjmp	.+0      	; 0x13d4 <init_menu+0x9d0>
    13d4:	00 00       	nop
				}
				else if (joy_pos.dir == 2){
					menynummer = 10;
				}
				else if (joy_button(1) == 0){
					menynummer = 15;
    13d6:	0f 2e       	mov	r0, r31
    13d8:	ff e0       	ldi	r31, 0x0F	; 15
    13da:	ef 2e       	mov	r14, r31
    13dc:	f0 2d       	mov	r31, r0
					vanskelighetsgrad = 3;
    13de:	0f 2e       	mov	r0, r31
    13e0:	f3 e0       	ldi	r31, 0x03	; 3
    13e2:	ff 2e       	mov	r15, r31
    13e4:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 12;
				}
				else if (joy_pos.dir == 2){
					menynummer = 10;
    13e6:	1a e0       	ldi	r17, 0x0A	; 10
			_delay_ms(200);
			while(menynummer == 11){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 12;
    13e8:	0c e0       	ldi	r16, 0x0C	; 12
    13ea:	24 c0       	rjmp	.+72     	; 0x1434 <init_menu+0xa30>
			OLED_print("* Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 11){
				joy_pos = JOY_getDirection();
    13ec:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    13f0:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    13f4:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    13f8:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    13fc:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    1400:	8e ed       	ldi	r24, 0xDE	; 222
    1402:	9f ee       	ldi	r25, 0xEF	; 239
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <init_menu+0xa00>
				_delay_ms(50);
				if (joy_pos.dir == 1){
    1408:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	19 f4       	brne	.+6      	; 0x1416 <init_menu+0xa12>
					menynummer = 12;
    1410:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
    1414:	0f c0       	rjmp	.+30     	; 0x1434 <init_menu+0xa30>
				}
				else if (joy_pos.dir == 2){
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	19 f4       	brne	.+6      	; 0x1420 <init_menu+0xa1c>
					menynummer = 10;
    141a:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    141e:	0a c0       	rjmp	.+20     	; 0x1434 <init_menu+0xa30>
				}
				else if (joy_button(1) == 0){
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1428:	89 2b       	or	r24, r25
    142a:	21 f4       	brne	.+8      	; 0x1434 <init_menu+0xa30>
					menynummer = 15;
    142c:	e0 92 0d 04 	sts	0x040D, r14	; 0x80040d <menynummer>
					vanskelighetsgrad = 3;
    1430:	f0 92 22 01 	sts	0x0122, r15	; 0x800122 <vanskelighetsgrad>
			OLED_pos(5, 1);
			OLED_print("* Hard");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 11){
    1434:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    1438:	8b 30       	cpi	r24, 0x0B	; 11
    143a:	c1 f2       	breq	.-80     	; 0x13ec <init_menu+0x9e8>
    143c:	e2 c7       	rjmp	.+4036   	; 0x2402 <init_menu+0x19fe>
					vanskelighetsgrad = 3;
				}
			}
			break;
		case 12 : // Submeny MEDIUM-RETURN
			OLED_clear();
    143e:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
    1442:	61 e0       	ldi	r22, 0x01	; 1
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Easy");
    144a:	80 ec       	ldi	r24, 0xC0	; 192
    144c:	92 e0       	ldi	r25, 0x02	; 2
    144e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
    1452:	61 e0       	ldi	r22, 0x01	; 1
    1454:	83 e0       	ldi	r24, 0x03	; 3
    1456:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print(" >Medium<");
    145a:	88 ec       	ldi	r24, 0xC8	; 200
    145c:	92 e0       	ldi	r25, 0x02	; 2
    145e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    1462:	61 e0       	ldi	r22, 0x01	; 1
    1464:	85 e0       	ldi	r24, 0x05	; 5
    1466:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Hard");
    146a:	81 e8       	ldi	r24, 0x81	; 129
    146c:	92 e0       	ldi	r25, 0x02	; 2
    146e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    1472:	61 e0       	ldi	r22, 0x01	; 1
    1474:	87 e0       	ldi	r24, 0x07	; 7
    1476:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Back");
    147a:	88 ea       	ldi	r24, 0xA8	; 168
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    1482:	93 e9       	ldi	r25, 0x93	; 147
    1484:	af ef       	ldi	r26, 0xFF	; 255
    1486:	b2 e0       	ldi	r27, 0x02	; 2
    1488:	91 50       	subi	r25, 0x01	; 1
    148a:	a0 40       	sbci	r26, 0x00	; 0
    148c:	b0 40       	sbci	r27, 0x00	; 0
    148e:	e1 f7       	brne	.-8      	; 0x1488 <init_menu+0xa84>
    1490:	00 c0       	rjmp	.+0      	; 0x1492 <init_menu+0xa8e>
    1492:	00 00       	nop
				}
				else if (joy_pos.dir == 2){
					menynummer = 11;
				}
				else if (joy_button(1) == 0){
					menynummer = 1;
    1494:	ff 24       	eor	r15, r15
    1496:	f3 94       	inc	r15
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 9;
				}
				else if (joy_pos.dir == 2){
					menynummer = 11;
    1498:	1b e0       	ldi	r17, 0x0B	; 11
			_delay_ms(200);
			while(menynummer == 12){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 9;
    149a:	09 e0       	ldi	r16, 0x09	; 9
    149c:	22 c0       	rjmp	.+68     	; 0x14e2 <init_menu+0xade>
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 12){
				joy_pos = JOY_getDirection();
    149e:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    14a2:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    14a6:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    14aa:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    14ae:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    14b2:	ee ed       	ldi	r30, 0xDE	; 222
    14b4:	ff ee       	ldi	r31, 0xEF	; 239
    14b6:	31 97       	sbiw	r30, 0x01	; 1
    14b8:	f1 f7       	brne	.-4      	; 0x14b6 <init_menu+0xab2>
				_delay_ms(50);
				if (joy_pos.dir == 1){
    14ba:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <init_menu+0xac4>
					menynummer = 9;
    14c2:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
    14c6:	0d c0       	rjmp	.+26     	; 0x14e2 <init_menu+0xade>
				}
				else if (joy_pos.dir == 2){
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	19 f4       	brne	.+6      	; 0x14d2 <init_menu+0xace>
					menynummer = 11;
    14cc:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    14d0:	08 c0       	rjmp	.+16     	; 0x14e2 <init_menu+0xade>
				}
				else if (joy_button(1) == 0){
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    14da:	89 2b       	or	r24, r25
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <init_menu+0xade>
					menynummer = 1;
    14de:	f0 92 0d 04 	sts	0x040D, r15	; 0x80040d <menynummer>
			OLED_pos(5, 1);
			OLED_print("  Hard");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 12){
    14e2:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    14e6:	8c 30       	cpi	r24, 0x0C	; 12
    14e8:	d1 f2       	breq	.-76     	; 0x149e <init_menu+0xa9a>
    14ea:	8b c7       	rjmp	.+3862   	; 0x2402 <init_menu+0x19fe>
					menynummer = 1;
				}
			}
			break;
		case 13 : // Submeny HARD-EASY
			OLED_clear();
    14ec:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Easy");
    14f8:	8f ea       	ldi	r24, 0xAF	; 175
    14fa:	92 e0       	ldi	r25, 0x02	; 2
    14fc:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
    1500:	61 e0       	ldi	r22, 0x01	; 1
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Medium");
    1508:	88 e7       	ldi	r24, 0x78	; 120
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	85 e0       	ldi	r24, 0x05	; 5
    1514:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print(" >Hard<");
    1518:	8c ed       	ldi	r24, 0xDC	; 220
    151a:	92 e0       	ldi	r25, 0x02	; 2
    151c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    1520:	61 e0       	ldi	r22, 0x01	; 1
    1522:	87 e0       	ldi	r24, 0x07	; 7
    1524:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
    1528:	88 e8       	ldi	r24, 0x88	; 136
    152a:	92 e0       	ldi	r25, 0x02	; 2
    152c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    1530:	f3 e9       	ldi	r31, 0x93	; 147
    1532:	2f ef       	ldi	r18, 0xFF	; 255
    1534:	32 e0       	ldi	r19, 0x02	; 2
    1536:	f1 50       	subi	r31, 0x01	; 1
    1538:	20 40       	sbci	r18, 0x00	; 0
    153a:	30 40       	sbci	r19, 0x00	; 0
    153c:	e1 f7       	brne	.-8      	; 0x1536 <init_menu+0xb32>
    153e:	00 c0       	rjmp	.+0      	; 0x1540 <init_menu+0xb3c>
    1540:	00 00       	nop
				}
				else if (joy_pos.dir == 2){
					menynummer = 16;
				}
				else if (joy_button(1) == 0){
					menynummer = 5;
    1542:	0f 2e       	mov	r0, r31
    1544:	f5 e0       	ldi	r31, 0x05	; 5
    1546:	ef 2e       	mov	r14, r31
    1548:	f0 2d       	mov	r31, r0
					vanskelighetsgrad = 1;
    154a:	ff 24       	eor	r15, r15
    154c:	f3 94       	inc	r15
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 14;
				}
				else if (joy_pos.dir == 2){
					menynummer = 16;
    154e:	10 e1       	ldi	r17, 0x10	; 16
			_delay_ms(200);
			while(menynummer == 13){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 14;
    1550:	0e e0       	ldi	r16, 0x0E	; 14
    1552:	24 c0       	rjmp	.+72     	; 0x159c <init_menu+0xb98>
			OLED_print(" >Hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 13){
				joy_pos = JOY_getDirection();
    1554:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    1558:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    155c:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    1560:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1564:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    1568:	8e ed       	ldi	r24, 0xDE	; 222
    156a:	9f ee       	ldi	r25, 0xEF	; 239
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <init_menu+0xb68>
				_delay_ms(50);
				if (joy_pos.dir == 1){
    1570:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	19 f4       	brne	.+6      	; 0x157e <init_menu+0xb7a>
					menynummer = 14;
    1578:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
    157c:	0f c0       	rjmp	.+30     	; 0x159c <init_menu+0xb98>
				}
				else if (joy_pos.dir == 2){
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	19 f4       	brne	.+6      	; 0x1588 <init_menu+0xb84>
					menynummer = 16;
    1582:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    1586:	0a c0       	rjmp	.+20     	; 0x159c <init_menu+0xb98>
				}
				else if (joy_button(1) == 0){
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1590:	89 2b       	or	r24, r25
    1592:	21 f4       	brne	.+8      	; 0x159c <init_menu+0xb98>
					menynummer = 5;
    1594:	e0 92 0d 04 	sts	0x040D, r14	; 0x80040d <menynummer>
					vanskelighetsgrad = 1;
    1598:	f0 92 22 01 	sts	0x0122, r15	; 0x800122 <vanskelighetsgrad>
			OLED_pos(5, 1);
			OLED_print(" >Hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 13){
    159c:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    15a0:	8d 30       	cpi	r24, 0x0D	; 13
    15a2:	c1 f2       	breq	.-80     	; 0x1554 <init_menu+0xb50>
    15a4:	2e c7       	rjmp	.+3676   	; 0x2402 <init_menu+0x19fe>
					vanskelighetsgrad = 1;
				}
			}
			break;
		case 14 : // Submeny HARD-MEDIUM
			OLED_clear();
    15a6:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
    15aa:	61 e0       	ldi	r22, 0x01	; 1
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Easy");
    15b2:	80 ec       	ldi	r24, 0xC0	; 192
    15b4:	92 e0       	ldi	r25, 0x02	; 2
    15b6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	83 e0       	ldi	r24, 0x03	; 3
    15be:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Medium");
    15c2:	88 e9       	ldi	r24, 0x98	; 152
    15c4:	92 e0       	ldi	r25, 0x02	; 2
    15c6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    15ca:	61 e0       	ldi	r22, 0x01	; 1
    15cc:	85 e0       	ldi	r24, 0x05	; 5
    15ce:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  >hard<");
    15d2:	82 ed       	ldi	r24, 0xD2	; 210
    15d4:	92 e0       	ldi	r25, 0x02	; 2
    15d6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    15da:	61 e0       	ldi	r22, 0x01	; 1
    15dc:	87 e0       	ldi	r24, 0x07	; 7
    15de:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
    15e2:	88 e8       	ldi	r24, 0x88	; 136
    15e4:	92 e0       	ldi	r25, 0x02	; 2
    15e6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    15ea:	93 e9       	ldi	r25, 0x93	; 147
    15ec:	af ef       	ldi	r26, 0xFF	; 255
    15ee:	b2 e0       	ldi	r27, 0x02	; 2
    15f0:	91 50       	subi	r25, 0x01	; 1
    15f2:	a0 40       	sbci	r26, 0x00	; 0
    15f4:	b0 40       	sbci	r27, 0x00	; 0
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <init_menu+0xbec>
    15f8:	00 c0       	rjmp	.+0      	; 0x15fa <init_menu+0xbf6>
    15fa:	00 00       	nop
				}
				else if (joy_pos.dir == 2){
					menynummer = 13;
				}
				else if (joy_button(1) == 0){
					menynummer = 10;
    15fc:	0f 2e       	mov	r0, r31
    15fe:	fa e0       	ldi	r31, 0x0A	; 10
    1600:	ef 2e       	mov	r14, r31
    1602:	f0 2d       	mov	r31, r0
					vanskelighetsgrad = 2;
    1604:	68 94       	set
    1606:	ff 24       	eor	r15, r15
    1608:	f1 f8       	bld	r15, 1
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 16;
				}
				else if (joy_pos.dir == 2){
					menynummer = 13;
    160a:	1d e0       	ldi	r17, 0x0D	; 13
			_delay_ms(200);
			while(menynummer == 14){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 16;
    160c:	00 e1       	ldi	r16, 0x10	; 16
    160e:	24 c0       	rjmp	.+72     	; 0x1658 <init_menu+0xc54>
			OLED_print("  >hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 14){
				joy_pos = JOY_getDirection();
    1610:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    1614:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    1618:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    161c:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1620:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    1624:	ee ed       	ldi	r30, 0xDE	; 222
    1626:	ff ee       	ldi	r31, 0xEF	; 239
    1628:	31 97       	sbiw	r30, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <init_menu+0xc24>
				_delay_ms(50);
				if (joy_pos.dir == 1){
    162c:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	19 f4       	brne	.+6      	; 0x163a <init_menu+0xc36>
					menynummer = 16;
    1634:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
    1638:	0f c0       	rjmp	.+30     	; 0x1658 <init_menu+0xc54>
				}
				else if (joy_pos.dir == 2){
    163a:	82 30       	cpi	r24, 0x02	; 2
    163c:	19 f4       	brne	.+6      	; 0x1644 <init_menu+0xc40>
					menynummer = 13;
    163e:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    1642:	0a c0       	rjmp	.+20     	; 0x1658 <init_menu+0xc54>
				}
				else if (joy_button(1) == 0){
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    164c:	89 2b       	or	r24, r25
    164e:	21 f4       	brne	.+8      	; 0x1658 <init_menu+0xc54>
					menynummer = 10;
    1650:	e0 92 0d 04 	sts	0x040D, r14	; 0x80040d <menynummer>
					vanskelighetsgrad = 2;
    1654:	f0 92 22 01 	sts	0x0122, r15	; 0x800122 <vanskelighetsgrad>
			OLED_pos(5, 1);
			OLED_print("  >hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 14){
    1658:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    165c:	8e 30       	cpi	r24, 0x0E	; 14
    165e:	c1 f2       	breq	.-80     	; 0x1610 <init_menu+0xc0c>
    1660:	d0 c6       	rjmp	.+3488   	; 0x2402 <init_menu+0x19fe>
					vanskelighetsgrad = 2;
				}
			}
			break;
		case 15 : // Submeny HARD-HARD
			OLED_clear();
    1662:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Easy");
    166e:	80 ec       	ldi	r24, 0xC0	; 192
    1670:	92 e0       	ldi	r25, 0x02	; 2
    1672:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	83 e0       	ldi	r24, 0x03	; 3
    167a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Medium");
    167e:	88 e7       	ldi	r24, 0x78	; 120
    1680:	92 e0       	ldi	r25, 0x02	; 2
    1682:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	85 e0       	ldi	r24, 0x05	; 5
    168a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* >Hard<");
    168e:	8b ed       	ldi	r24, 0xDB	; 219
    1690:	92 e0       	ldi	r25, 0x02	; 2
    1692:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	87 e0       	ldi	r24, 0x07	; 7
    169a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
    169e:	88 e8       	ldi	r24, 0x88	; 136
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    16a6:	f3 e9       	ldi	r31, 0x93	; 147
    16a8:	2f ef       	ldi	r18, 0xFF	; 255
    16aa:	32 e0       	ldi	r19, 0x02	; 2
    16ac:	f1 50       	subi	r31, 0x01	; 1
    16ae:	20 40       	sbci	r18, 0x00	; 0
    16b0:	30 40       	sbci	r19, 0x00	; 0
    16b2:	e1 f7       	brne	.-8      	; 0x16ac <init_menu+0xca8>
    16b4:	00 c0       	rjmp	.+0      	; 0x16b6 <init_menu+0xcb2>
    16b6:	00 00       	nop
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 16;
				}
				else if (joy_pos.dir == 2){
					menynummer = 14;
    16b8:	0e e0       	ldi	r16, 0x0E	; 14
			_delay_ms(200);
			while(menynummer == 15){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 16;
    16ba:	10 e1       	ldi	r17, 0x10	; 16
    16bc:	19 c0       	rjmp	.+50     	; 0x16f0 <init_menu+0xcec>
			OLED_print("* >Hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 15){
				joy_pos = JOY_getDirection();
    16be:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    16c2:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    16c6:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    16ca:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    16ce:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    16d2:	8e ed       	ldi	r24, 0xDE	; 222
    16d4:	9f ee       	ldi	r25, 0xEF	; 239
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <init_menu+0xcd2>
				_delay_ms(50);
				if (joy_pos.dir == 1){
    16da:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	19 f4       	brne	.+6      	; 0x16e8 <init_menu+0xce4>
					menynummer = 16;
    16e2:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <init_menu+0xcec>
				}
				else if (joy_pos.dir == 2){
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	11 f4       	brne	.+4      	; 0x16f0 <init_menu+0xcec>
					menynummer = 14;
    16ec:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
			OLED_pos(5, 1);
			OLED_print("* >Hard<");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 15){
    16f0:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    16f4:	8f 30       	cpi	r24, 0x0F	; 15
    16f6:	19 f3       	breq	.-58     	; 0x16be <init_menu+0xcba>
    16f8:	84 c6       	rjmp	.+3336   	; 0x2402 <init_menu+0x19fe>
					menynummer = 14;
				}
			}
			break;
		case 16 : // Submeny HARD-RETURN
			OLED_clear();
    16fa:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(1, 1);
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Easy");
    1706:	80 ec       	ldi	r24, 0xC0	; 192
    1708:	92 e0       	ldi	r25, 0x02	; 2
    170a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 1);
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	83 e0       	ldi	r24, 0x03	; 3
    1712:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Medium");
    1716:	88 e7       	ldi	r24, 0x78	; 120
    1718:	92 e0       	ldi	r25, 0x02	; 2
    171a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    171e:	61 e0       	ldi	r22, 0x01	; 1
    1720:	85 e0       	ldi	r24, 0x05	; 5
    1722:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print(" >Hard<");
    1726:	8c ed       	ldi	r24, 0xDC	; 220
    1728:	92 e0       	ldi	r25, 0x02	; 2
    172a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	87 e0       	ldi	r24, 0x07	; 7
    1732:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Back");
    1736:	88 ea       	ldi	r24, 0xA8	; 168
    1738:	92 e0       	ldi	r25, 0x02	; 2
    173a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    173e:	93 e9       	ldi	r25, 0x93	; 147
    1740:	af ef       	ldi	r26, 0xFF	; 255
    1742:	b2 e0       	ldi	r27, 0x02	; 2
    1744:	91 50       	subi	r25, 0x01	; 1
    1746:	a0 40       	sbci	r26, 0x00	; 0
    1748:	b0 40       	sbci	r27, 0x00	; 0
    174a:	e1 f7       	brne	.-8      	; 0x1744 <init_menu+0xd40>
    174c:	00 c0       	rjmp	.+0      	; 0x174e <init_menu+0xd4a>
    174e:	00 00       	nop
				}
				else if (joy_pos.dir == 2){
					menynummer = 15;
				}
				else if (joy_button(1) == 0){
					menynummer = 1;
    1750:	ff 24       	eor	r15, r15
    1752:	f3 94       	inc	r15
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 13;
				}
				else if (joy_pos.dir == 2){
					menynummer = 15;
    1754:	1f e0       	ldi	r17, 0x0F	; 15
			_delay_ms(200);
			while(menynummer == 16){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.dir == 1){
					menynummer = 13;
    1756:	0d e0       	ldi	r16, 0x0D	; 13
    1758:	22 c0       	rjmp	.+68     	; 0x179e <init_menu+0xd9a>
			OLED_print(" >Hard<");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 16){
				joy_pos = JOY_getDirection();
    175a:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    175e:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    1762:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    1766:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    176a:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    176e:	ee ed       	ldi	r30, 0xDE	; 222
    1770:	ff ee       	ldi	r31, 0xEF	; 239
    1772:	31 97       	sbiw	r30, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <init_menu+0xd6e>
				_delay_ms(50);
				if (joy_pos.dir == 1){
    1776:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	19 f4       	brne	.+6      	; 0x1784 <init_menu+0xd80>
					menynummer = 13;
    177e:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
    1782:	0d c0       	rjmp	.+26     	; 0x179e <init_menu+0xd9a>
				}
				else if (joy_pos.dir == 2){
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	19 f4       	brne	.+6      	; 0x178e <init_menu+0xd8a>
					menynummer = 15;
    1788:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    178c:	08 c0       	rjmp	.+16     	; 0x179e <init_menu+0xd9a>
				}
				else if (joy_button(1) == 0){
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1796:	89 2b       	or	r24, r25
    1798:	11 f4       	brne	.+4      	; 0x179e <init_menu+0xd9a>
					menynummer = 1;
    179a:	f0 92 0d 04 	sts	0x040D, r15	; 0x80040d <menynummer>
			OLED_pos(5, 1);
			OLED_print(" >Hard<");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 16){
    179e:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    17a2:	80 31       	cpi	r24, 0x10	; 16
    17a4:	d1 f2       	breq	.-76     	; 0x175a <init_menu+0xd56>
    17a6:	2d c6       	rjmp	.+3162   	; 0x2402 <init_menu+0x19fe>
					menynummer = 1;
				}
			}
			break;		
		case 17 : // Submeny Music1 SONG
			OLED_clear();
    17a8:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(2, 1);
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print(" > Sangnavn1 <");
    17b4:	84 ee       	ldi	r24, 0xE4	; 228
    17b6:	92 e0       	ldi	r25, 0x02	; 2
    17b8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    17bc:	61 e0       	ldi	r22, 0x01	; 1
    17be:	87 e0       	ldi	r24, 0x07	; 7
    17c0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
    17c4:	88 e8       	ldi	r24, 0x88	; 136
    17c6:	92 e0       	ldi	r25, 0x02	; 2
    17c8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    17cc:	f3 e9       	ldi	r31, 0x93	; 147
    17ce:	2f ef       	ldi	r18, 0xFF	; 255
    17d0:	32 e0       	ldi	r19, 0x02	; 2
    17d2:	f1 50       	subi	r31, 0x01	; 1
    17d4:	20 40       	sbci	r18, 0x00	; 0
    17d6:	30 40       	sbci	r19, 0x00	; 0
    17d8:	e1 f7       	brne	.-8      	; 0x17d2 <init_menu+0xdce>
    17da:	00 c0       	rjmp	.+0      	; 0x17dc <init_menu+0xdd8>
    17dc:	00 00       	nop
    17de:	33 c0       	rjmp	.+102    	; 0x1846 <init_menu+0xe42>
			_delay_ms(200);
			while(menynummer == 17){
				joy_pos = JOY_getDirection();
    17e0:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    17e4:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    17e8:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    17ec:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    17f0:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    17f4:	8e ea       	ldi	r24, 0xAE	; 174
    17f6:	9f e3       	ldi	r25, 0x3F	; 63
    17f8:	a2 e0       	ldi	r26, 0x02	; 2
    17fa:	81 50       	subi	r24, 0x01	; 1
    17fc:	90 40       	sbci	r25, 0x00	; 0
    17fe:	a0 40       	sbci	r26, 0x00	; 0
    1800:	e1 f7       	brne	.-8      	; 0x17fa <init_menu+0xdf6>
    1802:	00 c0       	rjmp	.+0      	; 0x1804 <init_menu+0xe00>
    1804:	00 00       	nop
				_delay_ms(150);
				if (joy_pos.sidedir == 1){
    1806:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <joy_pos+0x3>
    180a:	81 30       	cpi	r24, 0x01	; 1
    180c:	21 f4       	brne	.+8      	; 0x1816 <init_menu+0xe12>
					menynummer = 19;
    180e:	83 e1       	ldi	r24, 0x13	; 19
    1810:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1814:	f6 c5       	rjmp	.+3052   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_pos.sidedir == 2){
    1816:	82 30       	cpi	r24, 0x02	; 2
    1818:	21 f4       	brne	.+8      	; 0x1822 <init_menu+0xe1e>
					menynummer = 21;
    181a:	85 e1       	ldi	r24, 0x15	; 21
    181c:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1820:	f0 c5       	rjmp	.+3040   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_pos.dir == 2){
    1822:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    1826:	82 30       	cpi	r24, 0x02	; 2
    1828:	21 f4       	brne	.+8      	; 0x1832 <init_menu+0xe2e>
					menynummer = 18;
    182a:	82 e1       	ldi	r24, 0x12	; 18
    182c:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1830:	e8 c5       	rjmp	.+3024   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_button(1) == 0){
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    183a:	89 2b       	or	r24, r25
    183c:	21 f4       	brne	.+8      	; 0x1846 <init_menu+0xe42>
					musikknummer = 1;
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <musikknummer>
					break;
    1844:	de c5       	rjmp	.+3004   	; 0x2402 <init_menu+0x19fe>
			OLED_pos(2, 1);
			OLED_print(" > Sangnavn1 <");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 17){
    1846:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    184a:	81 31       	cpi	r24, 0x11	; 17
    184c:	49 f2       	breq	.-110    	; 0x17e0 <init_menu+0xddc>
    184e:	d9 c5       	rjmp	.+2994   	; 0x2402 <init_menu+0x19fe>
					break;
				}
			}
			break;
		case 18 : // Submeny MUSIC1 - return
			OLED_clear();
    1850:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(2, 1);
    1854:	61 e0       	ldi	r22, 0x01	; 1
    1856:	82 e0       	ldi	r24, 0x02	; 2
    1858:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("   Sangnavn1");
    185c:	83 ef       	ldi	r24, 0xF3	; 243
    185e:	92 e0       	ldi	r25, 0x02	; 2
    1860:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	87 e0       	ldi	r24, 0x07	; 7
    1868:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Back");
    186c:	88 ea       	ldi	r24, 0xA8	; 168
    186e:	92 e0       	ldi	r25, 0x02	; 2
    1870:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    1874:	b3 e9       	ldi	r27, 0x93	; 147
    1876:	ef ef       	ldi	r30, 0xFF	; 255
    1878:	f2 e0       	ldi	r31, 0x02	; 2
    187a:	b1 50       	subi	r27, 0x01	; 1
    187c:	e0 40       	sbci	r30, 0x00	; 0
    187e:	f0 40       	sbci	r31, 0x00	; 0
    1880:	e1 f7       	brne	.-8      	; 0x187a <init_menu+0xe76>
    1882:	00 c0       	rjmp	.+0      	; 0x1884 <init_menu+0xe80>
    1884:	00 00       	nop
    1886:	2b c0       	rjmp	.+86     	; 0x18de <init_menu+0xeda>
			_delay_ms(200);
			while(menynummer == 18){
				joy_pos = JOY_getDirection();
    1888:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    188c:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    1890:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    1894:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1898:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    189c:	2e ea       	ldi	r18, 0xAE	; 174
    189e:	3f e3       	ldi	r19, 0x3F	; 63
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	21 50       	subi	r18, 0x01	; 1
    18a4:	30 40       	sbci	r19, 0x00	; 0
    18a6:	80 40       	sbci	r24, 0x00	; 0
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <init_menu+0xe9e>
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <init_menu+0xea8>
    18ac:	00 00       	nop
				_delay_ms(150);
				if (joy_pos.dir == 2){
    18ae:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    18b2:	82 30       	cpi	r24, 0x02	; 2
    18b4:	21 f4       	brne	.+8      	; 0x18be <init_menu+0xeba>
					menynummer = 17;
    18b6:	81 e1       	ldi	r24, 0x11	; 17
    18b8:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    18bc:	a2 c5       	rjmp	.+2884   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_pos.dir == 1){
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	21 f4       	brne	.+8      	; 0x18ca <init_menu+0xec6>
					menynummer = 17;
    18c2:	81 e1       	ldi	r24, 0x11	; 17
    18c4:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    18c8:	9c c5       	rjmp	.+2872   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_button(1) == 0){
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    18d2:	89 2b       	or	r24, r25
    18d4:	21 f4       	brne	.+8      	; 0x18de <init_menu+0xeda>
					menynummer = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    18dc:	92 c5       	rjmp	.+2852   	; 0x2402 <init_menu+0x19fe>
			OLED_pos(2, 1);
			OLED_print("   Sangnavn1");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 18){
    18de:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    18e2:	82 31       	cpi	r24, 0x12	; 18
    18e4:	89 f2       	breq	.-94     	; 0x1888 <init_menu+0xe84>
    18e6:	8d c5       	rjmp	.+2842   	; 0x2402 <init_menu+0x19fe>
					break;
				}
			}
			break;
		case 19 : // MUSIC2 - Song
			OLED_clear();
    18e8:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(2, 1);
    18ec:	61 e0       	ldi	r22, 0x01	; 1
    18ee:	82 e0       	ldi	r24, 0x02	; 2
    18f0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print(" > Sangnavn2 <");
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	93 e0       	ldi	r25, 0x03	; 3
    18f8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	87 e0       	ldi	r24, 0x07	; 7
    1900:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
    1904:	88 e8       	ldi	r24, 0x88	; 136
    1906:	92 e0       	ldi	r25, 0x02	; 2
    1908:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    190c:	93 e9       	ldi	r25, 0x93	; 147
    190e:	af ef       	ldi	r26, 0xFF	; 255
    1910:	b2 e0       	ldi	r27, 0x02	; 2
    1912:	91 50       	subi	r25, 0x01	; 1
    1914:	a0 40       	sbci	r26, 0x00	; 0
    1916:	b0 40       	sbci	r27, 0x00	; 0
    1918:	e1 f7       	brne	.-8      	; 0x1912 <init_menu+0xf0e>
    191a:	00 c0       	rjmp	.+0      	; 0x191c <init_menu+0xf18>
    191c:	00 00       	nop
    191e:	33 c0       	rjmp	.+102    	; 0x1986 <init_menu+0xf82>
			_delay_ms(200);
			while(menynummer == 19){
				joy_pos = JOY_getDirection();
    1920:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    1924:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    1928:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    192c:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1930:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    1934:	ee ea       	ldi	r30, 0xAE	; 174
    1936:	ff e3       	ldi	r31, 0x3F	; 63
    1938:	22 e0       	ldi	r18, 0x02	; 2
    193a:	e1 50       	subi	r30, 0x01	; 1
    193c:	f0 40       	sbci	r31, 0x00	; 0
    193e:	20 40       	sbci	r18, 0x00	; 0
    1940:	e1 f7       	brne	.-8      	; 0x193a <init_menu+0xf36>
    1942:	00 c0       	rjmp	.+0      	; 0x1944 <init_menu+0xf40>
    1944:	00 00       	nop
				_delay_ms(150);
				if (joy_pos.sidedir == 1){
    1946:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <joy_pos+0x3>
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	21 f4       	brne	.+8      	; 0x1956 <init_menu+0xf52>
					menynummer = 21;
    194e:	85 e1       	ldi	r24, 0x15	; 21
    1950:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1954:	56 c5       	rjmp	.+2732   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_pos.sidedir == 2){
    1956:	82 30       	cpi	r24, 0x02	; 2
    1958:	21 f4       	brne	.+8      	; 0x1962 <init_menu+0xf5e>
					menynummer = 17;
    195a:	81 e1       	ldi	r24, 0x11	; 17
    195c:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1960:	50 c5       	rjmp	.+2720   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_pos.dir == 2){
    1962:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    1966:	82 30       	cpi	r24, 0x02	; 2
    1968:	21 f4       	brne	.+8      	; 0x1972 <init_menu+0xf6e>
					menynummer = 20;
    196a:	84 e1       	ldi	r24, 0x14	; 20
    196c:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1970:	48 c5       	rjmp	.+2704   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_button(1) == 0){
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    197a:	89 2b       	or	r24, r25
    197c:	21 f4       	brne	.+8      	; 0x1986 <init_menu+0xf82>
					musikknummer = 2;
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <musikknummer>
					break;
    1984:	3e c5       	rjmp	.+2684   	; 0x2402 <init_menu+0x19fe>
			OLED_pos(2, 1);
			OLED_print(" > Sangnavn2 <");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 19){
    1986:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    198a:	83 31       	cpi	r24, 0x13	; 19
    198c:	49 f2       	breq	.-110    	; 0x1920 <init_menu+0xf1c>
    198e:	39 c5       	rjmp	.+2674   	; 0x2402 <init_menu+0x19fe>
					break;
				}
			}
			break;
		case 20 : // MUSIC2 - return
			OLED_clear();
    1990:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(2, 1);
    1994:	61 e0       	ldi	r22, 0x01	; 1
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("   Sangnavn2");
    199c:	8f e0       	ldi	r24, 0x0F	; 15
    199e:	93 e0       	ldi	r25, 0x03	; 3
    19a0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    19a4:	61 e0       	ldi	r22, 0x01	; 1
    19a6:	87 e0       	ldi	r24, 0x07	; 7
    19a8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Back");
    19ac:	88 ea       	ldi	r24, 0xA8	; 168
    19ae:	92 e0       	ldi	r25, 0x02	; 2
    19b0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    19b4:	33 e9       	ldi	r19, 0x93	; 147
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	92 e0       	ldi	r25, 0x02	; 2
    19ba:	31 50       	subi	r19, 0x01	; 1
    19bc:	80 40       	sbci	r24, 0x00	; 0
    19be:	90 40       	sbci	r25, 0x00	; 0
    19c0:	e1 f7       	brne	.-8      	; 0x19ba <init_menu+0xfb6>
    19c2:	00 c0       	rjmp	.+0      	; 0x19c4 <init_menu+0xfc0>
    19c4:	00 00       	nop
    19c6:	2b c0       	rjmp	.+86     	; 0x1a1e <init_menu+0x101a>
			_delay_ms(200);
			while(menynummer == 20){
				joy_pos = JOY_getDirection();
    19c8:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    19cc:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    19d0:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    19d4:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    19d8:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    19dc:	ae ea       	ldi	r26, 0xAE	; 174
    19de:	bf e3       	ldi	r27, 0x3F	; 63
    19e0:	e2 e0       	ldi	r30, 0x02	; 2
    19e2:	a1 50       	subi	r26, 0x01	; 1
    19e4:	b0 40       	sbci	r27, 0x00	; 0
    19e6:	e0 40       	sbci	r30, 0x00	; 0
    19e8:	e1 f7       	brne	.-8      	; 0x19e2 <init_menu+0xfde>
    19ea:	00 c0       	rjmp	.+0      	; 0x19ec <init_menu+0xfe8>
    19ec:	00 00       	nop
				_delay_ms(150);
				if (joy_pos.dir == 2){
    19ee:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    19f2:	82 30       	cpi	r24, 0x02	; 2
    19f4:	21 f4       	brne	.+8      	; 0x19fe <init_menu+0xffa>
					menynummer = 19;
    19f6:	83 e1       	ldi	r24, 0x13	; 19
    19f8:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    19fc:	02 c5       	rjmp	.+2564   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_pos.dir == 1){
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	21 f4       	brne	.+8      	; 0x1a0a <init_menu+0x1006>
					menynummer = 19;
    1a02:	83 e1       	ldi	r24, 0x13	; 19
    1a04:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1a08:	fc c4       	rjmp	.+2552   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_button(1) == 0){
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1a12:	89 2b       	or	r24, r25
    1a14:	21 f4       	brne	.+8      	; 0x1a1e <init_menu+0x101a>
					menynummer = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1a1c:	f2 c4       	rjmp	.+2532   	; 0x2402 <init_menu+0x19fe>
			OLED_pos(2, 1);
			OLED_print("   Sangnavn2");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 20){
    1a1e:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    1a22:	84 31       	cpi	r24, 0x14	; 20
    1a24:	89 f2       	breq	.-94     	; 0x19c8 <init_menu+0xfc4>
    1a26:	ed c4       	rjmp	.+2522   	; 0x2402 <init_menu+0x19fe>
					break;
				}
			}
			break;
		case 21 : // MUSIC3 - SONG
			OLED_clear();
    1a28:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(2, 1);
    1a2c:	61 e0       	ldi	r22, 0x01	; 1
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print(" > Sangnavn3 <");
    1a34:	8c e1       	ldi	r24, 0x1C	; 28
    1a36:	93 e0       	ldi	r25, 0x03	; 3
    1a38:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    1a3c:	61 e0       	ldi	r22, 0x01	; 1
    1a3e:	87 e0       	ldi	r24, 0x07	; 7
    1a40:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  Back");
    1a44:	88 e8       	ldi	r24, 0x88	; 136
    1a46:	92 e0       	ldi	r25, 0x02	; 2
    1a48:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    1a4c:	f3 e9       	ldi	r31, 0x93	; 147
    1a4e:	2f ef       	ldi	r18, 0xFF	; 255
    1a50:	32 e0       	ldi	r19, 0x02	; 2
    1a52:	f1 50       	subi	r31, 0x01	; 1
    1a54:	20 40       	sbci	r18, 0x00	; 0
    1a56:	30 40       	sbci	r19, 0x00	; 0
    1a58:	e1 f7       	brne	.-8      	; 0x1a52 <init_menu+0x104e>
    1a5a:	00 c0       	rjmp	.+0      	; 0x1a5c <init_menu+0x1058>
    1a5c:	00 00       	nop
    1a5e:	33 c0       	rjmp	.+102    	; 0x1ac6 <init_menu+0x10c2>
			_delay_ms(200);
			while(menynummer == 21){
			joy_pos = JOY_getDirection();
    1a60:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    1a64:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    1a68:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    1a6c:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1a70:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    1a74:	8e ea       	ldi	r24, 0xAE	; 174
    1a76:	9f e3       	ldi	r25, 0x3F	; 63
    1a78:	a2 e0       	ldi	r26, 0x02	; 2
    1a7a:	81 50       	subi	r24, 0x01	; 1
    1a7c:	90 40       	sbci	r25, 0x00	; 0
    1a7e:	a0 40       	sbci	r26, 0x00	; 0
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <init_menu+0x1076>
    1a82:	00 c0       	rjmp	.+0      	; 0x1a84 <init_menu+0x1080>
    1a84:	00 00       	nop
				_delay_ms(150);
				if (joy_pos.sidedir == 1){
    1a86:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <joy_pos+0x3>
    1a8a:	81 30       	cpi	r24, 0x01	; 1
    1a8c:	21 f4       	brne	.+8      	; 0x1a96 <init_menu+0x1092>
					menynummer = 17;
    1a8e:	81 e1       	ldi	r24, 0x11	; 17
    1a90:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1a94:	b6 c4       	rjmp	.+2412   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_pos.sidedir == 2){
    1a96:	82 30       	cpi	r24, 0x02	; 2
    1a98:	21 f4       	brne	.+8      	; 0x1aa2 <init_menu+0x109e>
					menynummer = 19;
    1a9a:	83 e1       	ldi	r24, 0x13	; 19
    1a9c:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1aa0:	b0 c4       	rjmp	.+2400   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_pos.dir == 2){
    1aa2:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    1aa6:	82 30       	cpi	r24, 0x02	; 2
    1aa8:	21 f4       	brne	.+8      	; 0x1ab2 <init_menu+0x10ae>
					menynummer = 22;
    1aaa:	86 e1       	ldi	r24, 0x16	; 22
    1aac:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1ab0:	a8 c4       	rjmp	.+2384   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_button(1) == 0){
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1aba:	89 2b       	or	r24, r25
    1abc:	21 f4       	brne	.+8      	; 0x1ac6 <init_menu+0x10c2>
					musikknummer = 3;
    1abe:	83 e0       	ldi	r24, 0x03	; 3
    1ac0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <musikknummer>
					break;
    1ac4:	9e c4       	rjmp	.+2364   	; 0x2402 <init_menu+0x19fe>
			OLED_pos(2, 1);
			OLED_print(" > Sangnavn3 <");
			OLED_pos(7, 1);
			OLED_print("  Back");
			_delay_ms(200);
			while(menynummer == 21){
    1ac6:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    1aca:	85 31       	cpi	r24, 0x15	; 21
    1acc:	49 f2       	breq	.-110    	; 0x1a60 <init_menu+0x105c>
    1ace:	99 c4       	rjmp	.+2354   	; 0x2402 <init_menu+0x19fe>
					break;
				}
			}
			break;
		case 22 : // MUSIC3 - return
			OLED_clear();
    1ad0:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(2, 1);
    1ad4:	61 e0       	ldi	r22, 0x01	; 1
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("   Sangnavn3");
    1adc:	8b e2       	ldi	r24, 0x2B	; 43
    1ade:	93 e0       	ldi	r25, 0x03	; 3
    1ae0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(7, 1);
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	87 e0       	ldi	r24, 0x07	; 7
    1ae8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("* Back");
    1aec:	88 ea       	ldi	r24, 0xA8	; 168
    1aee:	92 e0       	ldi	r25, 0x02	; 2
    1af0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    1af4:	b3 e9       	ldi	r27, 0x93	; 147
    1af6:	ef ef       	ldi	r30, 0xFF	; 255
    1af8:	f2 e0       	ldi	r31, 0x02	; 2
    1afa:	b1 50       	subi	r27, 0x01	; 1
    1afc:	e0 40       	sbci	r30, 0x00	; 0
    1afe:	f0 40       	sbci	r31, 0x00	; 0
    1b00:	e1 f7       	brne	.-8      	; 0x1afa <init_menu+0x10f6>
    1b02:	00 c0       	rjmp	.+0      	; 0x1b04 <init_menu+0x1100>
    1b04:	00 00       	nop
    1b06:	2b c0       	rjmp	.+86     	; 0x1b5e <init_menu+0x115a>
			_delay_ms(200);
			while(menynummer == 22){
				joy_pos = JOY_getDirection();
    1b08:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    1b0c:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    1b10:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    1b14:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1b18:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    1b1c:	2e ea       	ldi	r18, 0xAE	; 174
    1b1e:	3f e3       	ldi	r19, 0x3F	; 63
    1b20:	82 e0       	ldi	r24, 0x02	; 2
    1b22:	21 50       	subi	r18, 0x01	; 1
    1b24:	30 40       	sbci	r19, 0x00	; 0
    1b26:	80 40       	sbci	r24, 0x00	; 0
    1b28:	e1 f7       	brne	.-8      	; 0x1b22 <init_menu+0x111e>
    1b2a:	00 c0       	rjmp	.+0      	; 0x1b2c <init_menu+0x1128>
    1b2c:	00 00       	nop
				_delay_ms(150);
				if (joy_pos.dir == 2){
    1b2e:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <joy_pos+0x2>
    1b32:	82 30       	cpi	r24, 0x02	; 2
    1b34:	21 f4       	brne	.+8      	; 0x1b3e <init_menu+0x113a>
					menynummer = 21;
    1b36:	85 e1       	ldi	r24, 0x15	; 21
    1b38:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1b3c:	62 c4       	rjmp	.+2244   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_pos.dir == 1){
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	21 f4       	brne	.+8      	; 0x1b4a <init_menu+0x1146>
					menynummer = 21;
    1b42:	85 e1       	ldi	r24, 0x15	; 21
    1b44:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1b48:	5c c4       	rjmp	.+2232   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_button(1) == 0){
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1b52:	89 2b       	or	r24, r25
    1b54:	21 f4       	brne	.+8      	; 0x1b5e <init_menu+0x115a>
					menynummer = 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1b5c:	52 c4       	rjmp	.+2212   	; 0x2402 <init_menu+0x19fe>
			OLED_pos(2, 1);
			OLED_print("   Sangnavn3");
			OLED_pos(7, 1);
			OLED_print("* Back");
			_delay_ms(200);
			while(menynummer == 22){
    1b5e:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    1b62:	86 31       	cpi	r24, 0x16	; 22
    1b64:	89 f2       	breq	.-94     	; 0x1b08 <init_menu+0x1104>
    1b66:	4d c4       	rjmp	.+2202   	; 0x2402 <init_menu+0x19fe>
					break;
				}
			}
			break;
		case 23 : // HIGHSCORES - Return
			OLED_clear();
    1b68:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(2, 3);
    1b6c:	63 e0       	ldi	r22, 0x03	; 3
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1b74:	a9 e1       	ldi	r26, 0x19	; 25
    1b76:	b1 e0       	ldi	r27, 0x01	; 1
    1b78:	01 e2       	ldi	r16, 0x21	; 33
    1b7a:	11 e0       	ldi	r17, 0x01	; 1
    1b7c:	ba 83       	std	Y+2, r27	; 0x02
    1b7e:	a9 83       	std	Y+1, r26	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename1[i]);
    1b80:	e9 81       	ldd	r30, Y+1	; 0x01
    1b82:	fa 81       	ldd	r31, Y+2	; 0x02
    1b84:	81 91       	ld	r24, Z+
    1b86:	91 91       	ld	r25, Z+
    1b88:	fa 83       	std	Y+2, r31	; 0x02
    1b8a:	e9 83       	std	Y+1, r30	; 0x01
    1b8c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			}
			break;
		case 23 : // HIGHSCORES - Return
			OLED_clear();
			OLED_pos(2, 3);
			for (int i = 0; i < 4; i++){
    1b90:	29 81       	ldd	r18, Y+1	; 0x01
    1b92:	3a 81       	ldd	r19, Y+2	; 0x02
    1b94:	02 17       	cp	r16, r18
    1b96:	13 07       	cpc	r17, r19
    1b98:	99 f7       	brne	.-26     	; 0x1b80 <init_menu+0x117c>
				OLED_print(highscorename1[i]);
			}
			OLED_pos(2,9);
    1b9a:	69 e0       	ldi	r22, 0x09	; 9
    1b9c:	82 e0       	ldi	r24, 0x02	; 2
    1b9e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1ba2:	4a e0       	ldi	r20, 0x0A	; 10
    1ba4:	65 e3       	ldi	r22, 0x35	; 53
    1ba6:	74 e0       	ldi	r23, 0x04	; 4
    1ba8:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <highscorescore1>
    1bac:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <highscorescore1+0x1>
    1bb0:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__itoa_ncheck>
			OLED_print(itoa(highscorescore1, buffer, 10));
    1bb4:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 3);
    1bb8:	63 e0       	ldi	r22, 0x03	; 3
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1bc0:	81 e1       	ldi	r24, 0x11	; 17
    1bc2:	91 e0       	ldi	r25, 0x01	; 1
    1bc4:	09 e1       	ldi	r16, 0x19	; 25
    1bc6:	11 e0       	ldi	r17, 0x01	; 1
    1bc8:	9a 83       	std	Y+2, r25	; 0x02
    1bca:	89 83       	std	Y+1, r24	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename2[i]);
    1bcc:	a9 81       	ldd	r26, Y+1	; 0x01
    1bce:	ba 81       	ldd	r27, Y+2	; 0x02
    1bd0:	8d 91       	ld	r24, X+
    1bd2:	9d 91       	ld	r25, X+
    1bd4:	ba 83       	std	Y+2, r27	; 0x02
    1bd6:	a9 83       	std	Y+1, r26	; 0x01
    1bd8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
				OLED_print(highscorename1[i]);
			}
			OLED_pos(2,9);
			OLED_print(itoa(highscorescore1, buffer, 10));
			OLED_pos(3, 3);
			for (int i = 0; i < 4; i++){
    1bdc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bde:	fa 81       	ldd	r31, Y+2	; 0x02
    1be0:	e0 17       	cp	r30, r16
    1be2:	f1 07       	cpc	r31, r17
    1be4:	99 f7       	brne	.-26     	; 0x1bcc <init_menu+0x11c8>
				OLED_print(highscorename2[i]);
			}
			OLED_pos(3,9);
    1be6:	69 e0       	ldi	r22, 0x09	; 9
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1bee:	4a e0       	ldi	r20, 0x0A	; 10
    1bf0:	65 e3       	ldi	r22, 0x35	; 53
    1bf2:	74 e0       	ldi	r23, 0x04	; 4
    1bf4:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <highscorescore2>
    1bf8:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <highscorescore2+0x1>
    1bfc:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__itoa_ncheck>
			OLED_print(itoa(highscorescore2, buffer, 10));
    1c00:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(4, 3);
    1c04:	63 e0       	ldi	r22, 0x03	; 3
    1c06:	84 e0       	ldi	r24, 0x04	; 4
    1c08:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1c0c:	29 e0       	ldi	r18, 0x09	; 9
    1c0e:	31 e0       	ldi	r19, 0x01	; 1
    1c10:	01 e1       	ldi	r16, 0x11	; 17
    1c12:	11 e0       	ldi	r17, 0x01	; 1
    1c14:	3a 83       	std	Y+2, r19	; 0x02
    1c16:	29 83       	std	Y+1, r18	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename3[i]);
    1c18:	a9 81       	ldd	r26, Y+1	; 0x01
    1c1a:	ba 81       	ldd	r27, Y+2	; 0x02
    1c1c:	8d 91       	ld	r24, X+
    1c1e:	9d 91       	ld	r25, X+
    1c20:	ba 83       	std	Y+2, r27	; 0x02
    1c22:	a9 83       	std	Y+1, r26	; 0x01
    1c24:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
				OLED_print(highscorename2[i]);
			}
			OLED_pos(3,9);
			OLED_print(itoa(highscorescore2, buffer, 10));
			OLED_pos(4, 3);
			for (int i = 0; i < 4; i++){
    1c28:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2c:	0e 17       	cp	r16, r30
    1c2e:	1f 07       	cpc	r17, r31
    1c30:	99 f7       	brne	.-26     	; 0x1c18 <init_menu+0x1214>
				OLED_print(highscorename3[i]);
			}
			OLED_pos(4,9);
    1c32:	69 e0       	ldi	r22, 0x09	; 9
    1c34:	84 e0       	ldi	r24, 0x04	; 4
    1c36:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1c3a:	4a e0       	ldi	r20, 0x0A	; 10
    1c3c:	65 e3       	ldi	r22, 0x35	; 53
    1c3e:	74 e0       	ldi	r23, 0x04	; 4
    1c40:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <highscorescore3>
    1c44:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <highscorescore3+0x1>
    1c48:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__itoa_ncheck>
			OLED_print(itoa(highscorescore3, buffer, 10));
    1c4c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(6,1);
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	86 e0       	ldi	r24, 0x06	; 6
    1c54:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("*Back    Reset");
    1c58:	88 e3       	ldi	r24, 0x38	; 56
    1c5a:	93 e0       	ldi	r25, 0x03	; 3
    1c5c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    1c60:	f3 e9       	ldi	r31, 0x93	; 147
    1c62:	2f ef       	ldi	r18, 0xFF	; 255
    1c64:	32 e0       	ldi	r19, 0x02	; 2
    1c66:	f1 50       	subi	r31, 0x01	; 1
    1c68:	20 40       	sbci	r18, 0x00	; 0
    1c6a:	30 40       	sbci	r19, 0x00	; 0
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <init_menu+0x1262>
    1c6e:	00 c0       	rjmp	.+0      	; 0x1c70 <init_menu+0x126c>
    1c70:	00 00       	nop
				else if (joy_pos.sidedir == 2){
					menynummer = 24;
					break;
				}
				else if (joy_button(1) == 0){
					menynummer = 1;
    1c72:	11 e0       	ldi	r17, 0x01	; 1
    1c74:	29 c0       	rjmp	.+82     	; 0x1cc8 <init_menu+0x12c4>
			OLED_print(itoa(highscorescore3, buffer, 10));
			OLED_pos(6,1);
			OLED_print("*Back    Reset");
			_delay_ms(200);
			while(menynummer == 23){
				joy_pos = JOY_getDirection();
    1c76:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    1c7a:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    1c7e:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    1c82:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1c86:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    1c8a:	8e ea       	ldi	r24, 0xAE	; 174
    1c8c:	9f e3       	ldi	r25, 0x3F	; 63
    1c8e:	a2 e0       	ldi	r26, 0x02	; 2
    1c90:	81 50       	subi	r24, 0x01	; 1
    1c92:	90 40       	sbci	r25, 0x00	; 0
    1c94:	a0 40       	sbci	r26, 0x00	; 0
    1c96:	e1 f7       	brne	.-8      	; 0x1c90 <init_menu+0x128c>
    1c98:	00 c0       	rjmp	.+0      	; 0x1c9a <init_menu+0x1296>
    1c9a:	00 00       	nop
				_delay_ms(150);
				if (joy_pos.sidedir == 1){
    1c9c:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <joy_pos+0x3>
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	21 f4       	brne	.+8      	; 0x1cac <init_menu+0x12a8>
					menynummer = 24;
    1ca4:	88 e1       	ldi	r24, 0x18	; 24
    1ca6:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1caa:	ab c3       	rjmp	.+1878   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_pos.sidedir == 2){
    1cac:	82 30       	cpi	r24, 0x02	; 2
    1cae:	21 f4       	brne	.+8      	; 0x1cb8 <init_menu+0x12b4>
					menynummer = 24;
    1cb0:	88 e1       	ldi	r24, 0x18	; 24
    1cb2:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1cb6:	a5 c3       	rjmp	.+1866   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_button(1) == 0){
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1cc0:	89 2b       	or	r24, r25
    1cc2:	11 f4       	brne	.+4      	; 0x1cc8 <init_menu+0x12c4>
					menynummer = 1;
    1cc4:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
			OLED_pos(4,9);
			OLED_print(itoa(highscorescore3, buffer, 10));
			OLED_pos(6,1);
			OLED_print("*Back    Reset");
			_delay_ms(200);
			while(menynummer == 23){
    1cc8:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    1ccc:	87 31       	cpi	r24, 0x17	; 23
    1cce:	99 f2       	breq	.-90     	; 0x1c76 <init_menu+0x1272>
    1cd0:	98 c3       	rjmp	.+1840   	; 0x2402 <init_menu+0x19fe>
					menynummer = 1;
				}
			}
			break;
		case 24 : // HIGHSCORES - Reset
			OLED_clear();
    1cd2:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(2, 3);
    1cd6:	63 e0       	ldi	r22, 0x03	; 3
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1cde:	e9 e1       	ldi	r30, 0x19	; 25
    1ce0:	f1 e0       	ldi	r31, 0x01	; 1
    1ce2:	01 e2       	ldi	r16, 0x21	; 33
    1ce4:	11 e0       	ldi	r17, 0x01	; 1
    1ce6:	fa 83       	std	Y+2, r31	; 0x02
    1ce8:	e9 83       	std	Y+1, r30	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename1[i]);
    1cea:	a9 81       	ldd	r26, Y+1	; 0x01
    1cec:	ba 81       	ldd	r27, Y+2	; 0x02
    1cee:	8d 91       	ld	r24, X+
    1cf0:	9d 91       	ld	r25, X+
    1cf2:	ba 83       	std	Y+2, r27	; 0x02
    1cf4:	a9 83       	std	Y+1, r26	; 0x01
    1cf6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			}
			break;
		case 24 : // HIGHSCORES - Reset
			OLED_clear();
			OLED_pos(2, 3);
			for (int i = 0; i < 4; i++){
    1cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfe:	0e 17       	cp	r16, r30
    1d00:	1f 07       	cpc	r17, r31
    1d02:	99 f7       	brne	.-26     	; 0x1cea <init_menu+0x12e6>
				OLED_print(highscorename1[i]);
			}
			OLED_pos(2,9);
    1d04:	69 e0       	ldi	r22, 0x09	; 9
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1d0c:	4a e0       	ldi	r20, 0x0A	; 10
    1d0e:	65 e3       	ldi	r22, 0x35	; 53
    1d10:	74 e0       	ldi	r23, 0x04	; 4
    1d12:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <highscorescore1>
    1d16:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <highscorescore1+0x1>
    1d1a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__itoa_ncheck>
			OLED_print(itoa(highscorescore1, buffer, 10));
    1d1e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(3, 3);
    1d22:	63 e0       	ldi	r22, 0x03	; 3
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1d2a:	21 e1       	ldi	r18, 0x11	; 17
    1d2c:	31 e0       	ldi	r19, 0x01	; 1
    1d2e:	09 e1       	ldi	r16, 0x19	; 25
    1d30:	11 e0       	ldi	r17, 0x01	; 1
    1d32:	3a 83       	std	Y+2, r19	; 0x02
    1d34:	29 83       	std	Y+1, r18	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename2[i]);
    1d36:	a9 81       	ldd	r26, Y+1	; 0x01
    1d38:	ba 81       	ldd	r27, Y+2	; 0x02
    1d3a:	8d 91       	ld	r24, X+
    1d3c:	9d 91       	ld	r25, X+
    1d3e:	ba 83       	std	Y+2, r27	; 0x02
    1d40:	a9 83       	std	Y+1, r26	; 0x01
    1d42:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
				OLED_print(highscorename1[i]);
			}
			OLED_pos(2,9);
			OLED_print(itoa(highscorescore1, buffer, 10));
			OLED_pos(3, 3);
			for (int i = 0; i < 4; i++){
    1d46:	e9 81       	ldd	r30, Y+1	; 0x01
    1d48:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4a:	0e 17       	cp	r16, r30
    1d4c:	1f 07       	cpc	r17, r31
    1d4e:	99 f7       	brne	.-26     	; 0x1d36 <init_menu+0x1332>
				OLED_print(highscorename2[i]);
			}
			OLED_pos(3,9);
    1d50:	69 e0       	ldi	r22, 0x09	; 9
    1d52:	83 e0       	ldi	r24, 0x03	; 3
    1d54:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1d58:	4a e0       	ldi	r20, 0x0A	; 10
    1d5a:	65 e3       	ldi	r22, 0x35	; 53
    1d5c:	74 e0       	ldi	r23, 0x04	; 4
    1d5e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <highscorescore2>
    1d62:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <highscorescore2+0x1>
    1d66:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__itoa_ncheck>
			OLED_print(itoa(highscorescore2, buffer, 10));
    1d6a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(4, 3);
    1d6e:	63 e0       	ldi	r22, 0x03	; 3
    1d70:	84 e0       	ldi	r24, 0x04	; 4
    1d72:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1d76:	29 e0       	ldi	r18, 0x09	; 9
    1d78:	31 e0       	ldi	r19, 0x01	; 1
    1d7a:	01 e1       	ldi	r16, 0x11	; 17
    1d7c:	11 e0       	ldi	r17, 0x01	; 1
    1d7e:	3a 83       	std	Y+2, r19	; 0x02
    1d80:	29 83       	std	Y+1, r18	; 0x01
			for (int i = 0; i < 4; i++){
				OLED_print(highscorename3[i]);
    1d82:	a9 81       	ldd	r26, Y+1	; 0x01
    1d84:	ba 81       	ldd	r27, Y+2	; 0x02
    1d86:	8d 91       	ld	r24, X+
    1d88:	9d 91       	ld	r25, X+
    1d8a:	ba 83       	std	Y+2, r27	; 0x02
    1d8c:	a9 83       	std	Y+1, r26	; 0x01
    1d8e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
				OLED_print(highscorename2[i]);
			}
			OLED_pos(3,9);
			OLED_print(itoa(highscorescore2, buffer, 10));
			OLED_pos(4, 3);
			for (int i = 0; i < 4; i++){
    1d92:	e9 81       	ldd	r30, Y+1	; 0x01
    1d94:	fa 81       	ldd	r31, Y+2	; 0x02
    1d96:	0e 17       	cp	r16, r30
    1d98:	1f 07       	cpc	r17, r31
    1d9a:	99 f7       	brne	.-26     	; 0x1d82 <init_menu+0x137e>
				OLED_print(highscorename3[i]);
			}
			OLED_pos(4,9);
    1d9c:	69 e0       	ldi	r22, 0x09	; 9
    1d9e:	84 e0       	ldi	r24, 0x04	; 4
    1da0:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    1da4:	4a e0       	ldi	r20, 0x0A	; 10
    1da6:	65 e3       	ldi	r22, 0x35	; 53
    1da8:	74 e0       	ldi	r23, 0x04	; 4
    1daa:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <highscorescore3>
    1dae:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <highscorescore3+0x1>
    1db2:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__itoa_ncheck>
			OLED_print(itoa(highscorescore3, buffer, 10));
    1db6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(6,1);
    1dba:	61 e0       	ldi	r22, 0x01	; 1
    1dbc:	86 e0       	ldi	r24, 0x06	; 6
    1dbe:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print(" Back   *Reset");
    1dc2:	87 e4       	ldi	r24, 0x47	; 71
    1dc4:	93 e0       	ldi	r25, 0x03	; 3
    1dc6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    1dca:	f3 e9       	ldi	r31, 0x93	; 147
    1dcc:	2f ef       	ldi	r18, 0xFF	; 255
    1dce:	32 e0       	ldi	r19, 0x02	; 2
    1dd0:	f1 50       	subi	r31, 0x01	; 1
    1dd2:	20 40       	sbci	r18, 0x00	; 0
    1dd4:	30 40       	sbci	r19, 0x00	; 0
    1dd6:	e1 f7       	brne	.-8      	; 0x1dd0 <init_menu+0x13cc>
    1dd8:	00 c0       	rjmp	.+0      	; 0x1dda <init_menu+0x13d6>
    1dda:	00 00       	nop
				else if (joy_pos.sidedir == 2){
					menynummer = 23;
					break;
				}
				else if (joy_button(1) == 0){
					menynummer = 25;
    1ddc:	19 e1       	ldi	r17, 0x19	; 25
    1dde:	29 c0       	rjmp	.+82     	; 0x1e32 <init_menu+0x142e>
			OLED_print(itoa(highscorescore3, buffer, 10));
			OLED_pos(6,1);
			OLED_print(" Back   *Reset");
			_delay_ms(200);
			while(menynummer == 24){
				joy_pos = JOY_getDirection();
    1de0:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    1de4:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    1de8:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    1dec:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1df0:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    1df4:	8e ea       	ldi	r24, 0xAE	; 174
    1df6:	9f e3       	ldi	r25, 0x3F	; 63
    1df8:	a2 e0       	ldi	r26, 0x02	; 2
    1dfa:	81 50       	subi	r24, 0x01	; 1
    1dfc:	90 40       	sbci	r25, 0x00	; 0
    1dfe:	a0 40       	sbci	r26, 0x00	; 0
    1e00:	e1 f7       	brne	.-8      	; 0x1dfa <init_menu+0x13f6>
    1e02:	00 c0       	rjmp	.+0      	; 0x1e04 <init_menu+0x1400>
    1e04:	00 00       	nop
				_delay_ms(150);
				if (joy_pos.sidedir == 1){
    1e06:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <joy_pos+0x3>
    1e0a:	81 30       	cpi	r24, 0x01	; 1
    1e0c:	21 f4       	brne	.+8      	; 0x1e16 <init_menu+0x1412>
					menynummer = 23;
    1e0e:	87 e1       	ldi	r24, 0x17	; 23
    1e10:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1e14:	f6 c2       	rjmp	.+1516   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_pos.sidedir == 2){
    1e16:	82 30       	cpi	r24, 0x02	; 2
    1e18:	21 f4       	brne	.+8      	; 0x1e22 <init_menu+0x141e>
					menynummer = 23;
    1e1a:	87 e1       	ldi	r24, 0x17	; 23
    1e1c:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    1e20:	f0 c2       	rjmp	.+1504   	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_button(1) == 0){
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1e2a:	89 2b       	or	r24, r25
    1e2c:	11 f4       	brne	.+4      	; 0x1e32 <init_menu+0x142e>
					menynummer = 25;
    1e2e:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
			OLED_pos(4,9);
			OLED_print(itoa(highscorescore3, buffer, 10));
			OLED_pos(6,1);
			OLED_print(" Back   *Reset");
			_delay_ms(200);
			while(menynummer == 24){
    1e32:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    1e36:	88 31       	cpi	r24, 0x18	; 24
    1e38:	99 f2       	breq	.-90     	; 0x1de0 <init_menu+0x13dc>
    1e3a:	e3 c2       	rjmp	.+1478   	; 0x2402 <init_menu+0x19fe>
					menynummer = 25;
				}
			}
			break;
		case 25 : // Are you sure? No
			OLED_clear();
    1e3c:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(3,1);
    1e40:	61 e0       	ldi	r22, 0x01	; 1
    1e42:	83 e0       	ldi	r24, 0x03	; 3
    1e44:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("Are you sure?");
    1e48:	86 e5       	ldi	r24, 0x56	; 86
    1e4a:	93 e0       	ldi	r25, 0x03	; 3
    1e4c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    1e50:	61 e0       	ldi	r22, 0x01	; 1
    1e52:	85 e0       	ldi	r24, 0x05	; 5
    1e54:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print(" *No    Yes");
    1e58:	84 e6       	ldi	r24, 0x64	; 100
    1e5a:	93 e0       	ldi	r25, 0x03	; 3
    1e5c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    1e60:	b3 e9       	ldi	r27, 0x93	; 147
    1e62:	ef ef       	ldi	r30, 0xFF	; 255
    1e64:	f2 e0       	ldi	r31, 0x02	; 2
    1e66:	b1 50       	subi	r27, 0x01	; 1
    1e68:	e0 40       	sbci	r30, 0x00	; 0
    1e6a:	f0 40       	sbci	r31, 0x00	; 0
    1e6c:	e1 f7       	brne	.-8      	; 0x1e66 <init_menu+0x1462>
    1e6e:	00 c0       	rjmp	.+0      	; 0x1e70 <init_menu+0x146c>
    1e70:	00 00       	nop
				}
				else if (joy_pos.sidedir == 2){
					menynummer = 26;
				}
				else if (joy_button(1) == 0){
					menynummer = 23;
    1e72:	07 e1       	ldi	r16, 0x17	; 23
				_delay_ms(50);
				if (joy_pos.sidedir == 1){
					menynummer = 26;
				}
				else if (joy_pos.sidedir == 2){
					menynummer = 26;
    1e74:	1a e1       	ldi	r17, 0x1A	; 26
    1e76:	22 c0       	rjmp	.+68     	; 0x1ebc <init_menu+0x14b8>
			OLED_print("Are you sure?");
			OLED_pos(5, 1);
			OLED_print(" *No    Yes");
			_delay_ms(200);
			while(menynummer == 25){
				joy_pos = JOY_getDirection();
    1e78:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    1e7c:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    1e80:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    1e84:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1e88:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    1e8c:	8e ed       	ldi	r24, 0xDE	; 222
    1e8e:	9f ee       	ldi	r25, 0xEF	; 239
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <init_menu+0x148c>
				_delay_ms(50);
				if (joy_pos.sidedir == 1){
    1e94:	80 91 30 04 	lds	r24, 0x0430	; 0x800430 <joy_pos+0x3>
    1e98:	81 30       	cpi	r24, 0x01	; 1
    1e9a:	19 f4       	brne	.+6      	; 0x1ea2 <init_menu+0x149e>
					menynummer = 26;
    1e9c:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    1ea0:	0d c0       	rjmp	.+26     	; 0x1ebc <init_menu+0x14b8>
				}
				else if (joy_pos.sidedir == 2){
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	19 f4       	brne	.+6      	; 0x1eac <init_menu+0x14a8>
					menynummer = 26;
    1ea6:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <menynummer>
    1eaa:	08 c0       	rjmp	.+16     	; 0x1ebc <init_menu+0x14b8>
				}
				else if (joy_button(1) == 0){
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1eb4:	89 2b       	or	r24, r25
    1eb6:	11 f4       	brne	.+4      	; 0x1ebc <init_menu+0x14b8>
					menynummer = 23;
    1eb8:	00 93 0d 04 	sts	0x040D, r16	; 0x80040d <menynummer>
			OLED_pos(3,1);
			OLED_print("Are you sure?");
			OLED_pos(5, 1);
			OLED_print(" *No    Yes");
			_delay_ms(200);
			while(menynummer == 25){
    1ebc:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    1ec0:	89 31       	cpi	r24, 0x19	; 25
    1ec2:	d1 f2       	breq	.-76     	; 0x1e78 <init_menu+0x1474>
    1ec4:	9e c2       	rjmp	.+1340   	; 0x2402 <init_menu+0x19fe>
					menynummer = 23;
				}
			}
			break;
		case 26 : // Are you sure? Yes
			OLED_clear();
    1ec6:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(3,1);
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	83 e0       	ldi	r24, 0x03	; 3
    1ece:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("Are you sure?");
    1ed2:	86 e5       	ldi	r24, 0x56	; 86
    1ed4:	93 e0       	ldi	r25, 0x03	; 3
    1ed6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			OLED_pos(5, 1);
    1eda:	61 e0       	ldi	r22, 0x01	; 1
    1edc:	85 e0       	ldi	r24, 0x05	; 5
    1ede:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print("  No   *Yes");
    1ee2:	80 e7       	ldi	r24, 0x70	; 112
    1ee4:	93 e0       	ldi	r25, 0x03	; 3
    1ee6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    1eea:	93 e9       	ldi	r25, 0x93	; 147
    1eec:	af ef       	ldi	r26, 0xFF	; 255
    1eee:	b2 e0       	ldi	r27, 0x02	; 2
    1ef0:	91 50       	subi	r25, 0x01	; 1
    1ef2:	a0 40       	sbci	r26, 0x00	; 0
    1ef4:	b0 40       	sbci	r27, 0x00	; 0
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <init_menu+0x14ec>
    1ef8:	00 c0       	rjmp	.+0      	; 0x1efa <init_menu+0x14f6>
    1efa:	00 00       	nop
			_delay_ms(200);
			while(menynummer == 26){
				joy_pos = JOY_getDirection();
				_delay_ms(50);
				if (joy_pos.sidedir == 1){
    1efc:	0d e2       	ldi	r16, 0x2D	; 45
    1efe:	14 e0       	ldi	r17, 0x04	; 4
				}
				else if (joy_pos.sidedir == 2){
					menynummer = 25;
				}
				else if (joy_button(1) == 0){
					menynummer = 1;
    1f00:	cc 24       	eor	r12, r12
    1f02:	c3 94       	inc	r12
    1f04:	0f 2e       	mov	r0, r31
    1f06:	f1 e2       	ldi	r31, 0x21	; 33
    1f08:	ef 2e       	mov	r14, r31
    1f0a:	f1 e0       	ldi	r31, 0x01	; 1
    1f0c:	ff 2e       	mov	r15, r31
    1f0e:	f0 2d       	mov	r31, r0
					for (int i = 0; i < 4; i++){
						highscorename1[i] = ".";
    1f10:	0f 2e       	mov	r0, r31
    1f12:	fc e7       	ldi	r31, 0x7C	; 124
    1f14:	af 2e       	mov	r10, r31
    1f16:	f3 e0       	ldi	r31, 0x03	; 3
    1f18:	bf 2e       	mov	r11, r31
    1f1a:	f0 2d       	mov	r31, r0
				_delay_ms(50);
				if (joy_pos.sidedir == 1){
					menynummer = 25;
				}
				else if (joy_pos.sidedir == 2){
					menynummer = 25;
    1f1c:	0f 2e       	mov	r0, r31
    1f1e:	f9 e1       	ldi	r31, 0x19	; 25
    1f20:	df 2e       	mov	r13, r31
    1f22:	f0 2d       	mov	r31, r0
    1f24:	42 c0       	rjmp	.+132    	; 0x1faa <init_menu+0x15a6>
			OLED_print("Are you sure?");
			OLED_pos(5, 1);
			OLED_print("  No   *Yes");
			_delay_ms(200);
			while(menynummer == 26){
				joy_pos = JOY_getDirection();
    1f26:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    1f2a:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    1f2e:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    1f32:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    1f36:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    1f3a:	ee ed       	ldi	r30, 0xDE	; 222
    1f3c:	ff ee       	ldi	r31, 0xEF	; 239
    1f3e:	31 97       	sbiw	r30, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <init_menu+0x153a>
				_delay_ms(50);
				if (joy_pos.sidedir == 1){
    1f42:	d8 01       	movw	r26, r16
    1f44:	13 96       	adiw	r26, 0x03	; 3
    1f46:	8c 91       	ld	r24, X
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	19 f4       	brne	.+6      	; 0x1f52 <init_menu+0x154e>
					menynummer = 25;
    1f4c:	d0 92 0d 04 	sts	0x040D, r13	; 0x80040d <menynummer>
    1f50:	2c c0       	rjmp	.+88     	; 0x1faa <init_menu+0x15a6>
				}
				else if (joy_pos.sidedir == 2){
    1f52:	82 30       	cpi	r24, 0x02	; 2
    1f54:	19 f4       	brne	.+6      	; 0x1f5c <init_menu+0x1558>
					menynummer = 25;
    1f56:	d0 92 0d 04 	sts	0x040D, r13	; 0x80040d <menynummer>
    1f5a:	27 c0       	rjmp	.+78     	; 0x1faa <init_menu+0x15a6>
				}
				else if (joy_button(1) == 0){
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    1f64:	89 2b       	or	r24, r25
    1f66:	09 f5       	brne	.+66     	; 0x1faa <init_menu+0x15a6>
					menynummer = 1;
    1f68:	c0 92 0d 04 	sts	0x040D, r12	; 0x80040d <menynummer>
    1f6c:	e9 e1       	ldi	r30, 0x19	; 25
    1f6e:	f1 e0       	ldi	r31, 0x01	; 1
    1f70:	81 e1       	ldi	r24, 0x11	; 17
    1f72:	91 e0       	ldi	r25, 0x01	; 1
    1f74:	49 e0       	ldi	r20, 0x09	; 9
    1f76:	51 e0       	ldi	r21, 0x01	; 1
					for (int i = 0; i < 4; i++){
						highscorename1[i] = ".";
    1f78:	a1 92       	st	Z+, r10
    1f7a:	b1 92       	st	Z+, r11
						highscorename2[i] = ".";
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	ad 92       	st	X+, r10
    1f80:	bd 92       	st	X+, r11
    1f82:	cd 01       	movw	r24, r26
						highscorename3[i] = ".";
    1f84:	da 01       	movw	r26, r20
    1f86:	ad 92       	st	X+, r10
    1f88:	bd 92       	st	X+, r11
    1f8a:	ad 01       	movw	r20, r26
				else if (joy_pos.sidedir == 2){
					menynummer = 25;
				}
				else if (joy_button(1) == 0){
					menynummer = 1;
					for (int i = 0; i < 4; i++){
    1f8c:	ee 16       	cp	r14, r30
    1f8e:	ff 06       	cpc	r15, r31
    1f90:	99 f7       	brne	.-26     	; 0x1f78 <init_menu+0x1574>
						highscorename1[i] = ".";
						highscorename2[i] = ".";
						highscorename3[i] = ".";
					}
					highscorescore1 = 0;
    1f92:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <highscorescore1+0x1>
    1f96:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <highscorescore1>
					highscorescore2 = 0;
    1f9a:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <highscorescore2+0x1>
    1f9e:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <highscorescore2>
					highscorescore3 = 0;
    1fa2:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <highscorescore3+0x1>
    1fa6:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <highscorescore3>
			OLED_pos(3,1);
			OLED_print("Are you sure?");
			OLED_pos(5, 1);
			OLED_print("  No   *Yes");
			_delay_ms(200);
			while(menynummer == 26){
    1faa:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    1fae:	8a 31       	cpi	r24, 0x1A	; 26
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <init_menu+0x15b0>
    1fb2:	b9 cf       	rjmp	.-142    	; 0x1f26 <init_menu+0x1522>
    1fb4:	26 c2       	rjmp	.+1100   	; 0x2402 <init_menu+0x19fe>
					highscorescore3 = 0;
				}
			}
			break;
		case 27 :
			if (score >= highscorescore1){
    1fb6:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <score>
    1fba:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <score+0x1>
    1fbe:	20 91 0b 04 	lds	r18, 0x040B	; 0x80040b <highscorescore1>
    1fc2:	30 91 0c 04 	lds	r19, 0x040C	; 0x80040c <highscorescore1+0x1>
    1fc6:	82 17       	cp	r24, r18
    1fc8:	93 07       	cpc	r25, r19
    1fca:	dc f1       	brlt	.+118    	; 0x2042 <init_menu+0x163e>
				char** endstr = OLED_nameprompt();
    1fcc:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <OLED_nameprompt>
    1fd0:	09 e0       	ldi	r16, 0x09	; 9
    1fd2:	11 e0       	ldi	r17, 0x01	; 1
    1fd4:	a1 e1       	ldi	r26, 0x11	; 17
    1fd6:	b1 e0       	ldi	r27, 0x01	; 1
    1fd8:	e9 e1       	ldi	r30, 0x19	; 25
    1fda:	f1 e0       	ldi	r31, 0x01	; 1
    1fdc:	41 e1       	ldi	r20, 0x11	; 17
    1fde:	51 e0       	ldi	r21, 0x01	; 1
    1fe0:	bf 01       	movw	r22, r30
				for (int i = 0; i < 4; i++){
					highscorename3[i] = highscorename2[i];
    1fe2:	2d 91       	ld	r18, X+
    1fe4:	3c 91       	ld	r19, X
    1fe6:	11 97       	sbiw	r26, 0x01	; 1
    1fe8:	f8 01       	movw	r30, r16
    1fea:	21 93       	st	Z+, r18
    1fec:	31 93       	st	Z+, r19
    1fee:	8f 01       	movw	r16, r30
					highscorename2[i] = highscorename1[i];
    1ff0:	fb 01       	movw	r30, r22
    1ff2:	20 81       	ld	r18, Z
    1ff4:	31 81       	ldd	r19, Z+1	; 0x01
    1ff6:	2d 93       	st	X+, r18
    1ff8:	3d 93       	st	X+, r19
					highscorename1[i] = endstr[i];				// char* highscorename[4] = char* name[4]
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	21 91       	ld	r18, Z+
    1ffe:	31 91       	ld	r19, Z+
    2000:	cf 01       	movw	r24, r30
    2002:	fb 01       	movw	r30, r22
    2004:	21 93       	st	Z+, r18
    2006:	31 93       	st	Z+, r19
    2008:	bf 01       	movw	r22, r30
			}
			break;
		case 27 :
			if (score >= highscorescore1){
				char** endstr = OLED_nameprompt();
				for (int i = 0; i < 4; i++){
    200a:	04 17       	cp	r16, r20
    200c:	15 07       	cpc	r17, r21
    200e:	49 f7       	brne	.-46     	; 0x1fe2 <init_menu+0x15de>
					highscorename3[i] = highscorename2[i];
					highscorename2[i] = highscorename1[i];
					highscorename1[i] = endstr[i];				// char* highscorename[4] = char* name[4]
					}
				highscorescore3 = highscorescore2;
    2010:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <highscorescore2>
    2014:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <highscorescore2+0x1>
    2018:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <highscorescore3+0x1>
    201c:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <highscorescore3>
				highscorescore2 = highscorescore1;
    2020:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <highscorescore1>
    2024:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <highscorescore1+0x1>
    2028:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <highscorescore2+0x1>
    202c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <highscorescore2>
				highscorescore1 = score;
    2030:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <score>
    2034:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <score+0x1>
    2038:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <highscorescore1+0x1>
    203c:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <highscorescore1>
    2040:	5b c0       	rjmp	.+182    	; 0x20f8 <init_menu+0x16f4>
			}
			else if (score >= highscorescore2){
    2042:	20 91 09 04 	lds	r18, 0x0409	; 0x800409 <highscorescore2>
    2046:	30 91 0a 04 	lds	r19, 0x040A	; 0x80040a <highscorescore2+0x1>
    204a:	82 17       	cp	r24, r18
    204c:	93 07       	cpc	r25, r19
    204e:	74 f1       	brlt	.+92     	; 0x20ac <init_menu+0x16a8>
				char** endstr = OLED_nameprompt();
    2050:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <OLED_nameprompt>
    2054:	2b e0       	ldi	r18, 0x0B	; 11
    2056:	31 e0       	ldi	r19, 0x01	; 1
    2058:	3a 83       	std	Y+2, r19	; 0x02
    205a:	29 83       	std	Y+1, r18	; 0x01
    205c:	dc 01       	movw	r26, r24
    205e:	12 96       	adiw	r26, 0x02	; 2
    2060:	e3 e1       	ldi	r30, 0x13	; 19
    2062:	f1 e0       	ldi	r31, 0x01	; 1
    2064:	08 96       	adiw	r24, 0x08	; 8
    2066:	b9 01       	movw	r22, r18
    2068:	af 01       	movw	r20, r30
				for (int i = 1; i < 4; i++){
					highscorename3[i] = highscorename2[i];
    206a:	fa 01       	movw	r30, r20
    206c:	20 81       	ld	r18, Z
    206e:	31 81       	ldd	r19, Z+1	; 0x01
    2070:	fb 01       	movw	r30, r22
    2072:	21 93       	st	Z+, r18
    2074:	31 93       	st	Z+, r19
    2076:	bf 01       	movw	r22, r30
					highscorename2[i] = endstr[i];
    2078:	2d 91       	ld	r18, X+
    207a:	3d 91       	ld	r19, X+
    207c:	fa 01       	movw	r30, r20
    207e:	21 93       	st	Z+, r18
    2080:	31 93       	st	Z+, r19
    2082:	af 01       	movw	r20, r30
				highscorescore2 = highscorescore1;
				highscorescore1 = score;
			}
			else if (score >= highscorescore2){
				char** endstr = OLED_nameprompt();
				for (int i = 1; i < 4; i++){
    2084:	a8 17       	cp	r26, r24
    2086:	b9 07       	cpc	r27, r25
    2088:	81 f7       	brne	.-32     	; 0x206a <init_menu+0x1666>
					highscorename3[i] = highscorename2[i];
					highscorename2[i] = endstr[i];
				}
				highscorescore3 = highscorescore2;
    208a:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <highscorescore2>
    208e:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <highscorescore2+0x1>
    2092:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <highscorescore3+0x1>
    2096:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <highscorescore3>
				highscorescore2 = score;
    209a:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <score>
    209e:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <score+0x1>
    20a2:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <highscorescore2+0x1>
    20a6:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <highscorescore2>
    20aa:	26 c0       	rjmp	.+76     	; 0x20f8 <init_menu+0x16f4>
			}
			else if (score >= highscorescore3){
    20ac:	20 91 07 04 	lds	r18, 0x0407	; 0x800407 <highscorescore3>
    20b0:	30 91 08 04 	lds	r19, 0x0408	; 0x800408 <highscorescore3+0x1>
    20b4:	82 17       	cp	r24, r18
    20b6:	93 07       	cpc	r25, r19
    20b8:	fc f0       	brlt	.+62     	; 0x20f8 <init_menu+0x16f4>
				char** endstr = OLED_nameprompt();
    20ba:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <OLED_nameprompt>
    20be:	dc 01       	movw	r26, r24
				for (int i = 1; i < 4; i++){
					highscorename3[i] = endstr[i];
    20c0:	12 96       	adiw	r26, 0x02	; 2
    20c2:	8d 91       	ld	r24, X+
    20c4:	9c 91       	ld	r25, X
    20c6:	13 97       	sbiw	r26, 0x03	; 3
    20c8:	e9 e0       	ldi	r30, 0x09	; 9
    20ca:	f1 e0       	ldi	r31, 0x01	; 1
    20cc:	93 83       	std	Z+3, r25	; 0x03
    20ce:	82 83       	std	Z+2, r24	; 0x02
    20d0:	14 96       	adiw	r26, 0x04	; 4
    20d2:	8d 91       	ld	r24, X+
    20d4:	9c 91       	ld	r25, X
    20d6:	15 97       	sbiw	r26, 0x05	; 5
    20d8:	95 83       	std	Z+5, r25	; 0x05
    20da:	84 83       	std	Z+4, r24	; 0x04
    20dc:	16 96       	adiw	r26, 0x06	; 6
    20de:	8d 91       	ld	r24, X+
    20e0:	9c 91       	ld	r25, X
    20e2:	17 97       	sbiw	r26, 0x07	; 7
    20e4:	97 83       	std	Z+7, r25	; 0x07
    20e6:	86 83       	std	Z+6, r24	; 0x06
				}
				highscorescore3 = score;
    20e8:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <score>
    20ec:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <score+0x1>
    20f0:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <highscorescore3+0x1>
    20f4:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <highscorescore3>
			}
			menynummer = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
			break;
    20fe:	81 c1       	rjmp	.+770    	; 0x2402 <init_menu+0x19fe>
		case 28 :
			OLED_clear();
    2100:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			float v = 1;
    2104:	80 e0       	ldi	r24, 0x00	; 0
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	a0 e8       	ldi	r26, 0x80	; 128
    210a:	bf e3       	ldi	r27, 0x3F	; 63
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	9e 83       	std	Y+6, r25	; 0x06
    2110:	af 83       	std	Y+7, r26	; 0x07
    2112:	b8 87       	std	Y+8, r27	; 0x08
			y = 2;
			x = 1;
			z = 1;
			w = 1;
			counter = 0;
    2114:	1a 86       	std	Y+10, r1	; 0x0a
    2116:	19 86       	std	Y+9, r1	; 0x09
			break;
		case 28 :
			OLED_clear();
			float v = 1;
			y = 2;
			x = 1;
    2118:	89 83       	std	Y+1, r24	; 0x01
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	ab 83       	std	Y+3, r26	; 0x03
    211e:	bc 83       	std	Y+4, r27	; 0x04
			z = 1;
			w = 1;
    2120:	4c 01       	movw	r8, r24
    2122:	5d 01       	movw	r10, r26
		case 28 :
			OLED_clear();
			float v = 1;
			y = 2;
			x = 1;
			z = 1;
    2124:	2c 01       	movw	r4, r24
    2126:	3d 01       	movw	r6, r26
			menynummer = 1;
			break;
		case 28 :
			OLED_clear();
			float v = 1;
			y = 2;
    2128:	c1 2c       	mov	r12, r1
    212a:	d1 2c       	mov	r13, r1
    212c:	76 01       	movw	r14, r12
    212e:	68 94       	set
    2130:	f6 f8       	bld	r15, 6
				if (y == 2){w = w*-1;}
				if (x == 15){z = z*-1;}
				if (x == 0){z = z*-1;}
				joy_pos = JOY_getDirection();
				_delay_ms(125);
				if (joy_pos.sidedir == 1){
    2132:	0d e2       	ldi	r16, 0x2D	; 45
    2134:	14 e0       	ldi	r17, 0x04	; 4
				else if (joy_pos.dir > 1){
					menynummer = 1;
					break;
				}
				else if (joy_button(1) == 0){
					menynummer = 1;
    2136:	33 24       	eor	r3, r3
    2138:	33 94       	inc	r3
    213a:	a0 e0       	ldi	r26, 0x00	; 0
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	be 87       	std	Y+14, r27	; 0x0e
    2140:	ad 87       	std	Y+13, r26	; 0x0d
			y = 2;
			x = 1;
			z = 1;
			w = 1;
			counter = 0;
			while (menynummer == 28){
    2142:	5a c1       	rjmp	.+692    	; 0x23f8 <init_menu+0x19f4>
				OLED_clear();
    2144:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
				OLED_pos(7,v-2);
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e0       	ldi	r20, 0x00	; 0
    214e:	50 e4       	ldi	r21, 0x40	; 64
    2150:	6d 81       	ldd	r22, Y+5	; 0x05
    2152:	7e 81       	ldd	r23, Y+6	; 0x06
    2154:	8f 81       	ldd	r24, Y+7	; 0x07
    2156:	98 85       	ldd	r25, Y+8	; 0x08
    2158:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__subsf3>
    215c:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__fixunssfsi>
    2160:	87 e0       	ldi	r24, 0x07	; 7
    2162:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
				OLED_print("]_`");
    2166:	8c ef       	ldi	r24, 0xFC	; 252
    2168:	91 e0       	ldi	r25, 0x01	; 1
    216a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
				OLED_pos(y,x);
    216e:	69 81       	ldd	r22, Y+1	; 0x01
    2170:	7a 81       	ldd	r23, Y+2	; 0x02
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__fixunssfsi>
    217a:	26 2e       	mov	r2, r22
    217c:	c7 01       	movw	r24, r14
    217e:	b6 01       	movw	r22, r12
    2180:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <__fixunssfsi>
    2184:	86 2f       	mov	r24, r22
    2186:	62 2d       	mov	r22, r2
    2188:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
				OLED_print("~");
    218c:	8c ea       	ldi	r24, 0xAC	; 172
    218e:	93 e0       	ldi	r25, 0x03	; 3
    2190:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
				OLED_pos(8,7);
    2194:	67 e0       	ldi	r22, 0x07	; 7
    2196:	88 e0       	ldi	r24, 0x08	; 8
    2198:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
				if ((y == 6)&&((round(x) == v)||(round(x) == v-1)||round(x) == v+1)){
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 ec       	ldi	r20, 0xC0	; 192
    21a2:	50 e4       	ldi	r21, 0x40	; 64
    21a4:	c7 01       	movw	r24, r14
    21a6:	b6 01       	movw	r22, r12
    21a8:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
    21ac:	81 11       	cpse	r24, r1
    21ae:	41 c0       	rjmp	.+130    	; 0x2232 <init_menu+0x182e>
    21b0:	69 81       	ldd	r22, Y+1	; 0x01
    21b2:	7a 81       	ldd	r23, Y+2	; 0x02
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	9c 81       	ldd	r25, Y+4	; 0x04
    21b8:	0e 94 22 17 	call	0x2e44	; 0x2e44 <round>
    21bc:	69 87       	std	Y+9, r22	; 0x09
    21be:	7a 87       	std	Y+10, r23	; 0x0a
    21c0:	8b 87       	std	Y+11, r24	; 0x0b
    21c2:	9c 87       	std	Y+12, r25	; 0x0c
    21c4:	9b 01       	movw	r18, r22
    21c6:	ac 01       	movw	r20, r24
    21c8:	6d 81       	ldd	r22, Y+5	; 0x05
    21ca:	7e 81       	ldd	r23, Y+6	; 0x06
    21cc:	8f 81       	ldd	r24, Y+7	; 0x07
    21ce:	98 85       	ldd	r25, Y+8	; 0x08
    21d0:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
    21d4:	88 23       	and	r24, r24
    21d6:	41 f1       	breq	.+80     	; 0x2228 <init_menu+0x1824>
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	6d 81       	ldd	r22, Y+5	; 0x05
    21e2:	7e 81       	ldd	r23, Y+6	; 0x06
    21e4:	8f 81       	ldd	r24, Y+7	; 0x07
    21e6:	98 85       	ldd	r25, Y+8	; 0x08
    21e8:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__subsf3>
    21ec:	9b 01       	movw	r18, r22
    21ee:	ac 01       	movw	r20, r24
    21f0:	69 85       	ldd	r22, Y+9	; 0x09
    21f2:	7a 85       	ldd	r23, Y+10	; 0x0a
    21f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    21f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    21f8:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
    21fc:	88 23       	and	r24, r24
    21fe:	a1 f0       	breq	.+40     	; 0x2228 <init_menu+0x1824>
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e8       	ldi	r20, 0x80	; 128
    2206:	5f e3       	ldi	r21, 0x3F	; 63
    2208:	6d 81       	ldd	r22, Y+5	; 0x05
    220a:	7e 81       	ldd	r23, Y+6	; 0x06
    220c:	8f 81       	ldd	r24, Y+7	; 0x07
    220e:	98 85       	ldd	r25, Y+8	; 0x08
    2210:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__addsf3>
    2214:	9b 01       	movw	r18, r22
    2216:	ac 01       	movw	r20, r24
    2218:	69 85       	ldd	r22, Y+9	; 0x09
    221a:	7a 85       	ldd	r23, Y+10	; 0x0a
    221c:	8b 85       	ldd	r24, Y+11	; 0x0b
    221e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2220:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
    2224:	81 11       	cpse	r24, r1
    2226:	0b c0       	rjmp	.+22     	; 0x223e <init_menu+0x183a>
					counter = counter + 1;
    2228:	ed 85       	ldd	r30, Y+13	; 0x0d
    222a:	fe 85       	ldd	r31, Y+14	; 0x0e
    222c:	31 96       	adiw	r30, 0x01	; 1
    222e:	fe 87       	std	Y+14, r31	; 0x0e
    2230:	ed 87       	std	Y+13, r30	; 0x0d
				}
				else if (y == 6){
					counter = 0;
				}
				if (counter < 10){
    2232:	2d 85       	ldd	r18, Y+13	; 0x0d
    2234:	3e 85       	ldd	r19, Y+14	; 0x0e
    2236:	2a 30       	cpi	r18, 0x0A	; 10
    2238:	31 05       	cpc	r19, r1
    223a:	44 f4       	brge	.+16     	; 0x224c <init_menu+0x1848>
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <init_menu+0x183e>
				OLED_pos(8,7);
				if ((y == 6)&&((round(x) == v)||(round(x) == v-1)||round(x) == v+1)){
					counter = counter + 1;
				}
				else if (y == 6){
					counter = 0;
    223e:	1e 86       	std	Y+14, r1	; 0x0e
    2240:	1d 86       	std	Y+13, r1	; 0x0d
				}
				if (counter < 10){
					OLED_print("00");
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	92 e0       	ldi	r25, 0x02	; 2
    2246:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    224a:	09 c0       	rjmp	.+18     	; 0x225e <init_menu+0x185a>
				}
				else if (counter < 100){
    224c:	8d 85       	ldd	r24, Y+13	; 0x0d
    224e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2250:	84 36       	cpi	r24, 0x64	; 100
    2252:	91 05       	cpc	r25, r1
    2254:	24 f4       	brge	.+8      	; 0x225e <init_menu+0x185a>
					OLED_print("0");
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	92 e0       	ldi	r25, 0x02	; 2
    225a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    225e:	4a e0       	ldi	r20, 0x0A	; 10
    2260:	65 e3       	ldi	r22, 0x35	; 53
    2262:	74 e0       	ldi	r23, 0x04	; 4
    2264:	8d 85       	ldd	r24, Y+13	; 0x0d
    2266:	9e 85       	ldd	r25, Y+14	; 0x0e
    2268:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <__itoa_ncheck>
				}
				OLED_print(itoa(counter, buffer, 10));
    226c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
				
				x = x + z*0.25;
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5e e3       	ldi	r21, 0x3E	; 62
    2278:	c3 01       	movw	r24, r6
    227a:	b2 01       	movw	r22, r4
    227c:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__mulsf3>
    2280:	9b 01       	movw	r18, r22
    2282:	ac 01       	movw	r20, r24
    2284:	69 81       	ldd	r22, Y+1	; 0x01
    2286:	7a 81       	ldd	r23, Y+2	; 0x02
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__addsf3>
    2290:	69 83       	std	Y+1, r22	; 0x01
    2292:	7a 83       	std	Y+2, r23	; 0x02
    2294:	8b 83       	std	Y+3, r24	; 0x03
    2296:	9c 83       	std	Y+4, r25	; 0x04
				y = y + w*0.5;
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	c5 01       	movw	r24, r10
    22a2:	b4 01       	movw	r22, r8
    22a4:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__mulsf3>
    22a8:	9b 01       	movw	r18, r22
    22aa:	ac 01       	movw	r20, r24
    22ac:	c7 01       	movw	r24, r14
    22ae:	b6 01       	movw	r22, r12
    22b0:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__addsf3>
    22b4:	6b 01       	movw	r12, r22
    22b6:	7c 01       	movw	r14, r24
				
				if (y == 6){w = w*-1;}
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 ec       	ldi	r20, 0xC0	; 192
    22be:	50 e4       	ldi	r21, 0x40	; 64
    22c0:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
    22c4:	81 11       	cpse	r24, r1
    22c6:	05 c0       	rjmp	.+10     	; 0x22d2 <init_menu+0x18ce>
    22c8:	b7 fa       	bst	r11, 7
    22ca:	b0 94       	com	r11
    22cc:	b7 f8       	bld	r11, 7
    22ce:	b0 94       	com	r11
    22d0:	0e c0       	rjmp	.+28     	; 0x22ee <init_menu+0x18ea>
				if (y == 2){w = w*-1;}
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	50 e4       	ldi	r21, 0x40	; 64
    22da:	c7 01       	movw	r24, r14
    22dc:	b6 01       	movw	r22, r12
    22de:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
    22e2:	81 11       	cpse	r24, r1
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <init_menu+0x18ea>
    22e6:	b7 fa       	bst	r11, 7
    22e8:	b0 94       	com	r11
    22ea:	b7 f8       	bld	r11, 7
    22ec:	b0 94       	com	r11
				if (x == 15){z = z*-1;}
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 e7       	ldi	r20, 0x70	; 112
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	69 81       	ldd	r22, Y+1	; 0x01
    22f8:	7a 81       	ldd	r23, Y+2	; 0x02
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
    2302:	81 11       	cpse	r24, r1
    2304:	05 c0       	rjmp	.+10     	; 0x2310 <init_menu+0x190c>
    2306:	77 fa       	bst	r7, 7
    2308:	70 94       	com	r7
    230a:	77 f8       	bld	r7, 7
    230c:	70 94       	com	r7
    230e:	0f c0       	rjmp	.+30     	; 0x232e <init_menu+0x192a>
				if (x == 0){z = z*-1;}
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	a9 01       	movw	r20, r18
    2316:	69 81       	ldd	r22, Y+1	; 0x01
    2318:	7a 81       	ldd	r23, Y+2	; 0x02
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
    2322:	81 11       	cpse	r24, r1
    2324:	04 c0       	rjmp	.+8      	; 0x232e <init_menu+0x192a>
    2326:	77 fa       	bst	r7, 7
    2328:	70 94       	com	r7
    232a:	77 f8       	bld	r7, 7
    232c:	70 94       	com	r7
				joy_pos = JOY_getDirection();
    232e:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    2332:	60 93 2d 04 	sts	0x042D, r22	; 0x80042d <joy_pos>
    2336:	70 93 2e 04 	sts	0x042E, r23	; 0x80042e <joy_pos+0x1>
    233a:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <joy_pos+0x2>
    233e:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <joy_pos+0x3>
    2342:	9c eb       	ldi	r25, 0xBC	; 188
    2344:	af ed       	ldi	r26, 0xDF	; 223
    2346:	b1 e0       	ldi	r27, 0x01	; 1
    2348:	91 50       	subi	r25, 0x01	; 1
    234a:	a0 40       	sbci	r26, 0x00	; 0
    234c:	b0 40       	sbci	r27, 0x00	; 0
    234e:	e1 f7       	brne	.-8      	; 0x2348 <init_menu+0x1944>
    2350:	00 00       	nop
				_delay_ms(125);
				if (joy_pos.sidedir == 1){
    2352:	f8 01       	movw	r30, r16
    2354:	83 81       	ldd	r24, Z+3	; 0x03
    2356:	81 30       	cpi	r24, 0x01	; 1
    2358:	f9 f4       	brne	.+62     	; 0x2398 <init_menu+0x1994>
					v = v + 1;
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e8       	ldi	r20, 0x80	; 128
    2360:	5f e3       	ldi	r21, 0x3F	; 63
    2362:	6d 81       	ldd	r22, Y+5	; 0x05
    2364:	7e 81       	ldd	r23, Y+6	; 0x06
    2366:	8f 81       	ldd	r24, Y+7	; 0x07
    2368:	98 85       	ldd	r25, Y+8	; 0x08
    236a:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__addsf3>
    236e:	6d 83       	std	Y+5, r22	; 0x05
    2370:	7e 83       	std	Y+6, r23	; 0x06
    2372:	8f 83       	std	Y+7, r24	; 0x07
    2374:	98 87       	std	Y+8, r25	; 0x08
					if (v > 15){
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	40 e7       	ldi	r20, 0x70	; 112
    237c:	51 e4       	ldi	r21, 0x41	; 65
    237e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <__gesf2>
    2382:	18 16       	cp	r1, r24
    2384:	cc f5       	brge	.+114    	; 0x23f8 <init_menu+0x19f4>
						v = 15;
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	a0 e7       	ldi	r26, 0x70	; 112
    238c:	b1 e4       	ldi	r27, 0x41	; 65
    238e:	8d 83       	std	Y+5, r24	; 0x05
    2390:	9e 83       	std	Y+6, r25	; 0x06
    2392:	af 83       	std	Y+7, r26	; 0x07
    2394:	b8 87       	std	Y+8, r27	; 0x08
    2396:	30 c0       	rjmp	.+96     	; 0x23f8 <init_menu+0x19f4>
					}				}
				else if (joy_pos.sidedir == 2){
    2398:	82 30       	cpi	r24, 0x02	; 2
    239a:	f9 f4       	brne	.+62     	; 0x23da <init_menu+0x19d6>
					v = v - 1;
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	6d 81       	ldd	r22, Y+5	; 0x05
    23a6:	7e 81       	ldd	r23, Y+6	; 0x06
    23a8:	8f 81       	ldd	r24, Y+7	; 0x07
    23aa:	98 85       	ldd	r25, Y+8	; 0x08
    23ac:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__subsf3>
    23b0:	6d 83       	std	Y+5, r22	; 0x05
    23b2:	7e 83       	std	Y+6, r23	; 0x06
    23b4:	8f 83       	std	Y+7, r24	; 0x07
    23b6:	98 87       	std	Y+8, r25	; 0x08
					if (v < 1){
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <__cmpsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	c4 f4       	brge	.+48     	; 0x23f8 <init_menu+0x19f4>
						v = 1;
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a0 e8       	ldi	r26, 0x80	; 128
    23ce:	bf e3       	ldi	r27, 0x3F	; 63
    23d0:	8d 83       	std	Y+5, r24	; 0x05
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	af 83       	std	Y+7, r26	; 0x07
    23d6:	b8 87       	std	Y+8, r27	; 0x08
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <init_menu+0x19f4>
					}
				}
				else if (joy_pos.dir > 1){
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	82 30       	cpi	r24, 0x02	; 2
    23de:	24 f0       	brlt	.+8      	; 0x23e8 <init_menu+0x19e4>
					menynummer = 1;
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <menynummer>
					break;
    23e6:	0d c0       	rjmp	.+26     	; 0x2402 <init_menu+0x19fe>
				}
				else if (joy_button(1) == 0){
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    23f0:	89 2b       	or	r24, r25
    23f2:	11 f4       	brne	.+4      	; 0x23f8 <init_menu+0x19f4>
					menynummer = 1;
    23f4:	30 92 0d 04 	sts	0x040D, r3	; 0x80040d <menynummer>
			y = 2;
			x = 1;
			z = 1;
			w = 1;
			counter = 0;
			while (menynummer == 28){
    23f8:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <menynummer>
    23fc:	8c 31       	cpi	r24, 0x1C	; 28
    23fe:	09 f4       	brne	.+2      	; 0x2402 <init_menu+0x19fe>
    2400:	a1 ce       	rjmp	.-702    	; 0x2144 <init_menu+0x1740>
				}
			}
			break;
	}
return gamestep;
    2402:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <gamestep>
    2406:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <gamestep+0x1>
    240a:	2e 96       	adiw	r28, 0x0e	; 14
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	ff 90       	pop	r15
    2420:	ef 90       	pop	r14
    2422:	df 90       	pop	r13
    2424:	cf 90       	pop	r12
    2426:	bf 90       	pop	r11
    2428:	af 90       	pop	r10
    242a:	9f 90       	pop	r9
    242c:	8f 90       	pop	r8
    242e:	7f 90       	pop	r7
    2430:	6f 90       	pop	r6
    2432:	5f 90       	pop	r5
    2434:	4f 90       	pop	r4
    2436:	3f 90       	pop	r3
    2438:	2f 90       	pop	r2
    243a:	08 95       	ret

0000243c <OLED_home>:
}

//function that returns the OLED to its start-state
int OLED_home(void) {
	//Reset the page and column
	page = 0;
    243c:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <page>
	col = 0;
    2440:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <col>
	*OLED_cmd =0xD3; 	
    2444:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2448:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    244c:	83 ed       	ldi	r24, 0xD3	; 211
    244e:	80 83       	st	Z, r24
	 *OLED_cmd = 0b11001000;
    2450:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2454:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2458:	88 ec       	ldi	r24, 0xC8	; 200
    245a:	80 83       	st	Z, r24
	//Set the cursor to the start of the screen
	*OLED_cmd = 0x21;
    245c:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2460:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2464:	81 e2       	ldi	r24, 0x21	; 33
    2466:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
    2468:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    246c:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2470:	10 82       	st	Z, r1
	*OLED_cmd = 0x7f;
    2472:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2476:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    247a:	8f e7       	ldi	r24, 0x7F	; 127
    247c:	80 83       	st	Z, r24
		
	*OLED_cmd = 0x22;
    247e:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2482:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2486:	82 e2       	ldi	r24, 0x22	; 34
    2488:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
    248a:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    248e:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2492:	10 82       	st	Z, r1
	*OLED_cmd = 0x7;
    2494:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2498:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    249c:	87 e0       	ldi	r24, 0x07	; 7
    249e:	80 83       	st	Z, r24
		
 	return 0;
 }
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	08 95       	ret

000024a6 <OLED_goto_line>:
 
//function that lets us go to the specified line on the OLED 
int OLED_goto_line(uint8_t line) {
    24a6:	cf 93       	push	r28
    24a8:	c8 2f       	mov	r28, r24
	OLED_home();
    24aa:	0e 94 1e 12 	call	0x243c	; 0x243c <OLED_home>
	
	//Check if it's a valid page
	if (line < 8) {
    24ae:	c8 30       	cpi	r28, 0x08	; 8
    24b0:	98 f4       	brcc	.+38     	; 0x24d8 <OLED_goto_line+0x32>
		//Save the page we are moving to
		page = line;
    24b2:	c0 93 2c 04 	sts	0x042C, r28	; 0x80042c <page>
		//Set lower column address
		*OLED_cmd = 0x00;
    24b6:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    24ba:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    24be:	10 82       	st	Z, r1
		//Set higher column address
		*OLED_cmd = 0x10;
    24c0:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    24c4:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    24c8:	80 e1       	ldi	r24, 0x10	; 16
    24ca:	80 83       	st	Z, r24
		//Set page address
		*OLED_cmd = 0xB0 | line;
    24cc:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    24d0:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    24d4:	c0 6b       	ori	r28, 0xB0	; 176
    24d6:	c0 83       	st	Z, r28
	}
 
 	return 0;
 }
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	cf 91       	pop	r28
    24de:	08 95       	ret

000024e0 <OLED_pos>:

//function that lets us define a specific position on the OLED
int OLED_pos(uint8_t line, uint8_t column) {
    24e0:	cf 93       	push	r28
    24e2:	c6 2f       	mov	r28, r22
	OLED_goto_line(line);
    24e4:	0e 94 53 12 	call	0x24a6	; 0x24a6 <OLED_goto_line>
	
	//Check if it's a valid column according to the font
	if (column < (128/FONTWIDTH)) {
    24e8:	c0 31       	cpi	r28, 0x10	; 16
    24ea:	98 f4       	brcc	.+38     	; 0x2512 <OLED_pos+0x32>
		//Save the column we are moving to
		col = column*FONTWIDTH;
    24ec:	8c 2f       	mov	r24, r28
    24ee:	88 0f       	add	r24, r24
    24f0:	88 0f       	add	r24, r24
    24f2:	88 0f       	add	r24, r24
    24f4:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <col>
		//Set lower column start address
		//*OLED_cmd = 0x00 + (column*(FONTWIDTH)<<4);
		//Set higher column start address
		*OLED_cmd = 0X0F & col;
    24f8:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    24fc:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2500:	8f 70       	andi	r24, 0x0F	; 15
    2502:	80 83       	st	Z, r24
		*OLED_cmd = 0x10 | (column*(FONTWIDTH)>>4);
    2504:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2508:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    250c:	c0 62       	ori	r28, 0x20	; 32
    250e:	c6 95       	lsr	r28
    2510:	c0 83       	st	Z, r28
	}
	
	return 0;
}
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	cf 91       	pop	r28
    2518:	08 95       	ret

0000251a <OLED_clear_line>:


//function that clears a line
int OLED_clear_line(uint8_t line) {
	OLED_goto_line(line);
    251a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <OLED_goto_line>
    251e:	80 e8       	ldi	r24, 0x80	; 128
    2520:	90 e0       	ldi	r25, 0x00	; 0
	
	//Clear the page
	for (int i = 0; i < 128; i++) {
		*OLED_data=0x00;
    2522:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <OLED_data>
    2526:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <OLED_data+0x1>
    252a:	10 82       	st	Z, r1
    252c:	01 97       	sbiw	r24, 0x01	; 1
//function that clears a line
int OLED_clear_line(uint8_t line) {
	OLED_goto_line(line);
	
	//Clear the page
	for (int i = 0; i < 128; i++) {
    252e:	c9 f7       	brne	.-14     	; 0x2522 <OLED_clear_line+0x8>
		*OLED_data=0x00;
	}
	
	OLED_home();
    2530:	0e 94 1e 12 	call	0x243c	; 0x243c <OLED_home>
	
	return 0;
}
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	08 95       	ret

0000253a <OLED_clear>:

//function that clears everything that is on the OLED
int OLED_clear(void) {
    253a:	cf 93       	push	r28
    253c:	c0 e0       	ldi	r28, 0x00	; 0
	//Clear every page
	for (int k = 0; k < 8; k++) {
		OLED_clear_line(k);
    253e:	8c 2f       	mov	r24, r28
    2540:	0e 94 8d 12 	call	0x251a	; 0x251a <OLED_clear_line>
    2544:	cf 5f       	subi	r28, 0xFF	; 255
}

//function that clears everything that is on the OLED
int OLED_clear(void) {
	//Clear every page
	for (int k = 0; k < 8; k++) {
    2546:	c8 30       	cpi	r28, 0x08	; 8
    2548:	d1 f7       	brne	.-12     	; 0x253e <OLED_clear+0x4>
		OLED_clear_line(k);
	}
	
	return 0;
}
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	cf 91       	pop	r28
    2550:	08 95       	ret

00002552 <OLED_init>:
char buffer[8];

//function to set up the OLED
int OLED_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
    2552:	85 b7       	in	r24, 0x35	; 53
    2554:	80 68       	ori	r24, 0x80	; 128
    2556:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    2558:	80 b7       	in	r24, 0x30	; 48
    255a:	80 62       	ori	r24, 0x20	; 32
    255c:	80 bf       	out	0x30, r24	; 48

	//Setup the OLED display
	
	//display off
	*OLED_cmd = 0xAE;
    255e:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2562:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2566:	8e ea       	ldi	r24, 0xAE	; 174
    2568:	80 83       	st	Z, r24
	//segment remap
	*OLED_cmd = 0xA1;
    256a:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    256e:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2572:	81 ea       	ldi	r24, 0xA1	; 161
    2574:	80 83       	st	Z, r24
	
	//common pads hardware: alternative
	*OLED_cmd = 0xDA;
    2576:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    257a:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    257e:	8a ed       	ldi	r24, 0xDA	; 218
    2580:	80 83       	st	Z, r24
	*OLED_cmd = 0x12;
    2582:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2586:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    258a:	82 e1       	ldi	r24, 0x12	; 18
    258c:	80 83       	st	Z, r24
	
	//common output scan direction:com63~com0
	*OLED_cmd = 0xC8;
    258e:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2592:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2596:	88 ec       	ldi	r24, 0xC8	; 200
    2598:	80 83       	st	Z, r24

	//multiplex ration mode:63
	*OLED_cmd = 0xA8;
    259a:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    259e:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    25a2:	88 ea       	ldi	r24, 0xA8	; 168
    25a4:	80 83       	st	Z, r24
	*OLED_cmd = 0x3F;
    25a6:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    25aa:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    25ae:	8f e3       	ldi	r24, 0x3F	; 63
    25b0:	80 83       	st	Z, r24

	//display divide ratio/osc. freq. mode
	*OLED_cmd = 0xD5;
    25b2:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    25b6:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    25ba:	85 ed       	ldi	r24, 0xD5	; 213
    25bc:	80 83       	st	Z, r24
	*OLED_cmd = 0x80;
    25be:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    25c2:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    25c6:	80 e8       	ldi	r24, 0x80	; 128
    25c8:	80 83       	st	Z, r24

	//contrast control
	*OLED_cmd = 0x81;
    25ca:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    25ce:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    25d2:	81 e8       	ldi	r24, 0x81	; 129
    25d4:	80 83       	st	Z, r24
	*OLED_cmd = 0x50;
    25d6:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    25da:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    25de:	80 e5       	ldi	r24, 0x50	; 80
    25e0:	80 83       	st	Z, r24

	//set pre-charge period
	*OLED_cmd = 0xD9;
    25e2:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    25e6:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    25ea:	89 ed       	ldi	r24, 0xD9	; 217
    25ec:	80 83       	st	Z, r24
	*OLED_cmd = 0x21;
    25ee:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    25f2:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    25f6:	81 e2       	ldi	r24, 0x21	; 33
    25f8:	80 83       	st	Z, r24

	//set Memory Addressing Mode
	*OLED_cmd = 0x20;
    25fa:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    25fe:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2602:	80 e2       	ldi	r24, 0x20	; 32
    2604:	80 83       	st	Z, r24
	*OLED_cmd = 0x02;
    2606:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    260a:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	80 83       	st	Z, r24

	//VCOM deselect level mode
	*OLED_cmd = 0xDB;
    2612:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2616:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    261a:	8b ed       	ldi	r24, 0xDB	; 219
    261c:	80 83       	st	Z, r24
	*OLED_cmd = 0x30;
    261e:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2622:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2626:	80 e3       	ldi	r24, 0x30	; 48
    2628:	80 83       	st	Z, r24

	//master configuration
	*OLED_cmd = 0xAD;
    262a:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    262e:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2632:	8d ea       	ldi	r24, 0xAD	; 173
    2634:	80 83       	st	Z, r24
	*OLED_cmd = 0x00;
    2636:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    263a:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    263e:	10 82       	st	Z, r1

	//out follows RAM content
	*OLED_cmd = 0xA4;
    2640:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2644:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2648:	84 ea       	ldi	r24, 0xA4	; 164
    264a:	80 83       	st	Z, r24

	//set normal display
	*OLED_cmd = 0xA6;
    264c:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2650:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2654:	86 ea       	ldi	r24, 0xA6	; 166
    2656:	80 83       	st	Z, r24
	//display on
	*OLED_cmd = 0xAF;
    2658:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    265c:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2660:	8f ea       	ldi	r24, 0xAF	; 175
    2662:	80 83       	st	Z, r24
	
	//Set page start address
	*OLED_cmd = 0xB0;
    2664:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2668:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    266c:	80 eb       	ldi	r24, 0xB0	; 176
    266e:	80 83       	st	Z, r24
	//Set lower column start address
	*OLED_cmd = 0x00;
    2670:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    2674:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2678:	10 82       	st	Z, r1
	//Set higher column start address
	*OLED_cmd = 0x10;
    267a:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <OLED_cmd>
    267e:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <OLED_cmd+0x1>
    2682:	80 e1       	ldi	r24, 0x10	; 16
    2684:	80 83       	st	Z, r24
	
	//Clear the display
	OLED_clear();
    2686:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
	OLED_home();
    268a:	0e 94 1e 12 	call	0x243c	; 0x243c <OLED_home>

	return 0;
}
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	08 95       	ret

00002694 <OLED_print_char>:
	
	return 0;
}

// function that lets us print characters defined by the defined
int OLED_print_char(char c) {
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	f9 01       	movw	r30, r18
    269a:	ee 0f       	add	r30, r30
    269c:	ff 1f       	adc	r31, r31
    269e:	ee 0f       	add	r30, r30
    26a0:	ff 1f       	adc	r31, r31
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	e6 55       	subi	r30, 0x56	; 86
    26a8:	f0 40       	sbci	r31, 0x00	; 0
    26aa:	22 0f       	add	r18, r18
    26ac:	33 1f       	adc	r19, r19
    26ae:	22 0f       	add	r18, r18
    26b0:	33 1f       	adc	r19, r19
    26b2:	22 0f       	add	r18, r18
    26b4:	33 1f       	adc	r19, r19
    26b6:	2e 54       	subi	r18, 0x4E	; 78
    26b8:	30 40       	sbci	r19, 0x00	; 0
	//Write the complete character
	for (int i = 0; i < FONTWIDTH; i++) {
		*OLED_data = pgm_read_byte(&font[c-' '][i]);
    26ba:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <OLED_data>
    26be:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <OLED_data+0x1>
    26c2:	94 91       	lpm	r25, Z
    26c4:	9c 93       	st	X, r25
    26c6:	31 96       	adiw	r30, 0x01	; 1
}

// function that lets us print characters defined by the defined
int OLED_print_char(char c) {
	//Write the complete character
	for (int i = 0; i < FONTWIDTH; i++) {
    26c8:	e2 17       	cp	r30, r18
    26ca:	f3 07       	cpc	r31, r19
    26cc:	b1 f7       	brne	.-20     	; 0x26ba <OLED_print_char+0x26>
		*OLED_data = pgm_read_byte(&font[c-' '][i]);
	}
	
	return 0;
}
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	08 95       	ret

000026d4 <OLED_print>:
// 	
// 	return 0;
// }

//writes a complete string, with the use of the print char function
int OLED_print(char *data) {
    26d4:	cf 93       	push	r28
    26d6:	df 93       	push	r29
    26d8:	ec 01       	movw	r28, r24
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
    26da:	88 81       	ld	r24, Y
    26dc:	88 23       	and	r24, r24
    26de:	31 f0       	breq	.+12     	; 0x26ec <OLED_print+0x18>
    26e0:	21 96       	adiw	r28, 0x01	; 1
		OLED_print_char(data[i]);
    26e2:	0e 94 4a 13 	call	0x2694	; 0x2694 <OLED_print_char>
//writes a complete string, with the use of the print char function
int OLED_print(char *data) {
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
    26e6:	89 91       	ld	r24, Y+
    26e8:	81 11       	cpse	r24, r1
    26ea:	fb cf       	rjmp	.-10     	; 0x26e2 <OLED_print+0xe>
		OLED_print_char(data[i]);
		i++;
	}
	
	return 0;
}
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	08 95       	ret

000026f6 <OLED_nameprompt>:

int OLED_nameprompt(void){
    26f6:	6f 92       	push	r6
    26f8:	7f 92       	push	r7
    26fa:	8f 92       	push	r8
    26fc:	9f 92       	push	r9
    26fe:	af 92       	push	r10
    2700:	bf 92       	push	r11
    2702:	cf 92       	push	r12
    2704:	df 92       	push	r13
    2706:	ef 92       	push	r14
    2708:	ff 92       	push	r15
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	ea 97       	sbiw	r28, 0x3a	; 58
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
	OLED_clear();
    2722:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
	OLED_pos(2,1);
    2726:	61 e0       	ldi	r22, 0x01	; 1
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
	OLED_print("New Highscore!");
    272e:	8e e7       	ldi	r24, 0x7E	; 126
    2730:	93 e0       	ldi	r25, 0x03	; 3
    2732:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
	OLED_pos(3,3);
    2736:	63 e0       	ldi	r22, 0x03	; 3
    2738:	83 e0       	ldi	r24, 0x03	; 3
    273a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
	OLED_print("Type name:");
    273e:	8d e8       	ldi	r24, 0x8D	; 141
    2740:	93 e0       	ldi	r25, 0x03	; 3
    2742:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
	OLED_pos(6,6);
    2746:	66 e0       	ldi	r22, 0x06	; 6
    2748:	86 e0       	ldi	r24, 0x06	; 6
    274a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
	OLED_print("^^^^");
    274e:	88 e9       	ldi	r24, 0x98	; 152
    2750:	93 e0       	ldi	r25, 0x03	; 3
    2752:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
	char* characterstring[25] = {"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"};
    2756:	82 e3       	ldi	r24, 0x32	; 50
    2758:	e7 e2       	ldi	r30, 0x27	; 39
    275a:	f1 e0       	ldi	r31, 0x01	; 1
    275c:	de 01       	movw	r26, r28
    275e:	11 96       	adiw	r26, 0x01	; 1
    2760:	01 90       	ld	r0, Z+
    2762:	0d 92       	st	X+, r0
    2764:	8a 95       	dec	r24
    2766:	e1 f7       	brne	.-8      	; 0x2760 <OLED_nameprompt+0x6a>
	char* endstr[4] = {".", ".", ".", "."};
    2768:	88 e0       	ldi	r24, 0x08	; 8
    276a:	e9 e5       	ldi	r30, 0x59	; 89
    276c:	f1 e0       	ldi	r31, 0x01	; 1
    276e:	de 01       	movw	r26, r28
    2770:	d3 96       	adiw	r26, 0x33	; 51
    2772:	01 90       	ld	r0, Z+
    2774:	0d 92       	st	X+, r0
    2776:	8a 95       	dec	r24
    2778:	e1 f7       	brne	.-8      	; 0x2772 <OLED_nameprompt+0x7c>
    277a:	4e 01       	movw	r8, r28
    277c:	23 e3       	ldi	r18, 0x33	; 51
    277e:	82 0e       	add	r8, r18
    2780:	91 1c       	adc	r9, r1
    2782:	64 01       	movw	r12, r8
    2784:	0f 2e       	mov	r0, r31
    2786:	f6 e0       	ldi	r31, 0x06	; 6
    2788:	6f 2e       	mov	r6, r31
    278a:	f0 2d       	mov	r31, r0
	int positions[4];
	int stopflag = 0;
	joy_position joy_pos;
	slider_position slider_pos;
	for (int i = 0; i < 4; i++){
    278c:	a1 2c       	mov	r10, r1
    278e:	b1 2c       	mov	r11, r1
    2790:	84 c0       	rjmp	.+264    	; 0x289a <OLED_nameprompt+0x1a4>
		for (int j = 0; j < 30;){
			OLED_clear_line(5);
    2792:	85 e0       	ldi	r24, 0x05	; 5
    2794:	0e 94 8d 12 	call	0x251a	; 0x251a <OLED_clear_line>
			for (int k = 0; k < i; k++){
    2798:	1a 14       	cp	r1, r10
    279a:	1b 04       	cpc	r1, r11
    279c:	9c f4       	brge	.+38     	; 0x27c4 <OLED_nameprompt+0xce>
    279e:	84 01       	movw	r16, r8
    27a0:	0f 2e       	mov	r0, r31
    27a2:	f6 e0       	ldi	r31, 0x06	; 6
    27a4:	7f 2e       	mov	r7, r31
    27a6:	f0 2d       	mov	r31, r0
				OLED_pos(5,6+k);
    27a8:	67 2d       	mov	r22, r7
    27aa:	85 e0       	ldi	r24, 0x05	; 5
    27ac:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
				OLED_print(endstr[k]);
    27b0:	f8 01       	movw	r30, r16
    27b2:	81 91       	ld	r24, Z+
    27b4:	91 91       	ld	r25, Z+
    27b6:	8f 01       	movw	r16, r30
    27b8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    27bc:	73 94       	inc	r7
	joy_position joy_pos;
	slider_position slider_pos;
	for (int i = 0; i < 4; i++){
		for (int j = 0; j < 30;){
			OLED_clear_line(5);
			for (int k = 0; k < i; k++){
    27be:	0c 15       	cp	r16, r12
    27c0:	1d 05       	cpc	r17, r13
    27c2:	91 f7       	brne	.-28     	; 0x27a8 <OLED_nameprompt+0xb2>
				OLED_pos(5,6+k);
				OLED_print(endstr[k]);
			}
			OLED_pos(5,6+i);
    27c4:	66 2d       	mov	r22, r6
    27c6:	85 e0       	ldi	r24, 0x05	; 5
    27c8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
			OLED_print(characterstring[j]);
    27cc:	f7 01       	movw	r30, r14
    27ce:	ee 0f       	add	r30, r30
    27d0:	ff 1f       	adc	r31, r31
    27d2:	21 e0       	ldi	r18, 0x01	; 1
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	2c 0f       	add	r18, r28
    27d8:	3d 1f       	adc	r19, r29
    27da:	e2 0f       	add	r30, r18
    27dc:	f3 1f       	adc	r31, r19
    27de:	80 81       	ld	r24, Z
    27e0:	91 81       	ldd	r25, Z+1	; 0x01
    27e2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
			joy_pos = JOY_getDirection();
    27e6:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
    27ea:	3f e3       	ldi	r19, 0x3F	; 63
    27ec:	4d e0       	ldi	r20, 0x0D	; 13
    27ee:	e3 e0       	ldi	r30, 0x03	; 3
    27f0:	31 50       	subi	r19, 0x01	; 1
    27f2:	40 40       	sbci	r20, 0x00	; 0
    27f4:	e0 40       	sbci	r30, 0x00	; 0
    27f6:	e1 f7       	brne	.-8      	; 0x27f0 <OLED_nameprompt+0xfa>
    27f8:	00 c0       	rjmp	.+0      	; 0x27fa <OLED_nameprompt+0x104>
    27fa:	00 00       	nop
			_delay_ms(1000);
			if (joy_pos.dir == 1){
    27fc:	81 30       	cpi	r24, 0x01	; 1
    27fe:	21 f4       	brne	.+8      	; 0x2808 <OLED_nameprompt+0x112>
				j = j + 1;
    2800:	ff ef       	ldi	r31, 0xFF	; 255
    2802:	ef 1a       	sub	r14, r31
    2804:	ff 0a       	sbc	r15, r31
    2806:	05 c0       	rjmp	.+10     	; 0x2812 <OLED_nameprompt+0x11c>
			}
			else if (joy_pos.dir == 2){
    2808:	82 30       	cpi	r24, 0x02	; 2
    280a:	19 f4       	brne	.+6      	; 0x2812 <OLED_nameprompt+0x11c>
				j = j - 1;
    280c:	21 e0       	ldi	r18, 0x01	; 1
    280e:	e2 1a       	sub	r14, r18
    2810:	f1 08       	sbc	r15, r1
			}
			if (j >= 25){
    2812:	39 e1       	ldi	r19, 0x19	; 25
    2814:	e3 16       	cp	r14, r19
    2816:	f1 04       	cpc	r15, r1
    2818:	0c f0       	brlt	.+2      	; 0x281c <OLED_nameprompt+0x126>
    281a:	65 c0       	rjmp	.+202    	; 0x28e6 <OLED_nameprompt+0x1f0>
				j = 0;
			}
			else if (j < 0){
    281c:	ff 20       	and	r15, r15
    281e:	0c f4       	brge	.+2      	; 0x2822 <OLED_nameprompt+0x12c>
    2820:	65 c0       	rjmp	.+202    	; 0x28ec <OLED_nameprompt+0x1f6>
				j = 25;
			}
			else if (joy_pos.sidedir == 1){
    2822:	91 30       	cpi	r25, 0x01	; 1
    2824:	71 f4       	brne	.+28     	; 0x2842 <OLED_nameprompt+0x14c>
				positions[i] = j;
				endstr[i] = characterstring[positions[i]];
    2826:	ee 0c       	add	r14, r14
    2828:	ff 1c       	adc	r15, r15
    282a:	e1 e0       	ldi	r30, 0x01	; 1
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	ec 0f       	add	r30, r28
    2830:	fd 1f       	adc	r31, r29
    2832:	ee 0d       	add	r30, r14
    2834:	ff 1d       	adc	r31, r15
    2836:	80 81       	ld	r24, Z
    2838:	91 81       	ldd	r25, Z+1	; 0x01
    283a:	f6 01       	movw	r30, r12
    283c:	91 83       	std	Z+1, r25	; 0x01
    283e:	80 83       	st	Z, r24
				break;
    2840:	22 c0       	rjmp	.+68     	; 0x2886 <OLED_nameprompt+0x190>
			}
			else if (joy_button(1) == 0){
    2842:	81 e0       	ldi	r24, 0x01	; 1
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    284a:	89 2b       	or	r24, r25
    284c:	b9 f4       	brne	.+46     	; 0x287c <OLED_nameprompt+0x186>
				stopflag = 1;
				positions[i] = j;
				endstr[i] = characterstring[positions[i]];
    284e:	aa 0c       	add	r10, r10
    2850:	bb 1c       	adc	r11, r11
    2852:	a1 e0       	ldi	r26, 0x01	; 1
    2854:	b0 e0       	ldi	r27, 0x00	; 0
    2856:	ac 0f       	add	r26, r28
    2858:	bd 1f       	adc	r27, r29
    285a:	aa 0d       	add	r26, r10
    285c:	bb 1d       	adc	r27, r11
    285e:	ee 0c       	add	r14, r14
    2860:	ff 1c       	adc	r15, r15
    2862:	e1 e0       	ldi	r30, 0x01	; 1
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	ec 0f       	add	r30, r28
    2868:	fd 1f       	adc	r31, r29
    286a:	ee 0d       	add	r30, r14
    286c:	ff 1d       	adc	r31, r15
    286e:	80 81       	ld	r24, Z
    2870:	91 81       	ldd	r25, Z+1	; 0x01
    2872:	d3 96       	adiw	r26, 0x33	; 51
    2874:	9c 93       	st	X, r25
    2876:	8e 93       	st	-X, r24
    2878:	d2 97       	sbiw	r26, 0x32	; 50
    287a:	12 c0       	rjmp	.+36     	; 0x28a0 <OLED_nameprompt+0x1aa>
	int positions[4];
	int stopflag = 0;
	joy_position joy_pos;
	slider_position slider_pos;
	for (int i = 0; i < 4; i++){
		for (int j = 0; j < 30;){
    287c:	fe e1       	ldi	r31, 0x1E	; 30
    287e:	ef 16       	cp	r14, r31
    2880:	f1 04       	cpc	r15, r1
    2882:	0c f4       	brge	.+2      	; 0x2886 <OLED_nameprompt+0x190>
    2884:	86 cf       	rjmp	.-244    	; 0x2792 <OLED_nameprompt+0x9c>
	char* endstr[4] = {".", ".", ".", "."};
	int positions[4];
	int stopflag = 0;
	joy_position joy_pos;
	slider_position slider_pos;
	for (int i = 0; i < 4; i++){
    2886:	2f ef       	ldi	r18, 0xFF	; 255
    2888:	a2 1a       	sub	r10, r18
    288a:	b2 0a       	sbc	r11, r18
    288c:	32 e0       	ldi	r19, 0x02	; 2
    288e:	c3 0e       	add	r12, r19
    2890:	d1 1c       	adc	r13, r1
    2892:	63 94       	inc	r6
    2894:	4a e0       	ldi	r20, 0x0A	; 10
    2896:	64 16       	cp	r6, r20
    2898:	19 f0       	breq	.+6      	; 0x28a0 <OLED_nameprompt+0x1aa>
	}
	
	return 0;
}

int OLED_nameprompt(void){
    289a:	e1 2c       	mov	r14, r1
    289c:	f1 2c       	mov	r15, r1
    289e:	79 cf       	rjmp	.-270    	; 0x2792 <OLED_nameprompt+0x9c>
		}
		if (stopflag == 1){
			break;
		}
	}
	OLED_clear();
    28a0:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
	OLED_pos(3,2);
    28a4:	62 e0       	ldi	r22, 0x02	; 2
    28a6:	83 e0       	ldi	r24, 0x03	; 3
    28a8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
	OLED_print("Well played,");
    28ac:	8d e9       	ldi	r24, 0x9D	; 157
    28ae:	93 e0       	ldi	r25, 0x03	; 3
    28b0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
	OLED_pos(6,4);
    28b4:	64 e0       	ldi	r22, 0x04	; 4
    28b6:	86 e0       	ldi	r24, 0x06	; 6
    28b8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
	OLED_print("~");
    28bc:	8c ea       	ldi	r24, 0xAC	; 172
    28be:	93 e0       	ldi	r25, 0x03	; 3
    28c0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
	OLED_pos(6,6);
    28c4:	66 e0       	ldi	r22, 0x06	; 6
    28c6:	86 e0       	ldi	r24, 0x06	; 6
    28c8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
    28cc:	8e 01       	movw	r16, r28
    28ce:	05 5c       	subi	r16, 0xC5	; 197
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i = 0; i < 4; i++){
		OLED_print(endstr[i]);
    28d2:	f4 01       	movw	r30, r8
    28d4:	81 91       	ld	r24, Z+
    28d6:	91 91       	ld	r25, Z+
    28d8:	4f 01       	movw	r8, r30
    28da:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
	OLED_pos(3,2);
	OLED_print("Well played,");
	OLED_pos(6,4);
	OLED_print("~");
	OLED_pos(6,6);
	for (int i = 0; i < 4; i++){
    28de:	08 15       	cp	r16, r8
    28e0:	19 05       	cpc	r17, r9
    28e2:	b9 f7       	brne	.-18     	; 0x28d2 <OLED_nameprompt+0x1dc>
    28e4:	09 c0       	rjmp	.+18     	; 0x28f8 <OLED_nameprompt+0x202>
			}
			else if (joy_pos.dir == 2){
				j = j - 1;
			}
			if (j >= 25){
				j = 0;
    28e6:	e1 2c       	mov	r14, r1
    28e8:	f1 2c       	mov	r15, r1
    28ea:	53 cf       	rjmp	.-346    	; 0x2792 <OLED_nameprompt+0x9c>
			}
			else if (j < 0){
				j = 25;
    28ec:	0f 2e       	mov	r0, r31
    28ee:	f9 e1       	ldi	r31, 0x19	; 25
    28f0:	ef 2e       	mov	r14, r31
    28f2:	f1 2c       	mov	r15, r1
    28f4:	f0 2d       	mov	r31, r0
    28f6:	4d cf       	rjmp	.-358    	; 0x2792 <OLED_nameprompt+0x9c>
	OLED_print("~");
	OLED_pos(6,6);
	for (int i = 0; i < 4; i++){
		OLED_print(endstr[i]);
	}
	OLED_pos(6,10);
    28f8:	6a e0       	ldi	r22, 0x0A	; 10
    28fa:	86 e0       	ldi	r24, 0x06	; 6
    28fc:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
	OLED_print("! ~");
    2900:	8a ea       	ldi	r24, 0xAA	; 170
    2902:	93 e0       	ldi	r25, 0x03	; 3
    2904:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    2908:	ff e7       	ldi	r31, 0x7F	; 127
    290a:	2f e4       	ldi	r18, 0x4F	; 79
    290c:	32 e1       	ldi	r19, 0x12	; 18
    290e:	f1 50       	subi	r31, 0x01	; 1
    2910:	20 40       	sbci	r18, 0x00	; 0
    2912:	30 40       	sbci	r19, 0x00	; 0
    2914:	e1 f7       	brne	.-8      	; 0x290e <OLED_nameprompt+0x218>
    2916:	00 c0       	rjmp	.+0      	; 0x2918 <OLED_nameprompt+0x222>
    2918:	00 00       	nop
	_delay_ms(6000);
	char** string = endstr;
	return string;
}
    291a:	ce 01       	movw	r24, r28
    291c:	c3 96       	adiw	r24, 0x33	; 51
    291e:	ea 96       	adiw	r28, 0x3a	; 58
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	ff 90       	pop	r15
    2934:	ef 90       	pop	r14
    2936:	df 90       	pop	r13
    2938:	cf 90       	pop	r12
    293a:	bf 90       	pop	r11
    293c:	af 90       	pop	r10
    293e:	9f 90       	pop	r9
    2940:	8f 90       	pop	r8
    2942:	7f 90       	pop	r7
    2944:	6f 90       	pop	r6
    2946:	08 95       	ret

00002948 <OLED_game>:

int OLED_game(int diff){
    2948:	8f 92       	push	r8
    294a:	9f 92       	push	r9
    294c:	af 92       	push	r10
    294e:	bf 92       	push	r11
    2950:	cf 92       	push	r12
    2952:	df 92       	push	r13
    2954:	ef 92       	push	r14
    2956:	ff 92       	push	r15
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	2b 97       	sbiw	r28, 0x0b	; 11
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	de bf       	out	0x3e, r29	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	cd bf       	out	0x3d, r28	; 61
	int counter = 0;
	joy_position position;
	slider_position slider_pos;

	while(gamestep == 1){      //Waiting for player to shoot the first time to initiate the game
		position = JOY_getDirection();
    2970:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
		OLED_clear();
    2974:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
		OLED_pos(4,2);
    2978:	62 e0       	ldi	r22, 0x02	; 2
    297a:	84 e0       	ldi	r24, 0x04	; 4
    297c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
		if (hp == 3){
			OLED_print("Shoot to start!");
    2980:	80 ee       	ldi	r24, 0xE0	; 224
    2982:	93 e0       	ldi	r25, 0x03	; 3
    2984:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
    2988:	2f ed       	ldi	r18, 0xDF	; 223
    298a:	83 e9       	ldi	r24, 0x93	; 147
    298c:	94 e0       	ldi	r25, 0x04	; 4
    298e:	21 50       	subi	r18, 0x01	; 1
    2990:	80 40       	sbci	r24, 0x00	; 0
    2992:	90 40       	sbci	r25, 0x00	; 0
    2994:	e1 f7       	brne	.-8      	; 0x298e <OLED_game+0x46>
    2996:	00 c0       	rjmp	.+0      	; 0x2998 <OLED_game+0x50>
    2998:	00 00       	nop
		}
		else{
			OLED_print("Shoot to continue!");
		}
		_delay_ms(1500);
		if (joy_button(1) == 0){
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    29a2:	89 2b       	or	r24, r25
    29a4:	29 f7       	brne	.-54     	; 0x2970 <OLED_game+0x28>
			can_msg_send.data[2] = joy_button(1);
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    29ae:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <can_msg_send+0x5>
			CAN_message_send(&can_msg_send);
    29b2:	80 e1       	ldi	r24, 0x10	; 16
    29b4:	94 e0       	ldi	r25, 0x04	; 4
    29b6:	0e 94 36 02 	call	0x46c	; 0x46c <CAN_message_send>
    29ba:	c1 2c       	mov	r12, r1
    29bc:	d1 2c       	mov	r13, r1
    29be:	0f 2e       	mov	r0, r31
    29c0:	f3 e0       	ldi	r31, 0x03	; 3
    29c2:	af 2e       	mov	r10, r31
    29c4:	b1 2c       	mov	r11, r1
    29c6:	f0 2d       	mov	r31, r0
		}
	}
	while(gamestep == 2){
		slider_pos = JOY_getSliderPosition();
		position = JOY_getDirection();
		can_msg_send.data[0] = position.x;
    29c8:	00 e1       	ldi	r16, 0x10	; 16
    29ca:	14 e0       	ldi	r17, 0x04	; 4
    29cc:	68 94       	set
    29ce:	88 24       	eor	r8, r8
    29d0:	81 f8       	bld	r8, 1
    29d2:	91 2c       	mov	r9, r1
			CAN_message_send(&can_msg_send);
			gamestep = 2;
		}
	}
	while(gamestep == 2){
		slider_pos = JOY_getSliderPosition();
    29d4:	0e 94 cf 03 	call	0x79e	; 0x79e <JOY_getSliderPosition>
    29d8:	f8 2e       	mov	r15, r24
		position = JOY_getDirection();
    29da:	0e 94 b3 03 	call	0x766	; 0x766 <JOY_getDirection>
		can_msg_send.data[0] = position.x;
    29de:	f8 01       	movw	r30, r16
    29e0:	63 83       	std	Z+3, r22	; 0x03
		can_msg_send.data[1] = slider_pos.left;
    29e2:	f4 82       	std	Z+4, r15	; 0x04
		can_msg_send.data[2] = joy_button(1);
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	0e 94 32 03 	call	0x664	; 0x664 <joy_button>
    29ec:	f8 01       	movw	r30, r16
    29ee:	85 83       	std	Z+5, r24	; 0x05
		CAN_message_send(&can_msg_send);
    29f0:	c8 01       	movw	r24, r16
    29f2:	0e 94 36 02 	call	0x46c	; 0x46c <CAN_message_send>
		can_msg_receive = CAN_data_receive();
    29f6:	ce 01       	movw	r24, r28
    29f8:	01 96       	adiw	r24, 0x01	; 1
    29fa:	0e 94 8c 02 	call	0x518	; 0x518 <CAN_data_receive>
    29fe:	8b e0       	ldi	r24, 0x0B	; 11
    2a00:	fe 01       	movw	r30, r28
    2a02:	31 96       	adiw	r30, 0x01	; 1
    2a04:	ad e1       	ldi	r26, 0x1D	; 29
    2a06:	b4 e0       	ldi	r27, 0x04	; 4
    2a08:	01 90       	ld	r0, Z+
    2a0a:	0d 92       	st	X+, r0
    2a0c:	8a 95       	dec	r24
    2a0e:	e1 f7       	brne	.-8      	; 0x2a08 <OLED_game+0xc0>
		can_msg_receive.data[0] = hp_lost;
    2a10:	ed e1       	ldi	r30, 0x1D	; 29
    2a12:	f4 e0       	ldi	r31, 0x04	; 4
    2a14:	13 82       	std	Z+3, r1	; 0x03
		can_msg_receive.data[1] = score;
    2a16:	14 82       	std	Z+4, r1	; 0x04
    2a18:	87 ea       	ldi	r24, 0xA7	; 167
    2a1a:	91 e6       	ldi	r25, 0x61	; 97
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	f1 f7       	brne	.-4      	; 0x2a1c <OLED_game+0xd4>
    2a20:	00 c0       	rjmp	.+0      	; 0x2a22 <OLED_game+0xda>
    2a22:	00 00       	nop
    2a24:	e8 2c       	mov	r14, r8
    2a26:	f9 2c       	mov	r15, r9
	//	printf("Slider position: %d \n \r", position.x);
		if (hp_lost == 1){
			hp = hp - 1;
			gamestep = 1;
		}
		counter = counter + 1;
    2a28:	9f ef       	ldi	r25, 0xFF	; 255
    2a2a:	c9 1a       	sub	r12, r25
    2a2c:	d9 0a       	sbc	r13, r25
		if (counter == 8){
    2a2e:	e8 e0       	ldi	r30, 0x08	; 8
    2a30:	ce 16       	cp	r12, r30
    2a32:	d1 04       	cpc	r13, r1
    2a34:	39 f5       	brne	.+78     	; 0x2a84 <OLED_game+0x13c>
			OLED_clear();
    2a36:	0e 94 9d 12 	call	0x253a	; 0x253a <OLED_clear>
			OLED_pos(2,2);
    2a3a:	62 e0       	ldi	r22, 0x02	; 2
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
		OLED_print("Health: }}}");
    2a42:	80 ef       	ldi	r24, 0xF0	; 240
    2a44:	93 e0       	ldi	r25, 0x03	; 3
    2a46:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
		OLED_print(itoa(hp, buffer, 10));
    2a4a:	4a e0       	ldi	r20, 0x0A	; 10
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	65 e3       	ldi	r22, 0x35	; 53
    2a50:	74 e0       	ldi	r23, 0x04	; 4
    2a52:	c5 01       	movw	r24, r10
    2a54:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <itoa>
    2a58:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
		OLED_pos(4,2);
    2a5c:	62 e0       	ldi	r22, 0x02	; 2
    2a5e:	84 e0       	ldi	r24, 0x04	; 4
    2a60:	0e 94 70 12 	call	0x24e0	; 0x24e0 <OLED_pos>
		OLED_print("Score: ");
    2a64:	8c ef       	ldi	r24, 0xFC	; 252
    2a66:	93 e0       	ldi	r25, 0x03	; 3
    2a68:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
		OLED_print(itoa(score, buffer, 10));
    2a6c:	4a e0       	ldi	r20, 0x0A	; 10
    2a6e:	50 e0       	ldi	r21, 0x00	; 0
    2a70:	65 e3       	ldi	r22, 0x35	; 53
    2a72:	74 e0       	ldi	r23, 0x04	; 4
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <itoa>
    2a7c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <OLED_print>
		counter = 0;
    2a80:	c1 2c       	mov	r12, r1
    2a82:	d1 2c       	mov	r13, r1
	}
	if (hp == 0){break;}
    2a84:	a1 14       	cp	r10, r1
    2a86:	b1 04       	cpc	r11, r1
    2a88:	29 f0       	breq	.+10     	; 0x2a94 <OLED_game+0x14c>
			can_msg_send.data[2] = joy_button(1);
			CAN_message_send(&can_msg_send);
			gamestep = 2;
		}
	}
	while(gamestep == 2){
    2a8a:	f2 e0       	ldi	r31, 0x02	; 2
    2a8c:	ef 16       	cp	r14, r31
    2a8e:	f1 04       	cpc	r15, r1
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <OLED_game+0x14c>
    2a92:	a0 cf       	rjmp	.-192    	; 0x29d4 <OLED_game+0x8c>
		counter = 0;
	}
	if (hp == 0){break;}
}
return score;
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	2b 96       	adiw	r28, 0x0b	; 11
    2a9a:	0f b6       	in	r0, 0x3f	; 63
    2a9c:	f8 94       	cli
    2a9e:	de bf       	out	0x3e, r29	; 62
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	cd bf       	out	0x3d, r28	; 61
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	ff 90       	pop	r15
    2aae:	ef 90       	pop	r14
    2ab0:	df 90       	pop	r13
    2ab2:	cf 90       	pop	r12
    2ab4:	bf 90       	pop	r11
    2ab6:	af 90       	pop	r10
    2ab8:	9f 90       	pop	r9
    2aba:	8f 90       	pop	r8
    2abc:	08 95       	ret

00002abe <SPI_init>:
#define SPI_MISO PB6
#define SPI_SCK PB7

int SPI_init(void) {
	//Set MOSI, SCK and SS as output pins
	DDRB |= (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<SPI_SS);
    2abe:	87 b3       	in	r24, 0x17	; 23
    2ac0:	80 6b       	ori	r24, 0xB0	; 176
    2ac2:	87 bb       	out	0x17, r24	; 23
	
	//Set MISO as input pin
	DDRB &= ~(1<<SPI_MISO);
    2ac4:	be 98       	cbi	0x17, 6	; 23
	
	//Enable SPI in master mode and set clock rate fosc/16
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
    2ac6:	81 e5       	ldi	r24, 0x51	; 81
    2ac8:	8d b9       	out	0x0d, r24	; 13
	
	return 0;
}
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	08 95       	ret

00002ad0 <SPI_send>:

int SPI_send(char data) {
	//Start the transmission
	SPDR = data;
    2ad0:	8f b9       	out	0x0f, r24	; 15
	
	//Wait for data to be transmitted (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
    2ad2:	77 9b       	sbis	0x0e, 7	; 14
    2ad4:	fe cf       	rjmp	.-4      	; 0x2ad2 <SPI_send+0x2>
	
	return 0;
}
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	08 95       	ret

00002adc <SPI_read>:

uint8_t SPI_read(void) {
	//Send dummy data to read from slave
	SPI_send(0);
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <SPI_send>
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
    2ae2:	77 9b       	sbis	0x0e, 7	; 14
    2ae4:	fe cf       	rjmp	.-4      	; 0x2ae2 <SPI_read+0x6>
	
	return SPDR;
    2ae6:	8f b1       	in	r24, 0x0f	; 15
}
    2ae8:	08 95       	ret

00002aea <SPI_select>:

void SPI_select(void) {
	//Set !SS to 0 to select the slave
	PORTB &= ~(1<<SPI_SS);
    2aea:	c4 98       	cbi	0x18, 4	; 24
    2aec:	08 95       	ret

00002aee <SPI_deselect>:
}

void SPI_deselect(void) {
	//Set !SS to 1 to deselect the slave
	PORTB |= (1<<SPI_SS);
    2aee:	c4 9a       	sbi	0x18, 4	; 24
    2af0:	08 95       	ret

00002af2 <SRAM_init>:
*/

//function to set up SRAM
int SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
    2af2:	85 b7       	in	r24, 0x35	; 53
    2af4:	80 68       	ori	r24, 0x80	; 128
    2af6:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    2af8:	80 b7       	in	r24, 0x30	; 48
    2afa:	80 62       	ori	r24, 0x20	; 32
    2afc:	80 bf       	out	0x30, r24	; 48
	
	return 0;
}
    2afe:	80 e0       	ldi	r24, 0x00	; 0
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	08 95       	ret

00002b04 <UART_TX>:

//function that makes sending data over UART easier
int UART_TX(char data, FILE * _in){
	(void)(_in);
	
	while( !(UCSR0A & (1 << UDRE0)) );
    2b04:	5d 9b       	sbis	0x0b, 5	; 11
    2b06:	fe cf       	rjmp	.-4      	; 0x2b04 <UART_TX>
	
	// send data
	UDR0 = data;
    2b08:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	08 95       	ret

00002b10 <UART_RX>:

//function for sending data over UART
int UART_RX(FILE * _in ){
	(void)(_in);
	while( !(UCSR0A & (1 << RXC0)) );
    2b10:	5f 9b       	sbis	0x0b, 7	; 11
    2b12:	fe cf       	rjmp	.-4      	; 0x2b10 <UART_RX>
	
	// Data recieved
	return UDR0;
    2b14:	8c b1       	in	r24, 0x0c	; 12
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	08 95       	ret

00002b1a <UART_Init>:

//function that sets up the UART and serial communication parameters
void UART_Init(unsigned int ubrr)
{
	// Baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
    2b1a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
    2b1c:	89 b9       	out	0x09, r24	; 9
	
	// Enable Rx and Tx
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) ;
    2b1e:	88 e1       	ldi	r24, 0x18	; 24
    2b20:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
    2b22:	8e e8       	ldi	r24, 0x8E	; 142
    2b24:	80 bd       	out	0x20, r24	; 32
	fdevopen(UART_TX, UART_RX);
    2b26:	68 e8       	ldi	r22, 0x88	; 136
    2b28:	75 e1       	ldi	r23, 0x15	; 21
    2b2a:	82 e8       	ldi	r24, 0x82	; 130
    2b2c:	95 e1       	ldi	r25, 0x15	; 21
    2b2e:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <fdevopen>
    2b32:	08 95       	ret

00002b34 <__subsf3>:
    2b34:	50 58       	subi	r21, 0x80	; 128

00002b36 <__addsf3>:
    2b36:	bb 27       	eor	r27, r27
    2b38:	aa 27       	eor	r26, r26
    2b3a:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <__addsf3x>
    2b3e:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__fp_round>
    2b42:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__fp_pscA>
    2b46:	38 f0       	brcs	.+14     	; 0x2b56 <__addsf3+0x20>
    2b48:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__fp_pscB>
    2b4c:	20 f0       	brcs	.+8      	; 0x2b56 <__addsf3+0x20>
    2b4e:	39 f4       	brne	.+14     	; 0x2b5e <__addsf3+0x28>
    2b50:	9f 3f       	cpi	r25, 0xFF	; 255
    2b52:	19 f4       	brne	.+6      	; 0x2b5a <__addsf3+0x24>
    2b54:	26 f4       	brtc	.+8      	; 0x2b5e <__addsf3+0x28>
    2b56:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__fp_nan>
    2b5a:	0e f4       	brtc	.+2      	; 0x2b5e <__addsf3+0x28>
    2b5c:	e0 95       	com	r30
    2b5e:	e7 fb       	bst	r30, 7
    2b60:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__fp_inf>

00002b64 <__addsf3x>:
    2b64:	e9 2f       	mov	r30, r25
    2b66:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fp_split3>
    2b6a:	58 f3       	brcs	.-42     	; 0x2b42 <__addsf3+0xc>
    2b6c:	ba 17       	cp	r27, r26
    2b6e:	62 07       	cpc	r22, r18
    2b70:	73 07       	cpc	r23, r19
    2b72:	84 07       	cpc	r24, r20
    2b74:	95 07       	cpc	r25, r21
    2b76:	20 f0       	brcs	.+8      	; 0x2b80 <__addsf3x+0x1c>
    2b78:	79 f4       	brne	.+30     	; 0x2b98 <__addsf3x+0x34>
    2b7a:	a6 f5       	brtc	.+104    	; 0x2be4 <__addsf3x+0x80>
    2b7c:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__fp_zero>
    2b80:	0e f4       	brtc	.+2      	; 0x2b84 <__addsf3x+0x20>
    2b82:	e0 95       	com	r30
    2b84:	0b 2e       	mov	r0, r27
    2b86:	ba 2f       	mov	r27, r26
    2b88:	a0 2d       	mov	r26, r0
    2b8a:	0b 01       	movw	r0, r22
    2b8c:	b9 01       	movw	r22, r18
    2b8e:	90 01       	movw	r18, r0
    2b90:	0c 01       	movw	r0, r24
    2b92:	ca 01       	movw	r24, r20
    2b94:	a0 01       	movw	r20, r0
    2b96:	11 24       	eor	r1, r1
    2b98:	ff 27       	eor	r31, r31
    2b9a:	59 1b       	sub	r21, r25
    2b9c:	99 f0       	breq	.+38     	; 0x2bc4 <__addsf3x+0x60>
    2b9e:	59 3f       	cpi	r21, 0xF9	; 249
    2ba0:	50 f4       	brcc	.+20     	; 0x2bb6 <__addsf3x+0x52>
    2ba2:	50 3e       	cpi	r21, 0xE0	; 224
    2ba4:	68 f1       	brcs	.+90     	; 0x2c00 <__addsf3x+0x9c>
    2ba6:	1a 16       	cp	r1, r26
    2ba8:	f0 40       	sbci	r31, 0x00	; 0
    2baa:	a2 2f       	mov	r26, r18
    2bac:	23 2f       	mov	r18, r19
    2bae:	34 2f       	mov	r19, r20
    2bb0:	44 27       	eor	r20, r20
    2bb2:	58 5f       	subi	r21, 0xF8	; 248
    2bb4:	f3 cf       	rjmp	.-26     	; 0x2b9c <__addsf3x+0x38>
    2bb6:	46 95       	lsr	r20
    2bb8:	37 95       	ror	r19
    2bba:	27 95       	ror	r18
    2bbc:	a7 95       	ror	r26
    2bbe:	f0 40       	sbci	r31, 0x00	; 0
    2bc0:	53 95       	inc	r21
    2bc2:	c9 f7       	brne	.-14     	; 0x2bb6 <__addsf3x+0x52>
    2bc4:	7e f4       	brtc	.+30     	; 0x2be4 <__addsf3x+0x80>
    2bc6:	1f 16       	cp	r1, r31
    2bc8:	ba 0b       	sbc	r27, r26
    2bca:	62 0b       	sbc	r22, r18
    2bcc:	73 0b       	sbc	r23, r19
    2bce:	84 0b       	sbc	r24, r20
    2bd0:	ba f0       	brmi	.+46     	; 0x2c00 <__addsf3x+0x9c>
    2bd2:	91 50       	subi	r25, 0x01	; 1
    2bd4:	a1 f0       	breq	.+40     	; 0x2bfe <__addsf3x+0x9a>
    2bd6:	ff 0f       	add	r31, r31
    2bd8:	bb 1f       	adc	r27, r27
    2bda:	66 1f       	adc	r22, r22
    2bdc:	77 1f       	adc	r23, r23
    2bde:	88 1f       	adc	r24, r24
    2be0:	c2 f7       	brpl	.-16     	; 0x2bd2 <__addsf3x+0x6e>
    2be2:	0e c0       	rjmp	.+28     	; 0x2c00 <__addsf3x+0x9c>
    2be4:	ba 0f       	add	r27, r26
    2be6:	62 1f       	adc	r22, r18
    2be8:	73 1f       	adc	r23, r19
    2bea:	84 1f       	adc	r24, r20
    2bec:	48 f4       	brcc	.+18     	; 0x2c00 <__addsf3x+0x9c>
    2bee:	87 95       	ror	r24
    2bf0:	77 95       	ror	r23
    2bf2:	67 95       	ror	r22
    2bf4:	b7 95       	ror	r27
    2bf6:	f7 95       	ror	r31
    2bf8:	9e 3f       	cpi	r25, 0xFE	; 254
    2bfa:	08 f0       	brcs	.+2      	; 0x2bfe <__addsf3x+0x9a>
    2bfc:	b0 cf       	rjmp	.-160    	; 0x2b5e <__addsf3+0x28>
    2bfe:	93 95       	inc	r25
    2c00:	88 0f       	add	r24, r24
    2c02:	08 f0       	brcs	.+2      	; 0x2c06 <__addsf3x+0xa2>
    2c04:	99 27       	eor	r25, r25
    2c06:	ee 0f       	add	r30, r30
    2c08:	97 95       	ror	r25
    2c0a:	87 95       	ror	r24
    2c0c:	08 95       	ret

00002c0e <__cmpsf2>:
    2c0e:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__fp_cmp>
    2c12:	08 f4       	brcc	.+2      	; 0x2c16 <__cmpsf2+0x8>
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	08 95       	ret

00002c18 <__fixunssfsi>:
    2c18:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__fp_splitA>
    2c1c:	88 f0       	brcs	.+34     	; 0x2c40 <__fixunssfsi+0x28>
    2c1e:	9f 57       	subi	r25, 0x7F	; 127
    2c20:	98 f0       	brcs	.+38     	; 0x2c48 <__fixunssfsi+0x30>
    2c22:	b9 2f       	mov	r27, r25
    2c24:	99 27       	eor	r25, r25
    2c26:	b7 51       	subi	r27, 0x17	; 23
    2c28:	b0 f0       	brcs	.+44     	; 0x2c56 <__fixunssfsi+0x3e>
    2c2a:	e1 f0       	breq	.+56     	; 0x2c64 <__fixunssfsi+0x4c>
    2c2c:	66 0f       	add	r22, r22
    2c2e:	77 1f       	adc	r23, r23
    2c30:	88 1f       	adc	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	1a f0       	brmi	.+6      	; 0x2c3c <__fixunssfsi+0x24>
    2c36:	ba 95       	dec	r27
    2c38:	c9 f7       	brne	.-14     	; 0x2c2c <__fixunssfsi+0x14>
    2c3a:	14 c0       	rjmp	.+40     	; 0x2c64 <__fixunssfsi+0x4c>
    2c3c:	b1 30       	cpi	r27, 0x01	; 1
    2c3e:	91 f0       	breq	.+36     	; 0x2c64 <__fixunssfsi+0x4c>
    2c40:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__fp_zero>
    2c44:	b1 e0       	ldi	r27, 0x01	; 1
    2c46:	08 95       	ret
    2c48:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__fp_zero>
    2c4c:	67 2f       	mov	r22, r23
    2c4e:	78 2f       	mov	r23, r24
    2c50:	88 27       	eor	r24, r24
    2c52:	b8 5f       	subi	r27, 0xF8	; 248
    2c54:	39 f0       	breq	.+14     	; 0x2c64 <__fixunssfsi+0x4c>
    2c56:	b9 3f       	cpi	r27, 0xF9	; 249
    2c58:	cc f3       	brlt	.-14     	; 0x2c4c <__fixunssfsi+0x34>
    2c5a:	86 95       	lsr	r24
    2c5c:	77 95       	ror	r23
    2c5e:	67 95       	ror	r22
    2c60:	b3 95       	inc	r27
    2c62:	d9 f7       	brne	.-10     	; 0x2c5a <__fixunssfsi+0x42>
    2c64:	3e f4       	brtc	.+14     	; 0x2c74 <__fixunssfsi+0x5c>
    2c66:	90 95       	com	r25
    2c68:	80 95       	com	r24
    2c6a:	70 95       	com	r23
    2c6c:	61 95       	neg	r22
    2c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c70:	8f 4f       	sbci	r24, 0xFF	; 255
    2c72:	9f 4f       	sbci	r25, 0xFF	; 255
    2c74:	08 95       	ret

00002c76 <__fp_cmp>:
    2c76:	99 0f       	add	r25, r25
    2c78:	00 08       	sbc	r0, r0
    2c7a:	55 0f       	add	r21, r21
    2c7c:	aa 0b       	sbc	r26, r26
    2c7e:	e0 e8       	ldi	r30, 0x80	; 128
    2c80:	fe ef       	ldi	r31, 0xFE	; 254
    2c82:	16 16       	cp	r1, r22
    2c84:	17 06       	cpc	r1, r23
    2c86:	e8 07       	cpc	r30, r24
    2c88:	f9 07       	cpc	r31, r25
    2c8a:	c0 f0       	brcs	.+48     	; 0x2cbc <__fp_cmp+0x46>
    2c8c:	12 16       	cp	r1, r18
    2c8e:	13 06       	cpc	r1, r19
    2c90:	e4 07       	cpc	r30, r20
    2c92:	f5 07       	cpc	r31, r21
    2c94:	98 f0       	brcs	.+38     	; 0x2cbc <__fp_cmp+0x46>
    2c96:	62 1b       	sub	r22, r18
    2c98:	73 0b       	sbc	r23, r19
    2c9a:	84 0b       	sbc	r24, r20
    2c9c:	95 0b       	sbc	r25, r21
    2c9e:	39 f4       	brne	.+14     	; 0x2cae <__fp_cmp+0x38>
    2ca0:	0a 26       	eor	r0, r26
    2ca2:	61 f0       	breq	.+24     	; 0x2cbc <__fp_cmp+0x46>
    2ca4:	23 2b       	or	r18, r19
    2ca6:	24 2b       	or	r18, r20
    2ca8:	25 2b       	or	r18, r21
    2caa:	21 f4       	brne	.+8      	; 0x2cb4 <__fp_cmp+0x3e>
    2cac:	08 95       	ret
    2cae:	0a 26       	eor	r0, r26
    2cb0:	09 f4       	brne	.+2      	; 0x2cb4 <__fp_cmp+0x3e>
    2cb2:	a1 40       	sbci	r26, 0x01	; 1
    2cb4:	a6 95       	lsr	r26
    2cb6:	8f ef       	ldi	r24, 0xFF	; 255
    2cb8:	81 1d       	adc	r24, r1
    2cba:	81 1d       	adc	r24, r1
    2cbc:	08 95       	ret

00002cbe <__fp_inf>:
    2cbe:	97 f9       	bld	r25, 7
    2cc0:	9f 67       	ori	r25, 0x7F	; 127
    2cc2:	80 e8       	ldi	r24, 0x80	; 128
    2cc4:	70 e0       	ldi	r23, 0x00	; 0
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	08 95       	ret

00002cca <__fp_nan>:
    2cca:	9f ef       	ldi	r25, 0xFF	; 255
    2ccc:	80 ec       	ldi	r24, 0xC0	; 192
    2cce:	08 95       	ret

00002cd0 <__fp_pscA>:
    2cd0:	00 24       	eor	r0, r0
    2cd2:	0a 94       	dec	r0
    2cd4:	16 16       	cp	r1, r22
    2cd6:	17 06       	cpc	r1, r23
    2cd8:	18 06       	cpc	r1, r24
    2cda:	09 06       	cpc	r0, r25
    2cdc:	08 95       	ret

00002cde <__fp_pscB>:
    2cde:	00 24       	eor	r0, r0
    2ce0:	0a 94       	dec	r0
    2ce2:	12 16       	cp	r1, r18
    2ce4:	13 06       	cpc	r1, r19
    2ce6:	14 06       	cpc	r1, r20
    2ce8:	05 06       	cpc	r0, r21
    2cea:	08 95       	ret

00002cec <__fp_round>:
    2cec:	09 2e       	mov	r0, r25
    2cee:	03 94       	inc	r0
    2cf0:	00 0c       	add	r0, r0
    2cf2:	11 f4       	brne	.+4      	; 0x2cf8 <__fp_round+0xc>
    2cf4:	88 23       	and	r24, r24
    2cf6:	52 f0       	brmi	.+20     	; 0x2d0c <__fp_round+0x20>
    2cf8:	bb 0f       	add	r27, r27
    2cfa:	40 f4       	brcc	.+16     	; 0x2d0c <__fp_round+0x20>
    2cfc:	bf 2b       	or	r27, r31
    2cfe:	11 f4       	brne	.+4      	; 0x2d04 <__fp_round+0x18>
    2d00:	60 ff       	sbrs	r22, 0
    2d02:	04 c0       	rjmp	.+8      	; 0x2d0c <__fp_round+0x20>
    2d04:	6f 5f       	subi	r22, 0xFF	; 255
    2d06:	7f 4f       	sbci	r23, 0xFF	; 255
    2d08:	8f 4f       	sbci	r24, 0xFF	; 255
    2d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0c:	08 95       	ret

00002d0e <__fp_split3>:
    2d0e:	57 fd       	sbrc	r21, 7
    2d10:	90 58       	subi	r25, 0x80	; 128
    2d12:	44 0f       	add	r20, r20
    2d14:	55 1f       	adc	r21, r21
    2d16:	59 f0       	breq	.+22     	; 0x2d2e <__fp_splitA+0x10>
    2d18:	5f 3f       	cpi	r21, 0xFF	; 255
    2d1a:	71 f0       	breq	.+28     	; 0x2d38 <__fp_splitA+0x1a>
    2d1c:	47 95       	ror	r20

00002d1e <__fp_splitA>:
    2d1e:	88 0f       	add	r24, r24
    2d20:	97 fb       	bst	r25, 7
    2d22:	99 1f       	adc	r25, r25
    2d24:	61 f0       	breq	.+24     	; 0x2d3e <__fp_splitA+0x20>
    2d26:	9f 3f       	cpi	r25, 0xFF	; 255
    2d28:	79 f0       	breq	.+30     	; 0x2d48 <__fp_splitA+0x2a>
    2d2a:	87 95       	ror	r24
    2d2c:	08 95       	ret
    2d2e:	12 16       	cp	r1, r18
    2d30:	13 06       	cpc	r1, r19
    2d32:	14 06       	cpc	r1, r20
    2d34:	55 1f       	adc	r21, r21
    2d36:	f2 cf       	rjmp	.-28     	; 0x2d1c <__fp_split3+0xe>
    2d38:	46 95       	lsr	r20
    2d3a:	f1 df       	rcall	.-30     	; 0x2d1e <__fp_splitA>
    2d3c:	08 c0       	rjmp	.+16     	; 0x2d4e <__fp_splitA+0x30>
    2d3e:	16 16       	cp	r1, r22
    2d40:	17 06       	cpc	r1, r23
    2d42:	18 06       	cpc	r1, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	f1 cf       	rjmp	.-30     	; 0x2d2a <__fp_splitA+0xc>
    2d48:	86 95       	lsr	r24
    2d4a:	71 05       	cpc	r23, r1
    2d4c:	61 05       	cpc	r22, r1
    2d4e:	08 94       	sec
    2d50:	08 95       	ret

00002d52 <__fp_zero>:
    2d52:	e8 94       	clt

00002d54 <__fp_szero>:
    2d54:	bb 27       	eor	r27, r27
    2d56:	66 27       	eor	r22, r22
    2d58:	77 27       	eor	r23, r23
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	97 f9       	bld	r25, 7
    2d5e:	08 95       	ret

00002d60 <__gesf2>:
    2d60:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <__fp_cmp>
    2d64:	08 f4       	brcc	.+2      	; 0x2d68 <__gesf2+0x8>
    2d66:	8f ef       	ldi	r24, 0xFF	; 255
    2d68:	08 95       	ret

00002d6a <__mulsf3>:
    2d6a:	0e 94 c8 16 	call	0x2d90	; 0x2d90 <__mulsf3x>
    2d6e:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__fp_round>
    2d72:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__fp_pscA>
    2d76:	38 f0       	brcs	.+14     	; 0x2d86 <__mulsf3+0x1c>
    2d78:	0e 94 6f 16 	call	0x2cde	; 0x2cde <__fp_pscB>
    2d7c:	20 f0       	brcs	.+8      	; 0x2d86 <__mulsf3+0x1c>
    2d7e:	95 23       	and	r25, r21
    2d80:	11 f0       	breq	.+4      	; 0x2d86 <__mulsf3+0x1c>
    2d82:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__fp_inf>
    2d86:	0c 94 65 16 	jmp	0x2cca	; 0x2cca <__fp_nan>
    2d8a:	11 24       	eor	r1, r1
    2d8c:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__fp_szero>

00002d90 <__mulsf3x>:
    2d90:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__fp_split3>
    2d94:	70 f3       	brcs	.-36     	; 0x2d72 <__mulsf3+0x8>

00002d96 <__mulsf3_pse>:
    2d96:	95 9f       	mul	r25, r21
    2d98:	c1 f3       	breq	.-16     	; 0x2d8a <__mulsf3+0x20>
    2d9a:	95 0f       	add	r25, r21
    2d9c:	50 e0       	ldi	r21, 0x00	; 0
    2d9e:	55 1f       	adc	r21, r21
    2da0:	62 9f       	mul	r22, r18
    2da2:	f0 01       	movw	r30, r0
    2da4:	72 9f       	mul	r23, r18
    2da6:	bb 27       	eor	r27, r27
    2da8:	f0 0d       	add	r31, r0
    2daa:	b1 1d       	adc	r27, r1
    2dac:	63 9f       	mul	r22, r19
    2dae:	aa 27       	eor	r26, r26
    2db0:	f0 0d       	add	r31, r0
    2db2:	b1 1d       	adc	r27, r1
    2db4:	aa 1f       	adc	r26, r26
    2db6:	64 9f       	mul	r22, r20
    2db8:	66 27       	eor	r22, r22
    2dba:	b0 0d       	add	r27, r0
    2dbc:	a1 1d       	adc	r26, r1
    2dbe:	66 1f       	adc	r22, r22
    2dc0:	82 9f       	mul	r24, r18
    2dc2:	22 27       	eor	r18, r18
    2dc4:	b0 0d       	add	r27, r0
    2dc6:	a1 1d       	adc	r26, r1
    2dc8:	62 1f       	adc	r22, r18
    2dca:	73 9f       	mul	r23, r19
    2dcc:	b0 0d       	add	r27, r0
    2dce:	a1 1d       	adc	r26, r1
    2dd0:	62 1f       	adc	r22, r18
    2dd2:	83 9f       	mul	r24, r19
    2dd4:	a0 0d       	add	r26, r0
    2dd6:	61 1d       	adc	r22, r1
    2dd8:	22 1f       	adc	r18, r18
    2dda:	74 9f       	mul	r23, r20
    2ddc:	33 27       	eor	r19, r19
    2dde:	a0 0d       	add	r26, r0
    2de0:	61 1d       	adc	r22, r1
    2de2:	23 1f       	adc	r18, r19
    2de4:	84 9f       	mul	r24, r20
    2de6:	60 0d       	add	r22, r0
    2de8:	21 1d       	adc	r18, r1
    2dea:	82 2f       	mov	r24, r18
    2dec:	76 2f       	mov	r23, r22
    2dee:	6a 2f       	mov	r22, r26
    2df0:	11 24       	eor	r1, r1
    2df2:	9f 57       	subi	r25, 0x7F	; 127
    2df4:	50 40       	sbci	r21, 0x00	; 0
    2df6:	9a f0       	brmi	.+38     	; 0x2e1e <__mulsf3_pse+0x88>
    2df8:	f1 f0       	breq	.+60     	; 0x2e36 <__mulsf3_pse+0xa0>
    2dfa:	88 23       	and	r24, r24
    2dfc:	4a f0       	brmi	.+18     	; 0x2e10 <__mulsf3_pse+0x7a>
    2dfe:	ee 0f       	add	r30, r30
    2e00:	ff 1f       	adc	r31, r31
    2e02:	bb 1f       	adc	r27, r27
    2e04:	66 1f       	adc	r22, r22
    2e06:	77 1f       	adc	r23, r23
    2e08:	88 1f       	adc	r24, r24
    2e0a:	91 50       	subi	r25, 0x01	; 1
    2e0c:	50 40       	sbci	r21, 0x00	; 0
    2e0e:	a9 f7       	brne	.-22     	; 0x2dfa <__mulsf3_pse+0x64>
    2e10:	9e 3f       	cpi	r25, 0xFE	; 254
    2e12:	51 05       	cpc	r21, r1
    2e14:	80 f0       	brcs	.+32     	; 0x2e36 <__mulsf3_pse+0xa0>
    2e16:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <__fp_inf>
    2e1a:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__fp_szero>
    2e1e:	5f 3f       	cpi	r21, 0xFF	; 255
    2e20:	e4 f3       	brlt	.-8      	; 0x2e1a <__mulsf3_pse+0x84>
    2e22:	98 3e       	cpi	r25, 0xE8	; 232
    2e24:	d4 f3       	brlt	.-12     	; 0x2e1a <__mulsf3_pse+0x84>
    2e26:	86 95       	lsr	r24
    2e28:	77 95       	ror	r23
    2e2a:	67 95       	ror	r22
    2e2c:	b7 95       	ror	r27
    2e2e:	f7 95       	ror	r31
    2e30:	e7 95       	ror	r30
    2e32:	9f 5f       	subi	r25, 0xFF	; 255
    2e34:	c1 f7       	brne	.-16     	; 0x2e26 <__mulsf3_pse+0x90>
    2e36:	fe 2b       	or	r31, r30
    2e38:	88 0f       	add	r24, r24
    2e3a:	91 1d       	adc	r25, r1
    2e3c:	96 95       	lsr	r25
    2e3e:	87 95       	ror	r24
    2e40:	97 f9       	bld	r25, 7
    2e42:	08 95       	ret

00002e44 <round>:
    2e44:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__fp_splitA>
    2e48:	e8 f0       	brcs	.+58     	; 0x2e84 <round+0x40>
    2e4a:	9e 37       	cpi	r25, 0x7E	; 126
    2e4c:	e8 f0       	brcs	.+58     	; 0x2e88 <round+0x44>
    2e4e:	96 39       	cpi	r25, 0x96	; 150
    2e50:	b8 f4       	brcc	.+46     	; 0x2e80 <round+0x3c>
    2e52:	9e 38       	cpi	r25, 0x8E	; 142
    2e54:	48 f4       	brcc	.+18     	; 0x2e68 <round+0x24>
    2e56:	67 2f       	mov	r22, r23
    2e58:	78 2f       	mov	r23, r24
    2e5a:	88 27       	eor	r24, r24
    2e5c:	98 5f       	subi	r25, 0xF8	; 248
    2e5e:	f9 cf       	rjmp	.-14     	; 0x2e52 <round+0xe>
    2e60:	86 95       	lsr	r24
    2e62:	77 95       	ror	r23
    2e64:	67 95       	ror	r22
    2e66:	93 95       	inc	r25
    2e68:	95 39       	cpi	r25, 0x95	; 149
    2e6a:	d0 f3       	brcs	.-12     	; 0x2e60 <round+0x1c>
    2e6c:	b6 2f       	mov	r27, r22
    2e6e:	b1 70       	andi	r27, 0x01	; 1
    2e70:	6b 0f       	add	r22, r27
    2e72:	71 1d       	adc	r23, r1
    2e74:	81 1d       	adc	r24, r1
    2e76:	20 f4       	brcc	.+8      	; 0x2e80 <round+0x3c>
    2e78:	87 95       	ror	r24
    2e7a:	77 95       	ror	r23
    2e7c:	67 95       	ror	r22
    2e7e:	93 95       	inc	r25
    2e80:	0c 94 46 17 	jmp	0x2e8c	; 0x2e8c <__fp_mintl>
    2e84:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__fp_mpack>
    2e88:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__fp_szero>

00002e8c <__fp_mintl>:
    2e8c:	88 23       	and	r24, r24
    2e8e:	71 f4       	brne	.+28     	; 0x2eac <__fp_mintl+0x20>
    2e90:	77 23       	and	r23, r23
    2e92:	21 f0       	breq	.+8      	; 0x2e9c <__fp_mintl+0x10>
    2e94:	98 50       	subi	r25, 0x08	; 8
    2e96:	87 2b       	or	r24, r23
    2e98:	76 2f       	mov	r23, r22
    2e9a:	07 c0       	rjmp	.+14     	; 0x2eaa <__fp_mintl+0x1e>
    2e9c:	66 23       	and	r22, r22
    2e9e:	11 f4       	brne	.+4      	; 0x2ea4 <__fp_mintl+0x18>
    2ea0:	99 27       	eor	r25, r25
    2ea2:	0d c0       	rjmp	.+26     	; 0x2ebe <__fp_mintl+0x32>
    2ea4:	90 51       	subi	r25, 0x10	; 16
    2ea6:	86 2b       	or	r24, r22
    2ea8:	70 e0       	ldi	r23, 0x00	; 0
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	2a f0       	brmi	.+10     	; 0x2eb8 <__fp_mintl+0x2c>
    2eae:	9a 95       	dec	r25
    2eb0:	66 0f       	add	r22, r22
    2eb2:	77 1f       	adc	r23, r23
    2eb4:	88 1f       	adc	r24, r24
    2eb6:	da f7       	brpl	.-10     	; 0x2eae <__fp_mintl+0x22>
    2eb8:	88 0f       	add	r24, r24
    2eba:	96 95       	lsr	r25
    2ebc:	87 95       	ror	r24
    2ebe:	97 f9       	bld	r25, 7
    2ec0:	08 95       	ret

00002ec2 <__fp_mpack>:
    2ec2:	9f 3f       	cpi	r25, 0xFF	; 255
    2ec4:	31 f0       	breq	.+12     	; 0x2ed2 <__fp_mpack_finite+0xc>

00002ec6 <__fp_mpack_finite>:
    2ec6:	91 50       	subi	r25, 0x01	; 1
    2ec8:	20 f4       	brcc	.+8      	; 0x2ed2 <__fp_mpack_finite+0xc>
    2eca:	87 95       	ror	r24
    2ecc:	77 95       	ror	r23
    2ece:	67 95       	ror	r22
    2ed0:	b7 95       	ror	r27
    2ed2:	88 0f       	add	r24, r24
    2ed4:	91 1d       	adc	r25, r1
    2ed6:	96 95       	lsr	r25
    2ed8:	87 95       	ror	r24
    2eda:	97 f9       	bld	r25, 7
    2edc:	08 95       	ret

00002ede <__divmodhi4>:
    2ede:	97 fb       	bst	r25, 7
    2ee0:	07 2e       	mov	r0, r23
    2ee2:	16 f4       	brtc	.+4      	; 0x2ee8 <__divmodhi4+0xa>
    2ee4:	00 94       	com	r0
    2ee6:	07 d0       	rcall	.+14     	; 0x2ef6 <__divmodhi4_neg1>
    2ee8:	77 fd       	sbrc	r23, 7
    2eea:	09 d0       	rcall	.+18     	; 0x2efe <__divmodhi4_neg2>
    2eec:	0e 94 89 17 	call	0x2f12	; 0x2f12 <__udivmodhi4>
    2ef0:	07 fc       	sbrc	r0, 7
    2ef2:	05 d0       	rcall	.+10     	; 0x2efe <__divmodhi4_neg2>
    2ef4:	3e f4       	brtc	.+14     	; 0x2f04 <__divmodhi4_exit>

00002ef6 <__divmodhi4_neg1>:
    2ef6:	90 95       	com	r25
    2ef8:	81 95       	neg	r24
    2efa:	9f 4f       	sbci	r25, 0xFF	; 255
    2efc:	08 95       	ret

00002efe <__divmodhi4_neg2>:
    2efe:	70 95       	com	r23
    2f00:	61 95       	neg	r22
    2f02:	7f 4f       	sbci	r23, 0xFF	; 255

00002f04 <__divmodhi4_exit>:
    2f04:	08 95       	ret

00002f06 <__tablejump2__>:
    2f06:	ee 0f       	add	r30, r30
    2f08:	ff 1f       	adc	r31, r31
    2f0a:	05 90       	lpm	r0, Z+
    2f0c:	f4 91       	lpm	r31, Z
    2f0e:	e0 2d       	mov	r30, r0
    2f10:	09 94       	ijmp

00002f12 <__udivmodhi4>:
    2f12:	aa 1b       	sub	r26, r26
    2f14:	bb 1b       	sub	r27, r27
    2f16:	51 e1       	ldi	r21, 0x11	; 17
    2f18:	07 c0       	rjmp	.+14     	; 0x2f28 <__udivmodhi4_ep>

00002f1a <__udivmodhi4_loop>:
    2f1a:	aa 1f       	adc	r26, r26
    2f1c:	bb 1f       	adc	r27, r27
    2f1e:	a6 17       	cp	r26, r22
    2f20:	b7 07       	cpc	r27, r23
    2f22:	10 f0       	brcs	.+4      	; 0x2f28 <__udivmodhi4_ep>
    2f24:	a6 1b       	sub	r26, r22
    2f26:	b7 0b       	sbc	r27, r23

00002f28 <__udivmodhi4_ep>:
    2f28:	88 1f       	adc	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	5a 95       	dec	r21
    2f2e:	a9 f7       	brne	.-22     	; 0x2f1a <__udivmodhi4_loop>
    2f30:	80 95       	com	r24
    2f32:	90 95       	com	r25
    2f34:	bc 01       	movw	r22, r24
    2f36:	cd 01       	movw	r24, r26
    2f38:	08 95       	ret

00002f3a <itoa>:
    2f3a:	45 32       	cpi	r20, 0x25	; 37
    2f3c:	51 05       	cpc	r21, r1
    2f3e:	20 f4       	brcc	.+8      	; 0x2f48 <itoa+0xe>
    2f40:	42 30       	cpi	r20, 0x02	; 2
    2f42:	10 f0       	brcs	.+4      	; 0x2f48 <itoa+0xe>
    2f44:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <__itoa_ncheck>
    2f48:	fb 01       	movw	r30, r22
    2f4a:	10 82       	st	Z, r1
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	08 95       	ret

00002f50 <__itoa_ncheck>:
    2f50:	bb 27       	eor	r27, r27
    2f52:	4a 30       	cpi	r20, 0x0A	; 10
    2f54:	31 f4       	brne	.+12     	; 0x2f62 <__itoa_ncheck+0x12>
    2f56:	99 23       	and	r25, r25
    2f58:	22 f4       	brpl	.+8      	; 0x2f62 <__itoa_ncheck+0x12>
    2f5a:	bd e2       	ldi	r27, 0x2D	; 45
    2f5c:	90 95       	com	r25
    2f5e:	81 95       	neg	r24
    2f60:	9f 4f       	sbci	r25, 0xFF	; 255
    2f62:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <__utoa_common>

00002f66 <__utoa_ncheck>:
    2f66:	bb 27       	eor	r27, r27

00002f68 <__utoa_common>:
    2f68:	fb 01       	movw	r30, r22
    2f6a:	55 27       	eor	r21, r21
    2f6c:	aa 27       	eor	r26, r26
    2f6e:	88 0f       	add	r24, r24
    2f70:	99 1f       	adc	r25, r25
    2f72:	aa 1f       	adc	r26, r26
    2f74:	a4 17       	cp	r26, r20
    2f76:	10 f0       	brcs	.+4      	; 0x2f7c <__utoa_common+0x14>
    2f78:	a4 1b       	sub	r26, r20
    2f7a:	83 95       	inc	r24
    2f7c:	50 51       	subi	r21, 0x10	; 16
    2f7e:	b9 f7       	brne	.-18     	; 0x2f6e <__utoa_common+0x6>
    2f80:	a0 5d       	subi	r26, 0xD0	; 208
    2f82:	aa 33       	cpi	r26, 0x3A	; 58
    2f84:	08 f0       	brcs	.+2      	; 0x2f88 <__utoa_common+0x20>
    2f86:	a9 5d       	subi	r26, 0xD9	; 217
    2f88:	a1 93       	st	Z+, r26
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	79 f7       	brne	.-34     	; 0x2f6c <__utoa_common+0x4>
    2f8e:	b1 11       	cpse	r27, r1
    2f90:	b1 93       	st	Z+, r27
    2f92:	11 92       	st	Z+, r1
    2f94:	cb 01       	movw	r24, r22
    2f96:	0c 94 69 1b 	jmp	0x36d2	; 0x36d2 <strrev>

00002f9a <fdevopen>:
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	31 f4       	brne	.+12     	; 0x2fb2 <fdevopen+0x18>
    2fa6:	61 15       	cp	r22, r1
    2fa8:	71 05       	cpc	r23, r1
    2faa:	19 f4       	brne	.+6      	; 0x2fb2 <fdevopen+0x18>
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	3a c0       	rjmp	.+116    	; 0x3026 <fdevopen+0x8c>
    2fb2:	8b 01       	movw	r16, r22
    2fb4:	ec 01       	movw	r28, r24
    2fb6:	6e e0       	ldi	r22, 0x0E	; 14
    2fb8:	70 e0       	ldi	r23, 0x00	; 0
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	0e 94 0f 1a 	call	0x341e	; 0x341e <calloc>
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	89 2b       	or	r24, r25
    2fc6:	91 f3       	breq	.-28     	; 0x2fac <fdevopen+0x12>
    2fc8:	80 e8       	ldi	r24, 0x80	; 128
    2fca:	83 83       	std	Z+3, r24	; 0x03
    2fcc:	01 15       	cp	r16, r1
    2fce:	11 05       	cpc	r17, r1
    2fd0:	71 f0       	breq	.+28     	; 0x2fee <fdevopen+0x54>
    2fd2:	13 87       	std	Z+11, r17	; 0x0b
    2fd4:	02 87       	std	Z+10, r16	; 0x0a
    2fd6:	81 e8       	ldi	r24, 0x81	; 129
    2fd8:	83 83       	std	Z+3, r24	; 0x03
    2fda:	80 91 45 04 	lds	r24, 0x0445	; 0x800445 <__iob>
    2fde:	90 91 46 04 	lds	r25, 0x0446	; 0x800446 <__iob+0x1>
    2fe2:	89 2b       	or	r24, r25
    2fe4:	21 f4       	brne	.+8      	; 0x2fee <fdevopen+0x54>
    2fe6:	f0 93 46 04 	sts	0x0446, r31	; 0x800446 <__iob+0x1>
    2fea:	e0 93 45 04 	sts	0x0445, r30	; 0x800445 <__iob>
    2fee:	20 97       	sbiw	r28, 0x00	; 0
    2ff0:	c9 f0       	breq	.+50     	; 0x3024 <fdevopen+0x8a>
    2ff2:	d1 87       	std	Z+9, r29	; 0x09
    2ff4:	c0 87       	std	Z+8, r28	; 0x08
    2ff6:	83 81       	ldd	r24, Z+3	; 0x03
    2ff8:	82 60       	ori	r24, 0x02	; 2
    2ffa:	83 83       	std	Z+3, r24	; 0x03
    2ffc:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <__iob+0x2>
    3000:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <__iob+0x3>
    3004:	89 2b       	or	r24, r25
    3006:	71 f4       	brne	.+28     	; 0x3024 <fdevopen+0x8a>
    3008:	f0 93 48 04 	sts	0x0448, r31	; 0x800448 <__iob+0x3>
    300c:	e0 93 47 04 	sts	0x0447, r30	; 0x800447 <__iob+0x2>
    3010:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <__iob+0x4>
    3014:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <__iob+0x5>
    3018:	89 2b       	or	r24, r25
    301a:	21 f4       	brne	.+8      	; 0x3024 <fdevopen+0x8a>
    301c:	f0 93 4a 04 	sts	0x044A, r31	; 0x80044a <__iob+0x5>
    3020:	e0 93 49 04 	sts	0x0449, r30	; 0x800449 <__iob+0x4>
    3024:	cf 01       	movw	r24, r30
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	1f 91       	pop	r17
    302c:	0f 91       	pop	r16
    302e:	08 95       	ret

00003030 <printf>:
    3030:	a0 e0       	ldi	r26, 0x00	; 0
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	ee e1       	ldi	r30, 0x1E	; 30
    3036:	f8 e1       	ldi	r31, 0x18	; 24
    3038:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__prologue_saves__+0x20>
    303c:	ae 01       	movw	r20, r28
    303e:	4b 5f       	subi	r20, 0xFB	; 251
    3040:	5f 4f       	sbci	r21, 0xFF	; 255
    3042:	fa 01       	movw	r30, r20
    3044:	61 91       	ld	r22, Z+
    3046:	71 91       	ld	r23, Z+
    3048:	af 01       	movw	r20, r30
    304a:	80 91 47 04 	lds	r24, 0x0447	; 0x800447 <__iob+0x2>
    304e:	90 91 48 04 	lds	r25, 0x0448	; 0x800448 <__iob+0x3>
    3052:	0e 94 2e 18 	call	0x305c	; 0x305c <vfprintf>
    3056:	e2 e0       	ldi	r30, 0x02	; 2
    3058:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__epilogue_restores__+0x20>

0000305c <vfprintf>:
    305c:	ab e0       	ldi	r26, 0x0B	; 11
    305e:	b0 e0       	ldi	r27, 0x00	; 0
    3060:	e4 e3       	ldi	r30, 0x34	; 52
    3062:	f8 e1       	ldi	r31, 0x18	; 24
    3064:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <__prologue_saves__>
    3068:	6c 01       	movw	r12, r24
    306a:	7b 01       	movw	r14, r22
    306c:	8a 01       	movw	r16, r20
    306e:	fc 01       	movw	r30, r24
    3070:	17 82       	std	Z+7, r1	; 0x07
    3072:	16 82       	std	Z+6, r1	; 0x06
    3074:	83 81       	ldd	r24, Z+3	; 0x03
    3076:	81 ff       	sbrs	r24, 1
    3078:	cc c1       	rjmp	.+920    	; 0x3412 <vfprintf+0x3b6>
    307a:	ce 01       	movw	r24, r28
    307c:	01 96       	adiw	r24, 0x01	; 1
    307e:	3c 01       	movw	r6, r24
    3080:	f6 01       	movw	r30, r12
    3082:	93 81       	ldd	r25, Z+3	; 0x03
    3084:	f7 01       	movw	r30, r14
    3086:	93 fd       	sbrc	r25, 3
    3088:	85 91       	lpm	r24, Z+
    308a:	93 ff       	sbrs	r25, 3
    308c:	81 91       	ld	r24, Z+
    308e:	7f 01       	movw	r14, r30
    3090:	88 23       	and	r24, r24
    3092:	09 f4       	brne	.+2      	; 0x3096 <vfprintf+0x3a>
    3094:	ba c1       	rjmp	.+884    	; 0x340a <vfprintf+0x3ae>
    3096:	85 32       	cpi	r24, 0x25	; 37
    3098:	39 f4       	brne	.+14     	; 0x30a8 <vfprintf+0x4c>
    309a:	93 fd       	sbrc	r25, 3
    309c:	85 91       	lpm	r24, Z+
    309e:	93 ff       	sbrs	r25, 3
    30a0:	81 91       	ld	r24, Z+
    30a2:	7f 01       	movw	r14, r30
    30a4:	85 32       	cpi	r24, 0x25	; 37
    30a6:	29 f4       	brne	.+10     	; 0x30b2 <vfprintf+0x56>
    30a8:	b6 01       	movw	r22, r12
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fputc>
    30b0:	e7 cf       	rjmp	.-50     	; 0x3080 <vfprintf+0x24>
    30b2:	91 2c       	mov	r9, r1
    30b4:	21 2c       	mov	r2, r1
    30b6:	31 2c       	mov	r3, r1
    30b8:	ff e1       	ldi	r31, 0x1F	; 31
    30ba:	f3 15       	cp	r31, r3
    30bc:	d8 f0       	brcs	.+54     	; 0x30f4 <vfprintf+0x98>
    30be:	8b 32       	cpi	r24, 0x2B	; 43
    30c0:	79 f0       	breq	.+30     	; 0x30e0 <vfprintf+0x84>
    30c2:	38 f4       	brcc	.+14     	; 0x30d2 <vfprintf+0x76>
    30c4:	80 32       	cpi	r24, 0x20	; 32
    30c6:	79 f0       	breq	.+30     	; 0x30e6 <vfprintf+0x8a>
    30c8:	83 32       	cpi	r24, 0x23	; 35
    30ca:	a1 f4       	brne	.+40     	; 0x30f4 <vfprintf+0x98>
    30cc:	23 2d       	mov	r18, r3
    30ce:	20 61       	ori	r18, 0x10	; 16
    30d0:	1d c0       	rjmp	.+58     	; 0x310c <vfprintf+0xb0>
    30d2:	8d 32       	cpi	r24, 0x2D	; 45
    30d4:	61 f0       	breq	.+24     	; 0x30ee <vfprintf+0x92>
    30d6:	80 33       	cpi	r24, 0x30	; 48
    30d8:	69 f4       	brne	.+26     	; 0x30f4 <vfprintf+0x98>
    30da:	23 2d       	mov	r18, r3
    30dc:	21 60       	ori	r18, 0x01	; 1
    30de:	16 c0       	rjmp	.+44     	; 0x310c <vfprintf+0xb0>
    30e0:	83 2d       	mov	r24, r3
    30e2:	82 60       	ori	r24, 0x02	; 2
    30e4:	38 2e       	mov	r3, r24
    30e6:	e3 2d       	mov	r30, r3
    30e8:	e4 60       	ori	r30, 0x04	; 4
    30ea:	3e 2e       	mov	r3, r30
    30ec:	2a c0       	rjmp	.+84     	; 0x3142 <vfprintf+0xe6>
    30ee:	f3 2d       	mov	r31, r3
    30f0:	f8 60       	ori	r31, 0x08	; 8
    30f2:	1d c0       	rjmp	.+58     	; 0x312e <vfprintf+0xd2>
    30f4:	37 fc       	sbrc	r3, 7
    30f6:	2d c0       	rjmp	.+90     	; 0x3152 <vfprintf+0xf6>
    30f8:	20 ed       	ldi	r18, 0xD0	; 208
    30fa:	28 0f       	add	r18, r24
    30fc:	2a 30       	cpi	r18, 0x0A	; 10
    30fe:	40 f0       	brcs	.+16     	; 0x3110 <vfprintf+0xb4>
    3100:	8e 32       	cpi	r24, 0x2E	; 46
    3102:	b9 f4       	brne	.+46     	; 0x3132 <vfprintf+0xd6>
    3104:	36 fc       	sbrc	r3, 6
    3106:	81 c1       	rjmp	.+770    	; 0x340a <vfprintf+0x3ae>
    3108:	23 2d       	mov	r18, r3
    310a:	20 64       	ori	r18, 0x40	; 64
    310c:	32 2e       	mov	r3, r18
    310e:	19 c0       	rjmp	.+50     	; 0x3142 <vfprintf+0xe6>
    3110:	36 fe       	sbrs	r3, 6
    3112:	06 c0       	rjmp	.+12     	; 0x3120 <vfprintf+0xc4>
    3114:	8a e0       	ldi	r24, 0x0A	; 10
    3116:	98 9e       	mul	r9, r24
    3118:	20 0d       	add	r18, r0
    311a:	11 24       	eor	r1, r1
    311c:	92 2e       	mov	r9, r18
    311e:	11 c0       	rjmp	.+34     	; 0x3142 <vfprintf+0xe6>
    3120:	ea e0       	ldi	r30, 0x0A	; 10
    3122:	2e 9e       	mul	r2, r30
    3124:	20 0d       	add	r18, r0
    3126:	11 24       	eor	r1, r1
    3128:	22 2e       	mov	r2, r18
    312a:	f3 2d       	mov	r31, r3
    312c:	f0 62       	ori	r31, 0x20	; 32
    312e:	3f 2e       	mov	r3, r31
    3130:	08 c0       	rjmp	.+16     	; 0x3142 <vfprintf+0xe6>
    3132:	8c 36       	cpi	r24, 0x6C	; 108
    3134:	21 f4       	brne	.+8      	; 0x313e <vfprintf+0xe2>
    3136:	83 2d       	mov	r24, r3
    3138:	80 68       	ori	r24, 0x80	; 128
    313a:	38 2e       	mov	r3, r24
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <vfprintf+0xe6>
    313e:	88 36       	cpi	r24, 0x68	; 104
    3140:	41 f4       	brne	.+16     	; 0x3152 <vfprintf+0xf6>
    3142:	f7 01       	movw	r30, r14
    3144:	93 fd       	sbrc	r25, 3
    3146:	85 91       	lpm	r24, Z+
    3148:	93 ff       	sbrs	r25, 3
    314a:	81 91       	ld	r24, Z+
    314c:	7f 01       	movw	r14, r30
    314e:	81 11       	cpse	r24, r1
    3150:	b3 cf       	rjmp	.-154    	; 0x30b8 <vfprintf+0x5c>
    3152:	98 2f       	mov	r25, r24
    3154:	9f 7d       	andi	r25, 0xDF	; 223
    3156:	95 54       	subi	r25, 0x45	; 69
    3158:	93 30       	cpi	r25, 0x03	; 3
    315a:	28 f4       	brcc	.+10     	; 0x3166 <vfprintf+0x10a>
    315c:	0c 5f       	subi	r16, 0xFC	; 252
    315e:	1f 4f       	sbci	r17, 0xFF	; 255
    3160:	9f e3       	ldi	r25, 0x3F	; 63
    3162:	99 83       	std	Y+1, r25	; 0x01
    3164:	0d c0       	rjmp	.+26     	; 0x3180 <vfprintf+0x124>
    3166:	83 36       	cpi	r24, 0x63	; 99
    3168:	31 f0       	breq	.+12     	; 0x3176 <vfprintf+0x11a>
    316a:	83 37       	cpi	r24, 0x73	; 115
    316c:	71 f0       	breq	.+28     	; 0x318a <vfprintf+0x12e>
    316e:	83 35       	cpi	r24, 0x53	; 83
    3170:	09 f0       	breq	.+2      	; 0x3174 <vfprintf+0x118>
    3172:	59 c0       	rjmp	.+178    	; 0x3226 <vfprintf+0x1ca>
    3174:	21 c0       	rjmp	.+66     	; 0x31b8 <vfprintf+0x15c>
    3176:	f8 01       	movw	r30, r16
    3178:	80 81       	ld	r24, Z
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	0e 5f       	subi	r16, 0xFE	; 254
    317e:	1f 4f       	sbci	r17, 0xFF	; 255
    3180:	88 24       	eor	r8, r8
    3182:	83 94       	inc	r8
    3184:	91 2c       	mov	r9, r1
    3186:	53 01       	movw	r10, r6
    3188:	13 c0       	rjmp	.+38     	; 0x31b0 <vfprintf+0x154>
    318a:	28 01       	movw	r4, r16
    318c:	f2 e0       	ldi	r31, 0x02	; 2
    318e:	4f 0e       	add	r4, r31
    3190:	51 1c       	adc	r5, r1
    3192:	f8 01       	movw	r30, r16
    3194:	a0 80       	ld	r10, Z
    3196:	b1 80       	ldd	r11, Z+1	; 0x01
    3198:	36 fe       	sbrs	r3, 6
    319a:	03 c0       	rjmp	.+6      	; 0x31a2 <vfprintf+0x146>
    319c:	69 2d       	mov	r22, r9
    319e:	70 e0       	ldi	r23, 0x00	; 0
    31a0:	02 c0       	rjmp	.+4      	; 0x31a6 <vfprintf+0x14a>
    31a2:	6f ef       	ldi	r22, 0xFF	; 255
    31a4:	7f ef       	ldi	r23, 0xFF	; 255
    31a6:	c5 01       	movw	r24, r10
    31a8:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <strnlen>
    31ac:	4c 01       	movw	r8, r24
    31ae:	82 01       	movw	r16, r4
    31b0:	f3 2d       	mov	r31, r3
    31b2:	ff 77       	andi	r31, 0x7F	; 127
    31b4:	3f 2e       	mov	r3, r31
    31b6:	16 c0       	rjmp	.+44     	; 0x31e4 <vfprintf+0x188>
    31b8:	28 01       	movw	r4, r16
    31ba:	22 e0       	ldi	r18, 0x02	; 2
    31bc:	42 0e       	add	r4, r18
    31be:	51 1c       	adc	r5, r1
    31c0:	f8 01       	movw	r30, r16
    31c2:	a0 80       	ld	r10, Z
    31c4:	b1 80       	ldd	r11, Z+1	; 0x01
    31c6:	36 fe       	sbrs	r3, 6
    31c8:	03 c0       	rjmp	.+6      	; 0x31d0 <vfprintf+0x174>
    31ca:	69 2d       	mov	r22, r9
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	02 c0       	rjmp	.+4      	; 0x31d4 <vfprintf+0x178>
    31d0:	6f ef       	ldi	r22, 0xFF	; 255
    31d2:	7f ef       	ldi	r23, 0xFF	; 255
    31d4:	c5 01       	movw	r24, r10
    31d6:	0e 94 4c 1b 	call	0x3698	; 0x3698 <strnlen_P>
    31da:	4c 01       	movw	r8, r24
    31dc:	f3 2d       	mov	r31, r3
    31de:	f0 68       	ori	r31, 0x80	; 128
    31e0:	3f 2e       	mov	r3, r31
    31e2:	82 01       	movw	r16, r4
    31e4:	33 fc       	sbrc	r3, 3
    31e6:	1b c0       	rjmp	.+54     	; 0x321e <vfprintf+0x1c2>
    31e8:	82 2d       	mov	r24, r2
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	88 16       	cp	r8, r24
    31ee:	99 06       	cpc	r9, r25
    31f0:	b0 f4       	brcc	.+44     	; 0x321e <vfprintf+0x1c2>
    31f2:	b6 01       	movw	r22, r12
    31f4:	80 e2       	ldi	r24, 0x20	; 32
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fputc>
    31fc:	2a 94       	dec	r2
    31fe:	f4 cf       	rjmp	.-24     	; 0x31e8 <vfprintf+0x18c>
    3200:	f5 01       	movw	r30, r10
    3202:	37 fc       	sbrc	r3, 7
    3204:	85 91       	lpm	r24, Z+
    3206:	37 fe       	sbrs	r3, 7
    3208:	81 91       	ld	r24, Z+
    320a:	5f 01       	movw	r10, r30
    320c:	b6 01       	movw	r22, r12
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fputc>
    3214:	21 10       	cpse	r2, r1
    3216:	2a 94       	dec	r2
    3218:	21 e0       	ldi	r18, 0x01	; 1
    321a:	82 1a       	sub	r8, r18
    321c:	91 08       	sbc	r9, r1
    321e:	81 14       	cp	r8, r1
    3220:	91 04       	cpc	r9, r1
    3222:	71 f7       	brne	.-36     	; 0x3200 <vfprintf+0x1a4>
    3224:	e8 c0       	rjmp	.+464    	; 0x33f6 <vfprintf+0x39a>
    3226:	84 36       	cpi	r24, 0x64	; 100
    3228:	11 f0       	breq	.+4      	; 0x322e <vfprintf+0x1d2>
    322a:	89 36       	cpi	r24, 0x69	; 105
    322c:	41 f5       	brne	.+80     	; 0x327e <vfprintf+0x222>
    322e:	f8 01       	movw	r30, r16
    3230:	37 fe       	sbrs	r3, 7
    3232:	07 c0       	rjmp	.+14     	; 0x3242 <vfprintf+0x1e6>
    3234:	60 81       	ld	r22, Z
    3236:	71 81       	ldd	r23, Z+1	; 0x01
    3238:	82 81       	ldd	r24, Z+2	; 0x02
    323a:	93 81       	ldd	r25, Z+3	; 0x03
    323c:	0c 5f       	subi	r16, 0xFC	; 252
    323e:	1f 4f       	sbci	r17, 0xFF	; 255
    3240:	08 c0       	rjmp	.+16     	; 0x3252 <vfprintf+0x1f6>
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	07 2e       	mov	r0, r23
    3248:	00 0c       	add	r0, r0
    324a:	88 0b       	sbc	r24, r24
    324c:	99 0b       	sbc	r25, r25
    324e:	0e 5f       	subi	r16, 0xFE	; 254
    3250:	1f 4f       	sbci	r17, 0xFF	; 255
    3252:	f3 2d       	mov	r31, r3
    3254:	ff 76       	andi	r31, 0x6F	; 111
    3256:	3f 2e       	mov	r3, r31
    3258:	97 ff       	sbrs	r25, 7
    325a:	09 c0       	rjmp	.+18     	; 0x326e <vfprintf+0x212>
    325c:	90 95       	com	r25
    325e:	80 95       	com	r24
    3260:	70 95       	com	r23
    3262:	61 95       	neg	r22
    3264:	7f 4f       	sbci	r23, 0xFF	; 255
    3266:	8f 4f       	sbci	r24, 0xFF	; 255
    3268:	9f 4f       	sbci	r25, 0xFF	; 255
    326a:	f0 68       	ori	r31, 0x80	; 128
    326c:	3f 2e       	mov	r3, r31
    326e:	2a e0       	ldi	r18, 0x0A	; 10
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	a3 01       	movw	r20, r6
    3274:	0e 94 b5 1b 	call	0x376a	; 0x376a <__ultoa_invert>
    3278:	88 2e       	mov	r8, r24
    327a:	86 18       	sub	r8, r6
    327c:	45 c0       	rjmp	.+138    	; 0x3308 <vfprintf+0x2ac>
    327e:	85 37       	cpi	r24, 0x75	; 117
    3280:	31 f4       	brne	.+12     	; 0x328e <vfprintf+0x232>
    3282:	23 2d       	mov	r18, r3
    3284:	2f 7e       	andi	r18, 0xEF	; 239
    3286:	b2 2e       	mov	r11, r18
    3288:	2a e0       	ldi	r18, 0x0A	; 10
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	25 c0       	rjmp	.+74     	; 0x32d8 <vfprintf+0x27c>
    328e:	93 2d       	mov	r25, r3
    3290:	99 7f       	andi	r25, 0xF9	; 249
    3292:	b9 2e       	mov	r11, r25
    3294:	8f 36       	cpi	r24, 0x6F	; 111
    3296:	c1 f0       	breq	.+48     	; 0x32c8 <vfprintf+0x26c>
    3298:	18 f4       	brcc	.+6      	; 0x32a0 <vfprintf+0x244>
    329a:	88 35       	cpi	r24, 0x58	; 88
    329c:	79 f0       	breq	.+30     	; 0x32bc <vfprintf+0x260>
    329e:	b5 c0       	rjmp	.+362    	; 0x340a <vfprintf+0x3ae>
    32a0:	80 37       	cpi	r24, 0x70	; 112
    32a2:	19 f0       	breq	.+6      	; 0x32aa <vfprintf+0x24e>
    32a4:	88 37       	cpi	r24, 0x78	; 120
    32a6:	21 f0       	breq	.+8      	; 0x32b0 <vfprintf+0x254>
    32a8:	b0 c0       	rjmp	.+352    	; 0x340a <vfprintf+0x3ae>
    32aa:	e9 2f       	mov	r30, r25
    32ac:	e0 61       	ori	r30, 0x10	; 16
    32ae:	be 2e       	mov	r11, r30
    32b0:	b4 fe       	sbrs	r11, 4
    32b2:	0d c0       	rjmp	.+26     	; 0x32ce <vfprintf+0x272>
    32b4:	fb 2d       	mov	r31, r11
    32b6:	f4 60       	ori	r31, 0x04	; 4
    32b8:	bf 2e       	mov	r11, r31
    32ba:	09 c0       	rjmp	.+18     	; 0x32ce <vfprintf+0x272>
    32bc:	34 fe       	sbrs	r3, 4
    32be:	0a c0       	rjmp	.+20     	; 0x32d4 <vfprintf+0x278>
    32c0:	29 2f       	mov	r18, r25
    32c2:	26 60       	ori	r18, 0x06	; 6
    32c4:	b2 2e       	mov	r11, r18
    32c6:	06 c0       	rjmp	.+12     	; 0x32d4 <vfprintf+0x278>
    32c8:	28 e0       	ldi	r18, 0x08	; 8
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	05 c0       	rjmp	.+10     	; 0x32d8 <vfprintf+0x27c>
    32ce:	20 e1       	ldi	r18, 0x10	; 16
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	02 c0       	rjmp	.+4      	; 0x32d8 <vfprintf+0x27c>
    32d4:	20 e1       	ldi	r18, 0x10	; 16
    32d6:	32 e0       	ldi	r19, 0x02	; 2
    32d8:	f8 01       	movw	r30, r16
    32da:	b7 fe       	sbrs	r11, 7
    32dc:	07 c0       	rjmp	.+14     	; 0x32ec <vfprintf+0x290>
    32de:	60 81       	ld	r22, Z
    32e0:	71 81       	ldd	r23, Z+1	; 0x01
    32e2:	82 81       	ldd	r24, Z+2	; 0x02
    32e4:	93 81       	ldd	r25, Z+3	; 0x03
    32e6:	0c 5f       	subi	r16, 0xFC	; 252
    32e8:	1f 4f       	sbci	r17, 0xFF	; 255
    32ea:	06 c0       	rjmp	.+12     	; 0x32f8 <vfprintf+0x29c>
    32ec:	60 81       	ld	r22, Z
    32ee:	71 81       	ldd	r23, Z+1	; 0x01
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	90 e0       	ldi	r25, 0x00	; 0
    32f4:	0e 5f       	subi	r16, 0xFE	; 254
    32f6:	1f 4f       	sbci	r17, 0xFF	; 255
    32f8:	a3 01       	movw	r20, r6
    32fa:	0e 94 b5 1b 	call	0x376a	; 0x376a <__ultoa_invert>
    32fe:	88 2e       	mov	r8, r24
    3300:	86 18       	sub	r8, r6
    3302:	fb 2d       	mov	r31, r11
    3304:	ff 77       	andi	r31, 0x7F	; 127
    3306:	3f 2e       	mov	r3, r31
    3308:	36 fe       	sbrs	r3, 6
    330a:	0d c0       	rjmp	.+26     	; 0x3326 <vfprintf+0x2ca>
    330c:	23 2d       	mov	r18, r3
    330e:	2e 7f       	andi	r18, 0xFE	; 254
    3310:	a2 2e       	mov	r10, r18
    3312:	89 14       	cp	r8, r9
    3314:	58 f4       	brcc	.+22     	; 0x332c <vfprintf+0x2d0>
    3316:	34 fe       	sbrs	r3, 4
    3318:	0b c0       	rjmp	.+22     	; 0x3330 <vfprintf+0x2d4>
    331a:	32 fc       	sbrc	r3, 2
    331c:	09 c0       	rjmp	.+18     	; 0x3330 <vfprintf+0x2d4>
    331e:	83 2d       	mov	r24, r3
    3320:	8e 7e       	andi	r24, 0xEE	; 238
    3322:	a8 2e       	mov	r10, r24
    3324:	05 c0       	rjmp	.+10     	; 0x3330 <vfprintf+0x2d4>
    3326:	b8 2c       	mov	r11, r8
    3328:	a3 2c       	mov	r10, r3
    332a:	03 c0       	rjmp	.+6      	; 0x3332 <vfprintf+0x2d6>
    332c:	b8 2c       	mov	r11, r8
    332e:	01 c0       	rjmp	.+2      	; 0x3332 <vfprintf+0x2d6>
    3330:	b9 2c       	mov	r11, r9
    3332:	a4 fe       	sbrs	r10, 4
    3334:	0f c0       	rjmp	.+30     	; 0x3354 <vfprintf+0x2f8>
    3336:	fe 01       	movw	r30, r28
    3338:	e8 0d       	add	r30, r8
    333a:	f1 1d       	adc	r31, r1
    333c:	80 81       	ld	r24, Z
    333e:	80 33       	cpi	r24, 0x30	; 48
    3340:	21 f4       	brne	.+8      	; 0x334a <vfprintf+0x2ee>
    3342:	9a 2d       	mov	r25, r10
    3344:	99 7e       	andi	r25, 0xE9	; 233
    3346:	a9 2e       	mov	r10, r25
    3348:	09 c0       	rjmp	.+18     	; 0x335c <vfprintf+0x300>
    334a:	a2 fe       	sbrs	r10, 2
    334c:	06 c0       	rjmp	.+12     	; 0x335a <vfprintf+0x2fe>
    334e:	b3 94       	inc	r11
    3350:	b3 94       	inc	r11
    3352:	04 c0       	rjmp	.+8      	; 0x335c <vfprintf+0x300>
    3354:	8a 2d       	mov	r24, r10
    3356:	86 78       	andi	r24, 0x86	; 134
    3358:	09 f0       	breq	.+2      	; 0x335c <vfprintf+0x300>
    335a:	b3 94       	inc	r11
    335c:	a3 fc       	sbrc	r10, 3
    335e:	11 c0       	rjmp	.+34     	; 0x3382 <vfprintf+0x326>
    3360:	a0 fe       	sbrs	r10, 0
    3362:	06 c0       	rjmp	.+12     	; 0x3370 <vfprintf+0x314>
    3364:	b2 14       	cp	r11, r2
    3366:	88 f4       	brcc	.+34     	; 0x338a <vfprintf+0x32e>
    3368:	28 0c       	add	r2, r8
    336a:	92 2c       	mov	r9, r2
    336c:	9b 18       	sub	r9, r11
    336e:	0e c0       	rjmp	.+28     	; 0x338c <vfprintf+0x330>
    3370:	b2 14       	cp	r11, r2
    3372:	60 f4       	brcc	.+24     	; 0x338c <vfprintf+0x330>
    3374:	b6 01       	movw	r22, r12
    3376:	80 e2       	ldi	r24, 0x20	; 32
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fputc>
    337e:	b3 94       	inc	r11
    3380:	f7 cf       	rjmp	.-18     	; 0x3370 <vfprintf+0x314>
    3382:	b2 14       	cp	r11, r2
    3384:	18 f4       	brcc	.+6      	; 0x338c <vfprintf+0x330>
    3386:	2b 18       	sub	r2, r11
    3388:	02 c0       	rjmp	.+4      	; 0x338e <vfprintf+0x332>
    338a:	98 2c       	mov	r9, r8
    338c:	21 2c       	mov	r2, r1
    338e:	a4 fe       	sbrs	r10, 4
    3390:	10 c0       	rjmp	.+32     	; 0x33b2 <vfprintf+0x356>
    3392:	b6 01       	movw	r22, r12
    3394:	80 e3       	ldi	r24, 0x30	; 48
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fputc>
    339c:	a2 fe       	sbrs	r10, 2
    339e:	17 c0       	rjmp	.+46     	; 0x33ce <vfprintf+0x372>
    33a0:	a1 fc       	sbrc	r10, 1
    33a2:	03 c0       	rjmp	.+6      	; 0x33aa <vfprintf+0x34e>
    33a4:	88 e7       	ldi	r24, 0x78	; 120
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <vfprintf+0x352>
    33aa:	88 e5       	ldi	r24, 0x58	; 88
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	b6 01       	movw	r22, r12
    33b0:	0c c0       	rjmp	.+24     	; 0x33ca <vfprintf+0x36e>
    33b2:	8a 2d       	mov	r24, r10
    33b4:	86 78       	andi	r24, 0x86	; 134
    33b6:	59 f0       	breq	.+22     	; 0x33ce <vfprintf+0x372>
    33b8:	a1 fe       	sbrs	r10, 1
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <vfprintf+0x364>
    33bc:	8b e2       	ldi	r24, 0x2B	; 43
    33be:	01 c0       	rjmp	.+2      	; 0x33c2 <vfprintf+0x366>
    33c0:	80 e2       	ldi	r24, 0x20	; 32
    33c2:	a7 fc       	sbrc	r10, 7
    33c4:	8d e2       	ldi	r24, 0x2D	; 45
    33c6:	b6 01       	movw	r22, r12
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fputc>
    33ce:	89 14       	cp	r8, r9
    33d0:	38 f4       	brcc	.+14     	; 0x33e0 <vfprintf+0x384>
    33d2:	b6 01       	movw	r22, r12
    33d4:	80 e3       	ldi	r24, 0x30	; 48
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fputc>
    33dc:	9a 94       	dec	r9
    33de:	f7 cf       	rjmp	.-18     	; 0x33ce <vfprintf+0x372>
    33e0:	8a 94       	dec	r8
    33e2:	f3 01       	movw	r30, r6
    33e4:	e8 0d       	add	r30, r8
    33e6:	f1 1d       	adc	r31, r1
    33e8:	80 81       	ld	r24, Z
    33ea:	b6 01       	movw	r22, r12
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fputc>
    33f2:	81 10       	cpse	r8, r1
    33f4:	f5 cf       	rjmp	.-22     	; 0x33e0 <vfprintf+0x384>
    33f6:	22 20       	and	r2, r2
    33f8:	09 f4       	brne	.+2      	; 0x33fc <vfprintf+0x3a0>
    33fa:	42 ce       	rjmp	.-892    	; 0x3080 <vfprintf+0x24>
    33fc:	b6 01       	movw	r22, r12
    33fe:	80 e2       	ldi	r24, 0x20	; 32
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <fputc>
    3406:	2a 94       	dec	r2
    3408:	f6 cf       	rjmp	.-20     	; 0x33f6 <vfprintf+0x39a>
    340a:	f6 01       	movw	r30, r12
    340c:	86 81       	ldd	r24, Z+6	; 0x06
    340e:	97 81       	ldd	r25, Z+7	; 0x07
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <vfprintf+0x3ba>
    3412:	8f ef       	ldi	r24, 0xFF	; 255
    3414:	9f ef       	ldi	r25, 0xFF	; 255
    3416:	2b 96       	adiw	r28, 0x0b	; 11
    3418:	e2 e1       	ldi	r30, 0x12	; 18
    341a:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__epilogue_restores__>

0000341e <calloc>:
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	86 9f       	mul	r24, r22
    3428:	80 01       	movw	r16, r0
    342a:	87 9f       	mul	r24, r23
    342c:	10 0d       	add	r17, r0
    342e:	96 9f       	mul	r25, r22
    3430:	10 0d       	add	r17, r0
    3432:	11 24       	eor	r1, r1
    3434:	c8 01       	movw	r24, r16
    3436:	0e 94 2b 1a 	call	0x3456	; 0x3456 <malloc>
    343a:	ec 01       	movw	r28, r24
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	29 f0       	breq	.+10     	; 0x344a <calloc+0x2c>
    3440:	a8 01       	movw	r20, r16
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	70 e0       	ldi	r23, 0x00	; 0
    3446:	0e 94 57 1b 	call	0x36ae	; 0x36ae <memset>
    344a:	ce 01       	movw	r24, r28
    344c:	df 91       	pop	r29
    344e:	cf 91       	pop	r28
    3450:	1f 91       	pop	r17
    3452:	0f 91       	pop	r16
    3454:	08 95       	ret

00003456 <malloc>:
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	82 30       	cpi	r24, 0x02	; 2
    3460:	91 05       	cpc	r25, r1
    3462:	10 f4       	brcc	.+4      	; 0x3468 <malloc+0x12>
    3464:	82 e0       	ldi	r24, 0x02	; 2
    3466:	90 e0       	ldi	r25, 0x00	; 0
    3468:	e0 91 4d 04 	lds	r30, 0x044D	; 0x80044d <__flp>
    346c:	f0 91 4e 04 	lds	r31, 0x044E	; 0x80044e <__flp+0x1>
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	a0 e0       	ldi	r26, 0x00	; 0
    3476:	b0 e0       	ldi	r27, 0x00	; 0
    3478:	30 97       	sbiw	r30, 0x00	; 0
    347a:	19 f1       	breq	.+70     	; 0x34c2 <malloc+0x6c>
    347c:	40 81       	ld	r20, Z
    347e:	51 81       	ldd	r21, Z+1	; 0x01
    3480:	02 81       	ldd	r16, Z+2	; 0x02
    3482:	13 81       	ldd	r17, Z+3	; 0x03
    3484:	48 17       	cp	r20, r24
    3486:	59 07       	cpc	r21, r25
    3488:	c8 f0       	brcs	.+50     	; 0x34bc <malloc+0x66>
    348a:	84 17       	cp	r24, r20
    348c:	95 07       	cpc	r25, r21
    348e:	69 f4       	brne	.+26     	; 0x34aa <malloc+0x54>
    3490:	10 97       	sbiw	r26, 0x00	; 0
    3492:	31 f0       	breq	.+12     	; 0x34a0 <malloc+0x4a>
    3494:	12 96       	adiw	r26, 0x02	; 2
    3496:	0c 93       	st	X, r16
    3498:	12 97       	sbiw	r26, 0x02	; 2
    349a:	13 96       	adiw	r26, 0x03	; 3
    349c:	1c 93       	st	X, r17
    349e:	27 c0       	rjmp	.+78     	; 0x34ee <malloc+0x98>
    34a0:	00 93 4d 04 	sts	0x044D, r16	; 0x80044d <__flp>
    34a4:	10 93 4e 04 	sts	0x044E, r17	; 0x80044e <__flp+0x1>
    34a8:	22 c0       	rjmp	.+68     	; 0x34ee <malloc+0x98>
    34aa:	21 15       	cp	r18, r1
    34ac:	31 05       	cpc	r19, r1
    34ae:	19 f0       	breq	.+6      	; 0x34b6 <malloc+0x60>
    34b0:	42 17       	cp	r20, r18
    34b2:	53 07       	cpc	r21, r19
    34b4:	18 f4       	brcc	.+6      	; 0x34bc <malloc+0x66>
    34b6:	9a 01       	movw	r18, r20
    34b8:	bd 01       	movw	r22, r26
    34ba:	ef 01       	movw	r28, r30
    34bc:	df 01       	movw	r26, r30
    34be:	f8 01       	movw	r30, r16
    34c0:	db cf       	rjmp	.-74     	; 0x3478 <malloc+0x22>
    34c2:	21 15       	cp	r18, r1
    34c4:	31 05       	cpc	r19, r1
    34c6:	f9 f0       	breq	.+62     	; 0x3506 <malloc+0xb0>
    34c8:	28 1b       	sub	r18, r24
    34ca:	39 0b       	sbc	r19, r25
    34cc:	24 30       	cpi	r18, 0x04	; 4
    34ce:	31 05       	cpc	r19, r1
    34d0:	80 f4       	brcc	.+32     	; 0x34f2 <malloc+0x9c>
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	9b 81       	ldd	r25, Y+3	; 0x03
    34d6:	61 15       	cp	r22, r1
    34d8:	71 05       	cpc	r23, r1
    34da:	21 f0       	breq	.+8      	; 0x34e4 <malloc+0x8e>
    34dc:	fb 01       	movw	r30, r22
    34de:	93 83       	std	Z+3, r25	; 0x03
    34e0:	82 83       	std	Z+2, r24	; 0x02
    34e2:	04 c0       	rjmp	.+8      	; 0x34ec <malloc+0x96>
    34e4:	90 93 4e 04 	sts	0x044E, r25	; 0x80044e <__flp+0x1>
    34e8:	80 93 4d 04 	sts	0x044D, r24	; 0x80044d <__flp>
    34ec:	fe 01       	movw	r30, r28
    34ee:	32 96       	adiw	r30, 0x02	; 2
    34f0:	44 c0       	rjmp	.+136    	; 0x357a <malloc+0x124>
    34f2:	fe 01       	movw	r30, r28
    34f4:	e2 0f       	add	r30, r18
    34f6:	f3 1f       	adc	r31, r19
    34f8:	81 93       	st	Z+, r24
    34fa:	91 93       	st	Z+, r25
    34fc:	22 50       	subi	r18, 0x02	; 2
    34fe:	31 09       	sbc	r19, r1
    3500:	39 83       	std	Y+1, r19	; 0x01
    3502:	28 83       	st	Y, r18
    3504:	3a c0       	rjmp	.+116    	; 0x357a <malloc+0x124>
    3506:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <__brkval>
    350a:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <__brkval+0x1>
    350e:	23 2b       	or	r18, r19
    3510:	41 f4       	brne	.+16     	; 0x3522 <malloc+0xcc>
    3512:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3516:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    351a:	30 93 4c 04 	sts	0x044C, r19	; 0x80044c <__brkval+0x1>
    351e:	20 93 4b 04 	sts	0x044B, r18	; 0x80044b <__brkval>
    3522:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3526:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    352a:	21 15       	cp	r18, r1
    352c:	31 05       	cpc	r19, r1
    352e:	41 f4       	brne	.+16     	; 0x3540 <malloc+0xea>
    3530:	2d b7       	in	r18, 0x3d	; 61
    3532:	3e b7       	in	r19, 0x3e	; 62
    3534:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3538:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    353c:	24 1b       	sub	r18, r20
    353e:	35 0b       	sbc	r19, r21
    3540:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <__brkval>
    3544:	f0 91 4c 04 	lds	r31, 0x044C	; 0x80044c <__brkval+0x1>
    3548:	e2 17       	cp	r30, r18
    354a:	f3 07       	cpc	r31, r19
    354c:	a0 f4       	brcc	.+40     	; 0x3576 <malloc+0x120>
    354e:	2e 1b       	sub	r18, r30
    3550:	3f 0b       	sbc	r19, r31
    3552:	28 17       	cp	r18, r24
    3554:	39 07       	cpc	r19, r25
    3556:	78 f0       	brcs	.+30     	; 0x3576 <malloc+0x120>
    3558:	ac 01       	movw	r20, r24
    355a:	4e 5f       	subi	r20, 0xFE	; 254
    355c:	5f 4f       	sbci	r21, 0xFF	; 255
    355e:	24 17       	cp	r18, r20
    3560:	35 07       	cpc	r19, r21
    3562:	48 f0       	brcs	.+18     	; 0x3576 <malloc+0x120>
    3564:	4e 0f       	add	r20, r30
    3566:	5f 1f       	adc	r21, r31
    3568:	50 93 4c 04 	sts	0x044C, r21	; 0x80044c <__brkval+0x1>
    356c:	40 93 4b 04 	sts	0x044B, r20	; 0x80044b <__brkval>
    3570:	81 93       	st	Z+, r24
    3572:	91 93       	st	Z+, r25
    3574:	02 c0       	rjmp	.+4      	; 0x357a <malloc+0x124>
    3576:	e0 e0       	ldi	r30, 0x00	; 0
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	cf 01       	movw	r24, r30
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	08 95       	ret

00003586 <free>:
    3586:	cf 93       	push	r28
    3588:	df 93       	push	r29
    358a:	00 97       	sbiw	r24, 0x00	; 0
    358c:	09 f4       	brne	.+2      	; 0x3590 <free+0xa>
    358e:	81 c0       	rjmp	.+258    	; 0x3692 <free+0x10c>
    3590:	fc 01       	movw	r30, r24
    3592:	32 97       	sbiw	r30, 0x02	; 2
    3594:	13 82       	std	Z+3, r1	; 0x03
    3596:	12 82       	std	Z+2, r1	; 0x02
    3598:	a0 91 4d 04 	lds	r26, 0x044D	; 0x80044d <__flp>
    359c:	b0 91 4e 04 	lds	r27, 0x044E	; 0x80044e <__flp+0x1>
    35a0:	10 97       	sbiw	r26, 0x00	; 0
    35a2:	81 f4       	brne	.+32     	; 0x35c4 <free+0x3e>
    35a4:	20 81       	ld	r18, Z
    35a6:	31 81       	ldd	r19, Z+1	; 0x01
    35a8:	82 0f       	add	r24, r18
    35aa:	93 1f       	adc	r25, r19
    35ac:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <__brkval>
    35b0:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <__brkval+0x1>
    35b4:	28 17       	cp	r18, r24
    35b6:	39 07       	cpc	r19, r25
    35b8:	51 f5       	brne	.+84     	; 0x360e <free+0x88>
    35ba:	f0 93 4c 04 	sts	0x044C, r31	; 0x80044c <__brkval+0x1>
    35be:	e0 93 4b 04 	sts	0x044B, r30	; 0x80044b <__brkval>
    35c2:	67 c0       	rjmp	.+206    	; 0x3692 <free+0x10c>
    35c4:	ed 01       	movw	r28, r26
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	ce 17       	cp	r28, r30
    35cc:	df 07       	cpc	r29, r31
    35ce:	40 f4       	brcc	.+16     	; 0x35e0 <free+0x5a>
    35d0:	4a 81       	ldd	r20, Y+2	; 0x02
    35d2:	5b 81       	ldd	r21, Y+3	; 0x03
    35d4:	9e 01       	movw	r18, r28
    35d6:	41 15       	cp	r20, r1
    35d8:	51 05       	cpc	r21, r1
    35da:	f1 f0       	breq	.+60     	; 0x3618 <free+0x92>
    35dc:	ea 01       	movw	r28, r20
    35de:	f5 cf       	rjmp	.-22     	; 0x35ca <free+0x44>
    35e0:	d3 83       	std	Z+3, r29	; 0x03
    35e2:	c2 83       	std	Z+2, r28	; 0x02
    35e4:	40 81       	ld	r20, Z
    35e6:	51 81       	ldd	r21, Z+1	; 0x01
    35e8:	84 0f       	add	r24, r20
    35ea:	95 1f       	adc	r25, r21
    35ec:	c8 17       	cp	r28, r24
    35ee:	d9 07       	cpc	r29, r25
    35f0:	59 f4       	brne	.+22     	; 0x3608 <free+0x82>
    35f2:	88 81       	ld	r24, Y
    35f4:	99 81       	ldd	r25, Y+1	; 0x01
    35f6:	84 0f       	add	r24, r20
    35f8:	95 1f       	adc	r25, r21
    35fa:	02 96       	adiw	r24, 0x02	; 2
    35fc:	91 83       	std	Z+1, r25	; 0x01
    35fe:	80 83       	st	Z, r24
    3600:	8a 81       	ldd	r24, Y+2	; 0x02
    3602:	9b 81       	ldd	r25, Y+3	; 0x03
    3604:	93 83       	std	Z+3, r25	; 0x03
    3606:	82 83       	std	Z+2, r24	; 0x02
    3608:	21 15       	cp	r18, r1
    360a:	31 05       	cpc	r19, r1
    360c:	29 f4       	brne	.+10     	; 0x3618 <free+0x92>
    360e:	f0 93 4e 04 	sts	0x044E, r31	; 0x80044e <__flp+0x1>
    3612:	e0 93 4d 04 	sts	0x044D, r30	; 0x80044d <__flp>
    3616:	3d c0       	rjmp	.+122    	; 0x3692 <free+0x10c>
    3618:	e9 01       	movw	r28, r18
    361a:	fb 83       	std	Y+3, r31	; 0x03
    361c:	ea 83       	std	Y+2, r30	; 0x02
    361e:	49 91       	ld	r20, Y+
    3620:	59 91       	ld	r21, Y+
    3622:	c4 0f       	add	r28, r20
    3624:	d5 1f       	adc	r29, r21
    3626:	ec 17       	cp	r30, r28
    3628:	fd 07       	cpc	r31, r29
    362a:	61 f4       	brne	.+24     	; 0x3644 <free+0xbe>
    362c:	80 81       	ld	r24, Z
    362e:	91 81       	ldd	r25, Z+1	; 0x01
    3630:	84 0f       	add	r24, r20
    3632:	95 1f       	adc	r25, r21
    3634:	02 96       	adiw	r24, 0x02	; 2
    3636:	e9 01       	movw	r28, r18
    3638:	99 83       	std	Y+1, r25	; 0x01
    363a:	88 83       	st	Y, r24
    363c:	82 81       	ldd	r24, Z+2	; 0x02
    363e:	93 81       	ldd	r25, Z+3	; 0x03
    3640:	9b 83       	std	Y+3, r25	; 0x03
    3642:	8a 83       	std	Y+2, r24	; 0x02
    3644:	e0 e0       	ldi	r30, 0x00	; 0
    3646:	f0 e0       	ldi	r31, 0x00	; 0
    3648:	12 96       	adiw	r26, 0x02	; 2
    364a:	8d 91       	ld	r24, X+
    364c:	9c 91       	ld	r25, X
    364e:	13 97       	sbiw	r26, 0x03	; 3
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	19 f0       	breq	.+6      	; 0x365a <free+0xd4>
    3654:	fd 01       	movw	r30, r26
    3656:	dc 01       	movw	r26, r24
    3658:	f7 cf       	rjmp	.-18     	; 0x3648 <free+0xc2>
    365a:	8d 91       	ld	r24, X+
    365c:	9c 91       	ld	r25, X
    365e:	11 97       	sbiw	r26, 0x01	; 1
    3660:	9d 01       	movw	r18, r26
    3662:	2e 5f       	subi	r18, 0xFE	; 254
    3664:	3f 4f       	sbci	r19, 0xFF	; 255
    3666:	82 0f       	add	r24, r18
    3668:	93 1f       	adc	r25, r19
    366a:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <__brkval>
    366e:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <__brkval+0x1>
    3672:	28 17       	cp	r18, r24
    3674:	39 07       	cpc	r19, r25
    3676:	69 f4       	brne	.+26     	; 0x3692 <free+0x10c>
    3678:	30 97       	sbiw	r30, 0x00	; 0
    367a:	29 f4       	brne	.+10     	; 0x3686 <free+0x100>
    367c:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <__flp+0x1>
    3680:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <__flp>
    3684:	02 c0       	rjmp	.+4      	; 0x368a <free+0x104>
    3686:	13 82       	std	Z+3, r1	; 0x03
    3688:	12 82       	std	Z+2, r1	; 0x02
    368a:	b0 93 4c 04 	sts	0x044C, r27	; 0x80044c <__brkval+0x1>
    368e:	a0 93 4b 04 	sts	0x044B, r26	; 0x80044b <__brkval>
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	08 95       	ret

00003698 <strnlen_P>:
    3698:	fc 01       	movw	r30, r24
    369a:	05 90       	lpm	r0, Z+
    369c:	61 50       	subi	r22, 0x01	; 1
    369e:	70 40       	sbci	r23, 0x00	; 0
    36a0:	01 10       	cpse	r0, r1
    36a2:	d8 f7       	brcc	.-10     	; 0x369a <strnlen_P+0x2>
    36a4:	80 95       	com	r24
    36a6:	90 95       	com	r25
    36a8:	8e 0f       	add	r24, r30
    36aa:	9f 1f       	adc	r25, r31
    36ac:	08 95       	ret

000036ae <memset>:
    36ae:	dc 01       	movw	r26, r24
    36b0:	01 c0       	rjmp	.+2      	; 0x36b4 <memset+0x6>
    36b2:	6d 93       	st	X+, r22
    36b4:	41 50       	subi	r20, 0x01	; 1
    36b6:	50 40       	sbci	r21, 0x00	; 0
    36b8:	e0 f7       	brcc	.-8      	; 0x36b2 <memset+0x4>
    36ba:	08 95       	ret

000036bc <strnlen>:
    36bc:	fc 01       	movw	r30, r24
    36be:	61 50       	subi	r22, 0x01	; 1
    36c0:	70 40       	sbci	r23, 0x00	; 0
    36c2:	01 90       	ld	r0, Z+
    36c4:	01 10       	cpse	r0, r1
    36c6:	d8 f7       	brcc	.-10     	; 0x36be <strnlen+0x2>
    36c8:	80 95       	com	r24
    36ca:	90 95       	com	r25
    36cc:	8e 0f       	add	r24, r30
    36ce:	9f 1f       	adc	r25, r31
    36d0:	08 95       	ret

000036d2 <strrev>:
    36d2:	dc 01       	movw	r26, r24
    36d4:	fc 01       	movw	r30, r24
    36d6:	67 2f       	mov	r22, r23
    36d8:	71 91       	ld	r23, Z+
    36da:	77 23       	and	r23, r23
    36dc:	e1 f7       	brne	.-8      	; 0x36d6 <strrev+0x4>
    36de:	32 97       	sbiw	r30, 0x02	; 2
    36e0:	04 c0       	rjmp	.+8      	; 0x36ea <strrev+0x18>
    36e2:	7c 91       	ld	r23, X
    36e4:	6d 93       	st	X+, r22
    36e6:	70 83       	st	Z, r23
    36e8:	62 91       	ld	r22, -Z
    36ea:	ae 17       	cp	r26, r30
    36ec:	bf 07       	cpc	r27, r31
    36ee:	c8 f3       	brcs	.-14     	; 0x36e2 <strrev+0x10>
    36f0:	08 95       	ret

000036f2 <fputc>:
    36f2:	0f 93       	push	r16
    36f4:	1f 93       	push	r17
    36f6:	cf 93       	push	r28
    36f8:	df 93       	push	r29
    36fa:	fb 01       	movw	r30, r22
    36fc:	23 81       	ldd	r18, Z+3	; 0x03
    36fe:	21 fd       	sbrc	r18, 1
    3700:	03 c0       	rjmp	.+6      	; 0x3708 <fputc+0x16>
    3702:	8f ef       	ldi	r24, 0xFF	; 255
    3704:	9f ef       	ldi	r25, 0xFF	; 255
    3706:	2c c0       	rjmp	.+88     	; 0x3760 <fputc+0x6e>
    3708:	22 ff       	sbrs	r18, 2
    370a:	16 c0       	rjmp	.+44     	; 0x3738 <fputc+0x46>
    370c:	46 81       	ldd	r20, Z+6	; 0x06
    370e:	57 81       	ldd	r21, Z+7	; 0x07
    3710:	24 81       	ldd	r18, Z+4	; 0x04
    3712:	35 81       	ldd	r19, Z+5	; 0x05
    3714:	42 17       	cp	r20, r18
    3716:	53 07       	cpc	r21, r19
    3718:	44 f4       	brge	.+16     	; 0x372a <fputc+0x38>
    371a:	a0 81       	ld	r26, Z
    371c:	b1 81       	ldd	r27, Z+1	; 0x01
    371e:	9d 01       	movw	r18, r26
    3720:	2f 5f       	subi	r18, 0xFF	; 255
    3722:	3f 4f       	sbci	r19, 0xFF	; 255
    3724:	31 83       	std	Z+1, r19	; 0x01
    3726:	20 83       	st	Z, r18
    3728:	8c 93       	st	X, r24
    372a:	26 81       	ldd	r18, Z+6	; 0x06
    372c:	37 81       	ldd	r19, Z+7	; 0x07
    372e:	2f 5f       	subi	r18, 0xFF	; 255
    3730:	3f 4f       	sbci	r19, 0xFF	; 255
    3732:	37 83       	std	Z+7, r19	; 0x07
    3734:	26 83       	std	Z+6, r18	; 0x06
    3736:	14 c0       	rjmp	.+40     	; 0x3760 <fputc+0x6e>
    3738:	8b 01       	movw	r16, r22
    373a:	ec 01       	movw	r28, r24
    373c:	fb 01       	movw	r30, r22
    373e:	00 84       	ldd	r0, Z+8	; 0x08
    3740:	f1 85       	ldd	r31, Z+9	; 0x09
    3742:	e0 2d       	mov	r30, r0
    3744:	09 95       	icall
    3746:	89 2b       	or	r24, r25
    3748:	e1 f6       	brne	.-72     	; 0x3702 <fputc+0x10>
    374a:	d8 01       	movw	r26, r16
    374c:	16 96       	adiw	r26, 0x06	; 6
    374e:	8d 91       	ld	r24, X+
    3750:	9c 91       	ld	r25, X
    3752:	17 97       	sbiw	r26, 0x07	; 7
    3754:	01 96       	adiw	r24, 0x01	; 1
    3756:	17 96       	adiw	r26, 0x07	; 7
    3758:	9c 93       	st	X, r25
    375a:	8e 93       	st	-X, r24
    375c:	16 97       	sbiw	r26, 0x06	; 6
    375e:	ce 01       	movw	r24, r28
    3760:	df 91       	pop	r29
    3762:	cf 91       	pop	r28
    3764:	1f 91       	pop	r17
    3766:	0f 91       	pop	r16
    3768:	08 95       	ret

0000376a <__ultoa_invert>:
    376a:	fa 01       	movw	r30, r20
    376c:	aa 27       	eor	r26, r26
    376e:	28 30       	cpi	r18, 0x08	; 8
    3770:	51 f1       	breq	.+84     	; 0x37c6 <__ultoa_invert+0x5c>
    3772:	20 31       	cpi	r18, 0x10	; 16
    3774:	81 f1       	breq	.+96     	; 0x37d6 <__ultoa_invert+0x6c>
    3776:	e8 94       	clt
    3778:	6f 93       	push	r22
    377a:	6e 7f       	andi	r22, 0xFE	; 254
    377c:	6e 5f       	subi	r22, 0xFE	; 254
    377e:	7f 4f       	sbci	r23, 0xFF	; 255
    3780:	8f 4f       	sbci	r24, 0xFF	; 255
    3782:	9f 4f       	sbci	r25, 0xFF	; 255
    3784:	af 4f       	sbci	r26, 0xFF	; 255
    3786:	b1 e0       	ldi	r27, 0x01	; 1
    3788:	3e d0       	rcall	.+124    	; 0x3806 <__ultoa_invert+0x9c>
    378a:	b4 e0       	ldi	r27, 0x04	; 4
    378c:	3c d0       	rcall	.+120    	; 0x3806 <__ultoa_invert+0x9c>
    378e:	67 0f       	add	r22, r23
    3790:	78 1f       	adc	r23, r24
    3792:	89 1f       	adc	r24, r25
    3794:	9a 1f       	adc	r25, r26
    3796:	a1 1d       	adc	r26, r1
    3798:	68 0f       	add	r22, r24
    379a:	79 1f       	adc	r23, r25
    379c:	8a 1f       	adc	r24, r26
    379e:	91 1d       	adc	r25, r1
    37a0:	a1 1d       	adc	r26, r1
    37a2:	6a 0f       	add	r22, r26
    37a4:	71 1d       	adc	r23, r1
    37a6:	81 1d       	adc	r24, r1
    37a8:	91 1d       	adc	r25, r1
    37aa:	a1 1d       	adc	r26, r1
    37ac:	20 d0       	rcall	.+64     	; 0x37ee <__ultoa_invert+0x84>
    37ae:	09 f4       	brne	.+2      	; 0x37b2 <__ultoa_invert+0x48>
    37b0:	68 94       	set
    37b2:	3f 91       	pop	r19
    37b4:	2a e0       	ldi	r18, 0x0A	; 10
    37b6:	26 9f       	mul	r18, r22
    37b8:	11 24       	eor	r1, r1
    37ba:	30 19       	sub	r19, r0
    37bc:	30 5d       	subi	r19, 0xD0	; 208
    37be:	31 93       	st	Z+, r19
    37c0:	de f6       	brtc	.-74     	; 0x3778 <__ultoa_invert+0xe>
    37c2:	cf 01       	movw	r24, r30
    37c4:	08 95       	ret
    37c6:	46 2f       	mov	r20, r22
    37c8:	47 70       	andi	r20, 0x07	; 7
    37ca:	40 5d       	subi	r20, 0xD0	; 208
    37cc:	41 93       	st	Z+, r20
    37ce:	b3 e0       	ldi	r27, 0x03	; 3
    37d0:	0f d0       	rcall	.+30     	; 0x37f0 <__ultoa_invert+0x86>
    37d2:	c9 f7       	brne	.-14     	; 0x37c6 <__ultoa_invert+0x5c>
    37d4:	f6 cf       	rjmp	.-20     	; 0x37c2 <__ultoa_invert+0x58>
    37d6:	46 2f       	mov	r20, r22
    37d8:	4f 70       	andi	r20, 0x0F	; 15
    37da:	40 5d       	subi	r20, 0xD0	; 208
    37dc:	4a 33       	cpi	r20, 0x3A	; 58
    37de:	18 f0       	brcs	.+6      	; 0x37e6 <__ultoa_invert+0x7c>
    37e0:	49 5d       	subi	r20, 0xD9	; 217
    37e2:	31 fd       	sbrc	r19, 1
    37e4:	40 52       	subi	r20, 0x20	; 32
    37e6:	41 93       	st	Z+, r20
    37e8:	02 d0       	rcall	.+4      	; 0x37ee <__ultoa_invert+0x84>
    37ea:	a9 f7       	brne	.-22     	; 0x37d6 <__ultoa_invert+0x6c>
    37ec:	ea cf       	rjmp	.-44     	; 0x37c2 <__ultoa_invert+0x58>
    37ee:	b4 e0       	ldi	r27, 0x04	; 4
    37f0:	a6 95       	lsr	r26
    37f2:	97 95       	ror	r25
    37f4:	87 95       	ror	r24
    37f6:	77 95       	ror	r23
    37f8:	67 95       	ror	r22
    37fa:	ba 95       	dec	r27
    37fc:	c9 f7       	brne	.-14     	; 0x37f0 <__ultoa_invert+0x86>
    37fe:	00 97       	sbiw	r24, 0x00	; 0
    3800:	61 05       	cpc	r22, r1
    3802:	71 05       	cpc	r23, r1
    3804:	08 95       	ret
    3806:	9b 01       	movw	r18, r22
    3808:	ac 01       	movw	r20, r24
    380a:	0a 2e       	mov	r0, r26
    380c:	06 94       	lsr	r0
    380e:	57 95       	ror	r21
    3810:	47 95       	ror	r20
    3812:	37 95       	ror	r19
    3814:	27 95       	ror	r18
    3816:	ba 95       	dec	r27
    3818:	c9 f7       	brne	.-14     	; 0x380c <__ultoa_invert+0xa2>
    381a:	62 0f       	add	r22, r18
    381c:	73 1f       	adc	r23, r19
    381e:	84 1f       	adc	r24, r20
    3820:	95 1f       	adc	r25, r21
    3822:	a0 1d       	adc	r26, r0
    3824:	08 95       	ret

00003826 <__prologue_saves__>:
    3826:	2f 92       	push	r2
    3828:	3f 92       	push	r3
    382a:	4f 92       	push	r4
    382c:	5f 92       	push	r5
    382e:	6f 92       	push	r6
    3830:	7f 92       	push	r7
    3832:	8f 92       	push	r8
    3834:	9f 92       	push	r9
    3836:	af 92       	push	r10
    3838:	bf 92       	push	r11
    383a:	cf 92       	push	r12
    383c:	df 92       	push	r13
    383e:	ef 92       	push	r14
    3840:	ff 92       	push	r15
    3842:	0f 93       	push	r16
    3844:	1f 93       	push	r17
    3846:	cf 93       	push	r28
    3848:	df 93       	push	r29
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	ca 1b       	sub	r28, r26
    3850:	db 0b       	sbc	r29, r27
    3852:	0f b6       	in	r0, 0x3f	; 63
    3854:	f8 94       	cli
    3856:	de bf       	out	0x3e, r29	; 62
    3858:	0f be       	out	0x3f, r0	; 63
    385a:	cd bf       	out	0x3d, r28	; 61
    385c:	09 94       	ijmp

0000385e <__epilogue_restores__>:
    385e:	2a 88       	ldd	r2, Y+18	; 0x12
    3860:	39 88       	ldd	r3, Y+17	; 0x11
    3862:	48 88       	ldd	r4, Y+16	; 0x10
    3864:	5f 84       	ldd	r5, Y+15	; 0x0f
    3866:	6e 84       	ldd	r6, Y+14	; 0x0e
    3868:	7d 84       	ldd	r7, Y+13	; 0x0d
    386a:	8c 84       	ldd	r8, Y+12	; 0x0c
    386c:	9b 84       	ldd	r9, Y+11	; 0x0b
    386e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3870:	b9 84       	ldd	r11, Y+9	; 0x09
    3872:	c8 84       	ldd	r12, Y+8	; 0x08
    3874:	df 80       	ldd	r13, Y+7	; 0x07
    3876:	ee 80       	ldd	r14, Y+6	; 0x06
    3878:	fd 80       	ldd	r15, Y+5	; 0x05
    387a:	0c 81       	ldd	r16, Y+4	; 0x04
    387c:	1b 81       	ldd	r17, Y+3	; 0x03
    387e:	aa 81       	ldd	r26, Y+2	; 0x02
    3880:	b9 81       	ldd	r27, Y+1	; 0x01
    3882:	ce 0f       	add	r28, r30
    3884:	d1 1d       	adc	r29, r1
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	ed 01       	movw	r28, r26
    3892:	08 95       	ret

00003894 <_exit>:
    3894:	f8 94       	cli

00003896 <__stop_program>:
    3896:	ff cf       	rjmp	.-2      	; 0x3896 <__stop_program>
