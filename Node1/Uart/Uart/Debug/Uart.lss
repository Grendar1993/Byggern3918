
Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  000015f4  00001688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800272  00800272  000017fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000233c  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011db  00000000  00000000  00003e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012e5  00000000  00000000  00004fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000518  00000000  00000000  000062c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007cf  00000000  00000000  000067d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000100b  00000000  00000000  00006fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007fb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_home+0x50>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e4 ef       	ldi	r30, 0xF4	; 244
     37c:	f5 e1       	ldi	r31, 0x15	; 21
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 37       	cpi	r26, 0x72	; 114
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a2 e7       	ldi	r26, 0x72	; 114
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a5 38       	cpi	r26, 0x85	; 133
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 ed 03 	call	0x7da	; 0x7da <main>
     39e:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include "setup.h"
#include <util/delay.h>

int ADC_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
     3a6:	85 b7       	in	r24, 0x35	; 53
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     3ac:	80 b7       	in	r24, 0x30	; 48
     3ae:	80 62       	ori	r24, 0x20	; 32
     3b0:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	//DDRB &= ~(1<<PIND2);
	
	return 0;
}
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	08 95       	ret

000003b8 <ADC_read>:

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	48 f4       	brcc	.+18     	; 0x3ce <ADC_read+0x16>
	
	//Choose channel in ADC
	*adc = 0x04 | channel;
     3bc:	84 60       	ori	r24, 0x04	; 4
     3be:	e0 e0       	ldi	r30, 0x00	; 0
     3c0:	f4 e1       	ldi	r31, 0x14	; 20
     3c2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c4:	84 ea       	ldi	r24, 0xA4	; 164
     3c6:	8a 95       	dec	r24
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <ADC_read+0xe>
	
	//Wait for the data to be read (this can be done with an interrupt)
	//while(test_bit(PIND, PIND2));
	_delay_us(100);
	return *adc;
     3ca:	80 81       	ld	r24, Z
     3cc:	08 95       	ret

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
     3ce:	80 e0       	ldi	r24, 0x00	; 0
	
	//Wait for the data to be read (this can be done with an interrupt)
	//while(test_bit(PIND, PIND2));
	_delay_us(100);
	return *adc;
     3d0:	08 95       	ret

000003d2 <CAN_init>:

uint8_t rx_flag = 0;

int CAN_init(void) {
	//Enter config mode
	MCP_init();
     3d2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MCP_init>
	
	//RX0 - Turn masks/filters off, rollover disabled?
	MCP_bit_modify(MCP_RXB0CTRL, MCP_FILTER_OFF, 0b01101000);
     3d6:	48 e6       	ldi	r20, 0x68	; 104
     3d8:	60 e6       	ldi	r22, 0x60	; 96
     3da:	80 e6       	ldi	r24, 0x60	; 96
     3dc:	0e 94 5b 05 	call	0xab6	; 0xab6 <MCP_bit_modify>
	//Enable interrupt when message is received (RX0IE = 1)
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0x01);
     3e0:	41 e0       	ldi	r20, 0x01	; 1
     3e2:	63 e0       	ldi	r22, 0x03	; 3
     3e4:	8b e2       	ldi	r24, 0x2B	; 43
     3e6:	0e 94 5b 05 	call	0xab6	; 0xab6 <MCP_bit_modify>
	
	//Enable normal mode
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	60 ee       	ldi	r22, 0xE0	; 224
     3ee:	8f e0       	ldi	r24, 0x0F	; 15
     3f0:	0e 94 5b 05 	call	0xab6	; 0xab6 <MCP_bit_modify>
	
	uint8_t value = MCP_read(MCP_CANSTAT);
     3f4:	8e e0       	ldi	r24, 0x0E	; 14
     3f6:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     3fa:	80 7e       	andi	r24, 0xE0	; 224
     3fc:	59 f0       	breq	.+22     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		printf("ERROR..ERROR...LOOPBACK NOT WORKING");
     3fe:	8a e0       	ldi	r24, 0x0A	; 10
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
		return 1;
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	08 95       	ret
	}
	
	

	return 0;
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
}
     418:	08 95       	ret

0000041a <CAN_error>:
	
	return 0;
}

int CAN_error(void) {
	uint8_t error = MCP_read(MCP_TXB0CTRL);
     41a:	80 e3       	ldi	r24, 0x30	; 48
     41c:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_read>
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
     420:	84 fd       	sbrc	r24, 4
     422:	05 c0       	rjmp	.+10     	; 0x42e <CAN_error+0x14>
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
     424:	85 fd       	sbrc	r24, 5
     426:	06 c0       	rjmp	.+12     	; 0x434 <CAN_error+0x1a>
	
	return 0;
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	08 95       	ret

int CAN_error(void) {
	uint8_t error = MCP_read(MCP_TXB0CTRL);
	
	//Transmission error detected
	if (test_bit(error, 4)) return -1;
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	9f ef       	ldi	r25, 0xFF	; 255
     432:	08 95       	ret
	
	//Message lost arbitration
	if (test_bit(error, 5)) return -2;
     434:	8e ef       	ldi	r24, 0xFE	; 254
     436:	9f ef       	ldi	r25, 0xFF	; 255
	
	return 0;
}
     438:	08 95       	ret

0000043a <CAN_transmit_complete>:


int CAN_transmit_complete(void) {
	//Check if TX buffer is not pending transmission (TXREQ = 0)
	if (test_bit(MCP_read(MCP_TXB0CTRL), 3)) {
     43a:	80 e3       	ldi	r24, 0x30	; 48
     43c:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_read>
     440:	86 95       	lsr	r24
     442:	86 95       	lsr	r24
     444:	86 95       	lsr	r24
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	89 27       	eor	r24, r25
		return 0;
		} else {
		return 1;
	}
}
     44a:	81 70       	andi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	08 95       	ret

00000450 <CAN_message_send>:
	

	return 0;
}

int CAN_message_send(can_msg* message) {
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	8c 01       	movw	r16, r24
	uint8_t i;
	
	//Check if there is no pending transmission
	if (CAN_transmit_complete()) {
     458:	0e 94 1d 02 	call	0x43a	; 0x43a <CAN_transmit_complete>
     45c:	89 2b       	or	r24, r25
     45e:	09 f4       	brne	.+2      	; 0x462 <CAN_message_send+0x12>
     460:	3f c0       	rjmp	.+126    	; 0x4e0 <CAN_message_send+0x90>
		
		//Set the message id (use standard identifier)
		MCP_write(MCP_TXB0SIDH, (int8_t)(message->id >> 3));
     462:	f8 01       	movw	r30, r16
     464:	60 81       	ld	r22, Z
     466:	71 81       	ldd	r23, Z+1	; 0x01
     468:	76 95       	lsr	r23
     46a:	67 95       	ror	r22
     46c:	76 95       	lsr	r23
     46e:	67 95       	ror	r22
     470:	76 95       	lsr	r23
     472:	67 95       	ror	r22
     474:	81 e3       	ldi	r24, 0x31	; 49
     476:	0e 94 34 05 	call	0xa68	; 0xa68 <MCP_write>
		MCP_write(MCP_TXB0SIDL, (int8_t)(message->id << 5));
     47a:	f8 01       	movw	r30, r16
     47c:	60 81       	ld	r22, Z
     47e:	71 81       	ldd	r23, Z+1	; 0x01
     480:	66 0f       	add	r22, r22
     482:	77 1f       	adc	r23, r23
     484:	62 95       	swap	r22
     486:	72 95       	swap	r23
     488:	70 7f       	andi	r23, 0xF0	; 240
     48a:	76 27       	eor	r23, r22
     48c:	60 7f       	andi	r22, 0xF0	; 240
     48e:	76 27       	eor	r23, r22
     490:	82 e3       	ldi	r24, 0x32	; 50
     492:	0e 94 34 05 	call	0xa68	; 0xa68 <MCP_write>
		MCP_write(MCP_TXB0EID8, 0);
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	83 e4       	ldi	r24, 0x43	; 67
     49a:	0e 94 34 05 	call	0xa68	; 0xa68 <MCP_write>
		MCP_write(MCP_TXB0EID0, 0);
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	84 e4       	ldi	r24, 0x44	; 68
     4a2:	0e 94 34 05 	call	0xa68	; 0xa68 <MCP_write>
		
		//Set data length and use data frame (RTR = 0)
		MCP_write(MCP_TXB0DLC, message->length);
     4a6:	f8 01       	movw	r30, r16
     4a8:	62 81       	ldd	r22, Z+2	; 0x02
     4aa:	85 e3       	ldi	r24, 0x35	; 53
     4ac:	0e 94 34 05 	call	0xa68	; 0xa68 <MCP_write>

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
     4b0:	f8 01       	movw	r30, r16
     4b2:	82 81       	ldd	r24, Z+2	; 0x02
     4b4:	88 23       	and	r24, r24
     4b6:	71 f0       	breq	.+28     	; 0x4d4 <CAN_message_send+0x84>
     4b8:	c0 e0       	ldi	r28, 0x00	; 0
			MCP_write(MCP_TXB0D0 + i, message->data[i]);
     4ba:	f8 01       	movw	r30, r16
     4bc:	ec 0f       	add	r30, r28
     4be:	f1 1d       	adc	r31, r1
     4c0:	63 81       	ldd	r22, Z+3	; 0x03
     4c2:	86 e3       	ldi	r24, 0x36	; 54
     4c4:	8c 0f       	add	r24, r28
     4c6:	0e 94 34 05 	call	0xa68	; 0xa68 <MCP_write>
		
		//Set data length and use data frame (RTR = 0)
		MCP_write(MCP_TXB0DLC, message->length);

		//Set data bytes (max. 8 bytes)
		for (i = 0; i < message->length; i++) {
     4ca:	cf 5f       	subi	r28, 0xFF	; 255
     4cc:	f8 01       	movw	r30, r16
     4ce:	82 81       	ldd	r24, Z+2	; 0x02
     4d0:	c8 17       	cp	r28, r24
     4d2:	98 f3       	brcs	.-26     	; 0x4ba <CAN_message_send+0x6a>
			MCP_write(MCP_TXB0D0 + i, message->data[i]);
		}
		
		//Request to send via TX0
		MCP_request_to_send(MCP_RTS_TX0);
     4d4:	81 e8       	ldi	r24, 0x81	; 129
     4d6:	0e 94 4c 05 	call	0xa98	; 0xa98 <MCP_request_to_send>
		if (CAN_error() < 0) {
			return -1;
		}
	}
	
	return 0;
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	07 c0       	rjmp	.+14     	; 0x4ee <CAN_message_send+0x9e>
		
		//Request to send via TX0
		MCP_request_to_send(MCP_RTS_TX0);
		
		} else {
		if (CAN_error() < 0) {
     4e0:	0e 94 0d 02 	call	0x41a	; 0x41a <CAN_error>
     4e4:	99 0f       	add	r25, r25
     4e6:	99 0b       	sbc	r25, r25
     4e8:	89 2f       	mov	r24, r25
     4ea:	99 0f       	add	r25, r25
     4ec:	99 0b       	sbc	r25, r25
			return -1;
		}
	}
	
	return 0;
}
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret

000004f6 <CAN_int_vect>:
	}
}

 int CAN_int_vect(void) {
 	//Clear interrupt flag
  	MCP_bit_modify(MCP_CANINTF, MCP_RXF0SIDL, MCP_RXF0SIDH);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	8c e2       	ldi	r24, 0x2C	; 44
     4fc:	0e 94 5b 05 	call	0xab6	; 0xab6 <MCP_bit_modify>
  	rx_flag = 1;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <__data_end>
 	return 0;
 }
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	08 95       	ret

0000050c <CAN_data_receive>:



can_msg CAN_data_receive(void) {
     50c:	9f 92       	push	r9
     50e:	af 92       	push	r10
     510:	bf 92       	push	r11
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	2b 97       	sbiw	r28, 0x0b	; 11
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	5c 01       	movw	r10, r24
	printf("asdfassdf\n\r");
     534:	8e e2       	ldi	r24, 0x2E	; 46
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	9f 93       	push	r25
     53a:	8f 93       	push	r24
     53c:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
	uint8_t i;
	can_msg message = {0};
     540:	fe 01       	movw	r30, r28
     542:	31 96       	adiw	r30, 0x01	; 1
     544:	8b e0       	ldi	r24, 0x0B	; 11
     546:	df 01       	movw	r26, r30
     548:	1d 92       	st	X+, r1
     54a:	8a 95       	dec	r24
     54c:	e9 f7       	brne	.-6      	; 0x548 <CAN_data_receive+0x3c>
	
	//Check if RX buffer has a message
	if (rx_flag == 1) {
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <__data_end>
     556:	81 30       	cpi	r24, 0x01	; 1
     558:	d9 f5       	brne	.+118    	; 0x5d0 <CAN_data_receive+0xc4>
		
		//Get message id
		message.id  = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
     55a:	81 e6       	ldi	r24, 0x61	; 97
     55c:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_read>
     560:	c8 2e       	mov	r12, r24
     562:	82 e6       	ldi	r24, 0x62	; 98
     564:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_read>
     568:	82 95       	swap	r24
     56a:	86 95       	lsr	r24
     56c:	87 70       	andi	r24, 0x07	; 7
     56e:	d1 2c       	mov	r13, r1
     570:	cc 0c       	add	r12, r12
     572:	dd 1c       	adc	r13, r13
     574:	cc 0c       	add	r12, r12
     576:	dd 1c       	adc	r13, r13
     578:	cc 0c       	add	r12, r12
     57a:	dd 1c       	adc	r13, r13
     57c:	c8 2a       	or	r12, r24
		
		//Get message length
		//message.length = (MCP_CANCTRL) & (MCP_read(MCP_RXB0DLC));
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
     57e:	85 e6       	ldi	r24, 0x65	; 101
     580:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_read>
     584:	08 2f       	mov	r16, r24
     586:	0f 70       	andi	r16, 0x0F	; 15
		printf("len %d\n\r", message.length);
     588:	1f 92       	push	r1
     58a:	0f 93       	push	r16
     58c:	8a e3       	ldi	r24, 0x3A	; 58
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
		
		//Get message data
		for(i = 0; i < message.length; i++) {
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	00 23       	and	r16, r16
     5a2:	99 f0       	breq	.+38     	; 0x5ca <CAN_data_receive+0xbe>
     5a4:	7e 01       	movw	r14, r28
     5a6:	b4 e0       	ldi	r27, 0x04	; 4
     5a8:	eb 0e       	add	r14, r27
     5aa:	f1 1c       	adc	r15, r1
     5ac:	0f 2e       	mov	r0, r31
     5ae:	f6 e6       	ldi	r31, 0x66	; 102
     5b0:	9f 2e       	mov	r9, r31
     5b2:	f0 2d       	mov	r31, r0
     5b4:	90 0e       	add	r9, r16
     5b6:	16 e6       	ldi	r17, 0x66	; 102
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
     5b8:	81 2f       	mov	r24, r17
     5ba:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_read>
     5be:	f7 01       	movw	r30, r14
     5c0:	81 93       	st	Z+, r24
     5c2:	7f 01       	movw	r14, r30
     5c4:	1f 5f       	subi	r17, 0xFF	; 255
		//message.length = (MCP_CANCTRL) & (MCP_read(MCP_RXB0DLC));
		message.length = (MCP_read(MCP_RXB0CTRL+5) & 0x0F);
		printf("len %d\n\r", message.length);
		
		//Get message data
		for(i = 0; i < message.length; i++) {
     5c6:	19 11       	cpse	r17, r9
     5c8:	f7 cf       	rjmp	.-18     	; 0x5b8 <CAN_data_receive+0xac>
			message.data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Clear interrupt flag
		rx_flag = 0;
     5ca:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <__data_end>
     5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <CAN_data_receive+0xca>


can_msg CAN_data_receive(void) {
	printf("asdfassdf\n\r");
	uint8_t i;
	can_msg message = {0};
     5d0:	00 e0       	ldi	r16, 0x00	; 0
     5d2:	c1 2c       	mov	r12, r1
     5d4:	d1 2c       	mov	r13, r1
		//} else {
		//Message not received
		//message.id = -1;
	//}
	
	return message;
     5d6:	da 82       	std	Y+2, r13	; 0x02
     5d8:	c9 82       	std	Y+1, r12	; 0x01
     5da:	0b 83       	std	Y+3, r16	; 0x03
     5dc:	8b e0       	ldi	r24, 0x0B	; 11
     5de:	fe 01       	movw	r30, r28
     5e0:	31 96       	adiw	r30, 0x01	; 1
     5e2:	d5 01       	movw	r26, r10
     5e4:	01 90       	ld	r0, Z+
     5e6:	0d 92       	st	X+, r0
     5e8:	8a 95       	dec	r24
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <CAN_data_receive+0xd8>
}
     5ec:	c5 01       	movw	r24, r10
     5ee:	2b 96       	adiw	r28, 0x0b	; 11
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	9f 90       	pop	r9
     610:	08 95       	ret

00000612 <__vector_1>:

//Interrupt service routine for CAN bus
ISR(INT0_vect) {
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	2f 93       	push	r18
     61e:	3f 93       	push	r19
     620:	4f 93       	push	r20
     622:	5f 93       	push	r21
     624:	6f 93       	push	r22
     626:	7f 93       	push	r23
     628:	8f 93       	push	r24
     62a:	9f 93       	push	r25
     62c:	af 93       	push	r26
     62e:	bf 93       	push	r27
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
//	_delay_ms(10);
	CAN_int_vect();
     634:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <CAN_int_vect>
// 	else if (interrupt & MCP_RX1IF){
// 		rx_flag = 1;
// 		// clear CANINTF.RX1IF
// 		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
// 	}
}
     638:	ff 91       	pop	r31
     63a:	ef 91       	pop	r30
     63c:	bf 91       	pop	r27
     63e:	af 91       	pop	r26
     640:	9f 91       	pop	r25
     642:	8f 91       	pop	r24
     644:	7f 91       	pop	r23
     646:	6f 91       	pop	r22
     648:	5f 91       	pop	r21
     64a:	4f 91       	pop	r20
     64c:	3f 91       	pop	r19
     64e:	2f 91       	pop	r18
     650:	0f 90       	pop	r0
     652:	0f be       	out	0x3f, r0	; 63
     654:	0f 90       	pop	r0
     656:	1f 90       	pop	r1
     658:	18 95       	reti

0000065a <JOY_calibrate>:
	return 0;
}


int JOY_calibrate(void) {
	mid_x=ADC_read(0);
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     660:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <mid_x>
	mid_y=ADC_read(1);
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     66a:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <mid_y>
	return 0;
}
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	08 95       	ret

00000674 <joy_init>:

uint8_t mid_x, mid_y;

int joy_init(void){
	// sette opp adc
	ADC_init();
     674:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	
	//Set Button pins to input
	DDRB &= ~(1<<PINB0) & ~(1<<PINB1) & ~(1<<PINB2);
     678:	87 b3       	in	r24, 0x17	; 23
     67a:	88 7f       	andi	r24, 0xF8	; 248
     67c:	87 bb       	out	0x17, r24	; 23
	//sette opp pullupresistors
	PORTB |= (1<<PINB0) | (1<<PINB1) | (1<<PINB2); 
     67e:	88 b3       	in	r24, 0x18	; 24
     680:	87 60       	ori	r24, 0x07	; 7
     682:	88 bb       	out	0x18, r24	; 24
	
	//kalibrasjon init
	JOY_calibrate();
     684:	0e 94 2d 03 	call	0x65a	; 0x65a <JOY_calibrate>
	
	return 0;
}
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	08 95       	ret

0000068e <joy_button>:
	mid_y=ADC_read(1);
	return 0;
}

int joy_button(int button){
	switch (button) {
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	91 05       	cpc	r25, r1
     692:	59 f0       	breq	.+22     	; 0x6aa <joy_button+0x1c>
     694:	82 30       	cpi	r24, 0x02	; 2
     696:	91 05       	cpc	r25, r1
     698:	79 f0       	breq	.+30     	; 0x6b8 <joy_button+0x2a>
     69a:	89 2b       	or	r24, r25
     69c:	a9 f4       	brne	.+42     	; 0x6c8 <joy_button+0x3a>
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     69e:	96 b3       	in	r25, 0x16	; 22
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	89 27       	eor	r24, r25
     6a4:	81 70       	andi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	08 95       	ret
			break;
		case 1: // left button
			if (!test_bit(PINB,PINB1)) return 1;
     6aa:	86 b3       	in	r24, 0x16	; 22
     6ac:	86 95       	lsr	r24
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	89 27       	eor	r24, r25
}

int joy_button(int button){
	switch (button) {
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     6b2:	81 70       	andi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	08 95       	ret
			break;
		case 1: // left button
			if (!test_bit(PINB,PINB1)) return 1;
			break;	
		case 2: // right button
			if (!test_bit(PINB,PINB2)) return 1;
     6b8:	86 b3       	in	r24, 0x16	; 22
     6ba:	86 95       	lsr	r24
     6bc:	86 95       	lsr	r24
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	89 27       	eor	r24, r25
}

int joy_button(int button){
	switch (button) {
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     6c2:	81 70       	andi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	08 95       	ret
			if (!test_bit(PINB,PINB2)) return 1;
			break;
		default:
				break;
	}
	return 0;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
}
     6cc:	08 95       	ret

000006ce <JOY_getPosition>:

joy_position JOY_getPosition(void) {
     6ce:	cf 93       	push	r28
	joy_position position;
	uint8_t x, y;
	
	//Read position x from channel 0
	x = ADC_read(1);
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     6d6:	c8 2f       	mov	r28, r24
	//Read position y from channel 1
	y = ADC_read(0);
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     6de:	e8 2f       	mov	r30, r24
	
	//Calculate position x percentage
	if(x > mid_x) {
     6e0:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <mid_x>
     6e4:	4c 17       	cp	r20, r28
     6e6:	98 f4       	brcc	.+38     	; 0x70e <JOY_getPosition+0x40>
		position.x = 100 * (x - mid_x) / (0xFF - mid_x);
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	2c 2f       	mov	r18, r28
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	24 1b       	sub	r18, r20
     6f0:	35 0b       	sbc	r19, r21
     6f2:	64 e6       	ldi	r22, 0x64	; 100
     6f4:	62 9f       	mul	r22, r18
     6f6:	c0 01       	movw	r24, r0
     6f8:	63 9f       	mul	r22, r19
     6fa:	90 0d       	add	r25, r0
     6fc:	11 24       	eor	r1, r1
     6fe:	6f ef       	ldi	r22, 0xFF	; 255
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	64 1b       	sub	r22, r20
     704:	75 0b       	sbc	r23, r21
     706:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__divmodhi4>
     70a:	f6 2f       	mov	r31, r22
     70c:	13 c0       	rjmp	.+38     	; 0x734 <JOY_getPosition+0x66>
		} else if (x < mid_x) {
     70e:	c4 17       	cp	r28, r20
     710:	80 f4       	brcc	.+32     	; 0x732 <JOY_getPosition+0x64>
		position.x = 100 * (x - mid_x) / (mid_x - 0);
     712:	64 2f       	mov	r22, r20
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	2c 2f       	mov	r18, r28
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	26 1b       	sub	r18, r22
     71c:	37 0b       	sbc	r19, r23
     71e:	44 e6       	ldi	r20, 0x64	; 100
     720:	42 9f       	mul	r20, r18
     722:	c0 01       	movw	r24, r0
     724:	43 9f       	mul	r20, r19
     726:	90 0d       	add	r25, r0
     728:	11 24       	eor	r1, r1
     72a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__divmodhi4>
     72e:	f6 2f       	mov	r31, r22
     730:	01 c0       	rjmp	.+2      	; 0x734 <JOY_getPosition+0x66>
		} else {
		position.x = 0;
     732:	f0 e0       	ldi	r31, 0x00	; 0
	}
	
	//Calculate position y percentage
	if(y > mid_y) {
     734:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <mid_y>
     738:	2e 17       	cp	r18, r30
     73a:	98 f4       	brcc	.+38     	; 0x762 <JOY_getPosition+0x94>
		position.y = 100 * (y - mid_y) / (0xFF - mid_y);
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	4e 2f       	mov	r20, r30
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	42 1b       	sub	r20, r18
     744:	53 0b       	sbc	r21, r19
     746:	64 e6       	ldi	r22, 0x64	; 100
     748:	64 9f       	mul	r22, r20
     74a:	c0 01       	movw	r24, r0
     74c:	65 9f       	mul	r22, r21
     74e:	90 0d       	add	r25, r0
     750:	11 24       	eor	r1, r1
     752:	6f ef       	ldi	r22, 0xFF	; 255
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	62 1b       	sub	r22, r18
     758:	73 0b       	sbc	r23, r19
     75a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__divmodhi4>
     75e:	76 2f       	mov	r23, r22
     760:	13 c0       	rjmp	.+38     	; 0x788 <JOY_getPosition+0xba>
		} else if (y < mid_y) {
     762:	e2 17       	cp	r30, r18
     764:	80 f4       	brcc	.+32     	; 0x786 <JOY_getPosition+0xb8>
		position.y = 100 * (y - mid_y) / (mid_y - 0);
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	4e 2f       	mov	r20, r30
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	42 1b       	sub	r20, r18
     76e:	53 0b       	sbc	r21, r19
     770:	64 e6       	ldi	r22, 0x64	; 100
     772:	64 9f       	mul	r22, r20
     774:	c0 01       	movw	r24, r0
     776:	65 9f       	mul	r22, r21
     778:	90 0d       	add	r25, r0
     77a:	11 24       	eor	r1, r1
     77c:	b9 01       	movw	r22, r18
     77e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__divmodhi4>
     782:	76 2f       	mov	r23, r22
     784:	01 c0       	rjmp	.+2      	; 0x788 <JOY_getPosition+0xba>
		} else {
		position.y = 0;
     786:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	return position;
}
     788:	6f 2f       	mov	r22, r31
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <JOY_getDirection>:

joy_position JOY_getDirection(void) {
	joy_position position;
	
	//Get actual position of joystick
	position = JOY_getPosition();
     792:	0e 94 67 03 	call	0x6ce	; 0x6ce <JOY_getPosition>
     796:	e7 2f       	mov	r30, r23
     798:	28 2f       	mov	r18, r24
     79a:	39 2f       	mov	r19, r25
	
	if(position.x < -45) {
     79c:	63 3d       	cpi	r22, 0xD3	; 211
     79e:	2c f0       	brlt	.+10     	; 0x7aa <JOY_getDirection+0x18>
		position.direction = "LEFT";
		} 
	else if(position.x > 45) {
     7a0:	6e 32       	cpi	r22, 0x2E	; 46
     7a2:	2c f0       	brlt	.+10     	; 0x7ae <JOY_getDirection+0x1c>
		position.direction = "RIGHT";
     7a4:	28 e4       	ldi	r18, 0x48	; 72
     7a6:	31 e0       	ldi	r19, 0x01	; 1
     7a8:	02 c0       	rjmp	.+4      	; 0x7ae <JOY_getDirection+0x1c>
	
	//Get actual position of joystick
	position = JOY_getPosition();
	
	if(position.x < -45) {
		position.direction = "LEFT";
     7aa:	23 e4       	ldi	r18, 0x43	; 67
     7ac:	31 e0       	ldi	r19, 0x01	; 1
		} 
	else if(position.x > 45) {
		position.direction = "RIGHT";
	}
	
	if(position.y < -45) {
     7ae:	e3 3d       	cpi	r30, 0xD3	; 211
     7b0:	2c f0       	brlt	.+10     	; 0x7bc <JOY_getDirection+0x2a>
		position.direction = "DOWN";
		} 
	else if(position.y > 45) {
     7b2:	ee 32       	cpi	r30, 0x2E	; 46
     7b4:	2c f0       	brlt	.+10     	; 0x7c0 <JOY_getDirection+0x2e>
		position.direction = "UP";
     7b6:	23 e5       	ldi	r18, 0x53	; 83
     7b8:	31 e0       	ldi	r19, 0x01	; 1
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <JOY_getDirection+0x2e>
	else if(position.x > 45) {
		position.direction = "RIGHT";
	}
	
	if(position.y < -45) {
		position.direction = "DOWN";
     7bc:	2e e4       	ldi	r18, 0x4E	; 78
     7be:	31 e0       	ldi	r19, 0x01	; 1
		} 
	else if(position.y > 45) {
		position.direction = "UP";
	}
	
	if((position.x >= -44 && position.x <= 44) && (position.y >= -44 && position.y <= 44)){
     7c0:	8c e2       	ldi	r24, 0x2C	; 44
     7c2:	86 0f       	add	r24, r22
     7c4:	89 35       	cpi	r24, 0x59	; 89
     7c6:	30 f4       	brcc	.+12     	; 0x7d4 <JOY_getDirection+0x42>
     7c8:	8c e2       	ldi	r24, 0x2C	; 44
     7ca:	87 0f       	add	r24, r23
     7cc:	89 35       	cpi	r24, 0x59	; 89
     7ce:	10 f4       	brcc	.+4      	; 0x7d4 <JOY_getDirection+0x42>
		position.direction = "NEUTRAL";
     7d0:	26 e5       	ldi	r18, 0x56	; 86
     7d2:	31 e0       	ldi	r19, 0x01	; 1
	}
	
	return position;
}
     7d4:	82 2f       	mov	r24, r18
     7d6:	93 2f       	mov	r25, r19
     7d8:	08 95       	ret

000007da <main>:
#include "MCP2515.h"
#include "spi.h"
#include "can.h"

int main(void)
{
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	66 97       	sbiw	r28, 0x16	; 22
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
	
	cli();
     7ee:	f8 94       	cli
	
	//DDRD |= (1 << PIND5);		//Set D5(OC1A) as output
	
	
	
	GICR  |= (1 << INT0);		//Enable INT0
     7f0:	8b b7       	in	r24, 0x3b	; 59
     7f2:	80 64       	ori	r24, 0x40	; 64
     7f4:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (0 << ISC01) | (0 << ISC00);	//On falling edge
     7f6:	85 b7       	in	r24, 0x35	; 53
     7f8:	85 bf       	out	0x35, r24	; 53
	
	
	DDRD &= ~(1 << PIND2);		//Set D2(INT0) as input
     7fa:	8a 98       	cbi	0x11, 2	; 17
	
	can_msg can_msg_send;
	can_msg can_msg_receive;
	
	UART_Init(UBRREG);
     7fc:	8e e1       	ldi	r24, 0x1E	; 30
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 5d 06 	call	0xcba	; 0xcba <UART_Init>
	ADC_init();
     804:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	SPI_init();
     808:	0e 94 34 06 	call	0xc68	; 0xc68 <SPI_init>
	MCP_init();
     80c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <MCP_init>
	joy_init();
     810:	0e 94 3a 03 	call	0x674	; 0x674 <joy_init>
	SRAM_init();
     814:	0e 94 49 06 	call	0xc92	; 0xc92 <SRAM_init>
	//OLED_init();
	//init_menu();
	JOY_calibrate();
     818:	0e 94 2d 03 	call	0x65a	; 0x65a <JOY_calibrate>
	
	if (CAN_init() == 0) {
     81c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <CAN_init>
     820:	89 2b       	or	r24, r25
     822:	79 f4       	brne	.+30     	; 0x842 <main+0x68>
		printf("CAN BE WORKING\n\r");
     824:	8e e5       	ldi	r24, 0x5E	; 94
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
		can_msg_send.id = 1;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	9a 83       	std	Y+2, r25	; 0x02
     836:	89 83       	std	Y+1, r24	; 0x01
		can_msg_send.length = 8;
     838:	88 e0       	ldi	r24, 0x08	; 8
     83a:	8b 83       	std	Y+3, r24	; 0x03
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	08 c0       	rjmp	.+16     	; 0x852 <main+0x78>
		} else {
		printf("CAN NOT BE WORKING \n\r");
     842:	8f e6       	ldi	r24, 0x6F	; 111
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	9f 93       	push	r25
     848:	8f 93       	push	r24
     84a:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
	uint8_t i=0;
	
	
	

	if (joy_init() == 0) {
     852:	0e 94 3a 03 	call	0x674	; 0x674 <joy_init>
     856:	89 2b       	or	r24, r25
     858:	49 f4       	brne	.+18     	; 0x86c <main+0x92>
		printf("----Joystick working----\n\r");
     85a:	85 e8       	ldi	r24, 0x85	; 133
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	9f 93       	push	r25
     860:	8f 93       	push	r24
     862:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	08 c0       	rjmp	.+16     	; 0x87c <main+0xa2>
		} else {
		printf("----Joystick error!!----\n\r");
     86c:	80 ea       	ldi	r24, 0xA0	; 160
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
	}
	OLED_clear();
     87c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <OLED_clear>
	OLED_pos(1, 5);
     880:	65 e0       	ldi	r22, 0x05	; 5
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	0e 94 cb 05 	call	0xb96	; 0xb96 <OLED_pos>
	OLED_print("Ping Pong");
     888:	8b eb       	ldi	r24, 0xBB	; 187
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 23 06 	call	0xc46	; 0xc46 <OLED_print>
	OLED_pos(2, 5);
     890:	65 e0       	ldi	r22, 0x05	; 5
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	0e 94 cb 05 	call	0xb96	; 0xb96 <OLED_pos>
	OLED_print("Ping Pong");
     898:	8b eb       	ldi	r24, 0xBB	; 187
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	0e 94 23 06 	call	0xc46	; 0xc46 <OLED_print>
	OLED_pos(3, 4);
     8a0:	64 e0       	ldi	r22, 0x04	; 4
     8a2:	83 e0       	ldi	r24, 0x03	; 3
     8a4:	0e 94 cb 05 	call	0xb96	; 0xb96 <OLED_pos>
	OLED_print("Press Button");
     8a8:	85 ec       	ldi	r24, 0xC5	; 197
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 23 06 	call	0xc46	; 0xc46 <OLED_print>
	OLED_pos(4, 5);
     8b0:	65 e0       	ldi	r22, 0x05	; 5
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	0e 94 cb 05 	call	0xb96	; 0xb96 <OLED_pos>
	OLED_print("to start");
     8b8:	82 ed       	ldi	r24, 0xD2	; 210
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	0e 94 23 06 	call	0xc46	; 0xc46 <OLED_print>
	
	printf("----TING FUNK----\n\r");
     8c0:	8b ed       	ldi	r24, 0xDB	; 219
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	9f 93       	push	r25
     8c6:	8f 93       	push	r24
     8c8:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
	
	sei();
     8cc:	78 94       	sei
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
	slider_position slider_pos;
	int8_t score = 0;
	uint8_t lives = 3;
	int button_pressed = 0;
	int prev_button = 0;
	uint8_t i=0;
     8d2:	71 2c       	mov	r7, r1
	
	while(1){
	joy_pos = JOY_getDirection();

	//init_menu();
	printf("Hoyre knapp: %d, ", joy_button(0));
     8d4:	0f 2e       	mov	r0, r31
     8d6:	ff ee       	ldi	r31, 0xEF	; 239
     8d8:	8f 2e       	mov	r8, r31
     8da:	f1 e0       	ldi	r31, 0x01	; 1
     8dc:	9f 2e       	mov	r9, r31
     8de:	f0 2d       	mov	r31, r0
	printf("Venstre knapp: %d, ", joy_button(1));
     8e0:	0f 2e       	mov	r0, r31
     8e2:	f1 e0       	ldi	r31, 0x01	; 1
     8e4:	af 2e       	mov	r10, r31
     8e6:	f2 e0       	ldi	r31, 0x02	; 2
     8e8:	bf 2e       	mov	r11, r31
     8ea:	f0 2d       	mov	r31, r0
	printf("x: %d ,",joy_pos.x);
     8ec:	0f 2e       	mov	r0, r31
     8ee:	f5 e1       	ldi	r31, 0x15	; 21
     8f0:	cf 2e       	mov	r12, r31
     8f2:	f2 e0       	ldi	r31, 0x02	; 2
     8f4:	df 2e       	mov	r13, r31
     8f6:	f0 2d       	mov	r31, r0
	printf("y: %d ,",joy_pos.y);
     8f8:	0f 2e       	mov	r0, r31
     8fa:	fd e1       	ldi	r31, 0x1D	; 29
     8fc:	ef 2e       	mov	r14, r31
     8fe:	f2 e0       	ldi	r31, 0x02	; 2
     900:	ff 2e       	mov	r15, r31
     902:	f0 2d       	mov	r31, r0
	printf("Retning: %s\n\r",joy_pos.direction);
     904:	05 e2       	ldi	r16, 0x25	; 37
     906:	12 e0       	ldi	r17, 0x02	; 2
	
	//can_msg_send.data[0] = joy_pos.x;
	//can_msg_send.data[1] = joy_pos.y;
	
 			can_msg_send.data[0] = 0x10;
     908:	68 94       	set
     90a:	22 24       	eor	r2, r2
     90c:	24 f8       	bld	r2, 4
	printf("----TING FUNK----\n\r");
	
	sei();
	
	while(1){
	joy_pos = JOY_getDirection();
     90e:	0e 94 c9 03 	call	0x792	; 0x792 <JOY_getDirection>
     912:	56 2e       	mov	r5, r22
     914:	67 2e       	mov	r6, r23
     916:	48 2e       	mov	r4, r24
     918:	39 2e       	mov	r3, r25

	//init_menu();
	printf("Hoyre knapp: %d, ", joy_button(0));
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 47 03 	call	0x68e	; 0x68e <joy_button>
     922:	9f 93       	push	r25
     924:	8f 93       	push	r24
     926:	9f 92       	push	r9
     928:	8f 92       	push	r8
     92a:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
	printf("Venstre knapp: %d, ", joy_button(1));
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 47 03 	call	0x68e	; 0x68e <joy_button>
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	bf 92       	push	r11
     93c:	af 92       	push	r10
     93e:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
	printf("x: %d ,",joy_pos.x);
     942:	85 2d       	mov	r24, r5
     944:	05 2c       	mov	r0, r5
     946:	00 0c       	add	r0, r0
     948:	99 0b       	sbc	r25, r25
     94a:	9f 93       	push	r25
     94c:	5f 92       	push	r5
     94e:	df 92       	push	r13
     950:	cf 92       	push	r12
     952:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
	printf("y: %d ,",joy_pos.y);
     956:	86 2d       	mov	r24, r6
     958:	06 2c       	mov	r0, r6
     95a:	00 0c       	add	r0, r0
     95c:	99 0b       	sbc	r25, r25
     95e:	9f 93       	push	r25
     960:	6f 92       	push	r6
     962:	ff 92       	push	r15
     964:	ef 92       	push	r14
     966:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
	printf("Retning: %s\n\r",joy_pos.direction);
     96a:	3f 92       	push	r3
     96c:	4f 92       	push	r4
     96e:	1f 93       	push	r17
     970:	0f 93       	push	r16
     972:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
	
	//can_msg_send.data[0] = joy_pos.x;
	//can_msg_send.data[1] = joy_pos.y;
	
 			can_msg_send.data[0] = 0x10;
     976:	2c 82       	std	Y+4, r2	; 0x04
 			i=i+1;
     978:	73 94       	inc	r7
 			if (i>0xFF)
 			{
 				i=0;
 			}
 			can_msg_send.data[1] = i;
     97a:	7d 82       	std	Y+5, r7	; 0x05
	
	CAN_message_send(&can_msg_send);
     97c:	ce 01       	movw	r24, r28
     97e:	01 96       	adiw	r24, 0x01	; 1
     980:	0e 94 28 02 	call	0x450	; 0x450 <CAN_message_send>
	can_msg_receive = CAN_data_receive();
     984:	ce 01       	movw	r24, r28
     986:	0c 96       	adiw	r24, 0x0c	; 12
     988:	0e 94 86 02 	call	0x50c	; 0x50c <CAN_data_receive>
	x=can_msg_receive.data[0];
     98c:	2f 85       	ldd	r18, Y+15	; 0x0f
     98e:	82 2f       	mov	r24, r18
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <x+0x1>
     996:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <x>
	y=can_msg_receive.data[1];
     99a:	88 89       	ldd	r24, Y+16	; 0x10
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <y+0x1>
     9a2:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <y>
 	printf("y1 er %02x \n\r",x);
     9a6:	1f 92       	push	r1
     9a8:	2f 93       	push	r18
     9aa:	a3 e3       	ldi	r26, 0x33	; 51
     9ac:	b2 e0       	ldi	r27, 0x02	; 2
     9ae:	bf 93       	push	r27
     9b0:	af 93       	push	r26
     9b2:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
	printf("y2 er %02x \n\r",y);
     9b6:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <y+0x1>
     9ba:	8f 93       	push	r24
     9bc:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <y>
     9c0:	8f 93       	push	r24
     9c2:	a1 e4       	ldi	r26, 0x41	; 65
     9c4:	b2 e0       	ldi	r27, 0x02	; 2
     9c6:	bf 93       	push	r27
     9c8:	af 93       	push	r26
     9ca:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9ce:	88 e7       	ldi	r24, 0x78	; 120
     9d0:	9f eb       	ldi	r25, 0xBF	; 191
     9d2:	a3 e0       	ldi	r26, 0x03	; 3
     9d4:	81 50       	subi	r24, 0x01	; 1
     9d6:	90 40       	sbci	r25, 0x00	; 0
     9d8:	a0 40       	sbci	r26, 0x00	; 0
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <main+0x1fa>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <main+0x204>
     9de:	00 00       	nop
     9e0:	0f b6       	in	r0, 0x3f	; 63
     9e2:	f8 94       	cli
     9e4:	de bf       	out	0x3e, r29	; 62
     9e6:	0f be       	out	0x3f, r0	; 63
     9e8:	cd bf       	out	0x3d, r28	; 61
     9ea:	91 cf       	rjmp	.-222    	; 0x90e <main+0x134>

000009ec <MCP_reset>:
	SPI_send(MCP_READ_STATUS);
	uint8_t status = SPI_send(0);
	SPI_set_ss(1);
	
	return status;
}
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 40 06 	call	0xc80	; 0xc80 <SPI_set_ss>
     9f4:	80 ec       	ldi	r24, 0xC0	; 192
     9f6:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
     9fa:	85 ef       	ldi	r24, 0xF5	; 245
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <MCP_reset+0x12>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <MCP_reset+0x18>
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 40 06 	call	0xc80	; 0xc80 <SPI_set_ss>
     a0c:	08 95       	ret

00000a0e <MCP_read>:
     a0e:	cf 93       	push	r28
     a10:	c8 2f       	mov	r28, r24
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 40 06 	call	0xc80	; 0xc80 <SPI_set_ss>
     a1a:	83 e0       	ldi	r24, 0x03	; 3
     a1c:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
     a20:	8c 2f       	mov	r24, r28
     a22:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
     a2c:	c8 2f       	mov	r28, r24
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 40 06 	call	0xc80	; 0xc80 <SPI_set_ss>
     a36:	8c 2f       	mov	r24, r28
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <MCP_init>:
     a3c:	0e 94 34 06 	call	0xc68	; 0xc68 <SPI_init>
     a40:	0e 94 f6 04 	call	0x9ec	; 0x9ec <MCP_reset>
     a44:	8e e0       	ldi	r24, 0x0E	; 14
     a46:	0e 94 07 05 	call	0xa0e	; 0xa0e <MCP_read>
     a4a:	80 7e       	andi	r24, 0xE0	; 224
     a4c:	80 38       	cpi	r24, 0x80	; 128
     a4e:	51 f0       	breq	.+20     	; 0xa64 <MCP_init+0x28>
     a50:	8f e4       	ldi	r24, 0x4F	; 79
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	9f 93       	push	r25
     a56:	8f 93       	push	r24
     a58:	0e 94 dd 06 	call	0xdba	; 0xdba <printf>
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	08 95       	ret
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	08 95       	ret

00000a68 <MCP_write>:
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	d8 2f       	mov	r29, r24
     a6e:	c6 2f       	mov	r28, r22
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 40 06 	call	0xc80	; 0xc80 <SPI_set_ss>
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
     a7e:	8d 2f       	mov	r24, r29
     a80:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
     a84:	8c 2f       	mov	r24, r28
     a86:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 40 06 	call	0xc80	; 0xc80 <SPI_set_ss>
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <MCP_request_to_send>:
     a98:	cf 93       	push	r28
     a9a:	c8 2f       	mov	r28, r24
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 94 40 06 	call	0xc80	; 0xc80 <SPI_set_ss>
     aa4:	8c 2f       	mov	r24, r28
     aa6:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 40 06 	call	0xc80	; 0xc80 <SPI_set_ss>
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <MCP_bit_modify>:

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	18 2f       	mov	r17, r24
     abe:	d6 2f       	mov	r29, r22
     ac0:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 40 06 	call	0xc80	; 0xc80 <SPI_set_ss>
	SPI_send(MCP_BITMOD);
     aca:	85 e0       	ldi	r24, 0x05	; 5
     acc:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
	
	SPI_send(address);
     ad0:	81 2f       	mov	r24, r17
     ad2:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
	SPI_send(mask);
     ad6:	8d 2f       	mov	r24, r29
     ad8:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
	SPI_send(data);
     adc:	8c 2f       	mov	r24, r28
     ade:	0e 94 3b 06 	call	0xc76	; 0xc76 <SPI_send>
	
	SPI_set_ss(1);
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 40 06 	call	0xc80	; 0xc80 <SPI_set_ss>
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	08 95       	ret

00000af2 <OLED_home>:
			*OLED_data = pgm_read_byte(&ntnu[y+1][i]);
		}
	}
	
	return 0;
}
     af2:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <page>
     af6:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <col>
     afa:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     afe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b02:	83 ed       	ldi	r24, 0xD3	; 211
     b04:	80 83       	st	Z, r24
     b06:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b0a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b0e:	88 ec       	ldi	r24, 0xC8	; 200
     b10:	80 83       	st	Z, r24
     b12:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b16:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b1a:	81 e2       	ldi	r24, 0x21	; 33
     b1c:	80 83       	st	Z, r24
     b1e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b22:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b26:	10 82       	st	Z, r1
     b28:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b2c:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b30:	8f e7       	ldi	r24, 0x7F	; 127
     b32:	80 83       	st	Z, r24
     b34:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b38:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b3c:	82 e2       	ldi	r24, 0x22	; 34
     b3e:	80 83       	st	Z, r24
     b40:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b44:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b48:	10 82       	st	Z, r1
     b4a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b4e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b52:	87 e0       	ldi	r24, 0x07	; 7
     b54:	80 83       	st	Z, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	08 95       	ret

00000b5c <OLED_goto_line>:
     b5c:	cf 93       	push	r28
     b5e:	c8 2f       	mov	r28, r24
     b60:	0e 94 79 05 	call	0xaf2	; 0xaf2 <OLED_home>
     b64:	c8 30       	cpi	r28, 0x08	; 8
     b66:	98 f4       	brcc	.+38     	; 0xb8e <OLED_goto_line+0x32>
     b68:	c0 93 7a 02 	sts	0x027A, r28	; 0x80027a <page>
     b6c:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b70:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b74:	10 82       	st	Z, r1
     b76:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b7a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b7e:	80 e1       	ldi	r24, 0x10	; 16
     b80:	80 83       	st	Z, r24
     b82:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     b86:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     b8a:	c0 6b       	ori	r28, 0xB0	; 176
     b8c:	c0 83       	st	Z, r28
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <OLED_pos>:
     b96:	cf 93       	push	r28
     b98:	c6 2f       	mov	r28, r22
     b9a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <OLED_goto_line>
     b9e:	c0 31       	cpi	r28, 0x10	; 16
     ba0:	98 f4       	brcc	.+38     	; 0xbc8 <OLED_pos+0x32>
     ba2:	8c 2f       	mov	r24, r28
     ba4:	88 0f       	add	r24, r24
     ba6:	88 0f       	add	r24, r24
     ba8:	88 0f       	add	r24, r24
     baa:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <col>
     bae:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     bb2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     bb6:	8f 70       	andi	r24, 0x0F	; 15
     bb8:	80 83       	st	Z, r24
     bba:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     bbe:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     bc2:	c0 62       	ori	r28, 0x20	; 32
     bc4:	c6 95       	lsr	r28
     bc6:	c0 83       	st	Z, r28
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <OLED_clear_line>:
     bd0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <OLED_goto_line>
     bd4:	80 e8       	ldi	r24, 0x80	; 128
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <OLED_data>
     bdc:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <OLED_data+0x1>
     be0:	10 82       	st	Z, r1
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	c9 f7       	brne	.-14     	; 0xbd8 <OLED_clear_line+0x8>
     be6:	0e 94 79 05 	call	0xaf2	; 0xaf2 <OLED_home>
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	08 95       	ret

00000bf0 <OLED_clear>:
     bf0:	cf 93       	push	r28
     bf2:	c0 e0       	ldi	r28, 0x00	; 0
     bf4:	8c 2f       	mov	r24, r28
     bf6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <OLED_clear_line>
     bfa:	cf 5f       	subi	r28, 0xFF	; 255
     bfc:	c8 30       	cpi	r28, 0x08	; 8
     bfe:	d1 f7       	brne	.-12     	; 0xbf4 <OLED_clear+0x4>
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <OLED_print_char>:
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	fc 01       	movw	r30, r24
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	e0 59       	subi	r30, 0x90	; 144
     c1a:	f0 40       	sbci	r31, 0x00	; 0
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	88 58       	subi	r24, 0x88	; 136
     c2a:	90 40       	sbci	r25, 0x00	; 0
     c2c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <OLED_data>
     c30:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <OLED_data+0x1>
     c34:	24 91       	lpm	r18, Z
     c36:	2c 93       	st	X, r18
     c38:	31 96       	adiw	r30, 0x01	; 1
     c3a:	e8 17       	cp	r30, r24
     c3c:	f9 07       	cpc	r31, r25
     c3e:	b1 f7       	brne	.-20     	; 0xc2c <OLED_print_char+0x24>
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	08 95       	ret

00000c46 <OLED_print>:


int OLED_print(char *data) {
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	ec 01       	movw	r28, r24
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
     c4c:	88 81       	ld	r24, Y
     c4e:	88 23       	and	r24, r24
     c50:	31 f0       	breq	.+12     	; 0xc5e <OLED_print+0x18>
     c52:	21 96       	adiw	r28, 0x01	; 1
		OLED_print_char(data[i]);
     c54:	0e 94 04 06 	call	0xc08	; 0xc08 <OLED_print_char>

int OLED_print(char *data) {
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
     c58:	89 91       	ld	r24, Y+
     c5a:	81 11       	cpse	r24, r1
     c5c:	fb cf       	rjmp	.-10     	; 0xc54 <OLED_print+0xe>
		OLED_print_char(data[i]);
		i++;
	}
	
	return 0;
}
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <SPI_init>:
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
	
	return SPDR;
}
     c68:	87 b3       	in	r24, 0x17	; 23
     c6a:	80 6b       	ori	r24, 0xB0	; 176
     c6c:	87 bb       	out	0x17, r24	; 23
     c6e:	be 98       	cbi	0x17, 6	; 23
     c70:	81 e5       	ldi	r24, 0x51	; 81
     c72:	8d b9       	out	0x0d, r24	; 13
     c74:	08 95       	ret

00000c76 <SPI_send>:
     c76:	8f b9       	out	0x0f, r24	; 15
     c78:	77 9b       	sbis	0x0e, 7	; 14
     c7a:	fe cf       	rjmp	.-4      	; 0xc78 <SPI_send+0x2>
     c7c:	8f b1       	in	r24, 0x0f	; 15
     c7e:	08 95       	ret

00000c80 <SPI_set_ss>:

// Defines chip-select, unsure if necessary
void SPI_set_ss( int select )
{
	//for ATmega 162 set chip-select
	if (select == 1){
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	91 05       	cpc	r25, r1
     c84:	11 f4       	brne	.+4      	; 0xc8a <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
     c86:	c4 9a       	sbi	0x18, 4	; 24
     c88:	08 95       	ret
	}
	else if (select == 0){
     c8a:	89 2b       	or	r24, r25
     c8c:	09 f4       	brne	.+2      	; 0xc90 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
     c8e:	c4 98       	cbi	0x18, 4	; 24
     c90:	08 95       	ret

00000c92 <SRAM_init>:
#include <avr/io.h>
#include <stdio.h>

int SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
     c92:	85 b7       	in	r24, 0x35	; 53
     c94:	80 68       	ori	r24, 0x80	; 128
     c96:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     c98:	80 b7       	in	r24, 0x30	; 48
     c9a:	80 62       	ori	r24, 0x20	; 32
     c9c:	80 bf       	out	0x30, r24	; 48
	
	return 0;
}
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	08 95       	ret

00000ca4 <UART_TX>:
}

int UART_TX(char data, FILE * _in){
	(void)(_in);
	
	while( !(UCSR0A & (1 << UDRE0)) );
     ca4:	5d 9b       	sbis	0x0b, 5	; 11
     ca6:	fe cf       	rjmp	.-4      	; 0xca4 <UART_TX>
	
	// send data
	UDR0 = data;
     ca8:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	08 95       	ret

00000cb0 <UART_RX>:

int UART_RX(FILE * _in ){
	(void)(_in);
	while( !(UCSR0A & (1 << RXC0)) );
     cb0:	5f 9b       	sbis	0x0b, 7	; 11
     cb2:	fe cf       	rjmp	.-4      	; 0xcb0 <UART_RX>
	
	// Data recieved
	return UDR0;
     cb4:	8c b1       	in	r24, 0x0c	; 12
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	08 95       	ret

00000cba <UART_Init>:


void UART_Init(unsigned int ubrr)
{
	// Baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     cba:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
     cbc:	89 b9       	out	0x09, r24	; 9
	
	// Enable Rx and Tx
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) ;
     cbe:	88 e1       	ldi	r24, 0x18	; 24
     cc0:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
     cc2:	8e e8       	ldi	r24, 0x8E	; 142
     cc4:	80 bd       	out	0x20, r24	; 32
	fdevopen(UART_TX, UART_RX);
     cc6:	68 e5       	ldi	r22, 0x58	; 88
     cc8:	76 e0       	ldi	r23, 0x06	; 6
     cca:	82 e5       	ldi	r24, 0x52	; 82
     ccc:	96 e0       	ldi	r25, 0x06	; 6
     cce:	0e 94 92 06 	call	0xd24	; 0xd24 <fdevopen>
     cd2:	08 95       	ret

00000cd4 <__divmodhi4>:
     cd4:	97 fb       	bst	r25, 7
     cd6:	07 2e       	mov	r0, r23
     cd8:	16 f4       	brtc	.+4      	; 0xcde <__divmodhi4+0xa>
     cda:	00 94       	com	r0
     cdc:	07 d0       	rcall	.+14     	; 0xcec <__divmodhi4_neg1>
     cde:	77 fd       	sbrc	r23, 7
     ce0:	09 d0       	rcall	.+18     	; 0xcf4 <__divmodhi4_neg2>
     ce2:	0e 94 7e 06 	call	0xcfc	; 0xcfc <__udivmodhi4>
     ce6:	07 fc       	sbrc	r0, 7
     ce8:	05 d0       	rcall	.+10     	; 0xcf4 <__divmodhi4_neg2>
     cea:	3e f4       	brtc	.+14     	; 0xcfa <__divmodhi4_exit>

00000cec <__divmodhi4_neg1>:
     cec:	90 95       	com	r25
     cee:	81 95       	neg	r24
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	08 95       	ret

00000cf4 <__divmodhi4_neg2>:
     cf4:	70 95       	com	r23
     cf6:	61 95       	neg	r22
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255

00000cfa <__divmodhi4_exit>:
     cfa:	08 95       	ret

00000cfc <__udivmodhi4>:
     cfc:	aa 1b       	sub	r26, r26
     cfe:	bb 1b       	sub	r27, r27
     d00:	51 e1       	ldi	r21, 0x11	; 17
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <__udivmodhi4_ep>

00000d04 <__udivmodhi4_loop>:
     d04:	aa 1f       	adc	r26, r26
     d06:	bb 1f       	adc	r27, r27
     d08:	a6 17       	cp	r26, r22
     d0a:	b7 07       	cpc	r27, r23
     d0c:	10 f0       	brcs	.+4      	; 0xd12 <__udivmodhi4_ep>
     d0e:	a6 1b       	sub	r26, r22
     d10:	b7 0b       	sbc	r27, r23

00000d12 <__udivmodhi4_ep>:
     d12:	88 1f       	adc	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	5a 95       	dec	r21
     d18:	a9 f7       	brne	.-22     	; 0xd04 <__udivmodhi4_loop>
     d1a:	80 95       	com	r24
     d1c:	90 95       	com	r25
     d1e:	bc 01       	movw	r22, r24
     d20:	cd 01       	movw	r24, r26
     d22:	08 95       	ret

00000d24 <fdevopen>:
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	31 f4       	brne	.+12     	; 0xd3c <fdevopen+0x18>
     d30:	61 15       	cp	r22, r1
     d32:	71 05       	cpc	r23, r1
     d34:	19 f4       	brne	.+6      	; 0xd3c <fdevopen+0x18>
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	3a c0       	rjmp	.+116    	; 0xdb0 <fdevopen+0x8c>
     d3c:	8b 01       	movw	r16, r22
     d3e:	ec 01       	movw	r28, r24
     d40:	6e e0       	ldi	r22, 0x0E	; 14
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 c5 08 	call	0x118a	; 0x118a <calloc>
     d4c:	fc 01       	movw	r30, r24
     d4e:	89 2b       	or	r24, r25
     d50:	91 f3       	breq	.-28     	; 0xd36 <fdevopen+0x12>
     d52:	80 e8       	ldi	r24, 0x80	; 128
     d54:	83 83       	std	Z+3, r24	; 0x03
     d56:	01 15       	cp	r16, r1
     d58:	11 05       	cpc	r17, r1
     d5a:	71 f0       	breq	.+28     	; 0xd78 <fdevopen+0x54>
     d5c:	13 87       	std	Z+11, r17	; 0x0b
     d5e:	02 87       	std	Z+10, r16	; 0x0a
     d60:	81 e8       	ldi	r24, 0x81	; 129
     d62:	83 83       	std	Z+3, r24	; 0x03
     d64:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <__iob>
     d68:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <__iob+0x1>
     d6c:	89 2b       	or	r24, r25
     d6e:	21 f4       	brne	.+8      	; 0xd78 <fdevopen+0x54>
     d70:	f0 93 7c 02 	sts	0x027C, r31	; 0x80027c <__iob+0x1>
     d74:	e0 93 7b 02 	sts	0x027B, r30	; 0x80027b <__iob>
     d78:	20 97       	sbiw	r28, 0x00	; 0
     d7a:	c9 f0       	breq	.+50     	; 0xdae <fdevopen+0x8a>
     d7c:	d1 87       	std	Z+9, r29	; 0x09
     d7e:	c0 87       	std	Z+8, r28	; 0x08
     d80:	83 81       	ldd	r24, Z+3	; 0x03
     d82:	82 60       	ori	r24, 0x02	; 2
     d84:	83 83       	std	Z+3, r24	; 0x03
     d86:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <__iob+0x2>
     d8a:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <__iob+0x3>
     d8e:	89 2b       	or	r24, r25
     d90:	71 f4       	brne	.+28     	; 0xdae <fdevopen+0x8a>
     d92:	f0 93 7e 02 	sts	0x027E, r31	; 0x80027e <__iob+0x3>
     d96:	e0 93 7d 02 	sts	0x027D, r30	; 0x80027d <__iob+0x2>
     d9a:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <__iob+0x4>
     d9e:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <__iob+0x5>
     da2:	89 2b       	or	r24, r25
     da4:	21 f4       	brne	.+8      	; 0xdae <fdevopen+0x8a>
     da6:	f0 93 80 02 	sts	0x0280, r31	; 0x800280 <__iob+0x5>
     daa:	e0 93 7f 02 	sts	0x027F, r30	; 0x80027f <__iob+0x4>
     dae:	cf 01       	movw	r24, r30
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	08 95       	ret

00000dba <printf>:
     dba:	a0 e0       	ldi	r26, 0x00	; 0
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e3 ee       	ldi	r30, 0xE3	; 227
     dc0:	f6 e0       	ldi	r31, 0x06	; 6
     dc2:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__prologue_saves__+0x20>
     dc6:	ae 01       	movw	r20, r28
     dc8:	4b 5f       	subi	r20, 0xFB	; 251
     dca:	5f 4f       	sbci	r21, 0xFF	; 255
     dcc:	fa 01       	movw	r30, r20
     dce:	61 91       	ld	r22, Z+
     dd0:	71 91       	ld	r23, Z+
     dd2:	af 01       	movw	r20, r30
     dd4:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <__iob+0x2>
     dd8:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <__iob+0x3>
     ddc:	0e 94 f3 06 	call	0xde6	; 0xde6 <vfprintf>
     de0:	e2 e0       	ldi	r30, 0x02	; 2
     de2:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__epilogue_restores__+0x20>

00000de6 <vfprintf>:
     de6:	ac e0       	ldi	r26, 0x0C	; 12
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e9 ef       	ldi	r30, 0xF9	; 249
     dec:	f6 e0       	ldi	r31, 0x06	; 6
     dee:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__prologue_saves__>
     df2:	7c 01       	movw	r14, r24
     df4:	6b 01       	movw	r12, r22
     df6:	8a 01       	movw	r16, r20
     df8:	fc 01       	movw	r30, r24
     dfa:	17 82       	std	Z+7, r1	; 0x07
     dfc:	16 82       	std	Z+6, r1	; 0x06
     dfe:	83 81       	ldd	r24, Z+3	; 0x03
     e00:	81 ff       	sbrs	r24, 1
     e02:	bd c1       	rjmp	.+890    	; 0x117e <vfprintf+0x398>
     e04:	ce 01       	movw	r24, r28
     e06:	01 96       	adiw	r24, 0x01	; 1
     e08:	4c 01       	movw	r8, r24
     e0a:	f7 01       	movw	r30, r14
     e0c:	93 81       	ldd	r25, Z+3	; 0x03
     e0e:	f6 01       	movw	r30, r12
     e10:	93 fd       	sbrc	r25, 3
     e12:	85 91       	lpm	r24, Z+
     e14:	93 ff       	sbrs	r25, 3
     e16:	81 91       	ld	r24, Z+
     e18:	6f 01       	movw	r12, r30
     e1a:	88 23       	and	r24, r24
     e1c:	09 f4       	brne	.+2      	; 0xe20 <vfprintf+0x3a>
     e1e:	ab c1       	rjmp	.+854    	; 0x1176 <vfprintf+0x390>
     e20:	85 32       	cpi	r24, 0x25	; 37
     e22:	39 f4       	brne	.+14     	; 0xe32 <vfprintf+0x4c>
     e24:	93 fd       	sbrc	r25, 3
     e26:	85 91       	lpm	r24, Z+
     e28:	93 ff       	sbrs	r25, 3
     e2a:	81 91       	ld	r24, Z+
     e2c:	6f 01       	movw	r12, r30
     e2e:	85 32       	cpi	r24, 0x25	; 37
     e30:	29 f4       	brne	.+10     	; 0xe3c <vfprintf+0x56>
     e32:	b7 01       	movw	r22, r14
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
     e3a:	e7 cf       	rjmp	.-50     	; 0xe0a <vfprintf+0x24>
     e3c:	51 2c       	mov	r5, r1
     e3e:	31 2c       	mov	r3, r1
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	20 32       	cpi	r18, 0x20	; 32
     e44:	a0 f4       	brcc	.+40     	; 0xe6e <vfprintf+0x88>
     e46:	8b 32       	cpi	r24, 0x2B	; 43
     e48:	69 f0       	breq	.+26     	; 0xe64 <vfprintf+0x7e>
     e4a:	30 f4       	brcc	.+12     	; 0xe58 <vfprintf+0x72>
     e4c:	80 32       	cpi	r24, 0x20	; 32
     e4e:	59 f0       	breq	.+22     	; 0xe66 <vfprintf+0x80>
     e50:	83 32       	cpi	r24, 0x23	; 35
     e52:	69 f4       	brne	.+26     	; 0xe6e <vfprintf+0x88>
     e54:	20 61       	ori	r18, 0x10	; 16
     e56:	2c c0       	rjmp	.+88     	; 0xeb0 <vfprintf+0xca>
     e58:	8d 32       	cpi	r24, 0x2D	; 45
     e5a:	39 f0       	breq	.+14     	; 0xe6a <vfprintf+0x84>
     e5c:	80 33       	cpi	r24, 0x30	; 48
     e5e:	39 f4       	brne	.+14     	; 0xe6e <vfprintf+0x88>
     e60:	21 60       	ori	r18, 0x01	; 1
     e62:	26 c0       	rjmp	.+76     	; 0xeb0 <vfprintf+0xca>
     e64:	22 60       	ori	r18, 0x02	; 2
     e66:	24 60       	ori	r18, 0x04	; 4
     e68:	23 c0       	rjmp	.+70     	; 0xeb0 <vfprintf+0xca>
     e6a:	28 60       	ori	r18, 0x08	; 8
     e6c:	21 c0       	rjmp	.+66     	; 0xeb0 <vfprintf+0xca>
     e6e:	27 fd       	sbrc	r18, 7
     e70:	27 c0       	rjmp	.+78     	; 0xec0 <vfprintf+0xda>
     e72:	30 ed       	ldi	r19, 0xD0	; 208
     e74:	38 0f       	add	r19, r24
     e76:	3a 30       	cpi	r19, 0x0A	; 10
     e78:	78 f4       	brcc	.+30     	; 0xe98 <vfprintf+0xb2>
     e7a:	26 ff       	sbrs	r18, 6
     e7c:	06 c0       	rjmp	.+12     	; 0xe8a <vfprintf+0xa4>
     e7e:	fa e0       	ldi	r31, 0x0A	; 10
     e80:	5f 9e       	mul	r5, r31
     e82:	30 0d       	add	r19, r0
     e84:	11 24       	eor	r1, r1
     e86:	53 2e       	mov	r5, r19
     e88:	13 c0       	rjmp	.+38     	; 0xeb0 <vfprintf+0xca>
     e8a:	8a e0       	ldi	r24, 0x0A	; 10
     e8c:	38 9e       	mul	r3, r24
     e8e:	30 0d       	add	r19, r0
     e90:	11 24       	eor	r1, r1
     e92:	33 2e       	mov	r3, r19
     e94:	20 62       	ori	r18, 0x20	; 32
     e96:	0c c0       	rjmp	.+24     	; 0xeb0 <vfprintf+0xca>
     e98:	8e 32       	cpi	r24, 0x2E	; 46
     e9a:	21 f4       	brne	.+8      	; 0xea4 <vfprintf+0xbe>
     e9c:	26 fd       	sbrc	r18, 6
     e9e:	6b c1       	rjmp	.+726    	; 0x1176 <vfprintf+0x390>
     ea0:	20 64       	ori	r18, 0x40	; 64
     ea2:	06 c0       	rjmp	.+12     	; 0xeb0 <vfprintf+0xca>
     ea4:	8c 36       	cpi	r24, 0x6C	; 108
     ea6:	11 f4       	brne	.+4      	; 0xeac <vfprintf+0xc6>
     ea8:	20 68       	ori	r18, 0x80	; 128
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <vfprintf+0xca>
     eac:	88 36       	cpi	r24, 0x68	; 104
     eae:	41 f4       	brne	.+16     	; 0xec0 <vfprintf+0xda>
     eb0:	f6 01       	movw	r30, r12
     eb2:	93 fd       	sbrc	r25, 3
     eb4:	85 91       	lpm	r24, Z+
     eb6:	93 ff       	sbrs	r25, 3
     eb8:	81 91       	ld	r24, Z+
     eba:	6f 01       	movw	r12, r30
     ebc:	81 11       	cpse	r24, r1
     ebe:	c1 cf       	rjmp	.-126    	; 0xe42 <vfprintf+0x5c>
     ec0:	98 2f       	mov	r25, r24
     ec2:	9f 7d       	andi	r25, 0xDF	; 223
     ec4:	95 54       	subi	r25, 0x45	; 69
     ec6:	93 30       	cpi	r25, 0x03	; 3
     ec8:	28 f4       	brcc	.+10     	; 0xed4 <vfprintf+0xee>
     eca:	0c 5f       	subi	r16, 0xFC	; 252
     ecc:	1f 4f       	sbci	r17, 0xFF	; 255
     ece:	ff e3       	ldi	r31, 0x3F	; 63
     ed0:	f9 83       	std	Y+1, r31	; 0x01
     ed2:	0d c0       	rjmp	.+26     	; 0xeee <vfprintf+0x108>
     ed4:	83 36       	cpi	r24, 0x63	; 99
     ed6:	31 f0       	breq	.+12     	; 0xee4 <vfprintf+0xfe>
     ed8:	83 37       	cpi	r24, 0x73	; 115
     eda:	71 f0       	breq	.+28     	; 0xef8 <vfprintf+0x112>
     edc:	83 35       	cpi	r24, 0x53	; 83
     ede:	09 f0       	breq	.+2      	; 0xee2 <vfprintf+0xfc>
     ee0:	5b c0       	rjmp	.+182    	; 0xf98 <vfprintf+0x1b2>
     ee2:	22 c0       	rjmp	.+68     	; 0xf28 <vfprintf+0x142>
     ee4:	f8 01       	movw	r30, r16
     ee6:	80 81       	ld	r24, Z
     ee8:	89 83       	std	Y+1, r24	; 0x01
     eea:	0e 5f       	subi	r16, 0xFE	; 254
     eec:	1f 4f       	sbci	r17, 0xFF	; 255
     eee:	44 24       	eor	r4, r4
     ef0:	43 94       	inc	r4
     ef2:	51 2c       	mov	r5, r1
     ef4:	54 01       	movw	r10, r8
     ef6:	15 c0       	rjmp	.+42     	; 0xf22 <vfprintf+0x13c>
     ef8:	38 01       	movw	r6, r16
     efa:	f2 e0       	ldi	r31, 0x02	; 2
     efc:	6f 0e       	add	r6, r31
     efe:	71 1c       	adc	r7, r1
     f00:	f8 01       	movw	r30, r16
     f02:	a0 80       	ld	r10, Z
     f04:	b1 80       	ldd	r11, Z+1	; 0x01
     f06:	26 ff       	sbrs	r18, 6
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <vfprintf+0x12a>
     f0a:	65 2d       	mov	r22, r5
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <vfprintf+0x12e>
     f10:	6f ef       	ldi	r22, 0xFF	; 255
     f12:	7f ef       	ldi	r23, 0xFF	; 255
     f14:	c5 01       	movw	r24, r10
     f16:	2c 87       	std	Y+12, r18	; 0x0c
     f18:	0e 94 20 0a 	call	0x1440	; 0x1440 <strnlen>
     f1c:	2c 01       	movw	r4, r24
     f1e:	83 01       	movw	r16, r6
     f20:	2c 85       	ldd	r18, Y+12	; 0x0c
     f22:	2f 77       	andi	r18, 0x7F	; 127
     f24:	22 2e       	mov	r2, r18
     f26:	17 c0       	rjmp	.+46     	; 0xf56 <vfprintf+0x170>
     f28:	38 01       	movw	r6, r16
     f2a:	f2 e0       	ldi	r31, 0x02	; 2
     f2c:	6f 0e       	add	r6, r31
     f2e:	71 1c       	adc	r7, r1
     f30:	f8 01       	movw	r30, r16
     f32:	a0 80       	ld	r10, Z
     f34:	b1 80       	ldd	r11, Z+1	; 0x01
     f36:	26 ff       	sbrs	r18, 6
     f38:	03 c0       	rjmp	.+6      	; 0xf40 <vfprintf+0x15a>
     f3a:	65 2d       	mov	r22, r5
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <vfprintf+0x15e>
     f40:	6f ef       	ldi	r22, 0xFF	; 255
     f42:	7f ef       	ldi	r23, 0xFF	; 255
     f44:	c5 01       	movw	r24, r10
     f46:	2c 87       	std	Y+12, r18	; 0x0c
     f48:	0e 94 0e 0a 	call	0x141c	; 0x141c <strnlen_P>
     f4c:	2c 01       	movw	r4, r24
     f4e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f50:	20 68       	ori	r18, 0x80	; 128
     f52:	22 2e       	mov	r2, r18
     f54:	83 01       	movw	r16, r6
     f56:	23 fc       	sbrc	r2, 3
     f58:	1b c0       	rjmp	.+54     	; 0xf90 <vfprintf+0x1aa>
     f5a:	83 2d       	mov	r24, r3
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	48 16       	cp	r4, r24
     f60:	59 06       	cpc	r5, r25
     f62:	b0 f4       	brcc	.+44     	; 0xf90 <vfprintf+0x1aa>
     f64:	b7 01       	movw	r22, r14
     f66:	80 e2       	ldi	r24, 0x20	; 32
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
     f6e:	3a 94       	dec	r3
     f70:	f4 cf       	rjmp	.-24     	; 0xf5a <vfprintf+0x174>
     f72:	f5 01       	movw	r30, r10
     f74:	27 fc       	sbrc	r2, 7
     f76:	85 91       	lpm	r24, Z+
     f78:	27 fe       	sbrs	r2, 7
     f7a:	81 91       	ld	r24, Z+
     f7c:	5f 01       	movw	r10, r30
     f7e:	b7 01       	movw	r22, r14
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
     f86:	31 10       	cpse	r3, r1
     f88:	3a 94       	dec	r3
     f8a:	f1 e0       	ldi	r31, 0x01	; 1
     f8c:	4f 1a       	sub	r4, r31
     f8e:	51 08       	sbc	r5, r1
     f90:	41 14       	cp	r4, r1
     f92:	51 04       	cpc	r5, r1
     f94:	71 f7       	brne	.-36     	; 0xf72 <vfprintf+0x18c>
     f96:	e5 c0       	rjmp	.+458    	; 0x1162 <vfprintf+0x37c>
     f98:	84 36       	cpi	r24, 0x64	; 100
     f9a:	11 f0       	breq	.+4      	; 0xfa0 <vfprintf+0x1ba>
     f9c:	89 36       	cpi	r24, 0x69	; 105
     f9e:	39 f5       	brne	.+78     	; 0xfee <vfprintf+0x208>
     fa0:	f8 01       	movw	r30, r16
     fa2:	27 ff       	sbrs	r18, 7
     fa4:	07 c0       	rjmp	.+14     	; 0xfb4 <vfprintf+0x1ce>
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	0c 5f       	subi	r16, 0xFC	; 252
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	08 c0       	rjmp	.+16     	; 0xfc4 <vfprintf+0x1de>
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	07 2e       	mov	r0, r23
     fba:	00 0c       	add	r0, r0
     fbc:	88 0b       	sbc	r24, r24
     fbe:	99 0b       	sbc	r25, r25
     fc0:	0e 5f       	subi	r16, 0xFE	; 254
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	2f 76       	andi	r18, 0x6F	; 111
     fc6:	72 2e       	mov	r7, r18
     fc8:	97 ff       	sbrs	r25, 7
     fca:	09 c0       	rjmp	.+18     	; 0xfde <vfprintf+0x1f8>
     fcc:	90 95       	com	r25
     fce:	80 95       	com	r24
     fd0:	70 95       	com	r23
     fd2:	61 95       	neg	r22
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	8f 4f       	sbci	r24, 0xFF	; 255
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	20 68       	ori	r18, 0x80	; 128
     fdc:	72 2e       	mov	r7, r18
     fde:	2a e0       	ldi	r18, 0x0A	; 10
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	a4 01       	movw	r20, r8
     fe4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__ultoa_invert>
     fe8:	a8 2e       	mov	r10, r24
     fea:	a8 18       	sub	r10, r8
     fec:	44 c0       	rjmp	.+136    	; 0x1076 <vfprintf+0x290>
     fee:	85 37       	cpi	r24, 0x75	; 117
     ff0:	29 f4       	brne	.+10     	; 0xffc <vfprintf+0x216>
     ff2:	2f 7e       	andi	r18, 0xEF	; 239
     ff4:	b2 2e       	mov	r11, r18
     ff6:	2a e0       	ldi	r18, 0x0A	; 10
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	25 c0       	rjmp	.+74     	; 0x1046 <vfprintf+0x260>
     ffc:	f2 2f       	mov	r31, r18
     ffe:	f9 7f       	andi	r31, 0xF9	; 249
    1000:	bf 2e       	mov	r11, r31
    1002:	8f 36       	cpi	r24, 0x6F	; 111
    1004:	c1 f0       	breq	.+48     	; 0x1036 <vfprintf+0x250>
    1006:	18 f4       	brcc	.+6      	; 0x100e <vfprintf+0x228>
    1008:	88 35       	cpi	r24, 0x58	; 88
    100a:	79 f0       	breq	.+30     	; 0x102a <vfprintf+0x244>
    100c:	b4 c0       	rjmp	.+360    	; 0x1176 <vfprintf+0x390>
    100e:	80 37       	cpi	r24, 0x70	; 112
    1010:	19 f0       	breq	.+6      	; 0x1018 <vfprintf+0x232>
    1012:	88 37       	cpi	r24, 0x78	; 120
    1014:	21 f0       	breq	.+8      	; 0x101e <vfprintf+0x238>
    1016:	af c0       	rjmp	.+350    	; 0x1176 <vfprintf+0x390>
    1018:	2f 2f       	mov	r18, r31
    101a:	20 61       	ori	r18, 0x10	; 16
    101c:	b2 2e       	mov	r11, r18
    101e:	b4 fe       	sbrs	r11, 4
    1020:	0d c0       	rjmp	.+26     	; 0x103c <vfprintf+0x256>
    1022:	8b 2d       	mov	r24, r11
    1024:	84 60       	ori	r24, 0x04	; 4
    1026:	b8 2e       	mov	r11, r24
    1028:	09 c0       	rjmp	.+18     	; 0x103c <vfprintf+0x256>
    102a:	24 ff       	sbrs	r18, 4
    102c:	0a c0       	rjmp	.+20     	; 0x1042 <vfprintf+0x25c>
    102e:	9f 2f       	mov	r25, r31
    1030:	96 60       	ori	r25, 0x06	; 6
    1032:	b9 2e       	mov	r11, r25
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <vfprintf+0x25c>
    1036:	28 e0       	ldi	r18, 0x08	; 8
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	05 c0       	rjmp	.+10     	; 0x1046 <vfprintf+0x260>
    103c:	20 e1       	ldi	r18, 0x10	; 16
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vfprintf+0x260>
    1042:	20 e1       	ldi	r18, 0x10	; 16
    1044:	32 e0       	ldi	r19, 0x02	; 2
    1046:	f8 01       	movw	r30, r16
    1048:	b7 fe       	sbrs	r11, 7
    104a:	07 c0       	rjmp	.+14     	; 0x105a <vfprintf+0x274>
    104c:	60 81       	ld	r22, Z
    104e:	71 81       	ldd	r23, Z+1	; 0x01
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	0c 5f       	subi	r16, 0xFC	; 252
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	06 c0       	rjmp	.+12     	; 0x1066 <vfprintf+0x280>
    105a:	60 81       	ld	r22, Z
    105c:	71 81       	ldd	r23, Z+1	; 0x01
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 5f       	subi	r16, 0xFE	; 254
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	a4 01       	movw	r20, r8
    1068:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__ultoa_invert>
    106c:	a8 2e       	mov	r10, r24
    106e:	a8 18       	sub	r10, r8
    1070:	fb 2d       	mov	r31, r11
    1072:	ff 77       	andi	r31, 0x7F	; 127
    1074:	7f 2e       	mov	r7, r31
    1076:	76 fe       	sbrs	r7, 6
    1078:	0b c0       	rjmp	.+22     	; 0x1090 <vfprintf+0x2aa>
    107a:	37 2d       	mov	r19, r7
    107c:	3e 7f       	andi	r19, 0xFE	; 254
    107e:	a5 14       	cp	r10, r5
    1080:	50 f4       	brcc	.+20     	; 0x1096 <vfprintf+0x2b0>
    1082:	74 fe       	sbrs	r7, 4
    1084:	0a c0       	rjmp	.+20     	; 0x109a <vfprintf+0x2b4>
    1086:	72 fc       	sbrc	r7, 2
    1088:	08 c0       	rjmp	.+16     	; 0x109a <vfprintf+0x2b4>
    108a:	37 2d       	mov	r19, r7
    108c:	3e 7e       	andi	r19, 0xEE	; 238
    108e:	05 c0       	rjmp	.+10     	; 0x109a <vfprintf+0x2b4>
    1090:	ba 2c       	mov	r11, r10
    1092:	37 2d       	mov	r19, r7
    1094:	03 c0       	rjmp	.+6      	; 0x109c <vfprintf+0x2b6>
    1096:	ba 2c       	mov	r11, r10
    1098:	01 c0       	rjmp	.+2      	; 0x109c <vfprintf+0x2b6>
    109a:	b5 2c       	mov	r11, r5
    109c:	34 ff       	sbrs	r19, 4
    109e:	0d c0       	rjmp	.+26     	; 0x10ba <vfprintf+0x2d4>
    10a0:	fe 01       	movw	r30, r28
    10a2:	ea 0d       	add	r30, r10
    10a4:	f1 1d       	adc	r31, r1
    10a6:	80 81       	ld	r24, Z
    10a8:	80 33       	cpi	r24, 0x30	; 48
    10aa:	11 f4       	brne	.+4      	; 0x10b0 <vfprintf+0x2ca>
    10ac:	39 7e       	andi	r19, 0xE9	; 233
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <vfprintf+0x2dc>
    10b0:	32 ff       	sbrs	r19, 2
    10b2:	06 c0       	rjmp	.+12     	; 0x10c0 <vfprintf+0x2da>
    10b4:	b3 94       	inc	r11
    10b6:	b3 94       	inc	r11
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <vfprintf+0x2dc>
    10ba:	83 2f       	mov	r24, r19
    10bc:	86 78       	andi	r24, 0x86	; 134
    10be:	09 f0       	breq	.+2      	; 0x10c2 <vfprintf+0x2dc>
    10c0:	b3 94       	inc	r11
    10c2:	33 fd       	sbrc	r19, 3
    10c4:	13 c0       	rjmp	.+38     	; 0x10ec <vfprintf+0x306>
    10c6:	30 ff       	sbrs	r19, 0
    10c8:	06 c0       	rjmp	.+12     	; 0x10d6 <vfprintf+0x2f0>
    10ca:	5a 2c       	mov	r5, r10
    10cc:	b3 14       	cp	r11, r3
    10ce:	18 f4       	brcc	.+6      	; 0x10d6 <vfprintf+0x2f0>
    10d0:	53 0c       	add	r5, r3
    10d2:	5b 18       	sub	r5, r11
    10d4:	b3 2c       	mov	r11, r3
    10d6:	b3 14       	cp	r11, r3
    10d8:	68 f4       	brcc	.+26     	; 0x10f4 <vfprintf+0x30e>
    10da:	b7 01       	movw	r22, r14
    10dc:	80 e2       	ldi	r24, 0x20	; 32
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	3c 87       	std	Y+12, r19	; 0x0c
    10e2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    10e6:	b3 94       	inc	r11
    10e8:	3c 85       	ldd	r19, Y+12	; 0x0c
    10ea:	f5 cf       	rjmp	.-22     	; 0x10d6 <vfprintf+0x2f0>
    10ec:	b3 14       	cp	r11, r3
    10ee:	10 f4       	brcc	.+4      	; 0x10f4 <vfprintf+0x30e>
    10f0:	3b 18       	sub	r3, r11
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <vfprintf+0x310>
    10f4:	31 2c       	mov	r3, r1
    10f6:	34 ff       	sbrs	r19, 4
    10f8:	12 c0       	rjmp	.+36     	; 0x111e <vfprintf+0x338>
    10fa:	b7 01       	movw	r22, r14
    10fc:	80 e3       	ldi	r24, 0x30	; 48
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	3c 87       	std	Y+12, r19	; 0x0c
    1102:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    1106:	3c 85       	ldd	r19, Y+12	; 0x0c
    1108:	32 ff       	sbrs	r19, 2
    110a:	17 c0       	rjmp	.+46     	; 0x113a <vfprintf+0x354>
    110c:	31 fd       	sbrc	r19, 1
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <vfprintf+0x330>
    1110:	88 e7       	ldi	r24, 0x78	; 120
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	02 c0       	rjmp	.+4      	; 0x111a <vfprintf+0x334>
    1116:	88 e5       	ldi	r24, 0x58	; 88
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	b7 01       	movw	r22, r14
    111c:	0c c0       	rjmp	.+24     	; 0x1136 <vfprintf+0x350>
    111e:	83 2f       	mov	r24, r19
    1120:	86 78       	andi	r24, 0x86	; 134
    1122:	59 f0       	breq	.+22     	; 0x113a <vfprintf+0x354>
    1124:	31 ff       	sbrs	r19, 1
    1126:	02 c0       	rjmp	.+4      	; 0x112c <vfprintf+0x346>
    1128:	8b e2       	ldi	r24, 0x2B	; 43
    112a:	01 c0       	rjmp	.+2      	; 0x112e <vfprintf+0x348>
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	37 fd       	sbrc	r19, 7
    1130:	8d e2       	ldi	r24, 0x2D	; 45
    1132:	b7 01       	movw	r22, r14
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    113a:	a5 14       	cp	r10, r5
    113c:	38 f4       	brcc	.+14     	; 0x114c <vfprintf+0x366>
    113e:	b7 01       	movw	r22, r14
    1140:	80 e3       	ldi	r24, 0x30	; 48
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    1148:	5a 94       	dec	r5
    114a:	f7 cf       	rjmp	.-18     	; 0x113a <vfprintf+0x354>
    114c:	aa 94       	dec	r10
    114e:	f4 01       	movw	r30, r8
    1150:	ea 0d       	add	r30, r10
    1152:	f1 1d       	adc	r31, r1
    1154:	80 81       	ld	r24, Z
    1156:	b7 01       	movw	r22, r14
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    115e:	a1 10       	cpse	r10, r1
    1160:	f5 cf       	rjmp	.-22     	; 0x114c <vfprintf+0x366>
    1162:	33 20       	and	r3, r3
    1164:	09 f4       	brne	.+2      	; 0x1168 <vfprintf+0x382>
    1166:	51 ce       	rjmp	.-862    	; 0xe0a <vfprintf+0x24>
    1168:	b7 01       	movw	r22, r14
    116a:	80 e2       	ldi	r24, 0x20	; 32
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 2b 0a 	call	0x1456	; 0x1456 <fputc>
    1172:	3a 94       	dec	r3
    1174:	f6 cf       	rjmp	.-20     	; 0x1162 <vfprintf+0x37c>
    1176:	f7 01       	movw	r30, r14
    1178:	86 81       	ldd	r24, Z+6	; 0x06
    117a:	97 81       	ldd	r25, Z+7	; 0x07
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <vfprintf+0x39c>
    117e:	8f ef       	ldi	r24, 0xFF	; 255
    1180:	9f ef       	ldi	r25, 0xFF	; 255
    1182:	2c 96       	adiw	r28, 0x0c	; 12
    1184:	e2 e1       	ldi	r30, 0x12	; 18
    1186:	0c 94 dd 0a 	jmp	0x15ba	; 0x15ba <__epilogue_restores__>

0000118a <calloc>:
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	86 9f       	mul	r24, r22
    1194:	80 01       	movw	r16, r0
    1196:	87 9f       	mul	r24, r23
    1198:	10 0d       	add	r17, r0
    119a:	96 9f       	mul	r25, r22
    119c:	10 0d       	add	r17, r0
    119e:	11 24       	eor	r1, r1
    11a0:	c8 01       	movw	r24, r16
    11a2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <malloc>
    11a6:	ec 01       	movw	r28, r24
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <calloc+0x2c>
    11ac:	a8 01       	movw	r20, r16
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	0e 94 19 0a 	call	0x1432	; 0x1432 <memset>
    11b6:	ce 01       	movw	r24, r28
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	08 95       	ret

000011c2 <malloc>:
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	91 05       	cpc	r25, r1
    11ca:	10 f4       	brcc	.+4      	; 0x11d0 <malloc+0xe>
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <__flp>
    11d4:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <__flp+0x1>
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	c0 e0       	ldi	r28, 0x00	; 0
    11de:	d0 e0       	ldi	r29, 0x00	; 0
    11e0:	30 97       	sbiw	r30, 0x00	; 0
    11e2:	11 f1       	breq	.+68     	; 0x1228 <malloc+0x66>
    11e4:	40 81       	ld	r20, Z
    11e6:	51 81       	ldd	r21, Z+1	; 0x01
    11e8:	48 17       	cp	r20, r24
    11ea:	59 07       	cpc	r21, r25
    11ec:	c0 f0       	brcs	.+48     	; 0x121e <malloc+0x5c>
    11ee:	48 17       	cp	r20, r24
    11f0:	59 07       	cpc	r21, r25
    11f2:	61 f4       	brne	.+24     	; 0x120c <malloc+0x4a>
    11f4:	82 81       	ldd	r24, Z+2	; 0x02
    11f6:	93 81       	ldd	r25, Z+3	; 0x03
    11f8:	20 97       	sbiw	r28, 0x00	; 0
    11fa:	19 f0       	breq	.+6      	; 0x1202 <malloc+0x40>
    11fc:	9b 83       	std	Y+3, r25	; 0x03
    11fe:	8a 83       	std	Y+2, r24	; 0x02
    1200:	2b c0       	rjmp	.+86     	; 0x1258 <malloc+0x96>
    1202:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <__flp+0x1>
    1206:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <__flp>
    120a:	26 c0       	rjmp	.+76     	; 0x1258 <malloc+0x96>
    120c:	21 15       	cp	r18, r1
    120e:	31 05       	cpc	r19, r1
    1210:	19 f0       	breq	.+6      	; 0x1218 <malloc+0x56>
    1212:	42 17       	cp	r20, r18
    1214:	53 07       	cpc	r21, r19
    1216:	18 f4       	brcc	.+6      	; 0x121e <malloc+0x5c>
    1218:	9a 01       	movw	r18, r20
    121a:	be 01       	movw	r22, r28
    121c:	df 01       	movw	r26, r30
    121e:	ef 01       	movw	r28, r30
    1220:	02 80       	ldd	r0, Z+2	; 0x02
    1222:	f3 81       	ldd	r31, Z+3	; 0x03
    1224:	e0 2d       	mov	r30, r0
    1226:	dc cf       	rjmp	.-72     	; 0x11e0 <malloc+0x1e>
    1228:	21 15       	cp	r18, r1
    122a:	31 05       	cpc	r19, r1
    122c:	09 f1       	breq	.+66     	; 0x1270 <malloc+0xae>
    122e:	28 1b       	sub	r18, r24
    1230:	39 0b       	sbc	r19, r25
    1232:	24 30       	cpi	r18, 0x04	; 4
    1234:	31 05       	cpc	r19, r1
    1236:	90 f4       	brcc	.+36     	; 0x125c <malloc+0x9a>
    1238:	12 96       	adiw	r26, 0x02	; 2
    123a:	8d 91       	ld	r24, X+
    123c:	9c 91       	ld	r25, X
    123e:	13 97       	sbiw	r26, 0x03	; 3
    1240:	61 15       	cp	r22, r1
    1242:	71 05       	cpc	r23, r1
    1244:	21 f0       	breq	.+8      	; 0x124e <malloc+0x8c>
    1246:	fb 01       	movw	r30, r22
    1248:	93 83       	std	Z+3, r25	; 0x03
    124a:	82 83       	std	Z+2, r24	; 0x02
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <malloc+0x94>
    124e:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <__flp+0x1>
    1252:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <__flp>
    1256:	fd 01       	movw	r30, r26
    1258:	32 96       	adiw	r30, 0x02	; 2
    125a:	44 c0       	rjmp	.+136    	; 0x12e4 <malloc+0x122>
    125c:	fd 01       	movw	r30, r26
    125e:	e2 0f       	add	r30, r18
    1260:	f3 1f       	adc	r31, r19
    1262:	81 93       	st	Z+, r24
    1264:	91 93       	st	Z+, r25
    1266:	22 50       	subi	r18, 0x02	; 2
    1268:	31 09       	sbc	r19, r1
    126a:	2d 93       	st	X+, r18
    126c:	3c 93       	st	X, r19
    126e:	3a c0       	rjmp	.+116    	; 0x12e4 <malloc+0x122>
    1270:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <__brkval>
    1274:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <__brkval+0x1>
    1278:	23 2b       	or	r18, r19
    127a:	41 f4       	brne	.+16     	; 0x128c <malloc+0xca>
    127c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1280:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1284:	30 93 82 02 	sts	0x0282, r19	; 0x800282 <__brkval+0x1>
    1288:	20 93 81 02 	sts	0x0281, r18	; 0x800281 <__brkval>
    128c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1290:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1294:	21 15       	cp	r18, r1
    1296:	31 05       	cpc	r19, r1
    1298:	41 f4       	brne	.+16     	; 0x12aa <malloc+0xe8>
    129a:	2d b7       	in	r18, 0x3d	; 61
    129c:	3e b7       	in	r19, 0x3e	; 62
    129e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    12a2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    12a6:	24 1b       	sub	r18, r20
    12a8:	35 0b       	sbc	r19, r21
    12aa:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <__brkval>
    12ae:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <__brkval+0x1>
    12b2:	e2 17       	cp	r30, r18
    12b4:	f3 07       	cpc	r31, r19
    12b6:	a0 f4       	brcc	.+40     	; 0x12e0 <malloc+0x11e>
    12b8:	2e 1b       	sub	r18, r30
    12ba:	3f 0b       	sbc	r19, r31
    12bc:	28 17       	cp	r18, r24
    12be:	39 07       	cpc	r19, r25
    12c0:	78 f0       	brcs	.+30     	; 0x12e0 <malloc+0x11e>
    12c2:	ac 01       	movw	r20, r24
    12c4:	4e 5f       	subi	r20, 0xFE	; 254
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255
    12c8:	24 17       	cp	r18, r20
    12ca:	35 07       	cpc	r19, r21
    12cc:	48 f0       	brcs	.+18     	; 0x12e0 <malloc+0x11e>
    12ce:	4e 0f       	add	r20, r30
    12d0:	5f 1f       	adc	r21, r31
    12d2:	50 93 82 02 	sts	0x0282, r21	; 0x800282 <__brkval+0x1>
    12d6:	40 93 81 02 	sts	0x0281, r20	; 0x800281 <__brkval>
    12da:	81 93       	st	Z+, r24
    12dc:	91 93       	st	Z+, r25
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <malloc+0x122>
    12e0:	e0 e0       	ldi	r30, 0x00	; 0
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	cf 01       	movw	r24, r30
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <free>:
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	09 f4       	brne	.+2      	; 0x12fa <free+0xe>
    12f8:	8c c0       	rjmp	.+280    	; 0x1412 <free+0x126>
    12fa:	fc 01       	movw	r30, r24
    12fc:	32 97       	sbiw	r30, 0x02	; 2
    12fe:	13 82       	std	Z+3, r1	; 0x03
    1300:	12 82       	std	Z+2, r1	; 0x02
    1302:	00 91 83 02 	lds	r16, 0x0283	; 0x800283 <__flp>
    1306:	10 91 84 02 	lds	r17, 0x0284	; 0x800284 <__flp+0x1>
    130a:	01 15       	cp	r16, r1
    130c:	11 05       	cpc	r17, r1
    130e:	81 f4       	brne	.+32     	; 0x1330 <free+0x44>
    1310:	20 81       	ld	r18, Z
    1312:	31 81       	ldd	r19, Z+1	; 0x01
    1314:	82 0f       	add	r24, r18
    1316:	93 1f       	adc	r25, r19
    1318:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <__brkval>
    131c:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <__brkval+0x1>
    1320:	28 17       	cp	r18, r24
    1322:	39 07       	cpc	r19, r25
    1324:	79 f5       	brne	.+94     	; 0x1384 <free+0x98>
    1326:	f0 93 82 02 	sts	0x0282, r31	; 0x800282 <__brkval+0x1>
    132a:	e0 93 81 02 	sts	0x0281, r30	; 0x800281 <__brkval>
    132e:	71 c0       	rjmp	.+226    	; 0x1412 <free+0x126>
    1330:	d8 01       	movw	r26, r16
    1332:	40 e0       	ldi	r20, 0x00	; 0
    1334:	50 e0       	ldi	r21, 0x00	; 0
    1336:	ae 17       	cp	r26, r30
    1338:	bf 07       	cpc	r27, r31
    133a:	50 f4       	brcc	.+20     	; 0x1350 <free+0x64>
    133c:	12 96       	adiw	r26, 0x02	; 2
    133e:	2d 91       	ld	r18, X+
    1340:	3c 91       	ld	r19, X
    1342:	13 97       	sbiw	r26, 0x03	; 3
    1344:	ad 01       	movw	r20, r26
    1346:	21 15       	cp	r18, r1
    1348:	31 05       	cpc	r19, r1
    134a:	09 f1       	breq	.+66     	; 0x138e <free+0xa2>
    134c:	d9 01       	movw	r26, r18
    134e:	f3 cf       	rjmp	.-26     	; 0x1336 <free+0x4a>
    1350:	9d 01       	movw	r18, r26
    1352:	da 01       	movw	r26, r20
    1354:	33 83       	std	Z+3, r19	; 0x03
    1356:	22 83       	std	Z+2, r18	; 0x02
    1358:	60 81       	ld	r22, Z
    135a:	71 81       	ldd	r23, Z+1	; 0x01
    135c:	86 0f       	add	r24, r22
    135e:	97 1f       	adc	r25, r23
    1360:	82 17       	cp	r24, r18
    1362:	93 07       	cpc	r25, r19
    1364:	69 f4       	brne	.+26     	; 0x1380 <free+0x94>
    1366:	ec 01       	movw	r28, r24
    1368:	28 81       	ld	r18, Y
    136a:	39 81       	ldd	r19, Y+1	; 0x01
    136c:	26 0f       	add	r18, r22
    136e:	37 1f       	adc	r19, r23
    1370:	2e 5f       	subi	r18, 0xFE	; 254
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	31 83       	std	Z+1, r19	; 0x01
    1376:	20 83       	st	Z, r18
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	9b 81       	ldd	r25, Y+3	; 0x03
    137c:	93 83       	std	Z+3, r25	; 0x03
    137e:	82 83       	std	Z+2, r24	; 0x02
    1380:	45 2b       	or	r20, r21
    1382:	29 f4       	brne	.+10     	; 0x138e <free+0xa2>
    1384:	f0 93 84 02 	sts	0x0284, r31	; 0x800284 <__flp+0x1>
    1388:	e0 93 83 02 	sts	0x0283, r30	; 0x800283 <__flp>
    138c:	42 c0       	rjmp	.+132    	; 0x1412 <free+0x126>
    138e:	13 96       	adiw	r26, 0x03	; 3
    1390:	fc 93       	st	X, r31
    1392:	ee 93       	st	-X, r30
    1394:	12 97       	sbiw	r26, 0x02	; 2
    1396:	ed 01       	movw	r28, r26
    1398:	49 91       	ld	r20, Y+
    139a:	59 91       	ld	r21, Y+
    139c:	9e 01       	movw	r18, r28
    139e:	24 0f       	add	r18, r20
    13a0:	35 1f       	adc	r19, r21
    13a2:	e2 17       	cp	r30, r18
    13a4:	f3 07       	cpc	r31, r19
    13a6:	71 f4       	brne	.+28     	; 0x13c4 <free+0xd8>
    13a8:	80 81       	ld	r24, Z
    13aa:	91 81       	ldd	r25, Z+1	; 0x01
    13ac:	84 0f       	add	r24, r20
    13ae:	95 1f       	adc	r25, r21
    13b0:	02 96       	adiw	r24, 0x02	; 2
    13b2:	11 96       	adiw	r26, 0x01	; 1
    13b4:	9c 93       	st	X, r25
    13b6:	8e 93       	st	-X, r24
    13b8:	82 81       	ldd	r24, Z+2	; 0x02
    13ba:	93 81       	ldd	r25, Z+3	; 0x03
    13bc:	13 96       	adiw	r26, 0x03	; 3
    13be:	9c 93       	st	X, r25
    13c0:	8e 93       	st	-X, r24
    13c2:	12 97       	sbiw	r26, 0x02	; 2
    13c4:	e0 e0       	ldi	r30, 0x00	; 0
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	d8 01       	movw	r26, r16
    13ca:	12 96       	adiw	r26, 0x02	; 2
    13cc:	8d 91       	ld	r24, X+
    13ce:	9c 91       	ld	r25, X
    13d0:	13 97       	sbiw	r26, 0x03	; 3
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	19 f0       	breq	.+6      	; 0x13dc <free+0xf0>
    13d6:	f8 01       	movw	r30, r16
    13d8:	8c 01       	movw	r16, r24
    13da:	f6 cf       	rjmp	.-20     	; 0x13c8 <free+0xdc>
    13dc:	8d 91       	ld	r24, X+
    13de:	9c 91       	ld	r25, X
    13e0:	98 01       	movw	r18, r16
    13e2:	2e 5f       	subi	r18, 0xFE	; 254
    13e4:	3f 4f       	sbci	r19, 0xFF	; 255
    13e6:	82 0f       	add	r24, r18
    13e8:	93 1f       	adc	r25, r19
    13ea:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <__brkval>
    13ee:	30 91 82 02 	lds	r19, 0x0282	; 0x800282 <__brkval+0x1>
    13f2:	28 17       	cp	r18, r24
    13f4:	39 07       	cpc	r19, r25
    13f6:	69 f4       	brne	.+26     	; 0x1412 <free+0x126>
    13f8:	30 97       	sbiw	r30, 0x00	; 0
    13fa:	29 f4       	brne	.+10     	; 0x1406 <free+0x11a>
    13fc:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <__flp+0x1>
    1400:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__flp>
    1404:	02 c0       	rjmp	.+4      	; 0x140a <free+0x11e>
    1406:	13 82       	std	Z+3, r1	; 0x03
    1408:	12 82       	std	Z+2, r1	; 0x02
    140a:	10 93 82 02 	sts	0x0282, r17	; 0x800282 <__brkval+0x1>
    140e:	00 93 81 02 	sts	0x0281, r16	; 0x800281 <__brkval>
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	08 95       	ret

0000141c <strnlen_P>:
    141c:	fc 01       	movw	r30, r24
    141e:	05 90       	lpm	r0, Z+
    1420:	61 50       	subi	r22, 0x01	; 1
    1422:	70 40       	sbci	r23, 0x00	; 0
    1424:	01 10       	cpse	r0, r1
    1426:	d8 f7       	brcc	.-10     	; 0x141e <strnlen_P+0x2>
    1428:	80 95       	com	r24
    142a:	90 95       	com	r25
    142c:	8e 0f       	add	r24, r30
    142e:	9f 1f       	adc	r25, r31
    1430:	08 95       	ret

00001432 <memset>:
    1432:	dc 01       	movw	r26, r24
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <memset+0x6>
    1436:	6d 93       	st	X+, r22
    1438:	41 50       	subi	r20, 0x01	; 1
    143a:	50 40       	sbci	r21, 0x00	; 0
    143c:	e0 f7       	brcc	.-8      	; 0x1436 <memset+0x4>
    143e:	08 95       	ret

00001440 <strnlen>:
    1440:	fc 01       	movw	r30, r24
    1442:	61 50       	subi	r22, 0x01	; 1
    1444:	70 40       	sbci	r23, 0x00	; 0
    1446:	01 90       	ld	r0, Z+
    1448:	01 10       	cpse	r0, r1
    144a:	d8 f7       	brcc	.-10     	; 0x1442 <strnlen+0x2>
    144c:	80 95       	com	r24
    144e:	90 95       	com	r25
    1450:	8e 0f       	add	r24, r30
    1452:	9f 1f       	adc	r25, r31
    1454:	08 95       	ret

00001456 <fputc>:
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	fb 01       	movw	r30, r22
    1460:	23 81       	ldd	r18, Z+3	; 0x03
    1462:	21 fd       	sbrc	r18, 1
    1464:	03 c0       	rjmp	.+6      	; 0x146c <fputc+0x16>
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	9f ef       	ldi	r25, 0xFF	; 255
    146a:	28 c0       	rjmp	.+80     	; 0x14bc <fputc+0x66>
    146c:	22 ff       	sbrs	r18, 2
    146e:	16 c0       	rjmp	.+44     	; 0x149c <fputc+0x46>
    1470:	46 81       	ldd	r20, Z+6	; 0x06
    1472:	57 81       	ldd	r21, Z+7	; 0x07
    1474:	24 81       	ldd	r18, Z+4	; 0x04
    1476:	35 81       	ldd	r19, Z+5	; 0x05
    1478:	42 17       	cp	r20, r18
    147a:	53 07       	cpc	r21, r19
    147c:	44 f4       	brge	.+16     	; 0x148e <fputc+0x38>
    147e:	a0 81       	ld	r26, Z
    1480:	b1 81       	ldd	r27, Z+1	; 0x01
    1482:	9d 01       	movw	r18, r26
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	31 83       	std	Z+1, r19	; 0x01
    148a:	20 83       	st	Z, r18
    148c:	8c 93       	st	X, r24
    148e:	26 81       	ldd	r18, Z+6	; 0x06
    1490:	37 81       	ldd	r19, Z+7	; 0x07
    1492:	2f 5f       	subi	r18, 0xFF	; 255
    1494:	3f 4f       	sbci	r19, 0xFF	; 255
    1496:	37 83       	std	Z+7, r19	; 0x07
    1498:	26 83       	std	Z+6, r18	; 0x06
    149a:	10 c0       	rjmp	.+32     	; 0x14bc <fputc+0x66>
    149c:	eb 01       	movw	r28, r22
    149e:	09 2f       	mov	r16, r25
    14a0:	18 2f       	mov	r17, r24
    14a2:	00 84       	ldd	r0, Z+8	; 0x08
    14a4:	f1 85       	ldd	r31, Z+9	; 0x09
    14a6:	e0 2d       	mov	r30, r0
    14a8:	09 95       	icall
    14aa:	89 2b       	or	r24, r25
    14ac:	e1 f6       	brne	.-72     	; 0x1466 <fputc+0x10>
    14ae:	8e 81       	ldd	r24, Y+6	; 0x06
    14b0:	9f 81       	ldd	r25, Y+7	; 0x07
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	9f 83       	std	Y+7, r25	; 0x07
    14b6:	8e 83       	std	Y+6, r24	; 0x06
    14b8:	81 2f       	mov	r24, r17
    14ba:	90 2f       	mov	r25, r16
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	08 95       	ret

000014c6 <__ultoa_invert>:
    14c6:	fa 01       	movw	r30, r20
    14c8:	aa 27       	eor	r26, r26
    14ca:	28 30       	cpi	r18, 0x08	; 8
    14cc:	51 f1       	breq	.+84     	; 0x1522 <__ultoa_invert+0x5c>
    14ce:	20 31       	cpi	r18, 0x10	; 16
    14d0:	81 f1       	breq	.+96     	; 0x1532 <__ultoa_invert+0x6c>
    14d2:	e8 94       	clt
    14d4:	6f 93       	push	r22
    14d6:	6e 7f       	andi	r22, 0xFE	; 254
    14d8:	6e 5f       	subi	r22, 0xFE	; 254
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	8f 4f       	sbci	r24, 0xFF	; 255
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	af 4f       	sbci	r26, 0xFF	; 255
    14e2:	b1 e0       	ldi	r27, 0x01	; 1
    14e4:	3e d0       	rcall	.+124    	; 0x1562 <__ultoa_invert+0x9c>
    14e6:	b4 e0       	ldi	r27, 0x04	; 4
    14e8:	3c d0       	rcall	.+120    	; 0x1562 <__ultoa_invert+0x9c>
    14ea:	67 0f       	add	r22, r23
    14ec:	78 1f       	adc	r23, r24
    14ee:	89 1f       	adc	r24, r25
    14f0:	9a 1f       	adc	r25, r26
    14f2:	a1 1d       	adc	r26, r1
    14f4:	68 0f       	add	r22, r24
    14f6:	79 1f       	adc	r23, r25
    14f8:	8a 1f       	adc	r24, r26
    14fa:	91 1d       	adc	r25, r1
    14fc:	a1 1d       	adc	r26, r1
    14fe:	6a 0f       	add	r22, r26
    1500:	71 1d       	adc	r23, r1
    1502:	81 1d       	adc	r24, r1
    1504:	91 1d       	adc	r25, r1
    1506:	a1 1d       	adc	r26, r1
    1508:	20 d0       	rcall	.+64     	; 0x154a <__ultoa_invert+0x84>
    150a:	09 f4       	brne	.+2      	; 0x150e <__ultoa_invert+0x48>
    150c:	68 94       	set
    150e:	3f 91       	pop	r19
    1510:	2a e0       	ldi	r18, 0x0A	; 10
    1512:	26 9f       	mul	r18, r22
    1514:	11 24       	eor	r1, r1
    1516:	30 19       	sub	r19, r0
    1518:	30 5d       	subi	r19, 0xD0	; 208
    151a:	31 93       	st	Z+, r19
    151c:	de f6       	brtc	.-74     	; 0x14d4 <__ultoa_invert+0xe>
    151e:	cf 01       	movw	r24, r30
    1520:	08 95       	ret
    1522:	46 2f       	mov	r20, r22
    1524:	47 70       	andi	r20, 0x07	; 7
    1526:	40 5d       	subi	r20, 0xD0	; 208
    1528:	41 93       	st	Z+, r20
    152a:	b3 e0       	ldi	r27, 0x03	; 3
    152c:	0f d0       	rcall	.+30     	; 0x154c <__ultoa_invert+0x86>
    152e:	c9 f7       	brne	.-14     	; 0x1522 <__ultoa_invert+0x5c>
    1530:	f6 cf       	rjmp	.-20     	; 0x151e <__ultoa_invert+0x58>
    1532:	46 2f       	mov	r20, r22
    1534:	4f 70       	andi	r20, 0x0F	; 15
    1536:	40 5d       	subi	r20, 0xD0	; 208
    1538:	4a 33       	cpi	r20, 0x3A	; 58
    153a:	18 f0       	brcs	.+6      	; 0x1542 <__ultoa_invert+0x7c>
    153c:	49 5d       	subi	r20, 0xD9	; 217
    153e:	31 fd       	sbrc	r19, 1
    1540:	40 52       	subi	r20, 0x20	; 32
    1542:	41 93       	st	Z+, r20
    1544:	02 d0       	rcall	.+4      	; 0x154a <__ultoa_invert+0x84>
    1546:	a9 f7       	brne	.-22     	; 0x1532 <__ultoa_invert+0x6c>
    1548:	ea cf       	rjmp	.-44     	; 0x151e <__ultoa_invert+0x58>
    154a:	b4 e0       	ldi	r27, 0x04	; 4
    154c:	a6 95       	lsr	r26
    154e:	97 95       	ror	r25
    1550:	87 95       	ror	r24
    1552:	77 95       	ror	r23
    1554:	67 95       	ror	r22
    1556:	ba 95       	dec	r27
    1558:	c9 f7       	brne	.-14     	; 0x154c <__ultoa_invert+0x86>
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	61 05       	cpc	r22, r1
    155e:	71 05       	cpc	r23, r1
    1560:	08 95       	ret
    1562:	9b 01       	movw	r18, r22
    1564:	ac 01       	movw	r20, r24
    1566:	0a 2e       	mov	r0, r26
    1568:	06 94       	lsr	r0
    156a:	57 95       	ror	r21
    156c:	47 95       	ror	r20
    156e:	37 95       	ror	r19
    1570:	27 95       	ror	r18
    1572:	ba 95       	dec	r27
    1574:	c9 f7       	brne	.-14     	; 0x1568 <__ultoa_invert+0xa2>
    1576:	62 0f       	add	r22, r18
    1578:	73 1f       	adc	r23, r19
    157a:	84 1f       	adc	r24, r20
    157c:	95 1f       	adc	r25, r21
    157e:	a0 1d       	adc	r26, r0
    1580:	08 95       	ret

00001582 <__prologue_saves__>:
    1582:	2f 92       	push	r2
    1584:	3f 92       	push	r3
    1586:	4f 92       	push	r4
    1588:	5f 92       	push	r5
    158a:	6f 92       	push	r6
    158c:	7f 92       	push	r7
    158e:	8f 92       	push	r8
    1590:	9f 92       	push	r9
    1592:	af 92       	push	r10
    1594:	bf 92       	push	r11
    1596:	cf 92       	push	r12
    1598:	df 92       	push	r13
    159a:	ef 92       	push	r14
    159c:	ff 92       	push	r15
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	ca 1b       	sub	r28, r26
    15ac:	db 0b       	sbc	r29, r27
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	cd bf       	out	0x3d, r28	; 61
    15b8:	09 94       	ijmp

000015ba <__epilogue_restores__>:
    15ba:	2a 88       	ldd	r2, Y+18	; 0x12
    15bc:	39 88       	ldd	r3, Y+17	; 0x11
    15be:	48 88       	ldd	r4, Y+16	; 0x10
    15c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    15c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    15c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    15c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    15c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    15ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    15cc:	b9 84       	ldd	r11, Y+9	; 0x09
    15ce:	c8 84       	ldd	r12, Y+8	; 0x08
    15d0:	df 80       	ldd	r13, Y+7	; 0x07
    15d2:	ee 80       	ldd	r14, Y+6	; 0x06
    15d4:	fd 80       	ldd	r15, Y+5	; 0x05
    15d6:	0c 81       	ldd	r16, Y+4	; 0x04
    15d8:	1b 81       	ldd	r17, Y+3	; 0x03
    15da:	aa 81       	ldd	r26, Y+2	; 0x02
    15dc:	b9 81       	ldd	r27, Y+1	; 0x01
    15de:	ce 0f       	add	r28, r30
    15e0:	d1 1d       	adc	r29, r1
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	ed 01       	movw	r28, r26
    15ee:	08 95       	ret

000015f0 <_exit>:
    15f0:	f8 94       	cli

000015f2 <__stop_program>:
    15f2:	ff cf       	rjmp	.-2      	; 0x15f2 <__stop_program>
