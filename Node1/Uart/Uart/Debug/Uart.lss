
Uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000156  00800100  0000149c  00001530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000149c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800256  00800256  00001686  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002336  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011d7  00000000  00000000  00003c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012c7  00000000  00000000  00004e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000518  00000000  00000000  00006124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007cf  00000000  00000000  0000663c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fd7  00000000  00000000  00006e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007de2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 86 02 	jmp	0x50c	; 0x50c <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <SRAM_init+0x8>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e9       	ldi	r30, 0x9C	; 156
     37c:	f4 e1       	ldi	r31, 0x14	; 20
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a6 35       	cpi	r26, 0x56	; 86
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a6 e5       	ldi	r26, 0x56	; 86
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 36       	cpi	r26, 0x69	; 105
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <main>
     39e:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include "setup.h"
#include <util/delay.h>

int ADC_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
     3a6:	85 b7       	in	r24, 0x35	; 53
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     3ac:	80 b7       	in	r24, 0x30	; 48
     3ae:	80 62       	ori	r24, 0x20	; 32
     3b0:	80 bf       	out	0x30, r24	; 48
	
	//Set the interrupt pin to input
	//DDRB &= ~(1<<PIND2);
	
	return 0;
}
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	08 95       	ret

000003b8 <ADC_read>:

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	48 f4       	brcc	.+18     	; 0x3ce <ADC_read+0x16>
	
	//Choose channel in ADC
	*adc = 0x04 | channel;
     3bc:	84 60       	ori	r24, 0x04	; 4
     3be:	e0 e0       	ldi	r30, 0x00	; 0
     3c0:	f4 e1       	ldi	r31, 0x14	; 20
     3c2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c4:	84 ea       	ldi	r24, 0xA4	; 164
     3c6:	8a 95       	dec	r24
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <ADC_read+0xe>
	
	//Wait for the data to be read (this can be done with an interrupt)
	//while(test_bit(PIND, PIND2));
	_delay_us(100);
	return *adc;
     3ca:	80 81       	ld	r24, Z
     3cc:	08 95       	ret

uint8_t ADC_read(uint8_t channel) {
	//Address for the ADC
	volatile char *adc = (char *) 0x1400;
	
	if(channel > 3) {return 0;}
     3ce:	80 e0       	ldi	r24, 0x00	; 0
	
	//Wait for the data to be read (this can be done with an interrupt)
	//while(test_bit(PIND, PIND2));
	_delay_us(100);
	return *adc;
     3d0:	08 95       	ret

000003d2 <CAN_init>:
		//Message not received
		//message.id = -1;
	//}
	
	return message;
}
     3d2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <MCP_init>
     3d6:	48 e6       	ldi	r20, 0x68	; 104
     3d8:	60 e6       	ldi	r22, 0x60	; 96
     3da:	80 e6       	ldi	r24, 0x60	; 96
     3dc:	0e 94 af 04 	call	0x95e	; 0x95e <MCP_bit_modify>
     3e0:	41 e0       	ldi	r20, 0x01	; 1
     3e2:	63 e0       	ldi	r22, 0x03	; 3
     3e4:	8b e2       	ldi	r24, 0x2B	; 43
     3e6:	0e 94 af 04 	call	0x95e	; 0x95e <MCP_bit_modify>
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	60 ee       	ldi	r22, 0xE0	; 224
     3ee:	8f e0       	ldi	r24, 0x0F	; 15
     3f0:	0e 94 af 04 	call	0x95e	; 0x95e <MCP_bit_modify>
     3f4:	8e e0       	ldi	r24, 0x0E	; 14
     3f6:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <MCP_read>
     3fa:	80 7e       	andi	r24, 0xE0	; 224
     3fc:	59 f0       	breq	.+22     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     3fe:	8a e0       	ldi	r24, 0x0A	; 10
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	08 95       	ret
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	08 95       	ret

0000041a <CAN_error>:
     41a:	80 e3       	ldi	r24, 0x30	; 48
     41c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <MCP_read>
     420:	84 fd       	sbrc	r24, 4
     422:	05 c0       	rjmp	.+10     	; 0x42e <CAN_error+0x14>
     424:	85 fd       	sbrc	r24, 5
     426:	06 c0       	rjmp	.+12     	; 0x434 <CAN_error+0x1a>
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	08 95       	ret
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	9f ef       	ldi	r25, 0xFF	; 255
     432:	08 95       	ret
     434:	8e ef       	ldi	r24, 0xFE	; 254
     436:	9f ef       	ldi	r25, 0xFF	; 255
     438:	08 95       	ret

0000043a <CAN_transmit_complete>:
     43a:	80 e3       	ldi	r24, 0x30	; 48
     43c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <MCP_read>
     440:	86 95       	lsr	r24
     442:	86 95       	lsr	r24
     444:	86 95       	lsr	r24
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	89 27       	eor	r24, r25
     44a:	81 70       	andi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	08 95       	ret

00000450 <CAN_message_send>:
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	8c 01       	movw	r16, r24
     458:	0e 94 1d 02 	call	0x43a	; 0x43a <CAN_transmit_complete>
     45c:	89 2b       	or	r24, r25
     45e:	09 f4       	brne	.+2      	; 0x462 <CAN_message_send+0x12>
     460:	3f c0       	rjmp	.+126    	; 0x4e0 <CAN_message_send+0x90>
     462:	f8 01       	movw	r30, r16
     464:	60 81       	ld	r22, Z
     466:	71 81       	ldd	r23, Z+1	; 0x01
     468:	76 95       	lsr	r23
     46a:	67 95       	ror	r22
     46c:	76 95       	lsr	r23
     46e:	67 95       	ror	r22
     470:	76 95       	lsr	r23
     472:	67 95       	ror	r22
     474:	81 e3       	ldi	r24, 0x31	; 49
     476:	0e 94 88 04 	call	0x910	; 0x910 <MCP_write>
     47a:	f8 01       	movw	r30, r16
     47c:	60 81       	ld	r22, Z
     47e:	71 81       	ldd	r23, Z+1	; 0x01
     480:	66 0f       	add	r22, r22
     482:	77 1f       	adc	r23, r23
     484:	62 95       	swap	r22
     486:	72 95       	swap	r23
     488:	70 7f       	andi	r23, 0xF0	; 240
     48a:	76 27       	eor	r23, r22
     48c:	60 7f       	andi	r22, 0xF0	; 240
     48e:	76 27       	eor	r23, r22
     490:	82 e3       	ldi	r24, 0x32	; 50
     492:	0e 94 88 04 	call	0x910	; 0x910 <MCP_write>
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	83 e4       	ldi	r24, 0x43	; 67
     49a:	0e 94 88 04 	call	0x910	; 0x910 <MCP_write>
     49e:	60 e0       	ldi	r22, 0x00	; 0
     4a0:	84 e4       	ldi	r24, 0x44	; 68
     4a2:	0e 94 88 04 	call	0x910	; 0x910 <MCP_write>
     4a6:	f8 01       	movw	r30, r16
     4a8:	62 81       	ldd	r22, Z+2	; 0x02
     4aa:	85 e3       	ldi	r24, 0x35	; 53
     4ac:	0e 94 88 04 	call	0x910	; 0x910 <MCP_write>
     4b0:	f8 01       	movw	r30, r16
     4b2:	82 81       	ldd	r24, Z+2	; 0x02
     4b4:	88 23       	and	r24, r24
     4b6:	71 f0       	breq	.+28     	; 0x4d4 <CAN_message_send+0x84>
     4b8:	c0 e0       	ldi	r28, 0x00	; 0
     4ba:	f8 01       	movw	r30, r16
     4bc:	ec 0f       	add	r30, r28
     4be:	f1 1d       	adc	r31, r1
     4c0:	63 81       	ldd	r22, Z+3	; 0x03
     4c2:	86 e3       	ldi	r24, 0x36	; 54
     4c4:	8c 0f       	add	r24, r28
     4c6:	0e 94 88 04 	call	0x910	; 0x910 <MCP_write>
     4ca:	cf 5f       	subi	r28, 0xFF	; 255
     4cc:	f8 01       	movw	r30, r16
     4ce:	82 81       	ldd	r24, Z+2	; 0x02
     4d0:	c8 17       	cp	r28, r24
     4d2:	98 f3       	brcs	.-26     	; 0x4ba <CAN_message_send+0x6a>
     4d4:	81 e8       	ldi	r24, 0x81	; 129
     4d6:	0e 94 a0 04 	call	0x940	; 0x940 <MCP_request_to_send>
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	07 c0       	rjmp	.+14     	; 0x4ee <CAN_message_send+0x9e>
     4e0:	0e 94 0d 02 	call	0x41a	; 0x41a <CAN_error>
     4e4:	99 0f       	add	r25, r25
     4e6:	99 0b       	sbc	r25, r25
     4e8:	89 2f       	mov	r24, r25
     4ea:	99 0f       	add	r25, r25
     4ec:	99 0b       	sbc	r25, r25
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret

000004f6 <CAN_int_vect>:
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	8c e2       	ldi	r24, 0x2C	; 44
     4fc:	0e 94 af 04 	call	0x95e	; 0x95e <MCP_bit_modify>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <__data_end>
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	08 95       	ret

0000050c <__vector_1>:

//Interrupt service routine for CAN bus
ISR(INT0_vect) {
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	2f 93       	push	r18
     518:	3f 93       	push	r19
     51a:	4f 93       	push	r20
     51c:	5f 93       	push	r21
     51e:	6f 93       	push	r22
     520:	7f 93       	push	r23
     522:	8f 93       	push	r24
     524:	9f 93       	push	r25
     526:	af 93       	push	r26
     528:	bf 93       	push	r27
     52a:	ef 93       	push	r30
     52c:	ff 93       	push	r31
//	_delay_ms(10);
	CAN_int_vect();
     52e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <CAN_int_vect>
// 	else if (interrupt & MCP_RX1IF){
// 		rx_flag = 1;
// 		// clear CANINTF.RX1IF
// 		MCP_bit_modify(MCP_CANINTF, 0x02, 0x00);
// 	}
}
     532:	ff 91       	pop	r31
     534:	ef 91       	pop	r30
     536:	bf 91       	pop	r27
     538:	af 91       	pop	r26
     53a:	9f 91       	pop	r25
     53c:	8f 91       	pop	r24
     53e:	7f 91       	pop	r23
     540:	6f 91       	pop	r22
     542:	5f 91       	pop	r21
     544:	4f 91       	pop	r20
     546:	3f 91       	pop	r19
     548:	2f 91       	pop	r18
     54a:	0f 90       	pop	r0
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	0f 90       	pop	r0
     550:	1f 90       	pop	r1
     552:	18 95       	reti

00000554 <JOY_calibrate>:
	return 0;
}


int JOY_calibrate(void) {
	mid_x=ADC_read(0);
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     55a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <mid_x>
	mid_y=ADC_read(1);
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     564:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <mid_y>
	return 0;
}
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	08 95       	ret

0000056e <joy_init>:

uint8_t mid_x, mid_y;

int joy_init(void){
	// sette opp adc
	ADC_init();
     56e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	
	//Set Button pins to input
	DDRB &= ~(1<<PINB0) & ~(1<<PINB1) & ~(1<<PINB2);
     572:	87 b3       	in	r24, 0x17	; 23
     574:	88 7f       	andi	r24, 0xF8	; 248
     576:	87 bb       	out	0x17, r24	; 23
	//sette opp pullupresistors
	PORTB |= (1<<PINB0) | (1<<PINB1) | (1<<PINB2); 
     578:	88 b3       	in	r24, 0x18	; 24
     57a:	87 60       	ori	r24, 0x07	; 7
     57c:	88 bb       	out	0x18, r24	; 24
	
	//kalibrasjon init
	JOY_calibrate();
     57e:	0e 94 aa 02 	call	0x554	; 0x554 <JOY_calibrate>
	
	return 0;
}
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	08 95       	ret

00000588 <joy_button>:
	mid_y=ADC_read(1);
	return 0;
}

int joy_button(int button){
	switch (button) {
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	91 05       	cpc	r25, r1
     58c:	59 f0       	breq	.+22     	; 0x5a4 <joy_button+0x1c>
     58e:	82 30       	cpi	r24, 0x02	; 2
     590:	91 05       	cpc	r25, r1
     592:	79 f0       	breq	.+30     	; 0x5b2 <joy_button+0x2a>
     594:	89 2b       	or	r24, r25
     596:	a9 f4       	brne	.+42     	; 0x5c2 <joy_button+0x3a>
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     598:	96 b3       	in	r25, 0x16	; 22
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	89 27       	eor	r24, r25
     59e:	81 70       	andi	r24, 0x01	; 1
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	08 95       	ret
			break;
		case 1: // left button
			if (!test_bit(PINB,PINB1)) return 1;
     5a4:	86 b3       	in	r24, 0x16	; 22
     5a6:	86 95       	lsr	r24
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	89 27       	eor	r24, r25
}

int joy_button(int button){
	switch (button) {
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     5ac:	81 70       	andi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	08 95       	ret
			break;
		case 1: // left button
			if (!test_bit(PINB,PINB1)) return 1;
			break;	
		case 2: // right button
			if (!test_bit(PINB,PINB2)) return 1;
     5b2:	86 b3       	in	r24, 0x16	; 22
     5b4:	86 95       	lsr	r24
     5b6:	86 95       	lsr	r24
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	89 27       	eor	r24, r25
}

int joy_button(int button){
	switch (button) {
		case 0: // joystick button
			if (!test_bit(PINB,PINB0)) return 1;
     5bc:	81 70       	andi	r24, 0x01	; 1
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	08 95       	ret
			if (!test_bit(PINB,PINB2)) return 1;
			break;
		default:
				break;
	}
	return 0;
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
}
     5c6:	08 95       	ret

000005c8 <JOY_getPosition>:

joy_position JOY_getPosition(void) {
     5c8:	cf 93       	push	r28
	joy_position position;
	uint8_t x, y;
	
	//Read position x from channel 0
	x = ADC_read(1);
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     5d0:	c8 2f       	mov	r28, r24
	//Read position y from channel 1
	y = ADC_read(0);
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     5d8:	e8 2f       	mov	r30, r24
	
	//Calculate position x percentage
	if(x > mid_x) {
     5da:	40 91 58 02 	lds	r20, 0x0258	; 0x800258 <mid_x>
     5de:	4c 17       	cp	r20, r28
     5e0:	98 f4       	brcc	.+38     	; 0x608 <JOY_getPosition+0x40>
		position.x = 100 * (x - mid_x) / (0xFF - mid_x);
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	2c 2f       	mov	r18, r28
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	24 1b       	sub	r18, r20
     5ea:	35 0b       	sbc	r19, r21
     5ec:	64 e6       	ldi	r22, 0x64	; 100
     5ee:	62 9f       	mul	r22, r18
     5f0:	c0 01       	movw	r24, r0
     5f2:	63 9f       	mul	r22, r19
     5f4:	90 0d       	add	r25, r0
     5f6:	11 24       	eor	r1, r1
     5f8:	6f ef       	ldi	r22, 0xFF	; 255
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	64 1b       	sub	r22, r20
     5fe:	75 0b       	sbc	r23, r21
     600:	0e 94 be 05 	call	0xb7c	; 0xb7c <__divmodhi4>
     604:	f6 2f       	mov	r31, r22
     606:	13 c0       	rjmp	.+38     	; 0x62e <JOY_getPosition+0x66>
		} else if (x < mid_x) {
     608:	c4 17       	cp	r28, r20
     60a:	80 f4       	brcc	.+32     	; 0x62c <JOY_getPosition+0x64>
		position.x = 100 * (x - mid_x) / (mid_x - 0);
     60c:	64 2f       	mov	r22, r20
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	2c 2f       	mov	r18, r28
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	26 1b       	sub	r18, r22
     616:	37 0b       	sbc	r19, r23
     618:	44 e6       	ldi	r20, 0x64	; 100
     61a:	42 9f       	mul	r20, r18
     61c:	c0 01       	movw	r24, r0
     61e:	43 9f       	mul	r20, r19
     620:	90 0d       	add	r25, r0
     622:	11 24       	eor	r1, r1
     624:	0e 94 be 05 	call	0xb7c	; 0xb7c <__divmodhi4>
     628:	f6 2f       	mov	r31, r22
     62a:	01 c0       	rjmp	.+2      	; 0x62e <JOY_getPosition+0x66>
		} else {
		position.x = 0;
     62c:	f0 e0       	ldi	r31, 0x00	; 0
	}
	
	//Calculate position y percentage
	if(y > mid_y) {
     62e:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <mid_y>
     632:	2e 17       	cp	r18, r30
     634:	98 f4       	brcc	.+38     	; 0x65c <JOY_getPosition+0x94>
		position.y = 100 * (y - mid_y) / (0xFF - mid_y);
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	4e 2f       	mov	r20, r30
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	42 1b       	sub	r20, r18
     63e:	53 0b       	sbc	r21, r19
     640:	64 e6       	ldi	r22, 0x64	; 100
     642:	64 9f       	mul	r22, r20
     644:	c0 01       	movw	r24, r0
     646:	65 9f       	mul	r22, r21
     648:	90 0d       	add	r25, r0
     64a:	11 24       	eor	r1, r1
     64c:	6f ef       	ldi	r22, 0xFF	; 255
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	62 1b       	sub	r22, r18
     652:	73 0b       	sbc	r23, r19
     654:	0e 94 be 05 	call	0xb7c	; 0xb7c <__divmodhi4>
     658:	76 2f       	mov	r23, r22
     65a:	13 c0       	rjmp	.+38     	; 0x682 <JOY_getPosition+0xba>
		} else if (y < mid_y) {
     65c:	e2 17       	cp	r30, r18
     65e:	80 f4       	brcc	.+32     	; 0x680 <JOY_getPosition+0xb8>
		position.y = 100 * (y - mid_y) / (mid_y - 0);
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	4e 2f       	mov	r20, r30
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	42 1b       	sub	r20, r18
     668:	53 0b       	sbc	r21, r19
     66a:	64 e6       	ldi	r22, 0x64	; 100
     66c:	64 9f       	mul	r22, r20
     66e:	c0 01       	movw	r24, r0
     670:	65 9f       	mul	r22, r21
     672:	90 0d       	add	r25, r0
     674:	11 24       	eor	r1, r1
     676:	b9 01       	movw	r22, r18
     678:	0e 94 be 05 	call	0xb7c	; 0xb7c <__divmodhi4>
     67c:	76 2f       	mov	r23, r22
     67e:	01 c0       	rjmp	.+2      	; 0x682 <JOY_getPosition+0xba>
		} else {
		position.y = 0;
     680:	70 e0       	ldi	r23, 0x00	; 0
	}
	
	return position;
}
     682:	6f 2f       	mov	r22, r31
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <JOY_getDirection>:

joy_position JOY_getDirection(void) {
	joy_position position;
	
	//Get actual position of joystick
	position = JOY_getPosition();
     68c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <JOY_getPosition>
     690:	e7 2f       	mov	r30, r23
     692:	28 2f       	mov	r18, r24
     694:	39 2f       	mov	r19, r25
	
	if(position.x < -45) {
     696:	63 3d       	cpi	r22, 0xD3	; 211
     698:	2c f0       	brlt	.+10     	; 0x6a4 <JOY_getDirection+0x18>
		position.direction = "LEFT";
		} 
	else if(position.x > 45) {
     69a:	6e 32       	cpi	r22, 0x2E	; 46
     69c:	2c f0       	brlt	.+10     	; 0x6a8 <JOY_getDirection+0x1c>
		position.direction = "RIGHT";
     69e:	28 e4       	ldi	r18, 0x48	; 72
     6a0:	31 e0       	ldi	r19, 0x01	; 1
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <JOY_getDirection+0x1c>
	
	//Get actual position of joystick
	position = JOY_getPosition();
	
	if(position.x < -45) {
		position.direction = "LEFT";
     6a4:	23 e4       	ldi	r18, 0x43	; 67
     6a6:	31 e0       	ldi	r19, 0x01	; 1
		} 
	else if(position.x > 45) {
		position.direction = "RIGHT";
	}
	
	if(position.y < -45) {
     6a8:	e3 3d       	cpi	r30, 0xD3	; 211
     6aa:	2c f0       	brlt	.+10     	; 0x6b6 <JOY_getDirection+0x2a>
		position.direction = "DOWN";
		} 
	else if(position.y > 45) {
     6ac:	ee 32       	cpi	r30, 0x2E	; 46
     6ae:	2c f0       	brlt	.+10     	; 0x6ba <JOY_getDirection+0x2e>
		position.direction = "UP";
     6b0:	23 e5       	ldi	r18, 0x53	; 83
     6b2:	31 e0       	ldi	r19, 0x01	; 1
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <JOY_getDirection+0x2e>
	else if(position.x > 45) {
		position.direction = "RIGHT";
	}
	
	if(position.y < -45) {
		position.direction = "DOWN";
     6b6:	2e e4       	ldi	r18, 0x4E	; 78
     6b8:	31 e0       	ldi	r19, 0x01	; 1
		} 
	else if(position.y > 45) {
		position.direction = "UP";
	}
	
	if((position.x >= -44 && position.x <= 44) && (position.y >= -44 && position.y <= 44)){
     6ba:	8c e2       	ldi	r24, 0x2C	; 44
     6bc:	86 0f       	add	r24, r22
     6be:	89 35       	cpi	r24, 0x59	; 89
     6c0:	30 f4       	brcc	.+12     	; 0x6ce <JOY_getDirection+0x42>
     6c2:	8c e2       	ldi	r24, 0x2C	; 44
     6c4:	87 0f       	add	r24, r23
     6c6:	89 35       	cpi	r24, 0x59	; 89
     6c8:	10 f4       	brcc	.+4      	; 0x6ce <JOY_getDirection+0x42>
		position.direction = "NEUTRAL";
     6ca:	26 e5       	ldi	r18, 0x56	; 86
     6cc:	31 e0       	ldi	r19, 0x01	; 1
	}
	
	return position;
}
     6ce:	82 2f       	mov	r24, r18
     6d0:	93 2f       	mov	r25, r19
     6d2:	08 95       	ret

000006d4 <main>:
#include "MCP2515.h"
#include "spi.h"
#include "can.h"

int main(void)
{
     6d4:	cf 93       	push	r28
     6d6:	df 93       	push	r29
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	2b 97       	sbiw	r28, 0x0b	; 11
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	de bf       	out	0x3e, r29	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	cd bf       	out	0x3d, r28	; 61
	
	cli();
     6e8:	f8 94       	cli
	
	//DDRD |= (1 << PIND5);		//Set D5(OC1A) as output
	
	
	
	GICR  |= (1 << INT0);		//Enable INT0
     6ea:	8b b7       	in	r24, 0x3b	; 59
     6ec:	80 64       	ori	r24, 0x40	; 64
     6ee:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (0 << ISC01) | (0 << ISC00);	//On falling edge
     6f0:	85 b7       	in	r24, 0x35	; 53
     6f2:	85 bf       	out	0x35, r24	; 53
	
	
	DDRD &= ~(1 << PIND2);		//Set D2(INT0) as input
     6f4:	8a 98       	cbi	0x11, 2	; 17
	
	can_msg can_msg_send;
	can_msg can_msg_receive;
	
	UART_Init(UBRREG);
     6f6:	8e e1       	ldi	r24, 0x1E	; 30
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 b1 05 	call	0xb62	; 0xb62 <UART_Init>
	ADC_init();
     6fe:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	SPI_init();
     702:	0e 94 88 05 	call	0xb10	; 0xb10 <SPI_init>
	MCP_init();
     706:	0e 94 72 04 	call	0x8e4	; 0x8e4 <MCP_init>
	joy_init();
     70a:	0e 94 b7 02 	call	0x56e	; 0x56e <joy_init>
	SRAM_init();
     70e:	0e 94 9d 05 	call	0xb3a	; 0xb3a <SRAM_init>
	//OLED_init();
	//init_menu();
	JOY_calibrate();
     712:	0e 94 aa 02 	call	0x554	; 0x554 <JOY_calibrate>
	
	if (CAN_init() == 0) {
     716:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <CAN_init>
     71a:	89 2b       	or	r24, r25
     71c:	79 f4       	brne	.+30     	; 0x73c <main+0x68>
		printf("CAN BE WORKING\n\r");
     71e:	8e e5       	ldi	r24, 0x5E	; 94
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	9f 93       	push	r25
     724:	8f 93       	push	r24
     726:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
		can_msg_send.id = 1;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	9a 83       	std	Y+2, r25	; 0x02
     730:	89 83       	std	Y+1, r24	; 0x01
		can_msg_send.length = 8;
     732:	88 e0       	ldi	r24, 0x08	; 8
     734:	8b 83       	std	Y+3, r24	; 0x03
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	08 c0       	rjmp	.+16     	; 0x74c <main+0x78>
		} else {
		printf("CAN NOT BE WORKING \n\r");
     73c:	8f e6       	ldi	r24, 0x6F	; 111
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	9f 93       	push	r25
     742:	8f 93       	push	r24
     744:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
	uint8_t i=0;
	
	
	

	if (joy_init() == 0) {
     74c:	0e 94 b7 02 	call	0x56e	; 0x56e <joy_init>
     750:	89 2b       	or	r24, r25
     752:	49 f4       	brne	.+18     	; 0x766 <main+0x92>
		printf("----Joystick working----\n\r");
     754:	85 e8       	ldi	r24, 0x85	; 133
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	9f 93       	push	r25
     75a:	8f 93       	push	r24
     75c:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	08 c0       	rjmp	.+16     	; 0x776 <main+0xa2>
		} else {
		printf("----Joystick error!!----\n\r");
     766:	80 ea       	ldi	r24, 0xA0	; 160
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
	}
	OLED_clear();
     776:	0e 94 4c 05 	call	0xa98	; 0xa98 <OLED_clear>
	OLED_pos(1, 5);
     77a:	65 e0       	ldi	r22, 0x05	; 5
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <OLED_pos>
	OLED_print("Ping Pong");
     782:	8b eb       	ldi	r24, 0xBB	; 187
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 77 05 	call	0xaee	; 0xaee <OLED_print>
	OLED_pos(2, 5);
     78a:	65 e0       	ldi	r22, 0x05	; 5
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <OLED_pos>
	OLED_print("Ping Pong");
     792:	8b eb       	ldi	r24, 0xBB	; 187
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	0e 94 77 05 	call	0xaee	; 0xaee <OLED_print>
	OLED_pos(3, 4);
     79a:	64 e0       	ldi	r22, 0x04	; 4
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <OLED_pos>
	OLED_print("Press Button");
     7a2:	85 ec       	ldi	r24, 0xC5	; 197
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 77 05 	call	0xaee	; 0xaee <OLED_print>
	OLED_pos(4, 5);
     7aa:	65 e0       	ldi	r22, 0x05	; 5
     7ac:	84 e0       	ldi	r24, 0x04	; 4
     7ae:	0e 94 1f 05 	call	0xa3e	; 0xa3e <OLED_pos>
	OLED_print("to start");
     7b2:	82 ed       	ldi	r24, 0xD2	; 210
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 77 05 	call	0xaee	; 0xaee <OLED_print>
	
	printf("----TING FUNK----\n\r");
     7ba:	8b ed       	ldi	r24, 0xDB	; 219
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
	
	sei();
     7c6:	78 94       	sei
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
	slider_position slider_pos;
	int8_t score = 0;
	uint8_t lives = 3;
	int button_pressed = 0;
	int prev_button = 0;
	uint8_t i=0;
     7cc:	71 2c       	mov	r7, r1
	
	while(1){
	joy_pos = JOY_getDirection();

	//init_menu();
	printf("Hoyre knapp: %d, ", joy_button(0));
     7ce:	0f 2e       	mov	r0, r31
     7d0:	ff ee       	ldi	r31, 0xEF	; 239
     7d2:	8f 2e       	mov	r8, r31
     7d4:	f1 e0       	ldi	r31, 0x01	; 1
     7d6:	9f 2e       	mov	r9, r31
     7d8:	f0 2d       	mov	r31, r0
	printf("Venstre knapp: %d, ", joy_button(1));
     7da:	0f 2e       	mov	r0, r31
     7dc:	f1 e0       	ldi	r31, 0x01	; 1
     7de:	af 2e       	mov	r10, r31
     7e0:	f2 e0       	ldi	r31, 0x02	; 2
     7e2:	bf 2e       	mov	r11, r31
     7e4:	f0 2d       	mov	r31, r0
	printf("x: %d ,",ADC_read(1));
     7e6:	0f 2e       	mov	r0, r31
     7e8:	f5 e1       	ldi	r31, 0x15	; 21
     7ea:	cf 2e       	mov	r12, r31
     7ec:	f2 e0       	ldi	r31, 0x02	; 2
     7ee:	df 2e       	mov	r13, r31
     7f0:	f0 2d       	mov	r31, r0
	printf("y: %d ,",ADC_read(0));
     7f2:	0f 2e       	mov	r0, r31
     7f4:	fd e1       	ldi	r31, 0x1D	; 29
     7f6:	ef 2e       	mov	r14, r31
     7f8:	f2 e0       	ldi	r31, 0x02	; 2
     7fa:	ff 2e       	mov	r15, r31
     7fc:	f0 2d       	mov	r31, r0
	printf("Retning: %s\n\r",joy_pos.direction);
     7fe:	05 e2       	ldi	r16, 0x25	; 37
     800:	12 e0       	ldi	r17, 0x02	; 2
	
	//can_msg_send.data[0] = joy_pos.x;
	//can_msg_send.data[1] = joy_pos.y;
	
 			can_msg_send.data[0] = 0x10;
     802:	68 94       	set
     804:	44 24       	eor	r4, r4
     806:	44 f8       	bld	r4, 4
	printf("----TING FUNK----\n\r");
	
	sei();
	
	while(1){
	joy_pos = JOY_getDirection();
     808:	0e 94 46 03 	call	0x68c	; 0x68c <JOY_getDirection>
     80c:	68 2e       	mov	r6, r24
     80e:	59 2e       	mov	r5, r25

	//init_menu();
	printf("Hoyre knapp: %d, ", joy_button(0));
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 c4 02 	call	0x588	; 0x588 <joy_button>
     818:	9f 93       	push	r25
     81a:	8f 93       	push	r24
     81c:	9f 92       	push	r9
     81e:	8f 92       	push	r8
     820:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
	printf("Venstre knapp: %d, ", joy_button(1));
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 c4 02 	call	0x588	; 0x588 <joy_button>
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	bf 92       	push	r11
     832:	af 92       	push	r10
     834:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
	printf("x: %d ,",ADC_read(1));
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     83e:	1f 92       	push	r1
     840:	8f 93       	push	r24
     842:	df 92       	push	r13
     844:	cf 92       	push	r12
     846:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
	printf("y: %d ,",ADC_read(0));
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <ADC_read>
     850:	1f 92       	push	r1
     852:	8f 93       	push	r24
     854:	ff 92       	push	r15
     856:	ef 92       	push	r14
     858:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
	printf("Retning: %s\n\r",joy_pos.direction);
     85c:	5f 92       	push	r5
     85e:	6f 92       	push	r6
     860:	1f 93       	push	r17
     862:	0f 93       	push	r16
     864:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
	
	//can_msg_send.data[0] = joy_pos.x;
	//can_msg_send.data[1] = joy_pos.y;
	
 			can_msg_send.data[0] = 0x10;
     868:	4c 82       	std	Y+4, r4	; 0x04
 			i=i+1;
     86a:	73 94       	inc	r7
 			if (i>0xFF)
 			{
 				i=0;
 			}
 			can_msg_send.data[1] = i;
     86c:	7d 82       	std	Y+5, r7	; 0x05
	
	CAN_message_send(&can_msg_send);
     86e:	ce 01       	movw	r24, r28
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	0e 94 28 02 	call	0x450	; 0x450 <CAN_message_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     876:	28 e7       	ldi	r18, 0x78	; 120
     878:	8f eb       	ldi	r24, 0xBF	; 191
     87a:	93 e0       	ldi	r25, 0x03	; 3
     87c:	21 50       	subi	r18, 0x01	; 1
     87e:	80 40       	sbci	r24, 0x00	; 0
     880:	90 40       	sbci	r25, 0x00	; 0
     882:	e1 f7       	brne	.-8      	; 0x87c <main+0x1a8>
     884:	00 c0       	rjmp	.+0      	; 0x886 <main+0x1b2>
     886:	00 00       	nop
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
     892:	ba cf       	rjmp	.-140    	; 0x808 <main+0x134>

00000894 <MCP_reset>:
	SPI_send(MCP_READ_STATUS);
	uint8_t status = SPI_send(0);
	SPI_set_ss(1);
	
	return status;
}
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 94 05 	call	0xb28	; 0xb28 <SPI_set_ss>
     89c:	80 ec       	ldi	r24, 0xC0	; 192
     89e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
     8a2:	85 ef       	ldi	r24, 0xF5	; 245
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	f1 f7       	brne	.-4      	; 0x8a6 <MCP_reset+0x12>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <MCP_reset+0x18>
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 94 05 	call	0xb28	; 0xb28 <SPI_set_ss>
     8b4:	08 95       	ret

000008b6 <MCP_read>:
     8b6:	cf 93       	push	r28
     8b8:	c8 2f       	mov	r28, r24
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 94 05 	call	0xb28	; 0xb28 <SPI_set_ss>
     8c2:	83 e0       	ldi	r24, 0x03	; 3
     8c4:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
     8c8:	8c 2f       	mov	r24, r28
     8ca:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
     8d4:	c8 2f       	mov	r28, r24
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 94 05 	call	0xb28	; 0xb28 <SPI_set_ss>
     8de:	8c 2f       	mov	r24, r28
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <MCP_init>:
     8e4:	0e 94 88 05 	call	0xb10	; 0xb10 <SPI_init>
     8e8:	0e 94 4a 04 	call	0x894	; 0x894 <MCP_reset>
     8ec:	8e e0       	ldi	r24, 0x0E	; 14
     8ee:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <MCP_read>
     8f2:	80 7e       	andi	r24, 0xE0	; 224
     8f4:	80 38       	cpi	r24, 0x80	; 128
     8f6:	51 f0       	breq	.+20     	; 0x90c <MCP_init+0x28>
     8f8:	83 e3       	ldi	r24, 0x33	; 51
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	9f 93       	push	r25
     8fe:	8f 93       	push	r24
     900:	0e 94 31 06 	call	0xc62	; 0xc62 <printf>
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	08 95       	ret
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	08 95       	ret

00000910 <MCP_write>:
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	d8 2f       	mov	r29, r24
     916:	c6 2f       	mov	r28, r22
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 94 05 	call	0xb28	; 0xb28 <SPI_set_ss>
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
     926:	8d 2f       	mov	r24, r29
     928:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
     92c:	8c 2f       	mov	r24, r28
     92e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 94 05 	call	0xb28	; 0xb28 <SPI_set_ss>
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <MCP_request_to_send>:
     940:	cf 93       	push	r28
     942:	c8 2f       	mov	r28, r24
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 94 05 	call	0xb28	; 0xb28 <SPI_set_ss>
     94c:	8c 2f       	mov	r24, r28
     94e:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 94 05 	call	0xb28	; 0xb28 <SPI_set_ss>
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <MCP_bit_modify>:

void MCP_bit_modify( uint8_t address, uint8_t mask, uint8_t data )
{
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	18 2f       	mov	r17, r24
     966:	d6 2f       	mov	r29, r22
     968:	c4 2f       	mov	r28, r20
	SPI_set_ss(0);
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 94 05 	call	0xb28	; 0xb28 <SPI_set_ss>
	SPI_send(MCP_BITMOD);
     972:	85 e0       	ldi	r24, 0x05	; 5
     974:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
	
	SPI_send(address);
     978:	81 2f       	mov	r24, r17
     97a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
	SPI_send(mask);
     97e:	8d 2f       	mov	r24, r29
     980:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
	SPI_send(data);
     984:	8c 2f       	mov	r24, r28
     986:	0e 94 8f 05 	call	0xb1e	; 0xb1e <SPI_send>
	
	SPI_set_ss(1);
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 94 05 	call	0xb28	; 0xb28 <SPI_set_ss>
}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	08 95       	ret

0000099a <OLED_home>:
			*OLED_data = pgm_read_byte(&ntnu[y+1][i]);
		}
	}
	
	return 0;
}
     99a:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <page>
     99e:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <col>
     9a2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     9a6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     9aa:	83 ed       	ldi	r24, 0xD3	; 211
     9ac:	80 83       	st	Z, r24
     9ae:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     9b2:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     9b6:	88 ec       	ldi	r24, 0xC8	; 200
     9b8:	80 83       	st	Z, r24
     9ba:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     9be:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     9c2:	81 e2       	ldi	r24, 0x21	; 33
     9c4:	80 83       	st	Z, r24
     9c6:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     9ca:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     9ce:	10 82       	st	Z, r1
     9d0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     9d4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     9d8:	8f e7       	ldi	r24, 0x7F	; 127
     9da:	80 83       	st	Z, r24
     9dc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     9e0:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     9e4:	82 e2       	ldi	r24, 0x22	; 34
     9e6:	80 83       	st	Z, r24
     9e8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     9ec:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     9f0:	10 82       	st	Z, r1
     9f2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     9f6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     9fa:	87 e0       	ldi	r24, 0x07	; 7
     9fc:	80 83       	st	Z, r24
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	08 95       	ret

00000a04 <OLED_goto_line>:
     a04:	cf 93       	push	r28
     a06:	c8 2f       	mov	r28, r24
     a08:	0e 94 cd 04 	call	0x99a	; 0x99a <OLED_home>
     a0c:	c8 30       	cpi	r28, 0x08	; 8
     a0e:	98 f4       	brcc	.+38     	; 0xa36 <OLED_goto_line+0x32>
     a10:	c0 93 5e 02 	sts	0x025E, r28	; 0x80025e <page>
     a14:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     a18:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     a1c:	10 82       	st	Z, r1
     a1e:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     a22:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     a26:	80 e1       	ldi	r24, 0x10	; 16
     a28:	80 83       	st	Z, r24
     a2a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     a2e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     a32:	c0 6b       	ori	r28, 0xB0	; 176
     a34:	c0 83       	st	Z, r28
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <OLED_pos>:
     a3e:	cf 93       	push	r28
     a40:	c6 2f       	mov	r28, r22
     a42:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_goto_line>
     a46:	c0 31       	cpi	r28, 0x10	; 16
     a48:	98 f4       	brcc	.+38     	; 0xa70 <OLED_pos+0x32>
     a4a:	8c 2f       	mov	r24, r28
     a4c:	88 0f       	add	r24, r24
     a4e:	88 0f       	add	r24, r24
     a50:	88 0f       	add	r24, r24
     a52:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <col>
     a56:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     a5a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     a5e:	8f 70       	andi	r24, 0x0F	; 15
     a60:	80 83       	st	Z, r24
     a62:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <OLED_cmd>
     a66:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <OLED_cmd+0x1>
     a6a:	c0 62       	ori	r28, 0x20	; 32
     a6c:	c6 95       	lsr	r28
     a6e:	c0 83       	st	Z, r28
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <OLED_clear_line>:
     a78:	0e 94 02 05 	call	0xa04	; 0xa04 <OLED_goto_line>
     a7c:	80 e8       	ldi	r24, 0x80	; 128
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <OLED_data>
     a84:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <OLED_data+0x1>
     a88:	10 82       	st	Z, r1
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	c9 f7       	brne	.-14     	; 0xa80 <OLED_clear_line+0x8>
     a8e:	0e 94 cd 04 	call	0x99a	; 0x99a <OLED_home>
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	08 95       	ret

00000a98 <OLED_clear>:
     a98:	cf 93       	push	r28
     a9a:	c0 e0       	ldi	r28, 0x00	; 0
     a9c:	8c 2f       	mov	r24, r28
     a9e:	0e 94 3c 05 	call	0xa78	; 0xa78 <OLED_clear_line>
     aa2:	cf 5f       	subi	r28, 0xFF	; 255
     aa4:	c8 30       	cpi	r28, 0x08	; 8
     aa6:	d1 f7       	brne	.-12     	; 0xa9c <OLED_clear+0x4>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <OLED_print_char>:
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	fc 01       	movw	r30, r24
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	ee 0f       	add	r30, r30
     abe:	ff 1f       	adc	r31, r31
     ac0:	e0 59       	subi	r30, 0x90	; 144
     ac2:	f0 40       	sbci	r31, 0x00	; 0
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	88 58       	subi	r24, 0x88	; 136
     ad2:	90 40       	sbci	r25, 0x00	; 0
     ad4:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <OLED_data>
     ad8:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <OLED_data+0x1>
     adc:	24 91       	lpm	r18, Z
     ade:	2c 93       	st	X, r18
     ae0:	31 96       	adiw	r30, 0x01	; 1
     ae2:	e8 17       	cp	r30, r24
     ae4:	f9 07       	cpc	r31, r25
     ae6:	b1 f7       	brne	.-20     	; 0xad4 <OLED_print_char+0x24>
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	08 95       	ret

00000aee <OLED_print>:


int OLED_print(char *data) {
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	ec 01       	movw	r28, r24
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
     af4:	88 81       	ld	r24, Y
     af6:	88 23       	and	r24, r24
     af8:	31 f0       	breq	.+12     	; 0xb06 <OLED_print+0x18>
     afa:	21 96       	adiw	r28, 0x01	; 1
		OLED_print_char(data[i]);
     afc:	0e 94 58 05 	call	0xab0	; 0xab0 <OLED_print_char>

int OLED_print(char *data) {
	int i = 0;
	
	//Write the complete string
	while(data[i] != '\0'){
     b00:	89 91       	ld	r24, Y+
     b02:	81 11       	cpse	r24, r1
     b04:	fb cf       	rjmp	.-10     	; 0xafc <OLED_print+0xe>
		OLED_print_char(data[i]);
		i++;
	}
	
	return 0;
}
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <SPI_init>:
	
	//Wait for data to be received
	while(!(SPSR & (1<<SPIF)));
	
	return SPDR;
}
     b10:	87 b3       	in	r24, 0x17	; 23
     b12:	80 6b       	ori	r24, 0xB0	; 176
     b14:	87 bb       	out	0x17, r24	; 23
     b16:	be 98       	cbi	0x17, 6	; 23
     b18:	81 e5       	ldi	r24, 0x51	; 81
     b1a:	8d b9       	out	0x0d, r24	; 13
     b1c:	08 95       	ret

00000b1e <SPI_send>:
     b1e:	8f b9       	out	0x0f, r24	; 15
     b20:	77 9b       	sbis	0x0e, 7	; 14
     b22:	fe cf       	rjmp	.-4      	; 0xb20 <SPI_send+0x2>
     b24:	8f b1       	in	r24, 0x0f	; 15
     b26:	08 95       	ret

00000b28 <SPI_set_ss>:

// Defines chip-select, unsure if necessary
void SPI_set_ss( int select )
{
	//for ATmega 162 set chip-select
	if (select == 1){
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	91 05       	cpc	r25, r1
     b2c:	11 f4       	brne	.+4      	; 0xb32 <SPI_set_ss+0xa>
		set_bit(PORTB, PB4);
     b2e:	c4 9a       	sbi	0x18, 4	; 24
     b30:	08 95       	ret
	}
	else if (select == 0){
     b32:	89 2b       	or	r24, r25
     b34:	09 f4       	brne	.+2      	; 0xb38 <SPI_set_ss+0x10>
		clear_bit(PORTB, PB4);
     b36:	c4 98       	cbi	0x18, 4	; 24
     b38:	08 95       	ret

00000b3a <SRAM_init>:
#include <avr/io.h>
#include <stdio.h>

int SRAM_init(void) {
	//Enable the external memory interface/4 bits address
	MCUCR |= (1<<SRE);
     b3a:	85 b7       	in	r24, 0x35	; 53
     b3c:	80 68       	ori	r24, 0x80	; 128
     b3e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     b40:	80 b7       	in	r24, 0x30	; 48
     b42:	80 62       	ori	r24, 0x20	; 32
     b44:	80 bf       	out	0x30, r24	; 48
	
	return 0;
}
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	08 95       	ret

00000b4c <UART_TX>:
}

int UART_TX(char data, FILE * _in){
	(void)(_in);
	
	while( !(UCSR0A & (1 << UDRE0)) );
     b4c:	5d 9b       	sbis	0x0b, 5	; 11
     b4e:	fe cf       	rjmp	.-4      	; 0xb4c <UART_TX>
	
	// send data
	UDR0 = data;
     b50:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	08 95       	ret

00000b58 <UART_RX>:

int UART_RX(FILE * _in ){
	(void)(_in);
	while( !(UCSR0A & (1 << RXC0)) );
     b58:	5f 9b       	sbis	0x0b, 7	; 11
     b5a:	fe cf       	rjmp	.-4      	; 0xb58 <UART_RX>
	
	// Data recieved
	return UDR0;
     b5c:	8c b1       	in	r24, 0x0c	; 12
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	08 95       	ret

00000b62 <UART_Init>:


void UART_Init(unsigned int ubrr)
{
	// Baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
     b62:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubrr);
     b64:	89 b9       	out	0x09, r24	; 9
	
	// Enable Rx and Tx
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) ;
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
     b6a:	8e e8       	ldi	r24, 0x8E	; 142
     b6c:	80 bd       	out	0x20, r24	; 32
	fdevopen(UART_TX, UART_RX);
     b6e:	6c ea       	ldi	r22, 0xAC	; 172
     b70:	75 e0       	ldi	r23, 0x05	; 5
     b72:	86 ea       	ldi	r24, 0xA6	; 166
     b74:	95 e0       	ldi	r25, 0x05	; 5
     b76:	0e 94 e6 05 	call	0xbcc	; 0xbcc <fdevopen>
     b7a:	08 95       	ret

00000b7c <__divmodhi4>:
     b7c:	97 fb       	bst	r25, 7
     b7e:	07 2e       	mov	r0, r23
     b80:	16 f4       	brtc	.+4      	; 0xb86 <__divmodhi4+0xa>
     b82:	00 94       	com	r0
     b84:	07 d0       	rcall	.+14     	; 0xb94 <__divmodhi4_neg1>
     b86:	77 fd       	sbrc	r23, 7
     b88:	09 d0       	rcall	.+18     	; 0xb9c <__divmodhi4_neg2>
     b8a:	0e 94 d2 05 	call	0xba4	; 0xba4 <__udivmodhi4>
     b8e:	07 fc       	sbrc	r0, 7
     b90:	05 d0       	rcall	.+10     	; 0xb9c <__divmodhi4_neg2>
     b92:	3e f4       	brtc	.+14     	; 0xba2 <__divmodhi4_exit>

00000b94 <__divmodhi4_neg1>:
     b94:	90 95       	com	r25
     b96:	81 95       	neg	r24
     b98:	9f 4f       	sbci	r25, 0xFF	; 255
     b9a:	08 95       	ret

00000b9c <__divmodhi4_neg2>:
     b9c:	70 95       	com	r23
     b9e:	61 95       	neg	r22
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255

00000ba2 <__divmodhi4_exit>:
     ba2:	08 95       	ret

00000ba4 <__udivmodhi4>:
     ba4:	aa 1b       	sub	r26, r26
     ba6:	bb 1b       	sub	r27, r27
     ba8:	51 e1       	ldi	r21, 0x11	; 17
     baa:	07 c0       	rjmp	.+14     	; 0xbba <__udivmodhi4_ep>

00000bac <__udivmodhi4_loop>:
     bac:	aa 1f       	adc	r26, r26
     bae:	bb 1f       	adc	r27, r27
     bb0:	a6 17       	cp	r26, r22
     bb2:	b7 07       	cpc	r27, r23
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__udivmodhi4_ep>
     bb6:	a6 1b       	sub	r26, r22
     bb8:	b7 0b       	sbc	r27, r23

00000bba <__udivmodhi4_ep>:
     bba:	88 1f       	adc	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	5a 95       	dec	r21
     bc0:	a9 f7       	brne	.-22     	; 0xbac <__udivmodhi4_loop>
     bc2:	80 95       	com	r24
     bc4:	90 95       	com	r25
     bc6:	bc 01       	movw	r22, r24
     bc8:	cd 01       	movw	r24, r26
     bca:	08 95       	ret

00000bcc <fdevopen>:
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	31 f4       	brne	.+12     	; 0xbe4 <fdevopen+0x18>
     bd8:	61 15       	cp	r22, r1
     bda:	71 05       	cpc	r23, r1
     bdc:	19 f4       	brne	.+6      	; 0xbe4 <fdevopen+0x18>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	3a c0       	rjmp	.+116    	; 0xc58 <fdevopen+0x8c>
     be4:	8b 01       	movw	r16, r22
     be6:	ec 01       	movw	r28, r24
     be8:	6e e0       	ldi	r22, 0x0E	; 14
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 19 08 	call	0x1032	; 0x1032 <calloc>
     bf4:	fc 01       	movw	r30, r24
     bf6:	89 2b       	or	r24, r25
     bf8:	91 f3       	breq	.-28     	; 0xbde <fdevopen+0x12>
     bfa:	80 e8       	ldi	r24, 0x80	; 128
     bfc:	83 83       	std	Z+3, r24	; 0x03
     bfe:	01 15       	cp	r16, r1
     c00:	11 05       	cpc	r17, r1
     c02:	71 f0       	breq	.+28     	; 0xc20 <fdevopen+0x54>
     c04:	13 87       	std	Z+11, r17	; 0x0b
     c06:	02 87       	std	Z+10, r16	; 0x0a
     c08:	81 e8       	ldi	r24, 0x81	; 129
     c0a:	83 83       	std	Z+3, r24	; 0x03
     c0c:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <__iob>
     c10:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <__iob+0x1>
     c14:	89 2b       	or	r24, r25
     c16:	21 f4       	brne	.+8      	; 0xc20 <fdevopen+0x54>
     c18:	f0 93 60 02 	sts	0x0260, r31	; 0x800260 <__iob+0x1>
     c1c:	e0 93 5f 02 	sts	0x025F, r30	; 0x80025f <__iob>
     c20:	20 97       	sbiw	r28, 0x00	; 0
     c22:	c9 f0       	breq	.+50     	; 0xc56 <fdevopen+0x8a>
     c24:	d1 87       	std	Z+9, r29	; 0x09
     c26:	c0 87       	std	Z+8, r28	; 0x08
     c28:	83 81       	ldd	r24, Z+3	; 0x03
     c2a:	82 60       	ori	r24, 0x02	; 2
     c2c:	83 83       	std	Z+3, r24	; 0x03
     c2e:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <__iob+0x2>
     c32:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <__iob+0x3>
     c36:	89 2b       	or	r24, r25
     c38:	71 f4       	brne	.+28     	; 0xc56 <fdevopen+0x8a>
     c3a:	f0 93 62 02 	sts	0x0262, r31	; 0x800262 <__iob+0x3>
     c3e:	e0 93 61 02 	sts	0x0261, r30	; 0x800261 <__iob+0x2>
     c42:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <__iob+0x4>
     c46:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <__iob+0x5>
     c4a:	89 2b       	or	r24, r25
     c4c:	21 f4       	brne	.+8      	; 0xc56 <fdevopen+0x8a>
     c4e:	f0 93 64 02 	sts	0x0264, r31	; 0x800264 <__iob+0x5>
     c52:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <__iob+0x4>
     c56:	cf 01       	movw	r24, r30
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <printf>:
     c62:	a0 e0       	ldi	r26, 0x00	; 0
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e7 e3       	ldi	r30, 0x37	; 55
     c68:	f6 e0       	ldi	r31, 0x06	; 6
     c6a:	0c 94 25 0a 	jmp	0x144a	; 0x144a <__prologue_saves__+0x20>
     c6e:	ae 01       	movw	r20, r28
     c70:	4b 5f       	subi	r20, 0xFB	; 251
     c72:	5f 4f       	sbci	r21, 0xFF	; 255
     c74:	fa 01       	movw	r30, r20
     c76:	61 91       	ld	r22, Z+
     c78:	71 91       	ld	r23, Z+
     c7a:	af 01       	movw	r20, r30
     c7c:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <__iob+0x2>
     c80:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <__iob+0x3>
     c84:	0e 94 47 06 	call	0xc8e	; 0xc8e <vfprintf>
     c88:	e2 e0       	ldi	r30, 0x02	; 2
     c8a:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__epilogue_restores__+0x20>

00000c8e <vfprintf>:
     c8e:	ac e0       	ldi	r26, 0x0C	; 12
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ed e4       	ldi	r30, 0x4D	; 77
     c94:	f6 e0       	ldi	r31, 0x06	; 6
     c96:	0c 94 15 0a 	jmp	0x142a	; 0x142a <__prologue_saves__>
     c9a:	7c 01       	movw	r14, r24
     c9c:	6b 01       	movw	r12, r22
     c9e:	8a 01       	movw	r16, r20
     ca0:	fc 01       	movw	r30, r24
     ca2:	17 82       	std	Z+7, r1	; 0x07
     ca4:	16 82       	std	Z+6, r1	; 0x06
     ca6:	83 81       	ldd	r24, Z+3	; 0x03
     ca8:	81 ff       	sbrs	r24, 1
     caa:	bd c1       	rjmp	.+890    	; 0x1026 <vfprintf+0x398>
     cac:	ce 01       	movw	r24, r28
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	4c 01       	movw	r8, r24
     cb2:	f7 01       	movw	r30, r14
     cb4:	93 81       	ldd	r25, Z+3	; 0x03
     cb6:	f6 01       	movw	r30, r12
     cb8:	93 fd       	sbrc	r25, 3
     cba:	85 91       	lpm	r24, Z+
     cbc:	93 ff       	sbrs	r25, 3
     cbe:	81 91       	ld	r24, Z+
     cc0:	6f 01       	movw	r12, r30
     cc2:	88 23       	and	r24, r24
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <vfprintf+0x3a>
     cc6:	ab c1       	rjmp	.+854    	; 0x101e <vfprintf+0x390>
     cc8:	85 32       	cpi	r24, 0x25	; 37
     cca:	39 f4       	brne	.+14     	; 0xcda <vfprintf+0x4c>
     ccc:	93 fd       	sbrc	r25, 3
     cce:	85 91       	lpm	r24, Z+
     cd0:	93 ff       	sbrs	r25, 3
     cd2:	81 91       	ld	r24, Z+
     cd4:	6f 01       	movw	r12, r30
     cd6:	85 32       	cpi	r24, 0x25	; 37
     cd8:	29 f4       	brne	.+10     	; 0xce4 <vfprintf+0x56>
     cda:	b7 01       	movw	r22, r14
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
     ce2:	e7 cf       	rjmp	.-50     	; 0xcb2 <vfprintf+0x24>
     ce4:	51 2c       	mov	r5, r1
     ce6:	31 2c       	mov	r3, r1
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	20 32       	cpi	r18, 0x20	; 32
     cec:	a0 f4       	brcc	.+40     	; 0xd16 <vfprintf+0x88>
     cee:	8b 32       	cpi	r24, 0x2B	; 43
     cf0:	69 f0       	breq	.+26     	; 0xd0c <vfprintf+0x7e>
     cf2:	30 f4       	brcc	.+12     	; 0xd00 <vfprintf+0x72>
     cf4:	80 32       	cpi	r24, 0x20	; 32
     cf6:	59 f0       	breq	.+22     	; 0xd0e <vfprintf+0x80>
     cf8:	83 32       	cpi	r24, 0x23	; 35
     cfa:	69 f4       	brne	.+26     	; 0xd16 <vfprintf+0x88>
     cfc:	20 61       	ori	r18, 0x10	; 16
     cfe:	2c c0       	rjmp	.+88     	; 0xd58 <vfprintf+0xca>
     d00:	8d 32       	cpi	r24, 0x2D	; 45
     d02:	39 f0       	breq	.+14     	; 0xd12 <vfprintf+0x84>
     d04:	80 33       	cpi	r24, 0x30	; 48
     d06:	39 f4       	brne	.+14     	; 0xd16 <vfprintf+0x88>
     d08:	21 60       	ori	r18, 0x01	; 1
     d0a:	26 c0       	rjmp	.+76     	; 0xd58 <vfprintf+0xca>
     d0c:	22 60       	ori	r18, 0x02	; 2
     d0e:	24 60       	ori	r18, 0x04	; 4
     d10:	23 c0       	rjmp	.+70     	; 0xd58 <vfprintf+0xca>
     d12:	28 60       	ori	r18, 0x08	; 8
     d14:	21 c0       	rjmp	.+66     	; 0xd58 <vfprintf+0xca>
     d16:	27 fd       	sbrc	r18, 7
     d18:	27 c0       	rjmp	.+78     	; 0xd68 <vfprintf+0xda>
     d1a:	30 ed       	ldi	r19, 0xD0	; 208
     d1c:	38 0f       	add	r19, r24
     d1e:	3a 30       	cpi	r19, 0x0A	; 10
     d20:	78 f4       	brcc	.+30     	; 0xd40 <vfprintf+0xb2>
     d22:	26 ff       	sbrs	r18, 6
     d24:	06 c0       	rjmp	.+12     	; 0xd32 <vfprintf+0xa4>
     d26:	fa e0       	ldi	r31, 0x0A	; 10
     d28:	5f 9e       	mul	r5, r31
     d2a:	30 0d       	add	r19, r0
     d2c:	11 24       	eor	r1, r1
     d2e:	53 2e       	mov	r5, r19
     d30:	13 c0       	rjmp	.+38     	; 0xd58 <vfprintf+0xca>
     d32:	8a e0       	ldi	r24, 0x0A	; 10
     d34:	38 9e       	mul	r3, r24
     d36:	30 0d       	add	r19, r0
     d38:	11 24       	eor	r1, r1
     d3a:	33 2e       	mov	r3, r19
     d3c:	20 62       	ori	r18, 0x20	; 32
     d3e:	0c c0       	rjmp	.+24     	; 0xd58 <vfprintf+0xca>
     d40:	8e 32       	cpi	r24, 0x2E	; 46
     d42:	21 f4       	brne	.+8      	; 0xd4c <vfprintf+0xbe>
     d44:	26 fd       	sbrc	r18, 6
     d46:	6b c1       	rjmp	.+726    	; 0x101e <vfprintf+0x390>
     d48:	20 64       	ori	r18, 0x40	; 64
     d4a:	06 c0       	rjmp	.+12     	; 0xd58 <vfprintf+0xca>
     d4c:	8c 36       	cpi	r24, 0x6C	; 108
     d4e:	11 f4       	brne	.+4      	; 0xd54 <vfprintf+0xc6>
     d50:	20 68       	ori	r18, 0x80	; 128
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <vfprintf+0xca>
     d54:	88 36       	cpi	r24, 0x68	; 104
     d56:	41 f4       	brne	.+16     	; 0xd68 <vfprintf+0xda>
     d58:	f6 01       	movw	r30, r12
     d5a:	93 fd       	sbrc	r25, 3
     d5c:	85 91       	lpm	r24, Z+
     d5e:	93 ff       	sbrs	r25, 3
     d60:	81 91       	ld	r24, Z+
     d62:	6f 01       	movw	r12, r30
     d64:	81 11       	cpse	r24, r1
     d66:	c1 cf       	rjmp	.-126    	; 0xcea <vfprintf+0x5c>
     d68:	98 2f       	mov	r25, r24
     d6a:	9f 7d       	andi	r25, 0xDF	; 223
     d6c:	95 54       	subi	r25, 0x45	; 69
     d6e:	93 30       	cpi	r25, 0x03	; 3
     d70:	28 f4       	brcc	.+10     	; 0xd7c <vfprintf+0xee>
     d72:	0c 5f       	subi	r16, 0xFC	; 252
     d74:	1f 4f       	sbci	r17, 0xFF	; 255
     d76:	ff e3       	ldi	r31, 0x3F	; 63
     d78:	f9 83       	std	Y+1, r31	; 0x01
     d7a:	0d c0       	rjmp	.+26     	; 0xd96 <vfprintf+0x108>
     d7c:	83 36       	cpi	r24, 0x63	; 99
     d7e:	31 f0       	breq	.+12     	; 0xd8c <vfprintf+0xfe>
     d80:	83 37       	cpi	r24, 0x73	; 115
     d82:	71 f0       	breq	.+28     	; 0xda0 <vfprintf+0x112>
     d84:	83 35       	cpi	r24, 0x53	; 83
     d86:	09 f0       	breq	.+2      	; 0xd8a <vfprintf+0xfc>
     d88:	5b c0       	rjmp	.+182    	; 0xe40 <vfprintf+0x1b2>
     d8a:	22 c0       	rjmp	.+68     	; 0xdd0 <vfprintf+0x142>
     d8c:	f8 01       	movw	r30, r16
     d8e:	80 81       	ld	r24, Z
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	0e 5f       	subi	r16, 0xFE	; 254
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	44 24       	eor	r4, r4
     d98:	43 94       	inc	r4
     d9a:	51 2c       	mov	r5, r1
     d9c:	54 01       	movw	r10, r8
     d9e:	15 c0       	rjmp	.+42     	; 0xdca <vfprintf+0x13c>
     da0:	38 01       	movw	r6, r16
     da2:	f2 e0       	ldi	r31, 0x02	; 2
     da4:	6f 0e       	add	r6, r31
     da6:	71 1c       	adc	r7, r1
     da8:	f8 01       	movw	r30, r16
     daa:	a0 80       	ld	r10, Z
     dac:	b1 80       	ldd	r11, Z+1	; 0x01
     dae:	26 ff       	sbrs	r18, 6
     db0:	03 c0       	rjmp	.+6      	; 0xdb8 <vfprintf+0x12a>
     db2:	65 2d       	mov	r22, r5
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <vfprintf+0x12e>
     db8:	6f ef       	ldi	r22, 0xFF	; 255
     dba:	7f ef       	ldi	r23, 0xFF	; 255
     dbc:	c5 01       	movw	r24, r10
     dbe:	2c 87       	std	Y+12, r18	; 0x0c
     dc0:	0e 94 74 09 	call	0x12e8	; 0x12e8 <strnlen>
     dc4:	2c 01       	movw	r4, r24
     dc6:	83 01       	movw	r16, r6
     dc8:	2c 85       	ldd	r18, Y+12	; 0x0c
     dca:	2f 77       	andi	r18, 0x7F	; 127
     dcc:	22 2e       	mov	r2, r18
     dce:	17 c0       	rjmp	.+46     	; 0xdfe <vfprintf+0x170>
     dd0:	38 01       	movw	r6, r16
     dd2:	f2 e0       	ldi	r31, 0x02	; 2
     dd4:	6f 0e       	add	r6, r31
     dd6:	71 1c       	adc	r7, r1
     dd8:	f8 01       	movw	r30, r16
     dda:	a0 80       	ld	r10, Z
     ddc:	b1 80       	ldd	r11, Z+1	; 0x01
     dde:	26 ff       	sbrs	r18, 6
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <vfprintf+0x15a>
     de2:	65 2d       	mov	r22, r5
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	02 c0       	rjmp	.+4      	; 0xdec <vfprintf+0x15e>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	c5 01       	movw	r24, r10
     dee:	2c 87       	std	Y+12, r18	; 0x0c
     df0:	0e 94 62 09 	call	0x12c4	; 0x12c4 <strnlen_P>
     df4:	2c 01       	movw	r4, r24
     df6:	2c 85       	ldd	r18, Y+12	; 0x0c
     df8:	20 68       	ori	r18, 0x80	; 128
     dfa:	22 2e       	mov	r2, r18
     dfc:	83 01       	movw	r16, r6
     dfe:	23 fc       	sbrc	r2, 3
     e00:	1b c0       	rjmp	.+54     	; 0xe38 <vfprintf+0x1aa>
     e02:	83 2d       	mov	r24, r3
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	48 16       	cp	r4, r24
     e08:	59 06       	cpc	r5, r25
     e0a:	b0 f4       	brcc	.+44     	; 0xe38 <vfprintf+0x1aa>
     e0c:	b7 01       	movw	r22, r14
     e0e:	80 e2       	ldi	r24, 0x20	; 32
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
     e16:	3a 94       	dec	r3
     e18:	f4 cf       	rjmp	.-24     	; 0xe02 <vfprintf+0x174>
     e1a:	f5 01       	movw	r30, r10
     e1c:	27 fc       	sbrc	r2, 7
     e1e:	85 91       	lpm	r24, Z+
     e20:	27 fe       	sbrs	r2, 7
     e22:	81 91       	ld	r24, Z+
     e24:	5f 01       	movw	r10, r30
     e26:	b7 01       	movw	r22, r14
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
     e2e:	31 10       	cpse	r3, r1
     e30:	3a 94       	dec	r3
     e32:	f1 e0       	ldi	r31, 0x01	; 1
     e34:	4f 1a       	sub	r4, r31
     e36:	51 08       	sbc	r5, r1
     e38:	41 14       	cp	r4, r1
     e3a:	51 04       	cpc	r5, r1
     e3c:	71 f7       	brne	.-36     	; 0xe1a <vfprintf+0x18c>
     e3e:	e5 c0       	rjmp	.+458    	; 0x100a <vfprintf+0x37c>
     e40:	84 36       	cpi	r24, 0x64	; 100
     e42:	11 f0       	breq	.+4      	; 0xe48 <vfprintf+0x1ba>
     e44:	89 36       	cpi	r24, 0x69	; 105
     e46:	39 f5       	brne	.+78     	; 0xe96 <vfprintf+0x208>
     e48:	f8 01       	movw	r30, r16
     e4a:	27 ff       	sbrs	r18, 7
     e4c:	07 c0       	rjmp	.+14     	; 0xe5c <vfprintf+0x1ce>
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
     e52:	82 81       	ldd	r24, Z+2	; 0x02
     e54:	93 81       	ldd	r25, Z+3	; 0x03
     e56:	0c 5f       	subi	r16, 0xFC	; 252
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	08 c0       	rjmp	.+16     	; 0xe6c <vfprintf+0x1de>
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
     e60:	07 2e       	mov	r0, r23
     e62:	00 0c       	add	r0, r0
     e64:	88 0b       	sbc	r24, r24
     e66:	99 0b       	sbc	r25, r25
     e68:	0e 5f       	subi	r16, 0xFE	; 254
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
     e6c:	2f 76       	andi	r18, 0x6F	; 111
     e6e:	72 2e       	mov	r7, r18
     e70:	97 ff       	sbrs	r25, 7
     e72:	09 c0       	rjmp	.+18     	; 0xe86 <vfprintf+0x1f8>
     e74:	90 95       	com	r25
     e76:	80 95       	com	r24
     e78:	70 95       	com	r23
     e7a:	61 95       	neg	r22
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	8f 4f       	sbci	r24, 0xFF	; 255
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	20 68       	ori	r18, 0x80	; 128
     e84:	72 2e       	mov	r7, r18
     e86:	2a e0       	ldi	r18, 0x0A	; 10
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	a4 01       	movw	r20, r8
     e8c:	0e 94 b7 09 	call	0x136e	; 0x136e <__ultoa_invert>
     e90:	a8 2e       	mov	r10, r24
     e92:	a8 18       	sub	r10, r8
     e94:	44 c0       	rjmp	.+136    	; 0xf1e <vfprintf+0x290>
     e96:	85 37       	cpi	r24, 0x75	; 117
     e98:	29 f4       	brne	.+10     	; 0xea4 <vfprintf+0x216>
     e9a:	2f 7e       	andi	r18, 0xEF	; 239
     e9c:	b2 2e       	mov	r11, r18
     e9e:	2a e0       	ldi	r18, 0x0A	; 10
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	25 c0       	rjmp	.+74     	; 0xeee <vfprintf+0x260>
     ea4:	f2 2f       	mov	r31, r18
     ea6:	f9 7f       	andi	r31, 0xF9	; 249
     ea8:	bf 2e       	mov	r11, r31
     eaa:	8f 36       	cpi	r24, 0x6F	; 111
     eac:	c1 f0       	breq	.+48     	; 0xede <vfprintf+0x250>
     eae:	18 f4       	brcc	.+6      	; 0xeb6 <vfprintf+0x228>
     eb0:	88 35       	cpi	r24, 0x58	; 88
     eb2:	79 f0       	breq	.+30     	; 0xed2 <vfprintf+0x244>
     eb4:	b4 c0       	rjmp	.+360    	; 0x101e <vfprintf+0x390>
     eb6:	80 37       	cpi	r24, 0x70	; 112
     eb8:	19 f0       	breq	.+6      	; 0xec0 <vfprintf+0x232>
     eba:	88 37       	cpi	r24, 0x78	; 120
     ebc:	21 f0       	breq	.+8      	; 0xec6 <vfprintf+0x238>
     ebe:	af c0       	rjmp	.+350    	; 0x101e <vfprintf+0x390>
     ec0:	2f 2f       	mov	r18, r31
     ec2:	20 61       	ori	r18, 0x10	; 16
     ec4:	b2 2e       	mov	r11, r18
     ec6:	b4 fe       	sbrs	r11, 4
     ec8:	0d c0       	rjmp	.+26     	; 0xee4 <vfprintf+0x256>
     eca:	8b 2d       	mov	r24, r11
     ecc:	84 60       	ori	r24, 0x04	; 4
     ece:	b8 2e       	mov	r11, r24
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <vfprintf+0x256>
     ed2:	24 ff       	sbrs	r18, 4
     ed4:	0a c0       	rjmp	.+20     	; 0xeea <vfprintf+0x25c>
     ed6:	9f 2f       	mov	r25, r31
     ed8:	96 60       	ori	r25, 0x06	; 6
     eda:	b9 2e       	mov	r11, r25
     edc:	06 c0       	rjmp	.+12     	; 0xeea <vfprintf+0x25c>
     ede:	28 e0       	ldi	r18, 0x08	; 8
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	05 c0       	rjmp	.+10     	; 0xeee <vfprintf+0x260>
     ee4:	20 e1       	ldi	r18, 0x10	; 16
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <vfprintf+0x260>
     eea:	20 e1       	ldi	r18, 0x10	; 16
     eec:	32 e0       	ldi	r19, 0x02	; 2
     eee:	f8 01       	movw	r30, r16
     ef0:	b7 fe       	sbrs	r11, 7
     ef2:	07 c0       	rjmp	.+14     	; 0xf02 <vfprintf+0x274>
     ef4:	60 81       	ld	r22, Z
     ef6:	71 81       	ldd	r23, Z+1	; 0x01
     ef8:	82 81       	ldd	r24, Z+2	; 0x02
     efa:	93 81       	ldd	r25, Z+3	; 0x03
     efc:	0c 5f       	subi	r16, 0xFC	; 252
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	06 c0       	rjmp	.+12     	; 0xf0e <vfprintf+0x280>
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 5f       	subi	r16, 0xFE	; 254
     f0c:	1f 4f       	sbci	r17, 0xFF	; 255
     f0e:	a4 01       	movw	r20, r8
     f10:	0e 94 b7 09 	call	0x136e	; 0x136e <__ultoa_invert>
     f14:	a8 2e       	mov	r10, r24
     f16:	a8 18       	sub	r10, r8
     f18:	fb 2d       	mov	r31, r11
     f1a:	ff 77       	andi	r31, 0x7F	; 127
     f1c:	7f 2e       	mov	r7, r31
     f1e:	76 fe       	sbrs	r7, 6
     f20:	0b c0       	rjmp	.+22     	; 0xf38 <vfprintf+0x2aa>
     f22:	37 2d       	mov	r19, r7
     f24:	3e 7f       	andi	r19, 0xFE	; 254
     f26:	a5 14       	cp	r10, r5
     f28:	50 f4       	brcc	.+20     	; 0xf3e <vfprintf+0x2b0>
     f2a:	74 fe       	sbrs	r7, 4
     f2c:	0a c0       	rjmp	.+20     	; 0xf42 <vfprintf+0x2b4>
     f2e:	72 fc       	sbrc	r7, 2
     f30:	08 c0       	rjmp	.+16     	; 0xf42 <vfprintf+0x2b4>
     f32:	37 2d       	mov	r19, r7
     f34:	3e 7e       	andi	r19, 0xEE	; 238
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <vfprintf+0x2b4>
     f38:	ba 2c       	mov	r11, r10
     f3a:	37 2d       	mov	r19, r7
     f3c:	03 c0       	rjmp	.+6      	; 0xf44 <vfprintf+0x2b6>
     f3e:	ba 2c       	mov	r11, r10
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <vfprintf+0x2b6>
     f42:	b5 2c       	mov	r11, r5
     f44:	34 ff       	sbrs	r19, 4
     f46:	0d c0       	rjmp	.+26     	; 0xf62 <vfprintf+0x2d4>
     f48:	fe 01       	movw	r30, r28
     f4a:	ea 0d       	add	r30, r10
     f4c:	f1 1d       	adc	r31, r1
     f4e:	80 81       	ld	r24, Z
     f50:	80 33       	cpi	r24, 0x30	; 48
     f52:	11 f4       	brne	.+4      	; 0xf58 <vfprintf+0x2ca>
     f54:	39 7e       	andi	r19, 0xE9	; 233
     f56:	09 c0       	rjmp	.+18     	; 0xf6a <vfprintf+0x2dc>
     f58:	32 ff       	sbrs	r19, 2
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <vfprintf+0x2da>
     f5c:	b3 94       	inc	r11
     f5e:	b3 94       	inc	r11
     f60:	04 c0       	rjmp	.+8      	; 0xf6a <vfprintf+0x2dc>
     f62:	83 2f       	mov	r24, r19
     f64:	86 78       	andi	r24, 0x86	; 134
     f66:	09 f0       	breq	.+2      	; 0xf6a <vfprintf+0x2dc>
     f68:	b3 94       	inc	r11
     f6a:	33 fd       	sbrc	r19, 3
     f6c:	13 c0       	rjmp	.+38     	; 0xf94 <vfprintf+0x306>
     f6e:	30 ff       	sbrs	r19, 0
     f70:	06 c0       	rjmp	.+12     	; 0xf7e <vfprintf+0x2f0>
     f72:	5a 2c       	mov	r5, r10
     f74:	b3 14       	cp	r11, r3
     f76:	18 f4       	brcc	.+6      	; 0xf7e <vfprintf+0x2f0>
     f78:	53 0c       	add	r5, r3
     f7a:	5b 18       	sub	r5, r11
     f7c:	b3 2c       	mov	r11, r3
     f7e:	b3 14       	cp	r11, r3
     f80:	68 f4       	brcc	.+26     	; 0xf9c <vfprintf+0x30e>
     f82:	b7 01       	movw	r22, r14
     f84:	80 e2       	ldi	r24, 0x20	; 32
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	3c 87       	std	Y+12, r19	; 0x0c
     f8a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
     f8e:	b3 94       	inc	r11
     f90:	3c 85       	ldd	r19, Y+12	; 0x0c
     f92:	f5 cf       	rjmp	.-22     	; 0xf7e <vfprintf+0x2f0>
     f94:	b3 14       	cp	r11, r3
     f96:	10 f4       	brcc	.+4      	; 0xf9c <vfprintf+0x30e>
     f98:	3b 18       	sub	r3, r11
     f9a:	01 c0       	rjmp	.+2      	; 0xf9e <vfprintf+0x310>
     f9c:	31 2c       	mov	r3, r1
     f9e:	34 ff       	sbrs	r19, 4
     fa0:	12 c0       	rjmp	.+36     	; 0xfc6 <vfprintf+0x338>
     fa2:	b7 01       	movw	r22, r14
     fa4:	80 e3       	ldi	r24, 0x30	; 48
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	3c 87       	std	Y+12, r19	; 0x0c
     faa:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
     fae:	3c 85       	ldd	r19, Y+12	; 0x0c
     fb0:	32 ff       	sbrs	r19, 2
     fb2:	17 c0       	rjmp	.+46     	; 0xfe2 <vfprintf+0x354>
     fb4:	31 fd       	sbrc	r19, 1
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <vfprintf+0x330>
     fb8:	88 e7       	ldi	r24, 0x78	; 120
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <vfprintf+0x334>
     fbe:	88 e5       	ldi	r24, 0x58	; 88
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	b7 01       	movw	r22, r14
     fc4:	0c c0       	rjmp	.+24     	; 0xfde <vfprintf+0x350>
     fc6:	83 2f       	mov	r24, r19
     fc8:	86 78       	andi	r24, 0x86	; 134
     fca:	59 f0       	breq	.+22     	; 0xfe2 <vfprintf+0x354>
     fcc:	31 ff       	sbrs	r19, 1
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <vfprintf+0x346>
     fd0:	8b e2       	ldi	r24, 0x2B	; 43
     fd2:	01 c0       	rjmp	.+2      	; 0xfd6 <vfprintf+0x348>
     fd4:	80 e2       	ldi	r24, 0x20	; 32
     fd6:	37 fd       	sbrc	r19, 7
     fd8:	8d e2       	ldi	r24, 0x2D	; 45
     fda:	b7 01       	movw	r22, r14
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
     fe2:	a5 14       	cp	r10, r5
     fe4:	38 f4       	brcc	.+14     	; 0xff4 <vfprintf+0x366>
     fe6:	b7 01       	movw	r22, r14
     fe8:	80 e3       	ldi	r24, 0x30	; 48
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
     ff0:	5a 94       	dec	r5
     ff2:	f7 cf       	rjmp	.-18     	; 0xfe2 <vfprintf+0x354>
     ff4:	aa 94       	dec	r10
     ff6:	f4 01       	movw	r30, r8
     ff8:	ea 0d       	add	r30, r10
     ffa:	f1 1d       	adc	r31, r1
     ffc:	80 81       	ld	r24, Z
     ffe:	b7 01       	movw	r22, r14
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
    1006:	a1 10       	cpse	r10, r1
    1008:	f5 cf       	rjmp	.-22     	; 0xff4 <vfprintf+0x366>
    100a:	33 20       	and	r3, r3
    100c:	09 f4       	brne	.+2      	; 0x1010 <vfprintf+0x382>
    100e:	51 ce       	rjmp	.-862    	; 0xcb2 <vfprintf+0x24>
    1010:	b7 01       	movw	r22, r14
    1012:	80 e2       	ldi	r24, 0x20	; 32
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 7f 09 	call	0x12fe	; 0x12fe <fputc>
    101a:	3a 94       	dec	r3
    101c:	f6 cf       	rjmp	.-20     	; 0x100a <vfprintf+0x37c>
    101e:	f7 01       	movw	r30, r14
    1020:	86 81       	ldd	r24, Z+6	; 0x06
    1022:	97 81       	ldd	r25, Z+7	; 0x07
    1024:	02 c0       	rjmp	.+4      	; 0x102a <vfprintf+0x39c>
    1026:	8f ef       	ldi	r24, 0xFF	; 255
    1028:	9f ef       	ldi	r25, 0xFF	; 255
    102a:	2c 96       	adiw	r28, 0x0c	; 12
    102c:	e2 e1       	ldi	r30, 0x12	; 18
    102e:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__epilogue_restores__>

00001032 <calloc>:
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	86 9f       	mul	r24, r22
    103c:	80 01       	movw	r16, r0
    103e:	87 9f       	mul	r24, r23
    1040:	10 0d       	add	r17, r0
    1042:	96 9f       	mul	r25, r22
    1044:	10 0d       	add	r17, r0
    1046:	11 24       	eor	r1, r1
    1048:	c8 01       	movw	r24, r16
    104a:	0e 94 35 08 	call	0x106a	; 0x106a <malloc>
    104e:	ec 01       	movw	r28, r24
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	29 f0       	breq	.+10     	; 0x105e <calloc+0x2c>
    1054:	a8 01       	movw	r20, r16
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	0e 94 6d 09 	call	0x12da	; 0x12da <memset>
    105e:	ce 01       	movw	r24, r28
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	08 95       	ret

0000106a <malloc>:
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	91 05       	cpc	r25, r1
    1072:	10 f4       	brcc	.+4      	; 0x1078 <malloc+0xe>
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <__flp>
    107c:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <__flp+0x1>
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	c0 e0       	ldi	r28, 0x00	; 0
    1086:	d0 e0       	ldi	r29, 0x00	; 0
    1088:	30 97       	sbiw	r30, 0x00	; 0
    108a:	11 f1       	breq	.+68     	; 0x10d0 <malloc+0x66>
    108c:	40 81       	ld	r20, Z
    108e:	51 81       	ldd	r21, Z+1	; 0x01
    1090:	48 17       	cp	r20, r24
    1092:	59 07       	cpc	r21, r25
    1094:	c0 f0       	brcs	.+48     	; 0x10c6 <malloc+0x5c>
    1096:	48 17       	cp	r20, r24
    1098:	59 07       	cpc	r21, r25
    109a:	61 f4       	brne	.+24     	; 0x10b4 <malloc+0x4a>
    109c:	82 81       	ldd	r24, Z+2	; 0x02
    109e:	93 81       	ldd	r25, Z+3	; 0x03
    10a0:	20 97       	sbiw	r28, 0x00	; 0
    10a2:	19 f0       	breq	.+6      	; 0x10aa <malloc+0x40>
    10a4:	9b 83       	std	Y+3, r25	; 0x03
    10a6:	8a 83       	std	Y+2, r24	; 0x02
    10a8:	2b c0       	rjmp	.+86     	; 0x1100 <malloc+0x96>
    10aa:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <__flp+0x1>
    10ae:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <__flp>
    10b2:	26 c0       	rjmp	.+76     	; 0x1100 <malloc+0x96>
    10b4:	21 15       	cp	r18, r1
    10b6:	31 05       	cpc	r19, r1
    10b8:	19 f0       	breq	.+6      	; 0x10c0 <malloc+0x56>
    10ba:	42 17       	cp	r20, r18
    10bc:	53 07       	cpc	r21, r19
    10be:	18 f4       	brcc	.+6      	; 0x10c6 <malloc+0x5c>
    10c0:	9a 01       	movw	r18, r20
    10c2:	be 01       	movw	r22, r28
    10c4:	df 01       	movw	r26, r30
    10c6:	ef 01       	movw	r28, r30
    10c8:	02 80       	ldd	r0, Z+2	; 0x02
    10ca:	f3 81       	ldd	r31, Z+3	; 0x03
    10cc:	e0 2d       	mov	r30, r0
    10ce:	dc cf       	rjmp	.-72     	; 0x1088 <malloc+0x1e>
    10d0:	21 15       	cp	r18, r1
    10d2:	31 05       	cpc	r19, r1
    10d4:	09 f1       	breq	.+66     	; 0x1118 <malloc+0xae>
    10d6:	28 1b       	sub	r18, r24
    10d8:	39 0b       	sbc	r19, r25
    10da:	24 30       	cpi	r18, 0x04	; 4
    10dc:	31 05       	cpc	r19, r1
    10de:	90 f4       	brcc	.+36     	; 0x1104 <malloc+0x9a>
    10e0:	12 96       	adiw	r26, 0x02	; 2
    10e2:	8d 91       	ld	r24, X+
    10e4:	9c 91       	ld	r25, X
    10e6:	13 97       	sbiw	r26, 0x03	; 3
    10e8:	61 15       	cp	r22, r1
    10ea:	71 05       	cpc	r23, r1
    10ec:	21 f0       	breq	.+8      	; 0x10f6 <malloc+0x8c>
    10ee:	fb 01       	movw	r30, r22
    10f0:	93 83       	std	Z+3, r25	; 0x03
    10f2:	82 83       	std	Z+2, r24	; 0x02
    10f4:	04 c0       	rjmp	.+8      	; 0x10fe <malloc+0x94>
    10f6:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <__flp+0x1>
    10fa:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <__flp>
    10fe:	fd 01       	movw	r30, r26
    1100:	32 96       	adiw	r30, 0x02	; 2
    1102:	44 c0       	rjmp	.+136    	; 0x118c <malloc+0x122>
    1104:	fd 01       	movw	r30, r26
    1106:	e2 0f       	add	r30, r18
    1108:	f3 1f       	adc	r31, r19
    110a:	81 93       	st	Z+, r24
    110c:	91 93       	st	Z+, r25
    110e:	22 50       	subi	r18, 0x02	; 2
    1110:	31 09       	sbc	r19, r1
    1112:	2d 93       	st	X+, r18
    1114:	3c 93       	st	X, r19
    1116:	3a c0       	rjmp	.+116    	; 0x118c <malloc+0x122>
    1118:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <__brkval>
    111c:	30 91 66 02 	lds	r19, 0x0266	; 0x800266 <__brkval+0x1>
    1120:	23 2b       	or	r18, r19
    1122:	41 f4       	brne	.+16     	; 0x1134 <malloc+0xca>
    1124:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1128:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    112c:	30 93 66 02 	sts	0x0266, r19	; 0x800266 <__brkval+0x1>
    1130:	20 93 65 02 	sts	0x0265, r18	; 0x800265 <__brkval>
    1134:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1138:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    113c:	21 15       	cp	r18, r1
    113e:	31 05       	cpc	r19, r1
    1140:	41 f4       	brne	.+16     	; 0x1152 <malloc+0xe8>
    1142:	2d b7       	in	r18, 0x3d	; 61
    1144:	3e b7       	in	r19, 0x3e	; 62
    1146:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    114a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    114e:	24 1b       	sub	r18, r20
    1150:	35 0b       	sbc	r19, r21
    1152:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <__brkval>
    1156:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <__brkval+0x1>
    115a:	e2 17       	cp	r30, r18
    115c:	f3 07       	cpc	r31, r19
    115e:	a0 f4       	brcc	.+40     	; 0x1188 <malloc+0x11e>
    1160:	2e 1b       	sub	r18, r30
    1162:	3f 0b       	sbc	r19, r31
    1164:	28 17       	cp	r18, r24
    1166:	39 07       	cpc	r19, r25
    1168:	78 f0       	brcs	.+30     	; 0x1188 <malloc+0x11e>
    116a:	ac 01       	movw	r20, r24
    116c:	4e 5f       	subi	r20, 0xFE	; 254
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	24 17       	cp	r18, r20
    1172:	35 07       	cpc	r19, r21
    1174:	48 f0       	brcs	.+18     	; 0x1188 <malloc+0x11e>
    1176:	4e 0f       	add	r20, r30
    1178:	5f 1f       	adc	r21, r31
    117a:	50 93 66 02 	sts	0x0266, r21	; 0x800266 <__brkval+0x1>
    117e:	40 93 65 02 	sts	0x0265, r20	; 0x800265 <__brkval>
    1182:	81 93       	st	Z+, r24
    1184:	91 93       	st	Z+, r25
    1186:	02 c0       	rjmp	.+4      	; 0x118c <malloc+0x122>
    1188:	e0 e0       	ldi	r30, 0x00	; 0
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	cf 01       	movw	r24, r30
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <free>:
    1194:	0f 93       	push	r16
    1196:	1f 93       	push	r17
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	09 f4       	brne	.+2      	; 0x11a2 <free+0xe>
    11a0:	8c c0       	rjmp	.+280    	; 0x12ba <free+0x126>
    11a2:	fc 01       	movw	r30, r24
    11a4:	32 97       	sbiw	r30, 0x02	; 2
    11a6:	13 82       	std	Z+3, r1	; 0x03
    11a8:	12 82       	std	Z+2, r1	; 0x02
    11aa:	00 91 67 02 	lds	r16, 0x0267	; 0x800267 <__flp>
    11ae:	10 91 68 02 	lds	r17, 0x0268	; 0x800268 <__flp+0x1>
    11b2:	01 15       	cp	r16, r1
    11b4:	11 05       	cpc	r17, r1
    11b6:	81 f4       	brne	.+32     	; 0x11d8 <free+0x44>
    11b8:	20 81       	ld	r18, Z
    11ba:	31 81       	ldd	r19, Z+1	; 0x01
    11bc:	82 0f       	add	r24, r18
    11be:	93 1f       	adc	r25, r19
    11c0:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <__brkval>
    11c4:	30 91 66 02 	lds	r19, 0x0266	; 0x800266 <__brkval+0x1>
    11c8:	28 17       	cp	r18, r24
    11ca:	39 07       	cpc	r19, r25
    11cc:	79 f5       	brne	.+94     	; 0x122c <free+0x98>
    11ce:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <__brkval+0x1>
    11d2:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <__brkval>
    11d6:	71 c0       	rjmp	.+226    	; 0x12ba <free+0x126>
    11d8:	d8 01       	movw	r26, r16
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	ae 17       	cp	r26, r30
    11e0:	bf 07       	cpc	r27, r31
    11e2:	50 f4       	brcc	.+20     	; 0x11f8 <free+0x64>
    11e4:	12 96       	adiw	r26, 0x02	; 2
    11e6:	2d 91       	ld	r18, X+
    11e8:	3c 91       	ld	r19, X
    11ea:	13 97       	sbiw	r26, 0x03	; 3
    11ec:	ad 01       	movw	r20, r26
    11ee:	21 15       	cp	r18, r1
    11f0:	31 05       	cpc	r19, r1
    11f2:	09 f1       	breq	.+66     	; 0x1236 <free+0xa2>
    11f4:	d9 01       	movw	r26, r18
    11f6:	f3 cf       	rjmp	.-26     	; 0x11de <free+0x4a>
    11f8:	9d 01       	movw	r18, r26
    11fa:	da 01       	movw	r26, r20
    11fc:	33 83       	std	Z+3, r19	; 0x03
    11fe:	22 83       	std	Z+2, r18	; 0x02
    1200:	60 81       	ld	r22, Z
    1202:	71 81       	ldd	r23, Z+1	; 0x01
    1204:	86 0f       	add	r24, r22
    1206:	97 1f       	adc	r25, r23
    1208:	82 17       	cp	r24, r18
    120a:	93 07       	cpc	r25, r19
    120c:	69 f4       	brne	.+26     	; 0x1228 <free+0x94>
    120e:	ec 01       	movw	r28, r24
    1210:	28 81       	ld	r18, Y
    1212:	39 81       	ldd	r19, Y+1	; 0x01
    1214:	26 0f       	add	r18, r22
    1216:	37 1f       	adc	r19, r23
    1218:	2e 5f       	subi	r18, 0xFE	; 254
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	31 83       	std	Z+1, r19	; 0x01
    121e:	20 83       	st	Z, r18
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	9b 81       	ldd	r25, Y+3	; 0x03
    1224:	93 83       	std	Z+3, r25	; 0x03
    1226:	82 83       	std	Z+2, r24	; 0x02
    1228:	45 2b       	or	r20, r21
    122a:	29 f4       	brne	.+10     	; 0x1236 <free+0xa2>
    122c:	f0 93 68 02 	sts	0x0268, r31	; 0x800268 <__flp+0x1>
    1230:	e0 93 67 02 	sts	0x0267, r30	; 0x800267 <__flp>
    1234:	42 c0       	rjmp	.+132    	; 0x12ba <free+0x126>
    1236:	13 96       	adiw	r26, 0x03	; 3
    1238:	fc 93       	st	X, r31
    123a:	ee 93       	st	-X, r30
    123c:	12 97       	sbiw	r26, 0x02	; 2
    123e:	ed 01       	movw	r28, r26
    1240:	49 91       	ld	r20, Y+
    1242:	59 91       	ld	r21, Y+
    1244:	9e 01       	movw	r18, r28
    1246:	24 0f       	add	r18, r20
    1248:	35 1f       	adc	r19, r21
    124a:	e2 17       	cp	r30, r18
    124c:	f3 07       	cpc	r31, r19
    124e:	71 f4       	brne	.+28     	; 0x126c <free+0xd8>
    1250:	80 81       	ld	r24, Z
    1252:	91 81       	ldd	r25, Z+1	; 0x01
    1254:	84 0f       	add	r24, r20
    1256:	95 1f       	adc	r25, r21
    1258:	02 96       	adiw	r24, 0x02	; 2
    125a:	11 96       	adiw	r26, 0x01	; 1
    125c:	9c 93       	st	X, r25
    125e:	8e 93       	st	-X, r24
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	13 96       	adiw	r26, 0x03	; 3
    1266:	9c 93       	st	X, r25
    1268:	8e 93       	st	-X, r24
    126a:	12 97       	sbiw	r26, 0x02	; 2
    126c:	e0 e0       	ldi	r30, 0x00	; 0
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	d8 01       	movw	r26, r16
    1272:	12 96       	adiw	r26, 0x02	; 2
    1274:	8d 91       	ld	r24, X+
    1276:	9c 91       	ld	r25, X
    1278:	13 97       	sbiw	r26, 0x03	; 3
    127a:	00 97       	sbiw	r24, 0x00	; 0
    127c:	19 f0       	breq	.+6      	; 0x1284 <free+0xf0>
    127e:	f8 01       	movw	r30, r16
    1280:	8c 01       	movw	r16, r24
    1282:	f6 cf       	rjmp	.-20     	; 0x1270 <free+0xdc>
    1284:	8d 91       	ld	r24, X+
    1286:	9c 91       	ld	r25, X
    1288:	98 01       	movw	r18, r16
    128a:	2e 5f       	subi	r18, 0xFE	; 254
    128c:	3f 4f       	sbci	r19, 0xFF	; 255
    128e:	82 0f       	add	r24, r18
    1290:	93 1f       	adc	r25, r19
    1292:	20 91 65 02 	lds	r18, 0x0265	; 0x800265 <__brkval>
    1296:	30 91 66 02 	lds	r19, 0x0266	; 0x800266 <__brkval+0x1>
    129a:	28 17       	cp	r18, r24
    129c:	39 07       	cpc	r19, r25
    129e:	69 f4       	brne	.+26     	; 0x12ba <free+0x126>
    12a0:	30 97       	sbiw	r30, 0x00	; 0
    12a2:	29 f4       	brne	.+10     	; 0x12ae <free+0x11a>
    12a4:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__flp+0x1>
    12a8:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <__flp>
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <free+0x11e>
    12ae:	13 82       	std	Z+3, r1	; 0x03
    12b0:	12 82       	std	Z+2, r1	; 0x02
    12b2:	10 93 66 02 	sts	0x0266, r17	; 0x800266 <__brkval+0x1>
    12b6:	00 93 65 02 	sts	0x0265, r16	; 0x800265 <__brkval>
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	08 95       	ret

000012c4 <strnlen_P>:
    12c4:	fc 01       	movw	r30, r24
    12c6:	05 90       	lpm	r0, Z+
    12c8:	61 50       	subi	r22, 0x01	; 1
    12ca:	70 40       	sbci	r23, 0x00	; 0
    12cc:	01 10       	cpse	r0, r1
    12ce:	d8 f7       	brcc	.-10     	; 0x12c6 <strnlen_P+0x2>
    12d0:	80 95       	com	r24
    12d2:	90 95       	com	r25
    12d4:	8e 0f       	add	r24, r30
    12d6:	9f 1f       	adc	r25, r31
    12d8:	08 95       	ret

000012da <memset>:
    12da:	dc 01       	movw	r26, r24
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <memset+0x6>
    12de:	6d 93       	st	X+, r22
    12e0:	41 50       	subi	r20, 0x01	; 1
    12e2:	50 40       	sbci	r21, 0x00	; 0
    12e4:	e0 f7       	brcc	.-8      	; 0x12de <memset+0x4>
    12e6:	08 95       	ret

000012e8 <strnlen>:
    12e8:	fc 01       	movw	r30, r24
    12ea:	61 50       	subi	r22, 0x01	; 1
    12ec:	70 40       	sbci	r23, 0x00	; 0
    12ee:	01 90       	ld	r0, Z+
    12f0:	01 10       	cpse	r0, r1
    12f2:	d8 f7       	brcc	.-10     	; 0x12ea <strnlen+0x2>
    12f4:	80 95       	com	r24
    12f6:	90 95       	com	r25
    12f8:	8e 0f       	add	r24, r30
    12fa:	9f 1f       	adc	r25, r31
    12fc:	08 95       	ret

000012fe <fputc>:
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	fb 01       	movw	r30, r22
    1308:	23 81       	ldd	r18, Z+3	; 0x03
    130a:	21 fd       	sbrc	r18, 1
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <fputc+0x16>
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	9f ef       	ldi	r25, 0xFF	; 255
    1312:	28 c0       	rjmp	.+80     	; 0x1364 <fputc+0x66>
    1314:	22 ff       	sbrs	r18, 2
    1316:	16 c0       	rjmp	.+44     	; 0x1344 <fputc+0x46>
    1318:	46 81       	ldd	r20, Z+6	; 0x06
    131a:	57 81       	ldd	r21, Z+7	; 0x07
    131c:	24 81       	ldd	r18, Z+4	; 0x04
    131e:	35 81       	ldd	r19, Z+5	; 0x05
    1320:	42 17       	cp	r20, r18
    1322:	53 07       	cpc	r21, r19
    1324:	44 f4       	brge	.+16     	; 0x1336 <fputc+0x38>
    1326:	a0 81       	ld	r26, Z
    1328:	b1 81       	ldd	r27, Z+1	; 0x01
    132a:	9d 01       	movw	r18, r26
    132c:	2f 5f       	subi	r18, 0xFF	; 255
    132e:	3f 4f       	sbci	r19, 0xFF	; 255
    1330:	31 83       	std	Z+1, r19	; 0x01
    1332:	20 83       	st	Z, r18
    1334:	8c 93       	st	X, r24
    1336:	26 81       	ldd	r18, Z+6	; 0x06
    1338:	37 81       	ldd	r19, Z+7	; 0x07
    133a:	2f 5f       	subi	r18, 0xFF	; 255
    133c:	3f 4f       	sbci	r19, 0xFF	; 255
    133e:	37 83       	std	Z+7, r19	; 0x07
    1340:	26 83       	std	Z+6, r18	; 0x06
    1342:	10 c0       	rjmp	.+32     	; 0x1364 <fputc+0x66>
    1344:	eb 01       	movw	r28, r22
    1346:	09 2f       	mov	r16, r25
    1348:	18 2f       	mov	r17, r24
    134a:	00 84       	ldd	r0, Z+8	; 0x08
    134c:	f1 85       	ldd	r31, Z+9	; 0x09
    134e:	e0 2d       	mov	r30, r0
    1350:	09 95       	icall
    1352:	89 2b       	or	r24, r25
    1354:	e1 f6       	brne	.-72     	; 0x130e <fputc+0x10>
    1356:	8e 81       	ldd	r24, Y+6	; 0x06
    1358:	9f 81       	ldd	r25, Y+7	; 0x07
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	9f 83       	std	Y+7, r25	; 0x07
    135e:	8e 83       	std	Y+6, r24	; 0x06
    1360:	81 2f       	mov	r24, r17
    1362:	90 2f       	mov	r25, r16
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	0f 91       	pop	r16
    136c:	08 95       	ret

0000136e <__ultoa_invert>:
    136e:	fa 01       	movw	r30, r20
    1370:	aa 27       	eor	r26, r26
    1372:	28 30       	cpi	r18, 0x08	; 8
    1374:	51 f1       	breq	.+84     	; 0x13ca <__ultoa_invert+0x5c>
    1376:	20 31       	cpi	r18, 0x10	; 16
    1378:	81 f1       	breq	.+96     	; 0x13da <__ultoa_invert+0x6c>
    137a:	e8 94       	clt
    137c:	6f 93       	push	r22
    137e:	6e 7f       	andi	r22, 0xFE	; 254
    1380:	6e 5f       	subi	r22, 0xFE	; 254
    1382:	7f 4f       	sbci	r23, 0xFF	; 255
    1384:	8f 4f       	sbci	r24, 0xFF	; 255
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	af 4f       	sbci	r26, 0xFF	; 255
    138a:	b1 e0       	ldi	r27, 0x01	; 1
    138c:	3e d0       	rcall	.+124    	; 0x140a <__ultoa_invert+0x9c>
    138e:	b4 e0       	ldi	r27, 0x04	; 4
    1390:	3c d0       	rcall	.+120    	; 0x140a <__ultoa_invert+0x9c>
    1392:	67 0f       	add	r22, r23
    1394:	78 1f       	adc	r23, r24
    1396:	89 1f       	adc	r24, r25
    1398:	9a 1f       	adc	r25, r26
    139a:	a1 1d       	adc	r26, r1
    139c:	68 0f       	add	r22, r24
    139e:	79 1f       	adc	r23, r25
    13a0:	8a 1f       	adc	r24, r26
    13a2:	91 1d       	adc	r25, r1
    13a4:	a1 1d       	adc	r26, r1
    13a6:	6a 0f       	add	r22, r26
    13a8:	71 1d       	adc	r23, r1
    13aa:	81 1d       	adc	r24, r1
    13ac:	91 1d       	adc	r25, r1
    13ae:	a1 1d       	adc	r26, r1
    13b0:	20 d0       	rcall	.+64     	; 0x13f2 <__ultoa_invert+0x84>
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <__ultoa_invert+0x48>
    13b4:	68 94       	set
    13b6:	3f 91       	pop	r19
    13b8:	2a e0       	ldi	r18, 0x0A	; 10
    13ba:	26 9f       	mul	r18, r22
    13bc:	11 24       	eor	r1, r1
    13be:	30 19       	sub	r19, r0
    13c0:	30 5d       	subi	r19, 0xD0	; 208
    13c2:	31 93       	st	Z+, r19
    13c4:	de f6       	brtc	.-74     	; 0x137c <__ultoa_invert+0xe>
    13c6:	cf 01       	movw	r24, r30
    13c8:	08 95       	ret
    13ca:	46 2f       	mov	r20, r22
    13cc:	47 70       	andi	r20, 0x07	; 7
    13ce:	40 5d       	subi	r20, 0xD0	; 208
    13d0:	41 93       	st	Z+, r20
    13d2:	b3 e0       	ldi	r27, 0x03	; 3
    13d4:	0f d0       	rcall	.+30     	; 0x13f4 <__ultoa_invert+0x86>
    13d6:	c9 f7       	brne	.-14     	; 0x13ca <__ultoa_invert+0x5c>
    13d8:	f6 cf       	rjmp	.-20     	; 0x13c6 <__ultoa_invert+0x58>
    13da:	46 2f       	mov	r20, r22
    13dc:	4f 70       	andi	r20, 0x0F	; 15
    13de:	40 5d       	subi	r20, 0xD0	; 208
    13e0:	4a 33       	cpi	r20, 0x3A	; 58
    13e2:	18 f0       	brcs	.+6      	; 0x13ea <__ultoa_invert+0x7c>
    13e4:	49 5d       	subi	r20, 0xD9	; 217
    13e6:	31 fd       	sbrc	r19, 1
    13e8:	40 52       	subi	r20, 0x20	; 32
    13ea:	41 93       	st	Z+, r20
    13ec:	02 d0       	rcall	.+4      	; 0x13f2 <__ultoa_invert+0x84>
    13ee:	a9 f7       	brne	.-22     	; 0x13da <__ultoa_invert+0x6c>
    13f0:	ea cf       	rjmp	.-44     	; 0x13c6 <__ultoa_invert+0x58>
    13f2:	b4 e0       	ldi	r27, 0x04	; 4
    13f4:	a6 95       	lsr	r26
    13f6:	97 95       	ror	r25
    13f8:	87 95       	ror	r24
    13fa:	77 95       	ror	r23
    13fc:	67 95       	ror	r22
    13fe:	ba 95       	dec	r27
    1400:	c9 f7       	brne	.-14     	; 0x13f4 <__ultoa_invert+0x86>
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	61 05       	cpc	r22, r1
    1406:	71 05       	cpc	r23, r1
    1408:	08 95       	ret
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
    140e:	0a 2e       	mov	r0, r26
    1410:	06 94       	lsr	r0
    1412:	57 95       	ror	r21
    1414:	47 95       	ror	r20
    1416:	37 95       	ror	r19
    1418:	27 95       	ror	r18
    141a:	ba 95       	dec	r27
    141c:	c9 f7       	brne	.-14     	; 0x1410 <__ultoa_invert+0xa2>
    141e:	62 0f       	add	r22, r18
    1420:	73 1f       	adc	r23, r19
    1422:	84 1f       	adc	r24, r20
    1424:	95 1f       	adc	r25, r21
    1426:	a0 1d       	adc	r26, r0
    1428:	08 95       	ret

0000142a <__prologue_saves__>:
    142a:	2f 92       	push	r2
    142c:	3f 92       	push	r3
    142e:	4f 92       	push	r4
    1430:	5f 92       	push	r5
    1432:	6f 92       	push	r6
    1434:	7f 92       	push	r7
    1436:	8f 92       	push	r8
    1438:	9f 92       	push	r9
    143a:	af 92       	push	r10
    143c:	bf 92       	push	r11
    143e:	cf 92       	push	r12
    1440:	df 92       	push	r13
    1442:	ef 92       	push	r14
    1444:	ff 92       	push	r15
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	ca 1b       	sub	r28, r26
    1454:	db 0b       	sbc	r29, r27
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	09 94       	ijmp

00001462 <__epilogue_restores__>:
    1462:	2a 88       	ldd	r2, Y+18	; 0x12
    1464:	39 88       	ldd	r3, Y+17	; 0x11
    1466:	48 88       	ldd	r4, Y+16	; 0x10
    1468:	5f 84       	ldd	r5, Y+15	; 0x0f
    146a:	6e 84       	ldd	r6, Y+14	; 0x0e
    146c:	7d 84       	ldd	r7, Y+13	; 0x0d
    146e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1470:	9b 84       	ldd	r9, Y+11	; 0x0b
    1472:	aa 84       	ldd	r10, Y+10	; 0x0a
    1474:	b9 84       	ldd	r11, Y+9	; 0x09
    1476:	c8 84       	ldd	r12, Y+8	; 0x08
    1478:	df 80       	ldd	r13, Y+7	; 0x07
    147a:	ee 80       	ldd	r14, Y+6	; 0x06
    147c:	fd 80       	ldd	r15, Y+5	; 0x05
    147e:	0c 81       	ldd	r16, Y+4	; 0x04
    1480:	1b 81       	ldd	r17, Y+3	; 0x03
    1482:	aa 81       	ldd	r26, Y+2	; 0x02
    1484:	b9 81       	ldd	r27, Y+1	; 0x01
    1486:	ce 0f       	add	r28, r30
    1488:	d1 1d       	adc	r29, r1
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	ed 01       	movw	r28, r26
    1496:	08 95       	ret

00001498 <_exit>:
    1498:	f8 94       	cli

0000149a <__stop_program>:
    149a:	ff cf       	rjmp	.-2      	; 0x149a <__stop_program>
